
smokePID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a30  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08006af0  08006af0  00016af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cac  08006cac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006cac  08006cac  00016cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cb4  08006cb4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cb4  08006cb4  00016cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cb8  08006cb8  00016cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000070  08006d2c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08006d2c  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0ce  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f7f  00000000  00000000  0002c166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002e0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002eb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012e9e  00000000  00000000  0002f4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc10  00000000  00000000  0004235e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f903  00000000  00000000  0004df6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bd871  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002be8  00000000  00000000  000bd8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006ad8 	.word	0x08006ad8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006ad8 	.word	0x08006ad8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cfrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	1c08      	adds	r0, r1, #0
 8000238:	4661      	mov	r1, ip
 800023a:	e7ff      	b.n	800023c <__aeabi_cfcmpeq>

0800023c <__aeabi_cfcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f000 fc7b 	bl	8000b38 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cfcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_fcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fbff 	bl	8000a50 <__eqsf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_fcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fc6d 	bl	8000b38 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_fcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fc63 	bl	8000b38 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_fcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fc0d 	bl	8000aa0 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_fcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 fc03 	bl	8000aa0 <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_fcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_uldivmod>:
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d111      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	d10f      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d100      	bne.n	80002b6 <__aeabi_uldivmod+0xe>
 80002b4:	2800      	cmp	r0, #0
 80002b6:	d002      	beq.n	80002be <__aeabi_uldivmod+0x16>
 80002b8:	2100      	movs	r1, #0
 80002ba:	43c9      	mvns	r1, r1
 80002bc:	1c08      	adds	r0, r1, #0
 80002be:	b407      	push	{r0, r1, r2}
 80002c0:	4802      	ldr	r0, [pc, #8]	; (80002cc <__aeabi_uldivmod+0x24>)
 80002c2:	a102      	add	r1, pc, #8	; (adr r1, 80002cc <__aeabi_uldivmod+0x24>)
 80002c4:	1840      	adds	r0, r0, r1
 80002c6:	9002      	str	r0, [sp, #8]
 80002c8:	bd03      	pop	{r0, r1, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	ffffff65 	.word	0xffffff65
 80002d0:	b403      	push	{r0, r1}
 80002d2:	4668      	mov	r0, sp
 80002d4:	b501      	push	{r0, lr}
 80002d6:	9802      	ldr	r0, [sp, #8]
 80002d8:	f000 f846 	bl	8000368 <__udivmoddi4>
 80002dc:	9b01      	ldr	r3, [sp, #4]
 80002de:	469e      	mov	lr, r3
 80002e0:	b002      	add	sp, #8
 80002e2:	bc0c      	pop	{r2, r3}
 80002e4:	4770      	bx	lr
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_lmul>:
 80002e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ea:	0415      	lsls	r5, r2, #16
 80002ec:	0c2d      	lsrs	r5, r5, #16
 80002ee:	000f      	movs	r7, r1
 80002f0:	0001      	movs	r1, r0
 80002f2:	002e      	movs	r6, r5
 80002f4:	46c6      	mov	lr, r8
 80002f6:	4684      	mov	ip, r0
 80002f8:	0400      	lsls	r0, r0, #16
 80002fa:	0c14      	lsrs	r4, r2, #16
 80002fc:	0c00      	lsrs	r0, r0, #16
 80002fe:	0c09      	lsrs	r1, r1, #16
 8000300:	4346      	muls	r6, r0
 8000302:	434d      	muls	r5, r1
 8000304:	4360      	muls	r0, r4
 8000306:	4361      	muls	r1, r4
 8000308:	1940      	adds	r0, r0, r5
 800030a:	0c34      	lsrs	r4, r6, #16
 800030c:	1824      	adds	r4, r4, r0
 800030e:	b500      	push	{lr}
 8000310:	42a5      	cmp	r5, r4
 8000312:	d903      	bls.n	800031c <__aeabi_lmul+0x34>
 8000314:	2080      	movs	r0, #128	; 0x80
 8000316:	0240      	lsls	r0, r0, #9
 8000318:	4680      	mov	r8, r0
 800031a:	4441      	add	r1, r8
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	186d      	adds	r5, r5, r1
 8000320:	4661      	mov	r1, ip
 8000322:	4359      	muls	r1, r3
 8000324:	437a      	muls	r2, r7
 8000326:	0430      	lsls	r0, r6, #16
 8000328:	1949      	adds	r1, r1, r5
 800032a:	0424      	lsls	r4, r4, #16
 800032c:	0c00      	lsrs	r0, r0, #16
 800032e:	1820      	adds	r0, r4, r0
 8000330:	1889      	adds	r1, r1, r2
 8000332:	bc80      	pop	{r7}
 8000334:	46b8      	mov	r8, r7
 8000336:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000338 <__aeabi_f2uiz>:
 8000338:	219e      	movs	r1, #158	; 0x9e
 800033a:	b510      	push	{r4, lr}
 800033c:	05c9      	lsls	r1, r1, #23
 800033e:	1c04      	adds	r4, r0, #0
 8000340:	f7ff ffa8 	bl	8000294 <__aeabi_fcmpge>
 8000344:	2800      	cmp	r0, #0
 8000346:	d103      	bne.n	8000350 <__aeabi_f2uiz+0x18>
 8000348:	1c20      	adds	r0, r4, #0
 800034a:	f000 ff21 	bl	8001190 <__aeabi_f2iz>
 800034e:	bd10      	pop	{r4, pc}
 8000350:	219e      	movs	r1, #158	; 0x9e
 8000352:	1c20      	adds	r0, r4, #0
 8000354:	05c9      	lsls	r1, r1, #23
 8000356:	f000 fd53 	bl	8000e00 <__aeabi_fsub>
 800035a:	f000 ff19 	bl	8001190 <__aeabi_f2iz>
 800035e:	2380      	movs	r3, #128	; 0x80
 8000360:	061b      	lsls	r3, r3, #24
 8000362:	469c      	mov	ip, r3
 8000364:	4460      	add	r0, ip
 8000366:	e7f2      	b.n	800034e <__aeabi_f2uiz+0x16>

08000368 <__udivmoddi4>:
 8000368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036a:	4657      	mov	r7, sl
 800036c:	464e      	mov	r6, r9
 800036e:	4645      	mov	r5, r8
 8000370:	46de      	mov	lr, fp
 8000372:	b5e0      	push	{r5, r6, r7, lr}
 8000374:	0004      	movs	r4, r0
 8000376:	000d      	movs	r5, r1
 8000378:	4692      	mov	sl, r2
 800037a:	4699      	mov	r9, r3
 800037c:	b083      	sub	sp, #12
 800037e:	428b      	cmp	r3, r1
 8000380:	d830      	bhi.n	80003e4 <__udivmoddi4+0x7c>
 8000382:	d02d      	beq.n	80003e0 <__udivmoddi4+0x78>
 8000384:	4649      	mov	r1, r9
 8000386:	4650      	mov	r0, sl
 8000388:	f002 f9b6 	bl	80026f8 <__clzdi2>
 800038c:	0029      	movs	r1, r5
 800038e:	0006      	movs	r6, r0
 8000390:	0020      	movs	r0, r4
 8000392:	f002 f9b1 	bl	80026f8 <__clzdi2>
 8000396:	1a33      	subs	r3, r6, r0
 8000398:	4698      	mov	r8, r3
 800039a:	3b20      	subs	r3, #32
 800039c:	469b      	mov	fp, r3
 800039e:	d433      	bmi.n	8000408 <__udivmoddi4+0xa0>
 80003a0:	465a      	mov	r2, fp
 80003a2:	4653      	mov	r3, sl
 80003a4:	4093      	lsls	r3, r2
 80003a6:	4642      	mov	r2, r8
 80003a8:	001f      	movs	r7, r3
 80003aa:	4653      	mov	r3, sl
 80003ac:	4093      	lsls	r3, r2
 80003ae:	001e      	movs	r6, r3
 80003b0:	42af      	cmp	r7, r5
 80003b2:	d83a      	bhi.n	800042a <__udivmoddi4+0xc2>
 80003b4:	42af      	cmp	r7, r5
 80003b6:	d100      	bne.n	80003ba <__udivmoddi4+0x52>
 80003b8:	e078      	b.n	80004ac <__udivmoddi4+0x144>
 80003ba:	465b      	mov	r3, fp
 80003bc:	1ba4      	subs	r4, r4, r6
 80003be:	41bd      	sbcs	r5, r7
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	da00      	bge.n	80003c6 <__udivmoddi4+0x5e>
 80003c4:	e075      	b.n	80004b2 <__udivmoddi4+0x14a>
 80003c6:	2200      	movs	r2, #0
 80003c8:	2300      	movs	r3, #0
 80003ca:	9200      	str	r2, [sp, #0]
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	2301      	movs	r3, #1
 80003d0:	465a      	mov	r2, fp
 80003d2:	4093      	lsls	r3, r2
 80003d4:	9301      	str	r3, [sp, #4]
 80003d6:	2301      	movs	r3, #1
 80003d8:	4642      	mov	r2, r8
 80003da:	4093      	lsls	r3, r2
 80003dc:	9300      	str	r3, [sp, #0]
 80003de:	e028      	b.n	8000432 <__udivmoddi4+0xca>
 80003e0:	4282      	cmp	r2, r0
 80003e2:	d9cf      	bls.n	8000384 <__udivmoddi4+0x1c>
 80003e4:	2200      	movs	r2, #0
 80003e6:	2300      	movs	r3, #0
 80003e8:	9200      	str	r2, [sp, #0]
 80003ea:	9301      	str	r3, [sp, #4]
 80003ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <__udivmoddi4+0x8e>
 80003f2:	601c      	str	r4, [r3, #0]
 80003f4:	605d      	str	r5, [r3, #4]
 80003f6:	9800      	ldr	r0, [sp, #0]
 80003f8:	9901      	ldr	r1, [sp, #4]
 80003fa:	b003      	add	sp, #12
 80003fc:	bcf0      	pop	{r4, r5, r6, r7}
 80003fe:	46bb      	mov	fp, r7
 8000400:	46b2      	mov	sl, r6
 8000402:	46a9      	mov	r9, r5
 8000404:	46a0      	mov	r8, r4
 8000406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	4652      	mov	r2, sl
 8000410:	40da      	lsrs	r2, r3
 8000412:	4641      	mov	r1, r8
 8000414:	0013      	movs	r3, r2
 8000416:	464a      	mov	r2, r9
 8000418:	408a      	lsls	r2, r1
 800041a:	0017      	movs	r7, r2
 800041c:	4642      	mov	r2, r8
 800041e:	431f      	orrs	r7, r3
 8000420:	4653      	mov	r3, sl
 8000422:	4093      	lsls	r3, r2
 8000424:	001e      	movs	r6, r3
 8000426:	42af      	cmp	r7, r5
 8000428:	d9c4      	bls.n	80003b4 <__udivmoddi4+0x4c>
 800042a:	2200      	movs	r2, #0
 800042c:	2300      	movs	r3, #0
 800042e:	9200      	str	r2, [sp, #0]
 8000430:	9301      	str	r3, [sp, #4]
 8000432:	4643      	mov	r3, r8
 8000434:	2b00      	cmp	r3, #0
 8000436:	d0d9      	beq.n	80003ec <__udivmoddi4+0x84>
 8000438:	07fb      	lsls	r3, r7, #31
 800043a:	0872      	lsrs	r2, r6, #1
 800043c:	431a      	orrs	r2, r3
 800043e:	4646      	mov	r6, r8
 8000440:	087b      	lsrs	r3, r7, #1
 8000442:	e00e      	b.n	8000462 <__udivmoddi4+0xfa>
 8000444:	42ab      	cmp	r3, r5
 8000446:	d101      	bne.n	800044c <__udivmoddi4+0xe4>
 8000448:	42a2      	cmp	r2, r4
 800044a:	d80c      	bhi.n	8000466 <__udivmoddi4+0xfe>
 800044c:	1aa4      	subs	r4, r4, r2
 800044e:	419d      	sbcs	r5, r3
 8000450:	2001      	movs	r0, #1
 8000452:	1924      	adds	r4, r4, r4
 8000454:	416d      	adcs	r5, r5
 8000456:	2100      	movs	r1, #0
 8000458:	3e01      	subs	r6, #1
 800045a:	1824      	adds	r4, r4, r0
 800045c:	414d      	adcs	r5, r1
 800045e:	2e00      	cmp	r6, #0
 8000460:	d006      	beq.n	8000470 <__udivmoddi4+0x108>
 8000462:	42ab      	cmp	r3, r5
 8000464:	d9ee      	bls.n	8000444 <__udivmoddi4+0xdc>
 8000466:	3e01      	subs	r6, #1
 8000468:	1924      	adds	r4, r4, r4
 800046a:	416d      	adcs	r5, r5
 800046c:	2e00      	cmp	r6, #0
 800046e:	d1f8      	bne.n	8000462 <__udivmoddi4+0xfa>
 8000470:	9800      	ldr	r0, [sp, #0]
 8000472:	9901      	ldr	r1, [sp, #4]
 8000474:	465b      	mov	r3, fp
 8000476:	1900      	adds	r0, r0, r4
 8000478:	4169      	adcs	r1, r5
 800047a:	2b00      	cmp	r3, #0
 800047c:	db24      	blt.n	80004c8 <__udivmoddi4+0x160>
 800047e:	002b      	movs	r3, r5
 8000480:	465a      	mov	r2, fp
 8000482:	4644      	mov	r4, r8
 8000484:	40d3      	lsrs	r3, r2
 8000486:	002a      	movs	r2, r5
 8000488:	40e2      	lsrs	r2, r4
 800048a:	001c      	movs	r4, r3
 800048c:	465b      	mov	r3, fp
 800048e:	0015      	movs	r5, r2
 8000490:	2b00      	cmp	r3, #0
 8000492:	db2a      	blt.n	80004ea <__udivmoddi4+0x182>
 8000494:	0026      	movs	r6, r4
 8000496:	409e      	lsls	r6, r3
 8000498:	0033      	movs	r3, r6
 800049a:	0026      	movs	r6, r4
 800049c:	4647      	mov	r7, r8
 800049e:	40be      	lsls	r6, r7
 80004a0:	0032      	movs	r2, r6
 80004a2:	1a80      	subs	r0, r0, r2
 80004a4:	4199      	sbcs	r1, r3
 80004a6:	9000      	str	r0, [sp, #0]
 80004a8:	9101      	str	r1, [sp, #4]
 80004aa:	e79f      	b.n	80003ec <__udivmoddi4+0x84>
 80004ac:	42a3      	cmp	r3, r4
 80004ae:	d8bc      	bhi.n	800042a <__udivmoddi4+0xc2>
 80004b0:	e783      	b.n	80003ba <__udivmoddi4+0x52>
 80004b2:	4642      	mov	r2, r8
 80004b4:	2320      	movs	r3, #32
 80004b6:	2100      	movs	r1, #0
 80004b8:	1a9b      	subs	r3, r3, r2
 80004ba:	2200      	movs	r2, #0
 80004bc:	9100      	str	r1, [sp, #0]
 80004be:	9201      	str	r2, [sp, #4]
 80004c0:	2201      	movs	r2, #1
 80004c2:	40da      	lsrs	r2, r3
 80004c4:	9201      	str	r2, [sp, #4]
 80004c6:	e786      	b.n	80003d6 <__udivmoddi4+0x6e>
 80004c8:	4642      	mov	r2, r8
 80004ca:	2320      	movs	r3, #32
 80004cc:	1a9b      	subs	r3, r3, r2
 80004ce:	002a      	movs	r2, r5
 80004d0:	4646      	mov	r6, r8
 80004d2:	409a      	lsls	r2, r3
 80004d4:	0023      	movs	r3, r4
 80004d6:	40f3      	lsrs	r3, r6
 80004d8:	4644      	mov	r4, r8
 80004da:	4313      	orrs	r3, r2
 80004dc:	002a      	movs	r2, r5
 80004de:	40e2      	lsrs	r2, r4
 80004e0:	001c      	movs	r4, r3
 80004e2:	465b      	mov	r3, fp
 80004e4:	0015      	movs	r5, r2
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	dad4      	bge.n	8000494 <__udivmoddi4+0x12c>
 80004ea:	4642      	mov	r2, r8
 80004ec:	002f      	movs	r7, r5
 80004ee:	2320      	movs	r3, #32
 80004f0:	0026      	movs	r6, r4
 80004f2:	4097      	lsls	r7, r2
 80004f4:	1a9b      	subs	r3, r3, r2
 80004f6:	40de      	lsrs	r6, r3
 80004f8:	003b      	movs	r3, r7
 80004fa:	4333      	orrs	r3, r6
 80004fc:	e7cd      	b.n	800049a <__udivmoddi4+0x132>
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fadd>:
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	4646      	mov	r6, r8
 8000504:	46d6      	mov	lr, sl
 8000506:	464f      	mov	r7, r9
 8000508:	024d      	lsls	r5, r1, #9
 800050a:	0242      	lsls	r2, r0, #9
 800050c:	b5c0      	push	{r6, r7, lr}
 800050e:	0a52      	lsrs	r2, r2, #9
 8000510:	0a6e      	lsrs	r6, r5, #9
 8000512:	0047      	lsls	r7, r0, #1
 8000514:	46b0      	mov	r8, r6
 8000516:	0e3f      	lsrs	r7, r7, #24
 8000518:	004e      	lsls	r6, r1, #1
 800051a:	0fc4      	lsrs	r4, r0, #31
 800051c:	00d0      	lsls	r0, r2, #3
 800051e:	4694      	mov	ip, r2
 8000520:	003b      	movs	r3, r7
 8000522:	4682      	mov	sl, r0
 8000524:	0e36      	lsrs	r6, r6, #24
 8000526:	0fc9      	lsrs	r1, r1, #31
 8000528:	09ad      	lsrs	r5, r5, #6
 800052a:	428c      	cmp	r4, r1
 800052c:	d06d      	beq.n	800060a <__aeabi_fadd+0x10a>
 800052e:	1bb8      	subs	r0, r7, r6
 8000530:	4681      	mov	r9, r0
 8000532:	2800      	cmp	r0, #0
 8000534:	dd4d      	ble.n	80005d2 <__aeabi_fadd+0xd2>
 8000536:	2e00      	cmp	r6, #0
 8000538:	d100      	bne.n	800053c <__aeabi_fadd+0x3c>
 800053a:	e088      	b.n	800064e <__aeabi_fadd+0x14e>
 800053c:	2fff      	cmp	r7, #255	; 0xff
 800053e:	d05a      	beq.n	80005f6 <__aeabi_fadd+0xf6>
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	04db      	lsls	r3, r3, #19
 8000544:	431d      	orrs	r5, r3
 8000546:	464b      	mov	r3, r9
 8000548:	2201      	movs	r2, #1
 800054a:	2b1b      	cmp	r3, #27
 800054c:	dc0a      	bgt.n	8000564 <__aeabi_fadd+0x64>
 800054e:	002b      	movs	r3, r5
 8000550:	464a      	mov	r2, r9
 8000552:	4649      	mov	r1, r9
 8000554:	40d3      	lsrs	r3, r2
 8000556:	2220      	movs	r2, #32
 8000558:	1a52      	subs	r2, r2, r1
 800055a:	4095      	lsls	r5, r2
 800055c:	002a      	movs	r2, r5
 800055e:	1e55      	subs	r5, r2, #1
 8000560:	41aa      	sbcs	r2, r5
 8000562:	431a      	orrs	r2, r3
 8000564:	4653      	mov	r3, sl
 8000566:	1a9a      	subs	r2, r3, r2
 8000568:	0153      	lsls	r3, r2, #5
 800056a:	d400      	bmi.n	800056e <__aeabi_fadd+0x6e>
 800056c:	e0b9      	b.n	80006e2 <__aeabi_fadd+0x1e2>
 800056e:	0192      	lsls	r2, r2, #6
 8000570:	0996      	lsrs	r6, r2, #6
 8000572:	0030      	movs	r0, r6
 8000574:	f002 f8a2 	bl	80026bc <__clzsi2>
 8000578:	3805      	subs	r0, #5
 800057a:	4086      	lsls	r6, r0
 800057c:	4287      	cmp	r7, r0
 800057e:	dd00      	ble.n	8000582 <__aeabi_fadd+0x82>
 8000580:	e0d4      	b.n	800072c <__aeabi_fadd+0x22c>
 8000582:	0033      	movs	r3, r6
 8000584:	1bc7      	subs	r7, r0, r7
 8000586:	2020      	movs	r0, #32
 8000588:	3701      	adds	r7, #1
 800058a:	40fb      	lsrs	r3, r7
 800058c:	1bc7      	subs	r7, r0, r7
 800058e:	40be      	lsls	r6, r7
 8000590:	0032      	movs	r2, r6
 8000592:	1e56      	subs	r6, r2, #1
 8000594:	41b2      	sbcs	r2, r6
 8000596:	2700      	movs	r7, #0
 8000598:	431a      	orrs	r2, r3
 800059a:	0753      	lsls	r3, r2, #29
 800059c:	d004      	beq.n	80005a8 <__aeabi_fadd+0xa8>
 800059e:	230f      	movs	r3, #15
 80005a0:	4013      	ands	r3, r2
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	d000      	beq.n	80005a8 <__aeabi_fadd+0xa8>
 80005a6:	3204      	adds	r2, #4
 80005a8:	0153      	lsls	r3, r2, #5
 80005aa:	d400      	bmi.n	80005ae <__aeabi_fadd+0xae>
 80005ac:	e09c      	b.n	80006e8 <__aeabi_fadd+0x1e8>
 80005ae:	1c7b      	adds	r3, r7, #1
 80005b0:	2ffe      	cmp	r7, #254	; 0xfe
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fadd+0xb6>
 80005b4:	e09a      	b.n	80006ec <__aeabi_fadd+0x1ec>
 80005b6:	0192      	lsls	r2, r2, #6
 80005b8:	0a52      	lsrs	r2, r2, #9
 80005ba:	4694      	mov	ip, r2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	05d8      	lsls	r0, r3, #23
 80005c0:	4663      	mov	r3, ip
 80005c2:	07e4      	lsls	r4, r4, #31
 80005c4:	4318      	orrs	r0, r3
 80005c6:	4320      	orrs	r0, r4
 80005c8:	bce0      	pop	{r5, r6, r7}
 80005ca:	46ba      	mov	sl, r7
 80005cc:	46b1      	mov	r9, r6
 80005ce:	46a8      	mov	r8, r5
 80005d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d2:	2800      	cmp	r0, #0
 80005d4:	d049      	beq.n	800066a <__aeabi_fadd+0x16a>
 80005d6:	1bf3      	subs	r3, r6, r7
 80005d8:	2f00      	cmp	r7, #0
 80005da:	d000      	beq.n	80005de <__aeabi_fadd+0xde>
 80005dc:	e0b6      	b.n	800074c <__aeabi_fadd+0x24c>
 80005de:	4652      	mov	r2, sl
 80005e0:	2a00      	cmp	r2, #0
 80005e2:	d060      	beq.n	80006a6 <__aeabi_fadd+0x1a6>
 80005e4:	3b01      	subs	r3, #1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d100      	bne.n	80005ec <__aeabi_fadd+0xec>
 80005ea:	e0fc      	b.n	80007e6 <__aeabi_fadd+0x2e6>
 80005ec:	2eff      	cmp	r6, #255	; 0xff
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fadd+0xf2>
 80005f0:	e0b4      	b.n	800075c <__aeabi_fadd+0x25c>
 80005f2:	000c      	movs	r4, r1
 80005f4:	4642      	mov	r2, r8
 80005f6:	2a00      	cmp	r2, #0
 80005f8:	d078      	beq.n	80006ec <__aeabi_fadd+0x1ec>
 80005fa:	2080      	movs	r0, #128	; 0x80
 80005fc:	03c0      	lsls	r0, r0, #15
 80005fe:	4310      	orrs	r0, r2
 8000600:	0242      	lsls	r2, r0, #9
 8000602:	0a53      	lsrs	r3, r2, #9
 8000604:	469c      	mov	ip, r3
 8000606:	23ff      	movs	r3, #255	; 0xff
 8000608:	e7d9      	b.n	80005be <__aeabi_fadd+0xbe>
 800060a:	1bb9      	subs	r1, r7, r6
 800060c:	2900      	cmp	r1, #0
 800060e:	dd71      	ble.n	80006f4 <__aeabi_fadd+0x1f4>
 8000610:	2e00      	cmp	r6, #0
 8000612:	d03f      	beq.n	8000694 <__aeabi_fadd+0x194>
 8000614:	2fff      	cmp	r7, #255	; 0xff
 8000616:	d0ee      	beq.n	80005f6 <__aeabi_fadd+0xf6>
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	04db      	lsls	r3, r3, #19
 800061c:	431d      	orrs	r5, r3
 800061e:	2201      	movs	r2, #1
 8000620:	291b      	cmp	r1, #27
 8000622:	dc07      	bgt.n	8000634 <__aeabi_fadd+0x134>
 8000624:	002a      	movs	r2, r5
 8000626:	2320      	movs	r3, #32
 8000628:	40ca      	lsrs	r2, r1
 800062a:	1a59      	subs	r1, r3, r1
 800062c:	408d      	lsls	r5, r1
 800062e:	1e6b      	subs	r3, r5, #1
 8000630:	419d      	sbcs	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	4452      	add	r2, sl
 8000636:	0153      	lsls	r3, r2, #5
 8000638:	d553      	bpl.n	80006e2 <__aeabi_fadd+0x1e2>
 800063a:	3701      	adds	r7, #1
 800063c:	2fff      	cmp	r7, #255	; 0xff
 800063e:	d055      	beq.n	80006ec <__aeabi_fadd+0x1ec>
 8000640:	2301      	movs	r3, #1
 8000642:	497b      	ldr	r1, [pc, #492]	; (8000830 <__aeabi_fadd+0x330>)
 8000644:	4013      	ands	r3, r2
 8000646:	0852      	lsrs	r2, r2, #1
 8000648:	400a      	ands	r2, r1
 800064a:	431a      	orrs	r2, r3
 800064c:	e7a5      	b.n	800059a <__aeabi_fadd+0x9a>
 800064e:	2d00      	cmp	r5, #0
 8000650:	d02c      	beq.n	80006ac <__aeabi_fadd+0x1ac>
 8000652:	2301      	movs	r3, #1
 8000654:	425b      	negs	r3, r3
 8000656:	469c      	mov	ip, r3
 8000658:	44e1      	add	r9, ip
 800065a:	464b      	mov	r3, r9
 800065c:	2b00      	cmp	r3, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0x162>
 8000660:	e0ad      	b.n	80007be <__aeabi_fadd+0x2be>
 8000662:	2fff      	cmp	r7, #255	; 0xff
 8000664:	d000      	beq.n	8000668 <__aeabi_fadd+0x168>
 8000666:	e76e      	b.n	8000546 <__aeabi_fadd+0x46>
 8000668:	e7c5      	b.n	80005f6 <__aeabi_fadd+0xf6>
 800066a:	20fe      	movs	r0, #254	; 0xfe
 800066c:	1c7e      	adds	r6, r7, #1
 800066e:	4230      	tst	r0, r6
 8000670:	d160      	bne.n	8000734 <__aeabi_fadd+0x234>
 8000672:	2f00      	cmp	r7, #0
 8000674:	d000      	beq.n	8000678 <__aeabi_fadd+0x178>
 8000676:	e093      	b.n	80007a0 <__aeabi_fadd+0x2a0>
 8000678:	4652      	mov	r2, sl
 800067a:	2a00      	cmp	r2, #0
 800067c:	d100      	bne.n	8000680 <__aeabi_fadd+0x180>
 800067e:	e0b6      	b.n	80007ee <__aeabi_fadd+0x2ee>
 8000680:	2d00      	cmp	r5, #0
 8000682:	d09c      	beq.n	80005be <__aeabi_fadd+0xbe>
 8000684:	1b52      	subs	r2, r2, r5
 8000686:	0150      	lsls	r0, r2, #5
 8000688:	d400      	bmi.n	800068c <__aeabi_fadd+0x18c>
 800068a:	e0c3      	b.n	8000814 <__aeabi_fadd+0x314>
 800068c:	4653      	mov	r3, sl
 800068e:	000c      	movs	r4, r1
 8000690:	1aea      	subs	r2, r5, r3
 8000692:	e782      	b.n	800059a <__aeabi_fadd+0x9a>
 8000694:	2d00      	cmp	r5, #0
 8000696:	d009      	beq.n	80006ac <__aeabi_fadd+0x1ac>
 8000698:	3901      	subs	r1, #1
 800069a:	2900      	cmp	r1, #0
 800069c:	d100      	bne.n	80006a0 <__aeabi_fadd+0x1a0>
 800069e:	e08b      	b.n	80007b8 <__aeabi_fadd+0x2b8>
 80006a0:	2fff      	cmp	r7, #255	; 0xff
 80006a2:	d1bc      	bne.n	800061e <__aeabi_fadd+0x11e>
 80006a4:	e7a7      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80006a6:	000c      	movs	r4, r1
 80006a8:	4642      	mov	r2, r8
 80006aa:	0037      	movs	r7, r6
 80006ac:	2fff      	cmp	r7, #255	; 0xff
 80006ae:	d0a2      	beq.n	80005f6 <__aeabi_fadd+0xf6>
 80006b0:	0252      	lsls	r2, r2, #9
 80006b2:	0a53      	lsrs	r3, r2, #9
 80006b4:	469c      	mov	ip, r3
 80006b6:	b2fb      	uxtb	r3, r7
 80006b8:	e781      	b.n	80005be <__aeabi_fadd+0xbe>
 80006ba:	21fe      	movs	r1, #254	; 0xfe
 80006bc:	3701      	adds	r7, #1
 80006be:	4239      	tst	r1, r7
 80006c0:	d165      	bne.n	800078e <__aeabi_fadd+0x28e>
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d17e      	bne.n	80007c4 <__aeabi_fadd+0x2c4>
 80006c6:	2800      	cmp	r0, #0
 80006c8:	d100      	bne.n	80006cc <__aeabi_fadd+0x1cc>
 80006ca:	e0aa      	b.n	8000822 <__aeabi_fadd+0x322>
 80006cc:	2d00      	cmp	r5, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_fadd+0x1d2>
 80006d0:	e775      	b.n	80005be <__aeabi_fadd+0xbe>
 80006d2:	002a      	movs	r2, r5
 80006d4:	4452      	add	r2, sl
 80006d6:	2700      	movs	r7, #0
 80006d8:	0153      	lsls	r3, r2, #5
 80006da:	d502      	bpl.n	80006e2 <__aeabi_fadd+0x1e2>
 80006dc:	4b55      	ldr	r3, [pc, #340]	; (8000834 <__aeabi_fadd+0x334>)
 80006de:	3701      	adds	r7, #1
 80006e0:	401a      	ands	r2, r3
 80006e2:	0753      	lsls	r3, r2, #29
 80006e4:	d000      	beq.n	80006e8 <__aeabi_fadd+0x1e8>
 80006e6:	e75a      	b.n	800059e <__aeabi_fadd+0x9e>
 80006e8:	08d2      	lsrs	r2, r2, #3
 80006ea:	e7df      	b.n	80006ac <__aeabi_fadd+0x1ac>
 80006ec:	2200      	movs	r2, #0
 80006ee:	23ff      	movs	r3, #255	; 0xff
 80006f0:	4694      	mov	ip, r2
 80006f2:	e764      	b.n	80005be <__aeabi_fadd+0xbe>
 80006f4:	2900      	cmp	r1, #0
 80006f6:	d0e0      	beq.n	80006ba <__aeabi_fadd+0x1ba>
 80006f8:	1bf3      	subs	r3, r6, r7
 80006fa:	2f00      	cmp	r7, #0
 80006fc:	d03e      	beq.n	800077c <__aeabi_fadd+0x27c>
 80006fe:	2eff      	cmp	r6, #255	; 0xff
 8000700:	d100      	bne.n	8000704 <__aeabi_fadd+0x204>
 8000702:	e777      	b.n	80005f4 <__aeabi_fadd+0xf4>
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	0001      	movs	r1, r0
 8000708:	04d2      	lsls	r2, r2, #19
 800070a:	4311      	orrs	r1, r2
 800070c:	468a      	mov	sl, r1
 800070e:	2201      	movs	r2, #1
 8000710:	2b1b      	cmp	r3, #27
 8000712:	dc08      	bgt.n	8000726 <__aeabi_fadd+0x226>
 8000714:	4652      	mov	r2, sl
 8000716:	2120      	movs	r1, #32
 8000718:	4650      	mov	r0, sl
 800071a:	40da      	lsrs	r2, r3
 800071c:	1acb      	subs	r3, r1, r3
 800071e:	4098      	lsls	r0, r3
 8000720:	1e43      	subs	r3, r0, #1
 8000722:	4198      	sbcs	r0, r3
 8000724:	4302      	orrs	r2, r0
 8000726:	0037      	movs	r7, r6
 8000728:	1952      	adds	r2, r2, r5
 800072a:	e784      	b.n	8000636 <__aeabi_fadd+0x136>
 800072c:	4a41      	ldr	r2, [pc, #260]	; (8000834 <__aeabi_fadd+0x334>)
 800072e:	1a3f      	subs	r7, r7, r0
 8000730:	4032      	ands	r2, r6
 8000732:	e732      	b.n	800059a <__aeabi_fadd+0x9a>
 8000734:	4653      	mov	r3, sl
 8000736:	1b5e      	subs	r6, r3, r5
 8000738:	0173      	lsls	r3, r6, #5
 800073a:	d42d      	bmi.n	8000798 <__aeabi_fadd+0x298>
 800073c:	2e00      	cmp	r6, #0
 800073e:	d000      	beq.n	8000742 <__aeabi_fadd+0x242>
 8000740:	e717      	b.n	8000572 <__aeabi_fadd+0x72>
 8000742:	2200      	movs	r2, #0
 8000744:	2400      	movs	r4, #0
 8000746:	2300      	movs	r3, #0
 8000748:	4694      	mov	ip, r2
 800074a:	e738      	b.n	80005be <__aeabi_fadd+0xbe>
 800074c:	2eff      	cmp	r6, #255	; 0xff
 800074e:	d100      	bne.n	8000752 <__aeabi_fadd+0x252>
 8000750:	e74f      	b.n	80005f2 <__aeabi_fadd+0xf2>
 8000752:	2280      	movs	r2, #128	; 0x80
 8000754:	4650      	mov	r0, sl
 8000756:	04d2      	lsls	r2, r2, #19
 8000758:	4310      	orrs	r0, r2
 800075a:	4682      	mov	sl, r0
 800075c:	2201      	movs	r2, #1
 800075e:	2b1b      	cmp	r3, #27
 8000760:	dc08      	bgt.n	8000774 <__aeabi_fadd+0x274>
 8000762:	4652      	mov	r2, sl
 8000764:	2420      	movs	r4, #32
 8000766:	4650      	mov	r0, sl
 8000768:	40da      	lsrs	r2, r3
 800076a:	1ae3      	subs	r3, r4, r3
 800076c:	4098      	lsls	r0, r3
 800076e:	1e43      	subs	r3, r0, #1
 8000770:	4198      	sbcs	r0, r3
 8000772:	4302      	orrs	r2, r0
 8000774:	000c      	movs	r4, r1
 8000776:	0037      	movs	r7, r6
 8000778:	1aaa      	subs	r2, r5, r2
 800077a:	e6f5      	b.n	8000568 <__aeabi_fadd+0x68>
 800077c:	2800      	cmp	r0, #0
 800077e:	d093      	beq.n	80006a8 <__aeabi_fadd+0x1a8>
 8000780:	3b01      	subs	r3, #1
 8000782:	2b00      	cmp	r3, #0
 8000784:	d04f      	beq.n	8000826 <__aeabi_fadd+0x326>
 8000786:	2eff      	cmp	r6, #255	; 0xff
 8000788:	d1c1      	bne.n	800070e <__aeabi_fadd+0x20e>
 800078a:	4642      	mov	r2, r8
 800078c:	e733      	b.n	80005f6 <__aeabi_fadd+0xf6>
 800078e:	2fff      	cmp	r7, #255	; 0xff
 8000790:	d0ac      	beq.n	80006ec <__aeabi_fadd+0x1ec>
 8000792:	4455      	add	r5, sl
 8000794:	086a      	lsrs	r2, r5, #1
 8000796:	e7a4      	b.n	80006e2 <__aeabi_fadd+0x1e2>
 8000798:	4653      	mov	r3, sl
 800079a:	000c      	movs	r4, r1
 800079c:	1aee      	subs	r6, r5, r3
 800079e:	e6e8      	b.n	8000572 <__aeabi_fadd+0x72>
 80007a0:	4653      	mov	r3, sl
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d128      	bne.n	80007f8 <__aeabi_fadd+0x2f8>
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d000      	beq.n	80007ac <__aeabi_fadd+0x2ac>
 80007aa:	e722      	b.n	80005f2 <__aeabi_fadd+0xf2>
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	03db      	lsls	r3, r3, #15
 80007b0:	469c      	mov	ip, r3
 80007b2:	2400      	movs	r4, #0
 80007b4:	23ff      	movs	r3, #255	; 0xff
 80007b6:	e702      	b.n	80005be <__aeabi_fadd+0xbe>
 80007b8:	002a      	movs	r2, r5
 80007ba:	4452      	add	r2, sl
 80007bc:	e73b      	b.n	8000636 <__aeabi_fadd+0x136>
 80007be:	4653      	mov	r3, sl
 80007c0:	1b5a      	subs	r2, r3, r5
 80007c2:	e6d1      	b.n	8000568 <__aeabi_fadd+0x68>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d100      	bne.n	80007ca <__aeabi_fadd+0x2ca>
 80007c8:	e714      	b.n	80005f4 <__aeabi_fadd+0xf4>
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x2d0>
 80007ce:	e712      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	03db      	lsls	r3, r3, #15
 80007d4:	421a      	tst	r2, r3
 80007d6:	d100      	bne.n	80007da <__aeabi_fadd+0x2da>
 80007d8:	e70d      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007da:	4641      	mov	r1, r8
 80007dc:	4219      	tst	r1, r3
 80007de:	d000      	beq.n	80007e2 <__aeabi_fadd+0x2e2>
 80007e0:	e709      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007e2:	4642      	mov	r2, r8
 80007e4:	e707      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007e6:	000c      	movs	r4, r1
 80007e8:	0037      	movs	r7, r6
 80007ea:	1aaa      	subs	r2, r5, r2
 80007ec:	e6bc      	b.n	8000568 <__aeabi_fadd+0x68>
 80007ee:	2d00      	cmp	r5, #0
 80007f0:	d013      	beq.n	800081a <__aeabi_fadd+0x31a>
 80007f2:	000c      	movs	r4, r1
 80007f4:	46c4      	mov	ip, r8
 80007f6:	e6e2      	b.n	80005be <__aeabi_fadd+0xbe>
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0x2fe>
 80007fc:	e6fb      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	03db      	lsls	r3, r3, #15
 8000802:	421a      	tst	r2, r3
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x308>
 8000806:	e6f6      	b.n	80005f6 <__aeabi_fadd+0xf6>
 8000808:	4640      	mov	r0, r8
 800080a:	4218      	tst	r0, r3
 800080c:	d000      	beq.n	8000810 <__aeabi_fadd+0x310>
 800080e:	e6f2      	b.n	80005f6 <__aeabi_fadd+0xf6>
 8000810:	000c      	movs	r4, r1
 8000812:	e6ef      	b.n	80005f4 <__aeabi_fadd+0xf4>
 8000814:	2a00      	cmp	r2, #0
 8000816:	d000      	beq.n	800081a <__aeabi_fadd+0x31a>
 8000818:	e763      	b.n	80006e2 <__aeabi_fadd+0x1e2>
 800081a:	2200      	movs	r2, #0
 800081c:	2400      	movs	r4, #0
 800081e:	4694      	mov	ip, r2
 8000820:	e6cd      	b.n	80005be <__aeabi_fadd+0xbe>
 8000822:	46c4      	mov	ip, r8
 8000824:	e6cb      	b.n	80005be <__aeabi_fadd+0xbe>
 8000826:	002a      	movs	r2, r5
 8000828:	0037      	movs	r7, r6
 800082a:	4452      	add	r2, sl
 800082c:	e703      	b.n	8000636 <__aeabi_fadd+0x136>
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	7dffffff 	.word	0x7dffffff
 8000834:	fbffffff 	.word	0xfbffffff

08000838 <__aeabi_fdiv>:
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	464f      	mov	r7, r9
 800083c:	4646      	mov	r6, r8
 800083e:	46d6      	mov	lr, sl
 8000840:	0245      	lsls	r5, r0, #9
 8000842:	b5c0      	push	{r6, r7, lr}
 8000844:	0047      	lsls	r7, r0, #1
 8000846:	1c0c      	adds	r4, r1, #0
 8000848:	0a6d      	lsrs	r5, r5, #9
 800084a:	0e3f      	lsrs	r7, r7, #24
 800084c:	0fc6      	lsrs	r6, r0, #31
 800084e:	2f00      	cmp	r7, #0
 8000850:	d066      	beq.n	8000920 <__aeabi_fdiv+0xe8>
 8000852:	2fff      	cmp	r7, #255	; 0xff
 8000854:	d06c      	beq.n	8000930 <__aeabi_fdiv+0xf8>
 8000856:	2300      	movs	r3, #0
 8000858:	00ea      	lsls	r2, r5, #3
 800085a:	2580      	movs	r5, #128	; 0x80
 800085c:	4699      	mov	r9, r3
 800085e:	469a      	mov	sl, r3
 8000860:	04ed      	lsls	r5, r5, #19
 8000862:	4315      	orrs	r5, r2
 8000864:	3f7f      	subs	r7, #127	; 0x7f
 8000866:	0260      	lsls	r0, r4, #9
 8000868:	0061      	lsls	r1, r4, #1
 800086a:	0a43      	lsrs	r3, r0, #9
 800086c:	4698      	mov	r8, r3
 800086e:	0e09      	lsrs	r1, r1, #24
 8000870:	0fe4      	lsrs	r4, r4, #31
 8000872:	2900      	cmp	r1, #0
 8000874:	d048      	beq.n	8000908 <__aeabi_fdiv+0xd0>
 8000876:	29ff      	cmp	r1, #255	; 0xff
 8000878:	d010      	beq.n	800089c <__aeabi_fdiv+0x64>
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	00d8      	lsls	r0, r3, #3
 800087e:	04d2      	lsls	r2, r2, #19
 8000880:	4302      	orrs	r2, r0
 8000882:	4690      	mov	r8, r2
 8000884:	2000      	movs	r0, #0
 8000886:	397f      	subs	r1, #127	; 0x7f
 8000888:	464a      	mov	r2, r9
 800088a:	0033      	movs	r3, r6
 800088c:	1a7f      	subs	r7, r7, r1
 800088e:	4302      	orrs	r2, r0
 8000890:	496c      	ldr	r1, [pc, #432]	; (8000a44 <__aeabi_fdiv+0x20c>)
 8000892:	0092      	lsls	r2, r2, #2
 8000894:	588a      	ldr	r2, [r1, r2]
 8000896:	4063      	eors	r3, r4
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4697      	mov	pc, r2
 800089c:	2b00      	cmp	r3, #0
 800089e:	d16d      	bne.n	800097c <__aeabi_fdiv+0x144>
 80008a0:	2002      	movs	r0, #2
 80008a2:	3fff      	subs	r7, #255	; 0xff
 80008a4:	e033      	b.n	800090e <__aeabi_fdiv+0xd6>
 80008a6:	2300      	movs	r3, #0
 80008a8:	4698      	mov	r8, r3
 80008aa:	0026      	movs	r6, r4
 80008ac:	4645      	mov	r5, r8
 80008ae:	4682      	mov	sl, r0
 80008b0:	4653      	mov	r3, sl
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d100      	bne.n	80008b8 <__aeabi_fdiv+0x80>
 80008b6:	e07f      	b.n	80009b8 <__aeabi_fdiv+0x180>
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d100      	bne.n	80008be <__aeabi_fdiv+0x86>
 80008bc:	e094      	b.n	80009e8 <__aeabi_fdiv+0x1b0>
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d017      	beq.n	80008f2 <__aeabi_fdiv+0xba>
 80008c2:	0038      	movs	r0, r7
 80008c4:	307f      	adds	r0, #127	; 0x7f
 80008c6:	2800      	cmp	r0, #0
 80008c8:	dd5f      	ble.n	800098a <__aeabi_fdiv+0x152>
 80008ca:	076b      	lsls	r3, r5, #29
 80008cc:	d004      	beq.n	80008d8 <__aeabi_fdiv+0xa0>
 80008ce:	230f      	movs	r3, #15
 80008d0:	402b      	ands	r3, r5
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	d000      	beq.n	80008d8 <__aeabi_fdiv+0xa0>
 80008d6:	3504      	adds	r5, #4
 80008d8:	012b      	lsls	r3, r5, #4
 80008da:	d503      	bpl.n	80008e4 <__aeabi_fdiv+0xac>
 80008dc:	0038      	movs	r0, r7
 80008de:	4b5a      	ldr	r3, [pc, #360]	; (8000a48 <__aeabi_fdiv+0x210>)
 80008e0:	3080      	adds	r0, #128	; 0x80
 80008e2:	401d      	ands	r5, r3
 80008e4:	28fe      	cmp	r0, #254	; 0xfe
 80008e6:	dc67      	bgt.n	80009b8 <__aeabi_fdiv+0x180>
 80008e8:	01ad      	lsls	r5, r5, #6
 80008ea:	0a6d      	lsrs	r5, r5, #9
 80008ec:	b2c0      	uxtb	r0, r0
 80008ee:	e002      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80008f0:	001e      	movs	r6, r3
 80008f2:	2000      	movs	r0, #0
 80008f4:	2500      	movs	r5, #0
 80008f6:	05c0      	lsls	r0, r0, #23
 80008f8:	4328      	orrs	r0, r5
 80008fa:	07f6      	lsls	r6, r6, #31
 80008fc:	4330      	orrs	r0, r6
 80008fe:	bce0      	pop	{r5, r6, r7}
 8000900:	46ba      	mov	sl, r7
 8000902:	46b1      	mov	r9, r6
 8000904:	46a8      	mov	r8, r5
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000908:	2b00      	cmp	r3, #0
 800090a:	d12b      	bne.n	8000964 <__aeabi_fdiv+0x12c>
 800090c:	2001      	movs	r0, #1
 800090e:	464a      	mov	r2, r9
 8000910:	0033      	movs	r3, r6
 8000912:	494e      	ldr	r1, [pc, #312]	; (8000a4c <__aeabi_fdiv+0x214>)
 8000914:	4302      	orrs	r2, r0
 8000916:	0092      	lsls	r2, r2, #2
 8000918:	588a      	ldr	r2, [r1, r2]
 800091a:	4063      	eors	r3, r4
 800091c:	b2db      	uxtb	r3, r3
 800091e:	4697      	mov	pc, r2
 8000920:	2d00      	cmp	r5, #0
 8000922:	d113      	bne.n	800094c <__aeabi_fdiv+0x114>
 8000924:	2304      	movs	r3, #4
 8000926:	4699      	mov	r9, r3
 8000928:	3b03      	subs	r3, #3
 800092a:	2700      	movs	r7, #0
 800092c:	469a      	mov	sl, r3
 800092e:	e79a      	b.n	8000866 <__aeabi_fdiv+0x2e>
 8000930:	2d00      	cmp	r5, #0
 8000932:	d105      	bne.n	8000940 <__aeabi_fdiv+0x108>
 8000934:	2308      	movs	r3, #8
 8000936:	4699      	mov	r9, r3
 8000938:	3b06      	subs	r3, #6
 800093a:	27ff      	movs	r7, #255	; 0xff
 800093c:	469a      	mov	sl, r3
 800093e:	e792      	b.n	8000866 <__aeabi_fdiv+0x2e>
 8000940:	230c      	movs	r3, #12
 8000942:	4699      	mov	r9, r3
 8000944:	3b09      	subs	r3, #9
 8000946:	27ff      	movs	r7, #255	; 0xff
 8000948:	469a      	mov	sl, r3
 800094a:	e78c      	b.n	8000866 <__aeabi_fdiv+0x2e>
 800094c:	0028      	movs	r0, r5
 800094e:	f001 feb5 	bl	80026bc <__clzsi2>
 8000952:	2776      	movs	r7, #118	; 0x76
 8000954:	1f43      	subs	r3, r0, #5
 8000956:	409d      	lsls	r5, r3
 8000958:	2300      	movs	r3, #0
 800095a:	427f      	negs	r7, r7
 800095c:	4699      	mov	r9, r3
 800095e:	469a      	mov	sl, r3
 8000960:	1a3f      	subs	r7, r7, r0
 8000962:	e780      	b.n	8000866 <__aeabi_fdiv+0x2e>
 8000964:	0018      	movs	r0, r3
 8000966:	f001 fea9 	bl	80026bc <__clzsi2>
 800096a:	4642      	mov	r2, r8
 800096c:	1f43      	subs	r3, r0, #5
 800096e:	2176      	movs	r1, #118	; 0x76
 8000970:	409a      	lsls	r2, r3
 8000972:	4249      	negs	r1, r1
 8000974:	1a09      	subs	r1, r1, r0
 8000976:	4690      	mov	r8, r2
 8000978:	2000      	movs	r0, #0
 800097a:	e785      	b.n	8000888 <__aeabi_fdiv+0x50>
 800097c:	21ff      	movs	r1, #255	; 0xff
 800097e:	2003      	movs	r0, #3
 8000980:	e782      	b.n	8000888 <__aeabi_fdiv+0x50>
 8000982:	001e      	movs	r6, r3
 8000984:	20ff      	movs	r0, #255	; 0xff
 8000986:	2500      	movs	r5, #0
 8000988:	e7b5      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 800098a:	2301      	movs	r3, #1
 800098c:	1a1b      	subs	r3, r3, r0
 800098e:	2b1b      	cmp	r3, #27
 8000990:	dcaf      	bgt.n	80008f2 <__aeabi_fdiv+0xba>
 8000992:	379e      	adds	r7, #158	; 0x9e
 8000994:	0029      	movs	r1, r5
 8000996:	40bd      	lsls	r5, r7
 8000998:	40d9      	lsrs	r1, r3
 800099a:	1e6a      	subs	r2, r5, #1
 800099c:	4195      	sbcs	r5, r2
 800099e:	430d      	orrs	r5, r1
 80009a0:	076b      	lsls	r3, r5, #29
 80009a2:	d004      	beq.n	80009ae <__aeabi_fdiv+0x176>
 80009a4:	230f      	movs	r3, #15
 80009a6:	402b      	ands	r3, r5
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d000      	beq.n	80009ae <__aeabi_fdiv+0x176>
 80009ac:	3504      	adds	r5, #4
 80009ae:	016b      	lsls	r3, r5, #5
 80009b0:	d544      	bpl.n	8000a3c <__aeabi_fdiv+0x204>
 80009b2:	2001      	movs	r0, #1
 80009b4:	2500      	movs	r5, #0
 80009b6:	e79e      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009b8:	20ff      	movs	r0, #255	; 0xff
 80009ba:	2500      	movs	r5, #0
 80009bc:	e79b      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009be:	2580      	movs	r5, #128	; 0x80
 80009c0:	2600      	movs	r6, #0
 80009c2:	20ff      	movs	r0, #255	; 0xff
 80009c4:	03ed      	lsls	r5, r5, #15
 80009c6:	e796      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009c8:	2300      	movs	r3, #0
 80009ca:	4698      	mov	r8, r3
 80009cc:	2080      	movs	r0, #128	; 0x80
 80009ce:	03c0      	lsls	r0, r0, #15
 80009d0:	4205      	tst	r5, r0
 80009d2:	d009      	beq.n	80009e8 <__aeabi_fdiv+0x1b0>
 80009d4:	4643      	mov	r3, r8
 80009d6:	4203      	tst	r3, r0
 80009d8:	d106      	bne.n	80009e8 <__aeabi_fdiv+0x1b0>
 80009da:	4645      	mov	r5, r8
 80009dc:	4305      	orrs	r5, r0
 80009de:	026d      	lsls	r5, r5, #9
 80009e0:	0026      	movs	r6, r4
 80009e2:	20ff      	movs	r0, #255	; 0xff
 80009e4:	0a6d      	lsrs	r5, r5, #9
 80009e6:	e786      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009e8:	2080      	movs	r0, #128	; 0x80
 80009ea:	03c0      	lsls	r0, r0, #15
 80009ec:	4305      	orrs	r5, r0
 80009ee:	026d      	lsls	r5, r5, #9
 80009f0:	20ff      	movs	r0, #255	; 0xff
 80009f2:	0a6d      	lsrs	r5, r5, #9
 80009f4:	e77f      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009f6:	4641      	mov	r1, r8
 80009f8:	016a      	lsls	r2, r5, #5
 80009fa:	0148      	lsls	r0, r1, #5
 80009fc:	4282      	cmp	r2, r0
 80009fe:	d219      	bcs.n	8000a34 <__aeabi_fdiv+0x1fc>
 8000a00:	211b      	movs	r1, #27
 8000a02:	2500      	movs	r5, #0
 8000a04:	3f01      	subs	r7, #1
 8000a06:	2601      	movs	r6, #1
 8000a08:	0014      	movs	r4, r2
 8000a0a:	006d      	lsls	r5, r5, #1
 8000a0c:	0052      	lsls	r2, r2, #1
 8000a0e:	2c00      	cmp	r4, #0
 8000a10:	db01      	blt.n	8000a16 <__aeabi_fdiv+0x1de>
 8000a12:	4290      	cmp	r0, r2
 8000a14:	d801      	bhi.n	8000a1a <__aeabi_fdiv+0x1e2>
 8000a16:	1a12      	subs	r2, r2, r0
 8000a18:	4335      	orrs	r5, r6
 8000a1a:	3901      	subs	r1, #1
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	d1f3      	bne.n	8000a08 <__aeabi_fdiv+0x1d0>
 8000a20:	1e50      	subs	r0, r2, #1
 8000a22:	4182      	sbcs	r2, r0
 8000a24:	0038      	movs	r0, r7
 8000a26:	307f      	adds	r0, #127	; 0x7f
 8000a28:	001e      	movs	r6, r3
 8000a2a:	4315      	orrs	r5, r2
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	dd00      	ble.n	8000a32 <__aeabi_fdiv+0x1fa>
 8000a30:	e74b      	b.n	80008ca <__aeabi_fdiv+0x92>
 8000a32:	e7aa      	b.n	800098a <__aeabi_fdiv+0x152>
 8000a34:	211a      	movs	r1, #26
 8000a36:	2501      	movs	r5, #1
 8000a38:	1a12      	subs	r2, r2, r0
 8000a3a:	e7e4      	b.n	8000a06 <__aeabi_fdiv+0x1ce>
 8000a3c:	01ad      	lsls	r5, r5, #6
 8000a3e:	2000      	movs	r0, #0
 8000a40:	0a6d      	lsrs	r5, r5, #9
 8000a42:	e758      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 8000a44:	08006b20 	.word	0x08006b20
 8000a48:	f7ffffff 	.word	0xf7ffffff
 8000a4c:	08006b60 	.word	0x08006b60

08000a50 <__eqsf2>:
 8000a50:	b570      	push	{r4, r5, r6, lr}
 8000a52:	0042      	lsls	r2, r0, #1
 8000a54:	024e      	lsls	r6, r1, #9
 8000a56:	004c      	lsls	r4, r1, #1
 8000a58:	0245      	lsls	r5, r0, #9
 8000a5a:	0a6d      	lsrs	r5, r5, #9
 8000a5c:	0e12      	lsrs	r2, r2, #24
 8000a5e:	0fc3      	lsrs	r3, r0, #31
 8000a60:	0a76      	lsrs	r6, r6, #9
 8000a62:	0e24      	lsrs	r4, r4, #24
 8000a64:	0fc9      	lsrs	r1, r1, #31
 8000a66:	2aff      	cmp	r2, #255	; 0xff
 8000a68:	d00f      	beq.n	8000a8a <__eqsf2+0x3a>
 8000a6a:	2cff      	cmp	r4, #255	; 0xff
 8000a6c:	d011      	beq.n	8000a92 <__eqsf2+0x42>
 8000a6e:	2001      	movs	r0, #1
 8000a70:	42a2      	cmp	r2, r4
 8000a72:	d000      	beq.n	8000a76 <__eqsf2+0x26>
 8000a74:	bd70      	pop	{r4, r5, r6, pc}
 8000a76:	42b5      	cmp	r5, r6
 8000a78:	d1fc      	bne.n	8000a74 <__eqsf2+0x24>
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d00d      	beq.n	8000a9a <__eqsf2+0x4a>
 8000a7e:	2a00      	cmp	r2, #0
 8000a80:	d1f8      	bne.n	8000a74 <__eqsf2+0x24>
 8000a82:	0028      	movs	r0, r5
 8000a84:	1e45      	subs	r5, r0, #1
 8000a86:	41a8      	sbcs	r0, r5
 8000a88:	e7f4      	b.n	8000a74 <__eqsf2+0x24>
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	2d00      	cmp	r5, #0
 8000a8e:	d1f1      	bne.n	8000a74 <__eqsf2+0x24>
 8000a90:	e7eb      	b.n	8000a6a <__eqsf2+0x1a>
 8000a92:	2001      	movs	r0, #1
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d1ed      	bne.n	8000a74 <__eqsf2+0x24>
 8000a98:	e7e9      	b.n	8000a6e <__eqsf2+0x1e>
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	e7ea      	b.n	8000a74 <__eqsf2+0x24>
 8000a9e:	46c0      	nop			; (mov r8, r8)

08000aa0 <__gesf2>:
 8000aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa2:	0042      	lsls	r2, r0, #1
 8000aa4:	0246      	lsls	r6, r0, #9
 8000aa6:	024d      	lsls	r5, r1, #9
 8000aa8:	004c      	lsls	r4, r1, #1
 8000aaa:	0fc3      	lsrs	r3, r0, #31
 8000aac:	0a76      	lsrs	r6, r6, #9
 8000aae:	0e12      	lsrs	r2, r2, #24
 8000ab0:	0a6d      	lsrs	r5, r5, #9
 8000ab2:	0e24      	lsrs	r4, r4, #24
 8000ab4:	0fc8      	lsrs	r0, r1, #31
 8000ab6:	2aff      	cmp	r2, #255	; 0xff
 8000ab8:	d01f      	beq.n	8000afa <__gesf2+0x5a>
 8000aba:	2cff      	cmp	r4, #255	; 0xff
 8000abc:	d010      	beq.n	8000ae0 <__gesf2+0x40>
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	d11f      	bne.n	8000b02 <__gesf2+0x62>
 8000ac2:	4271      	negs	r1, r6
 8000ac4:	4171      	adcs	r1, r6
 8000ac6:	2c00      	cmp	r4, #0
 8000ac8:	d101      	bne.n	8000ace <__gesf2+0x2e>
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d01e      	beq.n	8000b0c <__gesf2+0x6c>
 8000ace:	2900      	cmp	r1, #0
 8000ad0:	d10e      	bne.n	8000af0 <__gesf2+0x50>
 8000ad2:	4283      	cmp	r3, r0
 8000ad4:	d01e      	beq.n	8000b14 <__gesf2+0x74>
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	1e58      	subs	r0, r3, #1
 8000ada:	4008      	ands	r0, r1
 8000adc:	3801      	subs	r0, #1
 8000ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae0:	2d00      	cmp	r5, #0
 8000ae2:	d126      	bne.n	8000b32 <__gesf2+0x92>
 8000ae4:	2a00      	cmp	r2, #0
 8000ae6:	d1f4      	bne.n	8000ad2 <__gesf2+0x32>
 8000ae8:	4271      	negs	r1, r6
 8000aea:	4171      	adcs	r1, r6
 8000aec:	2900      	cmp	r1, #0
 8000aee:	d0f0      	beq.n	8000ad2 <__gesf2+0x32>
 8000af0:	2800      	cmp	r0, #0
 8000af2:	d1f4      	bne.n	8000ade <__gesf2+0x3e>
 8000af4:	2001      	movs	r0, #1
 8000af6:	4240      	negs	r0, r0
 8000af8:	e7f1      	b.n	8000ade <__gesf2+0x3e>
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d119      	bne.n	8000b32 <__gesf2+0x92>
 8000afe:	2cff      	cmp	r4, #255	; 0xff
 8000b00:	d0ee      	beq.n	8000ae0 <__gesf2+0x40>
 8000b02:	2c00      	cmp	r4, #0
 8000b04:	d1e5      	bne.n	8000ad2 <__gesf2+0x32>
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	d1e3      	bne.n	8000ad2 <__gesf2+0x32>
 8000b0a:	e7e4      	b.n	8000ad6 <__gesf2+0x36>
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d0e5      	beq.n	8000ade <__gesf2+0x3e>
 8000b12:	e7e0      	b.n	8000ad6 <__gesf2+0x36>
 8000b14:	42a2      	cmp	r2, r4
 8000b16:	dc05      	bgt.n	8000b24 <__gesf2+0x84>
 8000b18:	dbea      	blt.n	8000af0 <__gesf2+0x50>
 8000b1a:	42ae      	cmp	r6, r5
 8000b1c:	d802      	bhi.n	8000b24 <__gesf2+0x84>
 8000b1e:	d3e7      	bcc.n	8000af0 <__gesf2+0x50>
 8000b20:	2000      	movs	r0, #0
 8000b22:	e7dc      	b.n	8000ade <__gesf2+0x3e>
 8000b24:	4241      	negs	r1, r0
 8000b26:	4141      	adcs	r1, r0
 8000b28:	4248      	negs	r0, r1
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	4008      	ands	r0, r1
 8000b2e:	3801      	subs	r0, #1
 8000b30:	e7d5      	b.n	8000ade <__gesf2+0x3e>
 8000b32:	2002      	movs	r0, #2
 8000b34:	4240      	negs	r0, r0
 8000b36:	e7d2      	b.n	8000ade <__gesf2+0x3e>

08000b38 <__lesf2>:
 8000b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3a:	0042      	lsls	r2, r0, #1
 8000b3c:	0246      	lsls	r6, r0, #9
 8000b3e:	024d      	lsls	r5, r1, #9
 8000b40:	004c      	lsls	r4, r1, #1
 8000b42:	0fc3      	lsrs	r3, r0, #31
 8000b44:	0a76      	lsrs	r6, r6, #9
 8000b46:	0e12      	lsrs	r2, r2, #24
 8000b48:	0a6d      	lsrs	r5, r5, #9
 8000b4a:	0e24      	lsrs	r4, r4, #24
 8000b4c:	0fc8      	lsrs	r0, r1, #31
 8000b4e:	2aff      	cmp	r2, #255	; 0xff
 8000b50:	d00d      	beq.n	8000b6e <__lesf2+0x36>
 8000b52:	2cff      	cmp	r4, #255	; 0xff
 8000b54:	d00f      	beq.n	8000b76 <__lesf2+0x3e>
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	d123      	bne.n	8000ba2 <__lesf2+0x6a>
 8000b5a:	4271      	negs	r1, r6
 8000b5c:	4171      	adcs	r1, r6
 8000b5e:	2c00      	cmp	r4, #0
 8000b60:	d10f      	bne.n	8000b82 <__lesf2+0x4a>
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d10d      	bne.n	8000b82 <__lesf2+0x4a>
 8000b66:	2000      	movs	r0, #0
 8000b68:	2e00      	cmp	r6, #0
 8000b6a:	d014      	beq.n	8000b96 <__lesf2+0x5e>
 8000b6c:	e00d      	b.n	8000b8a <__lesf2+0x52>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d110      	bne.n	8000b94 <__lesf2+0x5c>
 8000b72:	2cff      	cmp	r4, #255	; 0xff
 8000b74:	d115      	bne.n	8000ba2 <__lesf2+0x6a>
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	d10c      	bne.n	8000b94 <__lesf2+0x5c>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	d103      	bne.n	8000b86 <__lesf2+0x4e>
 8000b7e:	4271      	negs	r1, r6
 8000b80:	4171      	adcs	r1, r6
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d108      	bne.n	8000b98 <__lesf2+0x60>
 8000b86:	4283      	cmp	r3, r0
 8000b88:	d010      	beq.n	8000bac <__lesf2+0x74>
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	1e58      	subs	r0, r3, #1
 8000b8e:	4008      	ands	r0, r1
 8000b90:	3801      	subs	r0, #1
 8000b92:	e000      	b.n	8000b96 <__lesf2+0x5e>
 8000b94:	2002      	movs	r0, #2
 8000b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b98:	2800      	cmp	r0, #0
 8000b9a:	d1fc      	bne.n	8000b96 <__lesf2+0x5e>
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	4240      	negs	r0, r0
 8000ba0:	e7f9      	b.n	8000b96 <__lesf2+0x5e>
 8000ba2:	2c00      	cmp	r4, #0
 8000ba4:	d1ef      	bne.n	8000b86 <__lesf2+0x4e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d1ed      	bne.n	8000b86 <__lesf2+0x4e>
 8000baa:	e7ee      	b.n	8000b8a <__lesf2+0x52>
 8000bac:	42a2      	cmp	r2, r4
 8000bae:	dc05      	bgt.n	8000bbc <__lesf2+0x84>
 8000bb0:	dbf2      	blt.n	8000b98 <__lesf2+0x60>
 8000bb2:	42ae      	cmp	r6, r5
 8000bb4:	d802      	bhi.n	8000bbc <__lesf2+0x84>
 8000bb6:	d3ef      	bcc.n	8000b98 <__lesf2+0x60>
 8000bb8:	2000      	movs	r0, #0
 8000bba:	e7ec      	b.n	8000b96 <__lesf2+0x5e>
 8000bbc:	4241      	negs	r1, r0
 8000bbe:	4141      	adcs	r1, r0
 8000bc0:	4248      	negs	r0, r1
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	4008      	ands	r0, r1
 8000bc6:	3801      	subs	r0, #1
 8000bc8:	e7e5      	b.n	8000b96 <__lesf2+0x5e>
 8000bca:	46c0      	nop			; (mov r8, r8)

08000bcc <__aeabi_fmul>:
 8000bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bce:	4657      	mov	r7, sl
 8000bd0:	464e      	mov	r6, r9
 8000bd2:	4645      	mov	r5, r8
 8000bd4:	46de      	mov	lr, fp
 8000bd6:	0244      	lsls	r4, r0, #9
 8000bd8:	b5e0      	push	{r5, r6, r7, lr}
 8000bda:	0045      	lsls	r5, r0, #1
 8000bdc:	1c0f      	adds	r7, r1, #0
 8000bde:	0a64      	lsrs	r4, r4, #9
 8000be0:	0e2d      	lsrs	r5, r5, #24
 8000be2:	0fc6      	lsrs	r6, r0, #31
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d047      	beq.n	8000c78 <__aeabi_fmul+0xac>
 8000be8:	2dff      	cmp	r5, #255	; 0xff
 8000bea:	d04d      	beq.n	8000c88 <__aeabi_fmul+0xbc>
 8000bec:	2300      	movs	r3, #0
 8000bee:	2080      	movs	r0, #128	; 0x80
 8000bf0:	469a      	mov	sl, r3
 8000bf2:	469b      	mov	fp, r3
 8000bf4:	00e4      	lsls	r4, r4, #3
 8000bf6:	04c0      	lsls	r0, r0, #19
 8000bf8:	4304      	orrs	r4, r0
 8000bfa:	3d7f      	subs	r5, #127	; 0x7f
 8000bfc:	0278      	lsls	r0, r7, #9
 8000bfe:	0a43      	lsrs	r3, r0, #9
 8000c00:	4699      	mov	r9, r3
 8000c02:	007a      	lsls	r2, r7, #1
 8000c04:	0ffb      	lsrs	r3, r7, #31
 8000c06:	4698      	mov	r8, r3
 8000c08:	0e12      	lsrs	r2, r2, #24
 8000c0a:	464b      	mov	r3, r9
 8000c0c:	d044      	beq.n	8000c98 <__aeabi_fmul+0xcc>
 8000c0e:	2aff      	cmp	r2, #255	; 0xff
 8000c10:	d011      	beq.n	8000c36 <__aeabi_fmul+0x6a>
 8000c12:	00d8      	lsls	r0, r3, #3
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	04db      	lsls	r3, r3, #19
 8000c18:	4303      	orrs	r3, r0
 8000c1a:	4699      	mov	r9, r3
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	18ad      	adds	r5, r5, r2
 8000c22:	4647      	mov	r7, r8
 8000c24:	4653      	mov	r3, sl
 8000c26:	4077      	eors	r7, r6
 8000c28:	1c69      	adds	r1, r5, #1
 8000c2a:	2b0f      	cmp	r3, #15
 8000c2c:	d83f      	bhi.n	8000cae <__aeabi_fmul+0xe2>
 8000c2e:	4a72      	ldr	r2, [pc, #456]	; (8000df8 <__aeabi_fmul+0x22c>)
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	58d3      	ldr	r3, [r2, r3]
 8000c34:	469f      	mov	pc, r3
 8000c36:	35ff      	adds	r5, #255	; 0xff
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fmul+0x72>
 8000c3c:	e079      	b.n	8000d32 <__aeabi_fmul+0x166>
 8000c3e:	4652      	mov	r2, sl
 8000c40:	2302      	movs	r3, #2
 8000c42:	431a      	orrs	r2, r3
 8000c44:	4692      	mov	sl, r2
 8000c46:	2002      	movs	r0, #2
 8000c48:	e7eb      	b.n	8000c22 <__aeabi_fmul+0x56>
 8000c4a:	4647      	mov	r7, r8
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4683      	mov	fp, r0
 8000c50:	465b      	mov	r3, fp
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d028      	beq.n	8000ca8 <__aeabi_fmul+0xdc>
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d100      	bne.n	8000c5c <__aeabi_fmul+0x90>
 8000c5a:	e0c6      	b.n	8000dea <__aeabi_fmul+0x21e>
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d14f      	bne.n	8000d00 <__aeabi_fmul+0x134>
 8000c60:	2000      	movs	r0, #0
 8000c62:	2400      	movs	r4, #0
 8000c64:	05c0      	lsls	r0, r0, #23
 8000c66:	07ff      	lsls	r7, r7, #31
 8000c68:	4320      	orrs	r0, r4
 8000c6a:	4338      	orrs	r0, r7
 8000c6c:	bcf0      	pop	{r4, r5, r6, r7}
 8000c6e:	46bb      	mov	fp, r7
 8000c70:	46b2      	mov	sl, r6
 8000c72:	46a9      	mov	r9, r5
 8000c74:	46a0      	mov	r8, r4
 8000c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d171      	bne.n	8000d60 <__aeabi_fmul+0x194>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	469a      	mov	sl, r3
 8000c80:	3b03      	subs	r3, #3
 8000c82:	2500      	movs	r5, #0
 8000c84:	469b      	mov	fp, r3
 8000c86:	e7b9      	b.n	8000bfc <__aeabi_fmul+0x30>
 8000c88:	2c00      	cmp	r4, #0
 8000c8a:	d163      	bne.n	8000d54 <__aeabi_fmul+0x188>
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	469a      	mov	sl, r3
 8000c90:	3b06      	subs	r3, #6
 8000c92:	25ff      	movs	r5, #255	; 0xff
 8000c94:	469b      	mov	fp, r3
 8000c96:	e7b1      	b.n	8000bfc <__aeabi_fmul+0x30>
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d150      	bne.n	8000d3e <__aeabi_fmul+0x172>
 8000c9c:	4652      	mov	r2, sl
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	4692      	mov	sl, r2
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	e7bc      	b.n	8000c22 <__aeabi_fmul+0x56>
 8000ca8:	20ff      	movs	r0, #255	; 0xff
 8000caa:	2400      	movs	r4, #0
 8000cac:	e7da      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000cae:	4648      	mov	r0, r9
 8000cb0:	0c26      	lsrs	r6, r4, #16
 8000cb2:	0424      	lsls	r4, r4, #16
 8000cb4:	0c22      	lsrs	r2, r4, #16
 8000cb6:	0404      	lsls	r4, r0, #16
 8000cb8:	0c24      	lsrs	r4, r4, #16
 8000cba:	464b      	mov	r3, r9
 8000cbc:	0020      	movs	r0, r4
 8000cbe:	0c1b      	lsrs	r3, r3, #16
 8000cc0:	4350      	muls	r0, r2
 8000cc2:	4374      	muls	r4, r6
 8000cc4:	435a      	muls	r2, r3
 8000cc6:	435e      	muls	r6, r3
 8000cc8:	1912      	adds	r2, r2, r4
 8000cca:	0c03      	lsrs	r3, r0, #16
 8000ccc:	189b      	adds	r3, r3, r2
 8000cce:	429c      	cmp	r4, r3
 8000cd0:	d903      	bls.n	8000cda <__aeabi_fmul+0x10e>
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	0252      	lsls	r2, r2, #9
 8000cd6:	4694      	mov	ip, r2
 8000cd8:	4466      	add	r6, ip
 8000cda:	0400      	lsls	r0, r0, #16
 8000cdc:	041a      	lsls	r2, r3, #16
 8000cde:	0c00      	lsrs	r0, r0, #16
 8000ce0:	1812      	adds	r2, r2, r0
 8000ce2:	0194      	lsls	r4, r2, #6
 8000ce4:	1e60      	subs	r0, r4, #1
 8000ce6:	4184      	sbcs	r4, r0
 8000ce8:	0c1b      	lsrs	r3, r3, #16
 8000cea:	0e92      	lsrs	r2, r2, #26
 8000cec:	199b      	adds	r3, r3, r6
 8000cee:	4314      	orrs	r4, r2
 8000cf0:	019b      	lsls	r3, r3, #6
 8000cf2:	431c      	orrs	r4, r3
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	d572      	bpl.n	8000dde <__aeabi_fmul+0x212>
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	0863      	lsrs	r3, r4, #1
 8000cfc:	4004      	ands	r4, r0
 8000cfe:	431c      	orrs	r4, r3
 8000d00:	0008      	movs	r0, r1
 8000d02:	307f      	adds	r0, #127	; 0x7f
 8000d04:	2800      	cmp	r0, #0
 8000d06:	dd3c      	ble.n	8000d82 <__aeabi_fmul+0x1b6>
 8000d08:	0763      	lsls	r3, r4, #29
 8000d0a:	d004      	beq.n	8000d16 <__aeabi_fmul+0x14a>
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	4023      	ands	r3, r4
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d000      	beq.n	8000d16 <__aeabi_fmul+0x14a>
 8000d14:	3404      	adds	r4, #4
 8000d16:	0123      	lsls	r3, r4, #4
 8000d18:	d503      	bpl.n	8000d22 <__aeabi_fmul+0x156>
 8000d1a:	3180      	adds	r1, #128	; 0x80
 8000d1c:	0008      	movs	r0, r1
 8000d1e:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <__aeabi_fmul+0x230>)
 8000d20:	401c      	ands	r4, r3
 8000d22:	28fe      	cmp	r0, #254	; 0xfe
 8000d24:	dcc0      	bgt.n	8000ca8 <__aeabi_fmul+0xdc>
 8000d26:	01a4      	lsls	r4, r4, #6
 8000d28:	0a64      	lsrs	r4, r4, #9
 8000d2a:	b2c0      	uxtb	r0, r0
 8000d2c:	e79a      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000d2e:	0037      	movs	r7, r6
 8000d30:	e78e      	b.n	8000c50 <__aeabi_fmul+0x84>
 8000d32:	4652      	mov	r2, sl
 8000d34:	2303      	movs	r3, #3
 8000d36:	431a      	orrs	r2, r3
 8000d38:	4692      	mov	sl, r2
 8000d3a:	2003      	movs	r0, #3
 8000d3c:	e771      	b.n	8000c22 <__aeabi_fmul+0x56>
 8000d3e:	4648      	mov	r0, r9
 8000d40:	f001 fcbc 	bl	80026bc <__clzsi2>
 8000d44:	464a      	mov	r2, r9
 8000d46:	1f43      	subs	r3, r0, #5
 8000d48:	409a      	lsls	r2, r3
 8000d4a:	1a2d      	subs	r5, r5, r0
 8000d4c:	4691      	mov	r9, r2
 8000d4e:	2000      	movs	r0, #0
 8000d50:	3d76      	subs	r5, #118	; 0x76
 8000d52:	e766      	b.n	8000c22 <__aeabi_fmul+0x56>
 8000d54:	230c      	movs	r3, #12
 8000d56:	469a      	mov	sl, r3
 8000d58:	3b09      	subs	r3, #9
 8000d5a:	25ff      	movs	r5, #255	; 0xff
 8000d5c:	469b      	mov	fp, r3
 8000d5e:	e74d      	b.n	8000bfc <__aeabi_fmul+0x30>
 8000d60:	0020      	movs	r0, r4
 8000d62:	f001 fcab 	bl	80026bc <__clzsi2>
 8000d66:	2576      	movs	r5, #118	; 0x76
 8000d68:	1f43      	subs	r3, r0, #5
 8000d6a:	409c      	lsls	r4, r3
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	426d      	negs	r5, r5
 8000d70:	469a      	mov	sl, r3
 8000d72:	469b      	mov	fp, r3
 8000d74:	1a2d      	subs	r5, r5, r0
 8000d76:	e741      	b.n	8000bfc <__aeabi_fmul+0x30>
 8000d78:	2480      	movs	r4, #128	; 0x80
 8000d7a:	2700      	movs	r7, #0
 8000d7c:	20ff      	movs	r0, #255	; 0xff
 8000d7e:	03e4      	lsls	r4, r4, #15
 8000d80:	e770      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000d82:	2301      	movs	r3, #1
 8000d84:	1a1b      	subs	r3, r3, r0
 8000d86:	2b1b      	cmp	r3, #27
 8000d88:	dd00      	ble.n	8000d8c <__aeabi_fmul+0x1c0>
 8000d8a:	e769      	b.n	8000c60 <__aeabi_fmul+0x94>
 8000d8c:	319e      	adds	r1, #158	; 0x9e
 8000d8e:	0020      	movs	r0, r4
 8000d90:	408c      	lsls	r4, r1
 8000d92:	40d8      	lsrs	r0, r3
 8000d94:	1e63      	subs	r3, r4, #1
 8000d96:	419c      	sbcs	r4, r3
 8000d98:	4304      	orrs	r4, r0
 8000d9a:	0763      	lsls	r3, r4, #29
 8000d9c:	d004      	beq.n	8000da8 <__aeabi_fmul+0x1dc>
 8000d9e:	230f      	movs	r3, #15
 8000da0:	4023      	ands	r3, r4
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d000      	beq.n	8000da8 <__aeabi_fmul+0x1dc>
 8000da6:	3404      	adds	r4, #4
 8000da8:	0163      	lsls	r3, r4, #5
 8000daa:	d51a      	bpl.n	8000de2 <__aeabi_fmul+0x216>
 8000dac:	2001      	movs	r0, #1
 8000dae:	2400      	movs	r4, #0
 8000db0:	e758      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000db2:	2080      	movs	r0, #128	; 0x80
 8000db4:	03c0      	lsls	r0, r0, #15
 8000db6:	4204      	tst	r4, r0
 8000db8:	d009      	beq.n	8000dce <__aeabi_fmul+0x202>
 8000dba:	464b      	mov	r3, r9
 8000dbc:	4203      	tst	r3, r0
 8000dbe:	d106      	bne.n	8000dce <__aeabi_fmul+0x202>
 8000dc0:	464c      	mov	r4, r9
 8000dc2:	4304      	orrs	r4, r0
 8000dc4:	0264      	lsls	r4, r4, #9
 8000dc6:	4647      	mov	r7, r8
 8000dc8:	20ff      	movs	r0, #255	; 0xff
 8000dca:	0a64      	lsrs	r4, r4, #9
 8000dcc:	e74a      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000dce:	2080      	movs	r0, #128	; 0x80
 8000dd0:	03c0      	lsls	r0, r0, #15
 8000dd2:	4304      	orrs	r4, r0
 8000dd4:	0264      	lsls	r4, r4, #9
 8000dd6:	0037      	movs	r7, r6
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	0a64      	lsrs	r4, r4, #9
 8000ddc:	e742      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000dde:	0029      	movs	r1, r5
 8000de0:	e78e      	b.n	8000d00 <__aeabi_fmul+0x134>
 8000de2:	01a4      	lsls	r4, r4, #6
 8000de4:	2000      	movs	r0, #0
 8000de6:	0a64      	lsrs	r4, r4, #9
 8000de8:	e73c      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000dea:	2080      	movs	r0, #128	; 0x80
 8000dec:	03c0      	lsls	r0, r0, #15
 8000dee:	4304      	orrs	r4, r0
 8000df0:	0264      	lsls	r4, r4, #9
 8000df2:	20ff      	movs	r0, #255	; 0xff
 8000df4:	0a64      	lsrs	r4, r4, #9
 8000df6:	e735      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000df8:	08006ba0 	.word	0x08006ba0
 8000dfc:	f7ffffff 	.word	0xf7ffffff

08000e00 <__aeabi_fsub>:
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e02:	4646      	mov	r6, r8
 8000e04:	46d6      	mov	lr, sl
 8000e06:	464f      	mov	r7, r9
 8000e08:	0243      	lsls	r3, r0, #9
 8000e0a:	0a5b      	lsrs	r3, r3, #9
 8000e0c:	00da      	lsls	r2, r3, #3
 8000e0e:	4694      	mov	ip, r2
 8000e10:	024a      	lsls	r2, r1, #9
 8000e12:	b5c0      	push	{r6, r7, lr}
 8000e14:	0044      	lsls	r4, r0, #1
 8000e16:	0a56      	lsrs	r6, r2, #9
 8000e18:	1c05      	adds	r5, r0, #0
 8000e1a:	46b0      	mov	r8, r6
 8000e1c:	0e24      	lsrs	r4, r4, #24
 8000e1e:	004e      	lsls	r6, r1, #1
 8000e20:	0992      	lsrs	r2, r2, #6
 8000e22:	001f      	movs	r7, r3
 8000e24:	0020      	movs	r0, r4
 8000e26:	4692      	mov	sl, r2
 8000e28:	0fed      	lsrs	r5, r5, #31
 8000e2a:	0e36      	lsrs	r6, r6, #24
 8000e2c:	0fc9      	lsrs	r1, r1, #31
 8000e2e:	2eff      	cmp	r6, #255	; 0xff
 8000e30:	d100      	bne.n	8000e34 <__aeabi_fsub+0x34>
 8000e32:	e07f      	b.n	8000f34 <__aeabi_fsub+0x134>
 8000e34:	2201      	movs	r2, #1
 8000e36:	4051      	eors	r1, r2
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d051      	beq.n	8000ee0 <__aeabi_fsub+0xe0>
 8000e3c:	1ba2      	subs	r2, r4, r6
 8000e3e:	4691      	mov	r9, r2
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	dc00      	bgt.n	8000e46 <__aeabi_fsub+0x46>
 8000e44:	e07e      	b.n	8000f44 <__aeabi_fsub+0x144>
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	d100      	bne.n	8000e4c <__aeabi_fsub+0x4c>
 8000e4a:	e099      	b.n	8000f80 <__aeabi_fsub+0x180>
 8000e4c:	2cff      	cmp	r4, #255	; 0xff
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_fsub+0x52>
 8000e50:	e08c      	b.n	8000f6c <__aeabi_fsub+0x16c>
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	4652      	mov	r2, sl
 8000e56:	04db      	lsls	r3, r3, #19
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	4692      	mov	sl, r2
 8000e5c:	464a      	mov	r2, r9
 8000e5e:	2301      	movs	r3, #1
 8000e60:	2a1b      	cmp	r2, #27
 8000e62:	dc08      	bgt.n	8000e76 <__aeabi_fsub+0x76>
 8000e64:	4653      	mov	r3, sl
 8000e66:	2120      	movs	r1, #32
 8000e68:	40d3      	lsrs	r3, r2
 8000e6a:	1a89      	subs	r1, r1, r2
 8000e6c:	4652      	mov	r2, sl
 8000e6e:	408a      	lsls	r2, r1
 8000e70:	1e51      	subs	r1, r2, #1
 8000e72:	418a      	sbcs	r2, r1
 8000e74:	4313      	orrs	r3, r2
 8000e76:	4662      	mov	r2, ip
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	015a      	lsls	r2, r3, #5
 8000e7c:	d400      	bmi.n	8000e80 <__aeabi_fsub+0x80>
 8000e7e:	e0f3      	b.n	8001068 <__aeabi_fsub+0x268>
 8000e80:	019b      	lsls	r3, r3, #6
 8000e82:	099e      	lsrs	r6, r3, #6
 8000e84:	0030      	movs	r0, r6
 8000e86:	f001 fc19 	bl	80026bc <__clzsi2>
 8000e8a:	3805      	subs	r0, #5
 8000e8c:	4086      	lsls	r6, r0
 8000e8e:	4284      	cmp	r4, r0
 8000e90:	dd00      	ble.n	8000e94 <__aeabi_fsub+0x94>
 8000e92:	e0f7      	b.n	8001084 <__aeabi_fsub+0x284>
 8000e94:	0032      	movs	r2, r6
 8000e96:	1b04      	subs	r4, r0, r4
 8000e98:	2020      	movs	r0, #32
 8000e9a:	3401      	adds	r4, #1
 8000e9c:	40e2      	lsrs	r2, r4
 8000e9e:	1b04      	subs	r4, r0, r4
 8000ea0:	40a6      	lsls	r6, r4
 8000ea2:	0033      	movs	r3, r6
 8000ea4:	1e5e      	subs	r6, r3, #1
 8000ea6:	41b3      	sbcs	r3, r6
 8000ea8:	2400      	movs	r4, #0
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	075a      	lsls	r2, r3, #29
 8000eae:	d004      	beq.n	8000eba <__aeabi_fsub+0xba>
 8000eb0:	220f      	movs	r2, #15
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	2a04      	cmp	r2, #4
 8000eb6:	d000      	beq.n	8000eba <__aeabi_fsub+0xba>
 8000eb8:	3304      	adds	r3, #4
 8000eba:	015a      	lsls	r2, r3, #5
 8000ebc:	d400      	bmi.n	8000ec0 <__aeabi_fsub+0xc0>
 8000ebe:	e0d6      	b.n	800106e <__aeabi_fsub+0x26e>
 8000ec0:	1c62      	adds	r2, r4, #1
 8000ec2:	2cfe      	cmp	r4, #254	; 0xfe
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_fsub+0xc8>
 8000ec6:	e0da      	b.n	800107e <__aeabi_fsub+0x27e>
 8000ec8:	019b      	lsls	r3, r3, #6
 8000eca:	0a5f      	lsrs	r7, r3, #9
 8000ecc:	b2d0      	uxtb	r0, r2
 8000ece:	05c0      	lsls	r0, r0, #23
 8000ed0:	4338      	orrs	r0, r7
 8000ed2:	07ed      	lsls	r5, r5, #31
 8000ed4:	4328      	orrs	r0, r5
 8000ed6:	bce0      	pop	{r5, r6, r7}
 8000ed8:	46ba      	mov	sl, r7
 8000eda:	46b1      	mov	r9, r6
 8000edc:	46a8      	mov	r8, r5
 8000ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee0:	1ba2      	subs	r2, r4, r6
 8000ee2:	4691      	mov	r9, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	dd63      	ble.n	8000fb0 <__aeabi_fsub+0x1b0>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d100      	bne.n	8000eee <__aeabi_fsub+0xee>
 8000eec:	e099      	b.n	8001022 <__aeabi_fsub+0x222>
 8000eee:	2cff      	cmp	r4, #255	; 0xff
 8000ef0:	d03c      	beq.n	8000f6c <__aeabi_fsub+0x16c>
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	4652      	mov	r2, sl
 8000ef6:	04db      	lsls	r3, r3, #19
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	4692      	mov	sl, r2
 8000efc:	464a      	mov	r2, r9
 8000efe:	2301      	movs	r3, #1
 8000f00:	2a1b      	cmp	r2, #27
 8000f02:	dc08      	bgt.n	8000f16 <__aeabi_fsub+0x116>
 8000f04:	4653      	mov	r3, sl
 8000f06:	2120      	movs	r1, #32
 8000f08:	40d3      	lsrs	r3, r2
 8000f0a:	1a89      	subs	r1, r1, r2
 8000f0c:	4652      	mov	r2, sl
 8000f0e:	408a      	lsls	r2, r1
 8000f10:	1e51      	subs	r1, r2, #1
 8000f12:	418a      	sbcs	r2, r1
 8000f14:	4313      	orrs	r3, r2
 8000f16:	4463      	add	r3, ip
 8000f18:	015a      	lsls	r2, r3, #5
 8000f1a:	d400      	bmi.n	8000f1e <__aeabi_fsub+0x11e>
 8000f1c:	e0a4      	b.n	8001068 <__aeabi_fsub+0x268>
 8000f1e:	3401      	adds	r4, #1
 8000f20:	2cff      	cmp	r4, #255	; 0xff
 8000f22:	d100      	bne.n	8000f26 <__aeabi_fsub+0x126>
 8000f24:	e0ab      	b.n	800107e <__aeabi_fsub+0x27e>
 8000f26:	2201      	movs	r2, #1
 8000f28:	4997      	ldr	r1, [pc, #604]	; (8001188 <__aeabi_fsub+0x388>)
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	085b      	lsrs	r3, r3, #1
 8000f2e:	400b      	ands	r3, r1
 8000f30:	4313      	orrs	r3, r2
 8000f32:	e7bb      	b.n	8000eac <__aeabi_fsub+0xac>
 8000f34:	2a00      	cmp	r2, #0
 8000f36:	d032      	beq.n	8000f9e <__aeabi_fsub+0x19e>
 8000f38:	428d      	cmp	r5, r1
 8000f3a:	d035      	beq.n	8000fa8 <__aeabi_fsub+0x1a8>
 8000f3c:	22ff      	movs	r2, #255	; 0xff
 8000f3e:	4252      	negs	r2, r2
 8000f40:	4691      	mov	r9, r2
 8000f42:	44a1      	add	r9, r4
 8000f44:	464a      	mov	r2, r9
 8000f46:	2a00      	cmp	r2, #0
 8000f48:	d051      	beq.n	8000fee <__aeabi_fsub+0x1ee>
 8000f4a:	1b30      	subs	r0, r6, r4
 8000f4c:	2c00      	cmp	r4, #0
 8000f4e:	d000      	beq.n	8000f52 <__aeabi_fsub+0x152>
 8000f50:	e09c      	b.n	800108c <__aeabi_fsub+0x28c>
 8000f52:	4663      	mov	r3, ip
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d100      	bne.n	8000f5a <__aeabi_fsub+0x15a>
 8000f58:	e0df      	b.n	800111a <__aeabi_fsub+0x31a>
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_fsub+0x162>
 8000f60:	e0f7      	b.n	8001152 <__aeabi_fsub+0x352>
 8000f62:	2eff      	cmp	r6, #255	; 0xff
 8000f64:	d000      	beq.n	8000f68 <__aeabi_fsub+0x168>
 8000f66:	e099      	b.n	800109c <__aeabi_fsub+0x29c>
 8000f68:	000d      	movs	r5, r1
 8000f6a:	4643      	mov	r3, r8
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_fsub+0x172>
 8000f70:	e085      	b.n	800107e <__aeabi_fsub+0x27e>
 8000f72:	2780      	movs	r7, #128	; 0x80
 8000f74:	03ff      	lsls	r7, r7, #15
 8000f76:	431f      	orrs	r7, r3
 8000f78:	027f      	lsls	r7, r7, #9
 8000f7a:	20ff      	movs	r0, #255	; 0xff
 8000f7c:	0a7f      	lsrs	r7, r7, #9
 8000f7e:	e7a6      	b.n	8000ece <__aeabi_fsub+0xce>
 8000f80:	4652      	mov	r2, sl
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	d074      	beq.n	8001070 <__aeabi_fsub+0x270>
 8000f86:	2201      	movs	r2, #1
 8000f88:	4252      	negs	r2, r2
 8000f8a:	4690      	mov	r8, r2
 8000f8c:	44c1      	add	r9, r8
 8000f8e:	464a      	mov	r2, r9
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	d100      	bne.n	8000f96 <__aeabi_fsub+0x196>
 8000f94:	e0c8      	b.n	8001128 <__aeabi_fsub+0x328>
 8000f96:	2cff      	cmp	r4, #255	; 0xff
 8000f98:	d000      	beq.n	8000f9c <__aeabi_fsub+0x19c>
 8000f9a:	e75f      	b.n	8000e5c <__aeabi_fsub+0x5c>
 8000f9c:	e7e6      	b.n	8000f6c <__aeabi_fsub+0x16c>
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4051      	eors	r1, r2
 8000fa2:	42a9      	cmp	r1, r5
 8000fa4:	d000      	beq.n	8000fa8 <__aeabi_fsub+0x1a8>
 8000fa6:	e749      	b.n	8000e3c <__aeabi_fsub+0x3c>
 8000fa8:	22ff      	movs	r2, #255	; 0xff
 8000faa:	4252      	negs	r2, r2
 8000fac:	4691      	mov	r9, r2
 8000fae:	44a1      	add	r9, r4
 8000fb0:	464a      	mov	r2, r9
 8000fb2:	2a00      	cmp	r2, #0
 8000fb4:	d043      	beq.n	800103e <__aeabi_fsub+0x23e>
 8000fb6:	1b31      	subs	r1, r6, r4
 8000fb8:	2c00      	cmp	r4, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fsub+0x1be>
 8000fbc:	e08c      	b.n	80010d8 <__aeabi_fsub+0x2d8>
 8000fbe:	2eff      	cmp	r6, #255	; 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0x1c4>
 8000fc2:	e092      	b.n	80010ea <__aeabi_fsub+0x2ea>
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	4662      	mov	r2, ip
 8000fc8:	04db      	lsls	r3, r3, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	4694      	mov	ip, r2
 8000fce:	2301      	movs	r3, #1
 8000fd0:	291b      	cmp	r1, #27
 8000fd2:	dc09      	bgt.n	8000fe8 <__aeabi_fsub+0x1e8>
 8000fd4:	2020      	movs	r0, #32
 8000fd6:	4663      	mov	r3, ip
 8000fd8:	4662      	mov	r2, ip
 8000fda:	40cb      	lsrs	r3, r1
 8000fdc:	1a41      	subs	r1, r0, r1
 8000fde:	408a      	lsls	r2, r1
 8000fe0:	0011      	movs	r1, r2
 8000fe2:	1e48      	subs	r0, r1, #1
 8000fe4:	4181      	sbcs	r1, r0
 8000fe6:	430b      	orrs	r3, r1
 8000fe8:	0034      	movs	r4, r6
 8000fea:	4453      	add	r3, sl
 8000fec:	e794      	b.n	8000f18 <__aeabi_fsub+0x118>
 8000fee:	22fe      	movs	r2, #254	; 0xfe
 8000ff0:	1c66      	adds	r6, r4, #1
 8000ff2:	4232      	tst	r2, r6
 8000ff4:	d164      	bne.n	80010c0 <__aeabi_fsub+0x2c0>
 8000ff6:	2c00      	cmp	r4, #0
 8000ff8:	d000      	beq.n	8000ffc <__aeabi_fsub+0x1fc>
 8000ffa:	e082      	b.n	8001102 <__aeabi_fsub+0x302>
 8000ffc:	4663      	mov	r3, ip
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d100      	bne.n	8001004 <__aeabi_fsub+0x204>
 8001002:	e0ab      	b.n	800115c <__aeabi_fsub+0x35c>
 8001004:	4653      	mov	r3, sl
 8001006:	2b00      	cmp	r3, #0
 8001008:	d100      	bne.n	800100c <__aeabi_fsub+0x20c>
 800100a:	e760      	b.n	8000ece <__aeabi_fsub+0xce>
 800100c:	4663      	mov	r3, ip
 800100e:	4652      	mov	r2, sl
 8001010:	1a9b      	subs	r3, r3, r2
 8001012:	015a      	lsls	r2, r3, #5
 8001014:	d400      	bmi.n	8001018 <__aeabi_fsub+0x218>
 8001016:	e0aa      	b.n	800116e <__aeabi_fsub+0x36e>
 8001018:	4663      	mov	r3, ip
 800101a:	4652      	mov	r2, sl
 800101c:	000d      	movs	r5, r1
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	e744      	b.n	8000eac <__aeabi_fsub+0xac>
 8001022:	4652      	mov	r2, sl
 8001024:	2a00      	cmp	r2, #0
 8001026:	d023      	beq.n	8001070 <__aeabi_fsub+0x270>
 8001028:	2201      	movs	r2, #1
 800102a:	4252      	negs	r2, r2
 800102c:	4690      	mov	r8, r2
 800102e:	44c1      	add	r9, r8
 8001030:	464a      	mov	r2, r9
 8001032:	2a00      	cmp	r2, #0
 8001034:	d075      	beq.n	8001122 <__aeabi_fsub+0x322>
 8001036:	2cff      	cmp	r4, #255	; 0xff
 8001038:	d000      	beq.n	800103c <__aeabi_fsub+0x23c>
 800103a:	e75f      	b.n	8000efc <__aeabi_fsub+0xfc>
 800103c:	e796      	b.n	8000f6c <__aeabi_fsub+0x16c>
 800103e:	26fe      	movs	r6, #254	; 0xfe
 8001040:	3401      	adds	r4, #1
 8001042:	4226      	tst	r6, r4
 8001044:	d153      	bne.n	80010ee <__aeabi_fsub+0x2ee>
 8001046:	2800      	cmp	r0, #0
 8001048:	d172      	bne.n	8001130 <__aeabi_fsub+0x330>
 800104a:	4663      	mov	r3, ip
 800104c:	2b00      	cmp	r3, #0
 800104e:	d100      	bne.n	8001052 <__aeabi_fsub+0x252>
 8001050:	e093      	b.n	800117a <__aeabi_fsub+0x37a>
 8001052:	4653      	mov	r3, sl
 8001054:	2b00      	cmp	r3, #0
 8001056:	d100      	bne.n	800105a <__aeabi_fsub+0x25a>
 8001058:	e739      	b.n	8000ece <__aeabi_fsub+0xce>
 800105a:	4463      	add	r3, ip
 800105c:	2400      	movs	r4, #0
 800105e:	015a      	lsls	r2, r3, #5
 8001060:	d502      	bpl.n	8001068 <__aeabi_fsub+0x268>
 8001062:	4a4a      	ldr	r2, [pc, #296]	; (800118c <__aeabi_fsub+0x38c>)
 8001064:	3401      	adds	r4, #1
 8001066:	4013      	ands	r3, r2
 8001068:	075a      	lsls	r2, r3, #29
 800106a:	d000      	beq.n	800106e <__aeabi_fsub+0x26e>
 800106c:	e720      	b.n	8000eb0 <__aeabi_fsub+0xb0>
 800106e:	08db      	lsrs	r3, r3, #3
 8001070:	2cff      	cmp	r4, #255	; 0xff
 8001072:	d100      	bne.n	8001076 <__aeabi_fsub+0x276>
 8001074:	e77a      	b.n	8000f6c <__aeabi_fsub+0x16c>
 8001076:	025b      	lsls	r3, r3, #9
 8001078:	0a5f      	lsrs	r7, r3, #9
 800107a:	b2e0      	uxtb	r0, r4
 800107c:	e727      	b.n	8000ece <__aeabi_fsub+0xce>
 800107e:	20ff      	movs	r0, #255	; 0xff
 8001080:	2700      	movs	r7, #0
 8001082:	e724      	b.n	8000ece <__aeabi_fsub+0xce>
 8001084:	4b41      	ldr	r3, [pc, #260]	; (800118c <__aeabi_fsub+0x38c>)
 8001086:	1a24      	subs	r4, r4, r0
 8001088:	4033      	ands	r3, r6
 800108a:	e70f      	b.n	8000eac <__aeabi_fsub+0xac>
 800108c:	2eff      	cmp	r6, #255	; 0xff
 800108e:	d100      	bne.n	8001092 <__aeabi_fsub+0x292>
 8001090:	e76a      	b.n	8000f68 <__aeabi_fsub+0x168>
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	4662      	mov	r2, ip
 8001096:	04db      	lsls	r3, r3, #19
 8001098:	431a      	orrs	r2, r3
 800109a:	4694      	mov	ip, r2
 800109c:	2301      	movs	r3, #1
 800109e:	281b      	cmp	r0, #27
 80010a0:	dc09      	bgt.n	80010b6 <__aeabi_fsub+0x2b6>
 80010a2:	2420      	movs	r4, #32
 80010a4:	4663      	mov	r3, ip
 80010a6:	4662      	mov	r2, ip
 80010a8:	40c3      	lsrs	r3, r0
 80010aa:	1a20      	subs	r0, r4, r0
 80010ac:	4082      	lsls	r2, r0
 80010ae:	0010      	movs	r0, r2
 80010b0:	1e44      	subs	r4, r0, #1
 80010b2:	41a0      	sbcs	r0, r4
 80010b4:	4303      	orrs	r3, r0
 80010b6:	4652      	mov	r2, sl
 80010b8:	000d      	movs	r5, r1
 80010ba:	0034      	movs	r4, r6
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	e6dc      	b.n	8000e7a <__aeabi_fsub+0x7a>
 80010c0:	4663      	mov	r3, ip
 80010c2:	4652      	mov	r2, sl
 80010c4:	1a9e      	subs	r6, r3, r2
 80010c6:	0173      	lsls	r3, r6, #5
 80010c8:	d417      	bmi.n	80010fa <__aeabi_fsub+0x2fa>
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	d000      	beq.n	80010d0 <__aeabi_fsub+0x2d0>
 80010ce:	e6d9      	b.n	8000e84 <__aeabi_fsub+0x84>
 80010d0:	2500      	movs	r5, #0
 80010d2:	2000      	movs	r0, #0
 80010d4:	2700      	movs	r7, #0
 80010d6:	e6fa      	b.n	8000ece <__aeabi_fsub+0xce>
 80010d8:	4663      	mov	r3, ip
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d044      	beq.n	8001168 <__aeabi_fsub+0x368>
 80010de:	3901      	subs	r1, #1
 80010e0:	2900      	cmp	r1, #0
 80010e2:	d04c      	beq.n	800117e <__aeabi_fsub+0x37e>
 80010e4:	2eff      	cmp	r6, #255	; 0xff
 80010e6:	d000      	beq.n	80010ea <__aeabi_fsub+0x2ea>
 80010e8:	e771      	b.n	8000fce <__aeabi_fsub+0x1ce>
 80010ea:	4643      	mov	r3, r8
 80010ec:	e73e      	b.n	8000f6c <__aeabi_fsub+0x16c>
 80010ee:	2cff      	cmp	r4, #255	; 0xff
 80010f0:	d0c5      	beq.n	800107e <__aeabi_fsub+0x27e>
 80010f2:	4652      	mov	r2, sl
 80010f4:	4462      	add	r2, ip
 80010f6:	0853      	lsrs	r3, r2, #1
 80010f8:	e7b6      	b.n	8001068 <__aeabi_fsub+0x268>
 80010fa:	4663      	mov	r3, ip
 80010fc:	000d      	movs	r5, r1
 80010fe:	1ad6      	subs	r6, r2, r3
 8001100:	e6c0      	b.n	8000e84 <__aeabi_fsub+0x84>
 8001102:	4662      	mov	r2, ip
 8001104:	2a00      	cmp	r2, #0
 8001106:	d116      	bne.n	8001136 <__aeabi_fsub+0x336>
 8001108:	4653      	mov	r3, sl
 800110a:	2b00      	cmp	r3, #0
 800110c:	d000      	beq.n	8001110 <__aeabi_fsub+0x310>
 800110e:	e72b      	b.n	8000f68 <__aeabi_fsub+0x168>
 8001110:	2780      	movs	r7, #128	; 0x80
 8001112:	2500      	movs	r5, #0
 8001114:	20ff      	movs	r0, #255	; 0xff
 8001116:	03ff      	lsls	r7, r7, #15
 8001118:	e6d9      	b.n	8000ece <__aeabi_fsub+0xce>
 800111a:	000d      	movs	r5, r1
 800111c:	4643      	mov	r3, r8
 800111e:	0034      	movs	r4, r6
 8001120:	e7a6      	b.n	8001070 <__aeabi_fsub+0x270>
 8001122:	4653      	mov	r3, sl
 8001124:	4463      	add	r3, ip
 8001126:	e6f7      	b.n	8000f18 <__aeabi_fsub+0x118>
 8001128:	4663      	mov	r3, ip
 800112a:	4652      	mov	r2, sl
 800112c:	1a9b      	subs	r3, r3, r2
 800112e:	e6a4      	b.n	8000e7a <__aeabi_fsub+0x7a>
 8001130:	4662      	mov	r2, ip
 8001132:	2a00      	cmp	r2, #0
 8001134:	d0d9      	beq.n	80010ea <__aeabi_fsub+0x2ea>
 8001136:	4652      	mov	r2, sl
 8001138:	2a00      	cmp	r2, #0
 800113a:	d100      	bne.n	800113e <__aeabi_fsub+0x33e>
 800113c:	e716      	b.n	8000f6c <__aeabi_fsub+0x16c>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	03d2      	lsls	r2, r2, #15
 8001142:	4213      	tst	r3, r2
 8001144:	d100      	bne.n	8001148 <__aeabi_fsub+0x348>
 8001146:	e711      	b.n	8000f6c <__aeabi_fsub+0x16c>
 8001148:	4640      	mov	r0, r8
 800114a:	4210      	tst	r0, r2
 800114c:	d000      	beq.n	8001150 <__aeabi_fsub+0x350>
 800114e:	e70d      	b.n	8000f6c <__aeabi_fsub+0x16c>
 8001150:	e70a      	b.n	8000f68 <__aeabi_fsub+0x168>
 8001152:	4652      	mov	r2, sl
 8001154:	000d      	movs	r5, r1
 8001156:	0034      	movs	r4, r6
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	e68e      	b.n	8000e7a <__aeabi_fsub+0x7a>
 800115c:	4653      	mov	r3, sl
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <__aeabi_fsub+0x374>
 8001162:	000d      	movs	r5, r1
 8001164:	4647      	mov	r7, r8
 8001166:	e6b2      	b.n	8000ece <__aeabi_fsub+0xce>
 8001168:	4643      	mov	r3, r8
 800116a:	0034      	movs	r4, r6
 800116c:	e780      	b.n	8001070 <__aeabi_fsub+0x270>
 800116e:	2b00      	cmp	r3, #0
 8001170:	d000      	beq.n	8001174 <__aeabi_fsub+0x374>
 8001172:	e779      	b.n	8001068 <__aeabi_fsub+0x268>
 8001174:	2500      	movs	r5, #0
 8001176:	2700      	movs	r7, #0
 8001178:	e6a9      	b.n	8000ece <__aeabi_fsub+0xce>
 800117a:	4647      	mov	r7, r8
 800117c:	e6a7      	b.n	8000ece <__aeabi_fsub+0xce>
 800117e:	4653      	mov	r3, sl
 8001180:	0034      	movs	r4, r6
 8001182:	4463      	add	r3, ip
 8001184:	e6c8      	b.n	8000f18 <__aeabi_fsub+0x118>
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	7dffffff 	.word	0x7dffffff
 800118c:	fbffffff 	.word	0xfbffffff

08001190 <__aeabi_f2iz>:
 8001190:	0241      	lsls	r1, r0, #9
 8001192:	0042      	lsls	r2, r0, #1
 8001194:	0fc3      	lsrs	r3, r0, #31
 8001196:	0a49      	lsrs	r1, r1, #9
 8001198:	2000      	movs	r0, #0
 800119a:	0e12      	lsrs	r2, r2, #24
 800119c:	2a7e      	cmp	r2, #126	; 0x7e
 800119e:	d903      	bls.n	80011a8 <__aeabi_f2iz+0x18>
 80011a0:	2a9d      	cmp	r2, #157	; 0x9d
 80011a2:	d902      	bls.n	80011aa <__aeabi_f2iz+0x1a>
 80011a4:	4a09      	ldr	r2, [pc, #36]	; (80011cc <__aeabi_f2iz+0x3c>)
 80011a6:	1898      	adds	r0, r3, r2
 80011a8:	4770      	bx	lr
 80011aa:	2080      	movs	r0, #128	; 0x80
 80011ac:	0400      	lsls	r0, r0, #16
 80011ae:	4301      	orrs	r1, r0
 80011b0:	2a95      	cmp	r2, #149	; 0x95
 80011b2:	dc07      	bgt.n	80011c4 <__aeabi_f2iz+0x34>
 80011b4:	2096      	movs	r0, #150	; 0x96
 80011b6:	1a82      	subs	r2, r0, r2
 80011b8:	40d1      	lsrs	r1, r2
 80011ba:	4248      	negs	r0, r1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f3      	bne.n	80011a8 <__aeabi_f2iz+0x18>
 80011c0:	0008      	movs	r0, r1
 80011c2:	e7f1      	b.n	80011a8 <__aeabi_f2iz+0x18>
 80011c4:	3a96      	subs	r2, #150	; 0x96
 80011c6:	4091      	lsls	r1, r2
 80011c8:	e7f7      	b.n	80011ba <__aeabi_f2iz+0x2a>
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	7fffffff 	.word	0x7fffffff

080011d0 <__aeabi_i2f>:
 80011d0:	b570      	push	{r4, r5, r6, lr}
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d013      	beq.n	80011fe <__aeabi_i2f+0x2e>
 80011d6:	17c3      	asrs	r3, r0, #31
 80011d8:	18c5      	adds	r5, r0, r3
 80011da:	405d      	eors	r5, r3
 80011dc:	0fc4      	lsrs	r4, r0, #31
 80011de:	0028      	movs	r0, r5
 80011e0:	f001 fa6c 	bl	80026bc <__clzsi2>
 80011e4:	239e      	movs	r3, #158	; 0x9e
 80011e6:	0001      	movs	r1, r0
 80011e8:	1a1b      	subs	r3, r3, r0
 80011ea:	2b96      	cmp	r3, #150	; 0x96
 80011ec:	dc0f      	bgt.n	800120e <__aeabi_i2f+0x3e>
 80011ee:	2808      	cmp	r0, #8
 80011f0:	dd01      	ble.n	80011f6 <__aeabi_i2f+0x26>
 80011f2:	3908      	subs	r1, #8
 80011f4:	408d      	lsls	r5, r1
 80011f6:	026d      	lsls	r5, r5, #9
 80011f8:	0a6d      	lsrs	r5, r5, #9
 80011fa:	b2d8      	uxtb	r0, r3
 80011fc:	e002      	b.n	8001204 <__aeabi_i2f+0x34>
 80011fe:	2400      	movs	r4, #0
 8001200:	2000      	movs	r0, #0
 8001202:	2500      	movs	r5, #0
 8001204:	05c0      	lsls	r0, r0, #23
 8001206:	4328      	orrs	r0, r5
 8001208:	07e4      	lsls	r4, r4, #31
 800120a:	4320      	orrs	r0, r4
 800120c:	bd70      	pop	{r4, r5, r6, pc}
 800120e:	2b99      	cmp	r3, #153	; 0x99
 8001210:	dd0b      	ble.n	800122a <__aeabi_i2f+0x5a>
 8001212:	2205      	movs	r2, #5
 8001214:	002e      	movs	r6, r5
 8001216:	1a12      	subs	r2, r2, r0
 8001218:	40d6      	lsrs	r6, r2
 800121a:	0002      	movs	r2, r0
 800121c:	321b      	adds	r2, #27
 800121e:	4095      	lsls	r5, r2
 8001220:	0028      	movs	r0, r5
 8001222:	1e45      	subs	r5, r0, #1
 8001224:	41a8      	sbcs	r0, r5
 8001226:	0035      	movs	r5, r6
 8001228:	4305      	orrs	r5, r0
 800122a:	2905      	cmp	r1, #5
 800122c:	dd01      	ble.n	8001232 <__aeabi_i2f+0x62>
 800122e:	1f4a      	subs	r2, r1, #5
 8001230:	4095      	lsls	r5, r2
 8001232:	002a      	movs	r2, r5
 8001234:	4e08      	ldr	r6, [pc, #32]	; (8001258 <__aeabi_i2f+0x88>)
 8001236:	4032      	ands	r2, r6
 8001238:	0768      	lsls	r0, r5, #29
 800123a:	d009      	beq.n	8001250 <__aeabi_i2f+0x80>
 800123c:	200f      	movs	r0, #15
 800123e:	4028      	ands	r0, r5
 8001240:	2804      	cmp	r0, #4
 8001242:	d005      	beq.n	8001250 <__aeabi_i2f+0x80>
 8001244:	3204      	adds	r2, #4
 8001246:	0150      	lsls	r0, r2, #5
 8001248:	d502      	bpl.n	8001250 <__aeabi_i2f+0x80>
 800124a:	239f      	movs	r3, #159	; 0x9f
 800124c:	4032      	ands	r2, r6
 800124e:	1a5b      	subs	r3, r3, r1
 8001250:	0192      	lsls	r2, r2, #6
 8001252:	0a55      	lsrs	r5, r2, #9
 8001254:	b2d8      	uxtb	r0, r3
 8001256:	e7d5      	b.n	8001204 <__aeabi_i2f+0x34>
 8001258:	fbffffff 	.word	0xfbffffff

0800125c <__aeabi_ui2f>:
 800125c:	b570      	push	{r4, r5, r6, lr}
 800125e:	1e05      	subs	r5, r0, #0
 8001260:	d00e      	beq.n	8001280 <__aeabi_ui2f+0x24>
 8001262:	f001 fa2b 	bl	80026bc <__clzsi2>
 8001266:	239e      	movs	r3, #158	; 0x9e
 8001268:	0004      	movs	r4, r0
 800126a:	1a1b      	subs	r3, r3, r0
 800126c:	2b96      	cmp	r3, #150	; 0x96
 800126e:	dc0c      	bgt.n	800128a <__aeabi_ui2f+0x2e>
 8001270:	2808      	cmp	r0, #8
 8001272:	dd01      	ble.n	8001278 <__aeabi_ui2f+0x1c>
 8001274:	3c08      	subs	r4, #8
 8001276:	40a5      	lsls	r5, r4
 8001278:	026d      	lsls	r5, r5, #9
 800127a:	0a6d      	lsrs	r5, r5, #9
 800127c:	b2d8      	uxtb	r0, r3
 800127e:	e001      	b.n	8001284 <__aeabi_ui2f+0x28>
 8001280:	2000      	movs	r0, #0
 8001282:	2500      	movs	r5, #0
 8001284:	05c0      	lsls	r0, r0, #23
 8001286:	4328      	orrs	r0, r5
 8001288:	bd70      	pop	{r4, r5, r6, pc}
 800128a:	2b99      	cmp	r3, #153	; 0x99
 800128c:	dd09      	ble.n	80012a2 <__aeabi_ui2f+0x46>
 800128e:	0002      	movs	r2, r0
 8001290:	0029      	movs	r1, r5
 8001292:	321b      	adds	r2, #27
 8001294:	4091      	lsls	r1, r2
 8001296:	1e4a      	subs	r2, r1, #1
 8001298:	4191      	sbcs	r1, r2
 800129a:	2205      	movs	r2, #5
 800129c:	1a12      	subs	r2, r2, r0
 800129e:	40d5      	lsrs	r5, r2
 80012a0:	430d      	orrs	r5, r1
 80012a2:	2c05      	cmp	r4, #5
 80012a4:	dd01      	ble.n	80012aa <__aeabi_ui2f+0x4e>
 80012a6:	1f62      	subs	r2, r4, #5
 80012a8:	4095      	lsls	r5, r2
 80012aa:	0029      	movs	r1, r5
 80012ac:	4e08      	ldr	r6, [pc, #32]	; (80012d0 <__aeabi_ui2f+0x74>)
 80012ae:	4031      	ands	r1, r6
 80012b0:	076a      	lsls	r2, r5, #29
 80012b2:	d009      	beq.n	80012c8 <__aeabi_ui2f+0x6c>
 80012b4:	200f      	movs	r0, #15
 80012b6:	4028      	ands	r0, r5
 80012b8:	2804      	cmp	r0, #4
 80012ba:	d005      	beq.n	80012c8 <__aeabi_ui2f+0x6c>
 80012bc:	3104      	adds	r1, #4
 80012be:	014a      	lsls	r2, r1, #5
 80012c0:	d502      	bpl.n	80012c8 <__aeabi_ui2f+0x6c>
 80012c2:	239f      	movs	r3, #159	; 0x9f
 80012c4:	4031      	ands	r1, r6
 80012c6:	1b1b      	subs	r3, r3, r4
 80012c8:	0189      	lsls	r1, r1, #6
 80012ca:	0a4d      	lsrs	r5, r1, #9
 80012cc:	b2d8      	uxtb	r0, r3
 80012ce:	e7d9      	b.n	8001284 <__aeabi_ui2f+0x28>
 80012d0:	fbffffff 	.word	0xfbffffff

080012d4 <__aeabi_dadd>:
 80012d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d6:	464f      	mov	r7, r9
 80012d8:	46d6      	mov	lr, sl
 80012da:	4646      	mov	r6, r8
 80012dc:	000d      	movs	r5, r1
 80012de:	0001      	movs	r1, r0
 80012e0:	0018      	movs	r0, r3
 80012e2:	b5c0      	push	{r6, r7, lr}
 80012e4:	0017      	movs	r7, r2
 80012e6:	032b      	lsls	r3, r5, #12
 80012e8:	0a5a      	lsrs	r2, r3, #9
 80012ea:	0f4b      	lsrs	r3, r1, #29
 80012ec:	4313      	orrs	r3, r2
 80012ee:	00ca      	lsls	r2, r1, #3
 80012f0:	4691      	mov	r9, r2
 80012f2:	0302      	lsls	r2, r0, #12
 80012f4:	006e      	lsls	r6, r5, #1
 80012f6:	0041      	lsls	r1, r0, #1
 80012f8:	0a52      	lsrs	r2, r2, #9
 80012fa:	0fec      	lsrs	r4, r5, #31
 80012fc:	0f7d      	lsrs	r5, r7, #29
 80012fe:	4315      	orrs	r5, r2
 8001300:	0d76      	lsrs	r6, r6, #21
 8001302:	0d49      	lsrs	r1, r1, #21
 8001304:	0fc0      	lsrs	r0, r0, #31
 8001306:	4682      	mov	sl, r0
 8001308:	46ac      	mov	ip, r5
 800130a:	00ff      	lsls	r7, r7, #3
 800130c:	1a72      	subs	r2, r6, r1
 800130e:	4284      	cmp	r4, r0
 8001310:	d100      	bne.n	8001314 <__aeabi_dadd+0x40>
 8001312:	e098      	b.n	8001446 <__aeabi_dadd+0x172>
 8001314:	2a00      	cmp	r2, #0
 8001316:	dc00      	bgt.n	800131a <__aeabi_dadd+0x46>
 8001318:	e081      	b.n	800141e <__aeabi_dadd+0x14a>
 800131a:	2900      	cmp	r1, #0
 800131c:	d100      	bne.n	8001320 <__aeabi_dadd+0x4c>
 800131e:	e0b6      	b.n	800148e <__aeabi_dadd+0x1ba>
 8001320:	49c9      	ldr	r1, [pc, #804]	; (8001648 <__aeabi_dadd+0x374>)
 8001322:	428e      	cmp	r6, r1
 8001324:	d100      	bne.n	8001328 <__aeabi_dadd+0x54>
 8001326:	e172      	b.n	800160e <__aeabi_dadd+0x33a>
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	0028      	movs	r0, r5
 800132c:	0409      	lsls	r1, r1, #16
 800132e:	4308      	orrs	r0, r1
 8001330:	4684      	mov	ip, r0
 8001332:	2a38      	cmp	r2, #56	; 0x38
 8001334:	dd00      	ble.n	8001338 <__aeabi_dadd+0x64>
 8001336:	e15e      	b.n	80015f6 <__aeabi_dadd+0x322>
 8001338:	2a1f      	cmp	r2, #31
 800133a:	dd00      	ble.n	800133e <__aeabi_dadd+0x6a>
 800133c:	e1ee      	b.n	800171c <__aeabi_dadd+0x448>
 800133e:	2020      	movs	r0, #32
 8001340:	0039      	movs	r1, r7
 8001342:	4665      	mov	r5, ip
 8001344:	1a80      	subs	r0, r0, r2
 8001346:	4087      	lsls	r7, r0
 8001348:	40d1      	lsrs	r1, r2
 800134a:	4085      	lsls	r5, r0
 800134c:	430d      	orrs	r5, r1
 800134e:	0039      	movs	r1, r7
 8001350:	1e4f      	subs	r7, r1, #1
 8001352:	41b9      	sbcs	r1, r7
 8001354:	4667      	mov	r7, ip
 8001356:	40d7      	lsrs	r7, r2
 8001358:	4329      	orrs	r1, r5
 800135a:	1bdb      	subs	r3, r3, r7
 800135c:	464a      	mov	r2, r9
 800135e:	1a55      	subs	r5, r2, r1
 8001360:	45a9      	cmp	r9, r5
 8001362:	4189      	sbcs	r1, r1
 8001364:	4249      	negs	r1, r1
 8001366:	1a5b      	subs	r3, r3, r1
 8001368:	4698      	mov	r8, r3
 800136a:	4643      	mov	r3, r8
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	d400      	bmi.n	8001372 <__aeabi_dadd+0x9e>
 8001370:	e0cc      	b.n	800150c <__aeabi_dadd+0x238>
 8001372:	4643      	mov	r3, r8
 8001374:	025b      	lsls	r3, r3, #9
 8001376:	0a5b      	lsrs	r3, r3, #9
 8001378:	4698      	mov	r8, r3
 800137a:	4643      	mov	r3, r8
 800137c:	2b00      	cmp	r3, #0
 800137e:	d100      	bne.n	8001382 <__aeabi_dadd+0xae>
 8001380:	e12c      	b.n	80015dc <__aeabi_dadd+0x308>
 8001382:	4640      	mov	r0, r8
 8001384:	f001 f99a 	bl	80026bc <__clzsi2>
 8001388:	0001      	movs	r1, r0
 800138a:	3908      	subs	r1, #8
 800138c:	2220      	movs	r2, #32
 800138e:	0028      	movs	r0, r5
 8001390:	4643      	mov	r3, r8
 8001392:	1a52      	subs	r2, r2, r1
 8001394:	408b      	lsls	r3, r1
 8001396:	40d0      	lsrs	r0, r2
 8001398:	408d      	lsls	r5, r1
 800139a:	4303      	orrs	r3, r0
 800139c:	428e      	cmp	r6, r1
 800139e:	dd00      	ble.n	80013a2 <__aeabi_dadd+0xce>
 80013a0:	e117      	b.n	80015d2 <__aeabi_dadd+0x2fe>
 80013a2:	1b8e      	subs	r6, r1, r6
 80013a4:	1c72      	adds	r2, r6, #1
 80013a6:	2a1f      	cmp	r2, #31
 80013a8:	dd00      	ble.n	80013ac <__aeabi_dadd+0xd8>
 80013aa:	e1a7      	b.n	80016fc <__aeabi_dadd+0x428>
 80013ac:	2120      	movs	r1, #32
 80013ae:	0018      	movs	r0, r3
 80013b0:	002e      	movs	r6, r5
 80013b2:	1a89      	subs	r1, r1, r2
 80013b4:	408d      	lsls	r5, r1
 80013b6:	4088      	lsls	r0, r1
 80013b8:	40d6      	lsrs	r6, r2
 80013ba:	40d3      	lsrs	r3, r2
 80013bc:	1e69      	subs	r1, r5, #1
 80013be:	418d      	sbcs	r5, r1
 80013c0:	4330      	orrs	r0, r6
 80013c2:	4698      	mov	r8, r3
 80013c4:	2600      	movs	r6, #0
 80013c6:	4305      	orrs	r5, r0
 80013c8:	076b      	lsls	r3, r5, #29
 80013ca:	d009      	beq.n	80013e0 <__aeabi_dadd+0x10c>
 80013cc:	230f      	movs	r3, #15
 80013ce:	402b      	ands	r3, r5
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d005      	beq.n	80013e0 <__aeabi_dadd+0x10c>
 80013d4:	1d2b      	adds	r3, r5, #4
 80013d6:	42ab      	cmp	r3, r5
 80013d8:	41ad      	sbcs	r5, r5
 80013da:	426d      	negs	r5, r5
 80013dc:	44a8      	add	r8, r5
 80013de:	001d      	movs	r5, r3
 80013e0:	4643      	mov	r3, r8
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	d400      	bmi.n	80013e8 <__aeabi_dadd+0x114>
 80013e6:	e094      	b.n	8001512 <__aeabi_dadd+0x23e>
 80013e8:	4b97      	ldr	r3, [pc, #604]	; (8001648 <__aeabi_dadd+0x374>)
 80013ea:	1c72      	adds	r2, r6, #1
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dadd+0x11e>
 80013f0:	e09d      	b.n	800152e <__aeabi_dadd+0x25a>
 80013f2:	4641      	mov	r1, r8
 80013f4:	4b95      	ldr	r3, [pc, #596]	; (800164c <__aeabi_dadd+0x378>)
 80013f6:	08ed      	lsrs	r5, r5, #3
 80013f8:	4019      	ands	r1, r3
 80013fa:	000b      	movs	r3, r1
 80013fc:	0552      	lsls	r2, r2, #21
 80013fe:	0749      	lsls	r1, r1, #29
 8001400:	025b      	lsls	r3, r3, #9
 8001402:	4329      	orrs	r1, r5
 8001404:	0b1b      	lsrs	r3, r3, #12
 8001406:	0d52      	lsrs	r2, r2, #21
 8001408:	0512      	lsls	r2, r2, #20
 800140a:	4313      	orrs	r3, r2
 800140c:	07e4      	lsls	r4, r4, #31
 800140e:	4323      	orrs	r3, r4
 8001410:	0008      	movs	r0, r1
 8001412:	0019      	movs	r1, r3
 8001414:	bce0      	pop	{r5, r6, r7}
 8001416:	46ba      	mov	sl, r7
 8001418:	46b1      	mov	r9, r6
 800141a:	46a8      	mov	r8, r5
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	2a00      	cmp	r2, #0
 8001420:	d043      	beq.n	80014aa <__aeabi_dadd+0x1d6>
 8001422:	1b8a      	subs	r2, r1, r6
 8001424:	2e00      	cmp	r6, #0
 8001426:	d000      	beq.n	800142a <__aeabi_dadd+0x156>
 8001428:	e12a      	b.n	8001680 <__aeabi_dadd+0x3ac>
 800142a:	464c      	mov	r4, r9
 800142c:	431c      	orrs	r4, r3
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x15e>
 8001430:	e1d1      	b.n	80017d6 <__aeabi_dadd+0x502>
 8001432:	1e54      	subs	r4, r2, #1
 8001434:	2a01      	cmp	r2, #1
 8001436:	d100      	bne.n	800143a <__aeabi_dadd+0x166>
 8001438:	e21f      	b.n	800187a <__aeabi_dadd+0x5a6>
 800143a:	4d83      	ldr	r5, [pc, #524]	; (8001648 <__aeabi_dadd+0x374>)
 800143c:	42aa      	cmp	r2, r5
 800143e:	d100      	bne.n	8001442 <__aeabi_dadd+0x16e>
 8001440:	e272      	b.n	8001928 <__aeabi_dadd+0x654>
 8001442:	0022      	movs	r2, r4
 8001444:	e123      	b.n	800168e <__aeabi_dadd+0x3ba>
 8001446:	2a00      	cmp	r2, #0
 8001448:	dc00      	bgt.n	800144c <__aeabi_dadd+0x178>
 800144a:	e098      	b.n	800157e <__aeabi_dadd+0x2aa>
 800144c:	2900      	cmp	r1, #0
 800144e:	d042      	beq.n	80014d6 <__aeabi_dadd+0x202>
 8001450:	497d      	ldr	r1, [pc, #500]	; (8001648 <__aeabi_dadd+0x374>)
 8001452:	428e      	cmp	r6, r1
 8001454:	d100      	bne.n	8001458 <__aeabi_dadd+0x184>
 8001456:	e0da      	b.n	800160e <__aeabi_dadd+0x33a>
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	0028      	movs	r0, r5
 800145c:	0409      	lsls	r1, r1, #16
 800145e:	4308      	orrs	r0, r1
 8001460:	4684      	mov	ip, r0
 8001462:	2a38      	cmp	r2, #56	; 0x38
 8001464:	dd00      	ble.n	8001468 <__aeabi_dadd+0x194>
 8001466:	e129      	b.n	80016bc <__aeabi_dadd+0x3e8>
 8001468:	2a1f      	cmp	r2, #31
 800146a:	dc00      	bgt.n	800146e <__aeabi_dadd+0x19a>
 800146c:	e187      	b.n	800177e <__aeabi_dadd+0x4aa>
 800146e:	0011      	movs	r1, r2
 8001470:	4665      	mov	r5, ip
 8001472:	3920      	subs	r1, #32
 8001474:	40cd      	lsrs	r5, r1
 8001476:	2a20      	cmp	r2, #32
 8001478:	d004      	beq.n	8001484 <__aeabi_dadd+0x1b0>
 800147a:	2040      	movs	r0, #64	; 0x40
 800147c:	4661      	mov	r1, ip
 800147e:	1a82      	subs	r2, r0, r2
 8001480:	4091      	lsls	r1, r2
 8001482:	430f      	orrs	r7, r1
 8001484:	0039      	movs	r1, r7
 8001486:	1e4f      	subs	r7, r1, #1
 8001488:	41b9      	sbcs	r1, r7
 800148a:	430d      	orrs	r5, r1
 800148c:	e11b      	b.n	80016c6 <__aeabi_dadd+0x3f2>
 800148e:	0029      	movs	r1, r5
 8001490:	4339      	orrs	r1, r7
 8001492:	d100      	bne.n	8001496 <__aeabi_dadd+0x1c2>
 8001494:	e0b5      	b.n	8001602 <__aeabi_dadd+0x32e>
 8001496:	1e51      	subs	r1, r2, #1
 8001498:	2a01      	cmp	r2, #1
 800149a:	d100      	bne.n	800149e <__aeabi_dadd+0x1ca>
 800149c:	e1ab      	b.n	80017f6 <__aeabi_dadd+0x522>
 800149e:	486a      	ldr	r0, [pc, #424]	; (8001648 <__aeabi_dadd+0x374>)
 80014a0:	4282      	cmp	r2, r0
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dadd+0x1d2>
 80014a4:	e1b2      	b.n	800180c <__aeabi_dadd+0x538>
 80014a6:	000a      	movs	r2, r1
 80014a8:	e743      	b.n	8001332 <__aeabi_dadd+0x5e>
 80014aa:	4969      	ldr	r1, [pc, #420]	; (8001650 <__aeabi_dadd+0x37c>)
 80014ac:	1c75      	adds	r5, r6, #1
 80014ae:	420d      	tst	r5, r1
 80014b0:	d000      	beq.n	80014b4 <__aeabi_dadd+0x1e0>
 80014b2:	e0cf      	b.n	8001654 <__aeabi_dadd+0x380>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d000      	beq.n	80014ba <__aeabi_dadd+0x1e6>
 80014b8:	e193      	b.n	80017e2 <__aeabi_dadd+0x50e>
 80014ba:	4649      	mov	r1, r9
 80014bc:	4319      	orrs	r1, r3
 80014be:	d100      	bne.n	80014c2 <__aeabi_dadd+0x1ee>
 80014c0:	e1d1      	b.n	8001866 <__aeabi_dadd+0x592>
 80014c2:	4661      	mov	r1, ip
 80014c4:	4339      	orrs	r1, r7
 80014c6:	d000      	beq.n	80014ca <__aeabi_dadd+0x1f6>
 80014c8:	e1e3      	b.n	8001892 <__aeabi_dadd+0x5be>
 80014ca:	4649      	mov	r1, r9
 80014cc:	0758      	lsls	r0, r3, #29
 80014ce:	08c9      	lsrs	r1, r1, #3
 80014d0:	4301      	orrs	r1, r0
 80014d2:	08db      	lsrs	r3, r3, #3
 80014d4:	e026      	b.n	8001524 <__aeabi_dadd+0x250>
 80014d6:	0029      	movs	r1, r5
 80014d8:	4339      	orrs	r1, r7
 80014da:	d100      	bne.n	80014de <__aeabi_dadd+0x20a>
 80014dc:	e091      	b.n	8001602 <__aeabi_dadd+0x32e>
 80014de:	1e51      	subs	r1, r2, #1
 80014e0:	2a01      	cmp	r2, #1
 80014e2:	d005      	beq.n	80014f0 <__aeabi_dadd+0x21c>
 80014e4:	4858      	ldr	r0, [pc, #352]	; (8001648 <__aeabi_dadd+0x374>)
 80014e6:	4282      	cmp	r2, r0
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x218>
 80014ea:	e18f      	b.n	800180c <__aeabi_dadd+0x538>
 80014ec:	000a      	movs	r2, r1
 80014ee:	e7b8      	b.n	8001462 <__aeabi_dadd+0x18e>
 80014f0:	003d      	movs	r5, r7
 80014f2:	444d      	add	r5, r9
 80014f4:	454d      	cmp	r5, r9
 80014f6:	4189      	sbcs	r1, r1
 80014f8:	4463      	add	r3, ip
 80014fa:	4698      	mov	r8, r3
 80014fc:	4249      	negs	r1, r1
 80014fe:	4488      	add	r8, r1
 8001500:	4643      	mov	r3, r8
 8001502:	2602      	movs	r6, #2
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	d500      	bpl.n	800150a <__aeabi_dadd+0x236>
 8001508:	e0eb      	b.n	80016e2 <__aeabi_dadd+0x40e>
 800150a:	3e01      	subs	r6, #1
 800150c:	076b      	lsls	r3, r5, #29
 800150e:	d000      	beq.n	8001512 <__aeabi_dadd+0x23e>
 8001510:	e75c      	b.n	80013cc <__aeabi_dadd+0xf8>
 8001512:	4643      	mov	r3, r8
 8001514:	08e9      	lsrs	r1, r5, #3
 8001516:	075a      	lsls	r2, r3, #29
 8001518:	4311      	orrs	r1, r2
 800151a:	0032      	movs	r2, r6
 800151c:	08db      	lsrs	r3, r3, #3
 800151e:	484a      	ldr	r0, [pc, #296]	; (8001648 <__aeabi_dadd+0x374>)
 8001520:	4282      	cmp	r2, r0
 8001522:	d021      	beq.n	8001568 <__aeabi_dadd+0x294>
 8001524:	031b      	lsls	r3, r3, #12
 8001526:	0552      	lsls	r2, r2, #21
 8001528:	0b1b      	lsrs	r3, r3, #12
 800152a:	0d52      	lsrs	r2, r2, #21
 800152c:	e76c      	b.n	8001408 <__aeabi_dadd+0x134>
 800152e:	2300      	movs	r3, #0
 8001530:	2100      	movs	r1, #0
 8001532:	e769      	b.n	8001408 <__aeabi_dadd+0x134>
 8001534:	002a      	movs	r2, r5
 8001536:	433a      	orrs	r2, r7
 8001538:	d069      	beq.n	800160e <__aeabi_dadd+0x33a>
 800153a:	464a      	mov	r2, r9
 800153c:	0758      	lsls	r0, r3, #29
 800153e:	08d1      	lsrs	r1, r2, #3
 8001540:	08da      	lsrs	r2, r3, #3
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	031b      	lsls	r3, r3, #12
 8001546:	4308      	orrs	r0, r1
 8001548:	421a      	tst	r2, r3
 800154a:	d007      	beq.n	800155c <__aeabi_dadd+0x288>
 800154c:	0029      	movs	r1, r5
 800154e:	08ed      	lsrs	r5, r5, #3
 8001550:	421d      	tst	r5, r3
 8001552:	d103      	bne.n	800155c <__aeabi_dadd+0x288>
 8001554:	002a      	movs	r2, r5
 8001556:	08ff      	lsrs	r7, r7, #3
 8001558:	0748      	lsls	r0, r1, #29
 800155a:	4338      	orrs	r0, r7
 800155c:	0f43      	lsrs	r3, r0, #29
 800155e:	00c1      	lsls	r1, r0, #3
 8001560:	075b      	lsls	r3, r3, #29
 8001562:	08c9      	lsrs	r1, r1, #3
 8001564:	4319      	orrs	r1, r3
 8001566:	0013      	movs	r3, r2
 8001568:	000a      	movs	r2, r1
 800156a:	431a      	orrs	r2, r3
 800156c:	d100      	bne.n	8001570 <__aeabi_dadd+0x29c>
 800156e:	e213      	b.n	8001998 <__aeabi_dadd+0x6c4>
 8001570:	2280      	movs	r2, #128	; 0x80
 8001572:	0312      	lsls	r2, r2, #12
 8001574:	4313      	orrs	r3, r2
 8001576:	031b      	lsls	r3, r3, #12
 8001578:	4a33      	ldr	r2, [pc, #204]	; (8001648 <__aeabi_dadd+0x374>)
 800157a:	0b1b      	lsrs	r3, r3, #12
 800157c:	e744      	b.n	8001408 <__aeabi_dadd+0x134>
 800157e:	2a00      	cmp	r2, #0
 8001580:	d04b      	beq.n	800161a <__aeabi_dadd+0x346>
 8001582:	1b8a      	subs	r2, r1, r6
 8001584:	2e00      	cmp	r6, #0
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x2b6>
 8001588:	e0e7      	b.n	800175a <__aeabi_dadd+0x486>
 800158a:	482f      	ldr	r0, [pc, #188]	; (8001648 <__aeabi_dadd+0x374>)
 800158c:	4281      	cmp	r1, r0
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x2be>
 8001590:	e195      	b.n	80018be <__aeabi_dadd+0x5ea>
 8001592:	2080      	movs	r0, #128	; 0x80
 8001594:	0400      	lsls	r0, r0, #16
 8001596:	4303      	orrs	r3, r0
 8001598:	2a38      	cmp	r2, #56	; 0x38
 800159a:	dd00      	ble.n	800159e <__aeabi_dadd+0x2ca>
 800159c:	e143      	b.n	8001826 <__aeabi_dadd+0x552>
 800159e:	2a1f      	cmp	r2, #31
 80015a0:	dd00      	ble.n	80015a4 <__aeabi_dadd+0x2d0>
 80015a2:	e1db      	b.n	800195c <__aeabi_dadd+0x688>
 80015a4:	2020      	movs	r0, #32
 80015a6:	001d      	movs	r5, r3
 80015a8:	464e      	mov	r6, r9
 80015aa:	1a80      	subs	r0, r0, r2
 80015ac:	4085      	lsls	r5, r0
 80015ae:	40d6      	lsrs	r6, r2
 80015b0:	4335      	orrs	r5, r6
 80015b2:	464e      	mov	r6, r9
 80015b4:	4086      	lsls	r6, r0
 80015b6:	0030      	movs	r0, r6
 80015b8:	40d3      	lsrs	r3, r2
 80015ba:	1e46      	subs	r6, r0, #1
 80015bc:	41b0      	sbcs	r0, r6
 80015be:	449c      	add	ip, r3
 80015c0:	4305      	orrs	r5, r0
 80015c2:	19ed      	adds	r5, r5, r7
 80015c4:	42bd      	cmp	r5, r7
 80015c6:	419b      	sbcs	r3, r3
 80015c8:	425b      	negs	r3, r3
 80015ca:	4463      	add	r3, ip
 80015cc:	4698      	mov	r8, r3
 80015ce:	000e      	movs	r6, r1
 80015d0:	e07f      	b.n	80016d2 <__aeabi_dadd+0x3fe>
 80015d2:	4a1e      	ldr	r2, [pc, #120]	; (800164c <__aeabi_dadd+0x378>)
 80015d4:	1a76      	subs	r6, r6, r1
 80015d6:	4013      	ands	r3, r2
 80015d8:	4698      	mov	r8, r3
 80015da:	e6f5      	b.n	80013c8 <__aeabi_dadd+0xf4>
 80015dc:	0028      	movs	r0, r5
 80015de:	f001 f86d 	bl	80026bc <__clzsi2>
 80015e2:	0001      	movs	r1, r0
 80015e4:	3118      	adds	r1, #24
 80015e6:	291f      	cmp	r1, #31
 80015e8:	dc00      	bgt.n	80015ec <__aeabi_dadd+0x318>
 80015ea:	e6cf      	b.n	800138c <__aeabi_dadd+0xb8>
 80015ec:	002b      	movs	r3, r5
 80015ee:	3808      	subs	r0, #8
 80015f0:	4083      	lsls	r3, r0
 80015f2:	2500      	movs	r5, #0
 80015f4:	e6d2      	b.n	800139c <__aeabi_dadd+0xc8>
 80015f6:	4662      	mov	r2, ip
 80015f8:	433a      	orrs	r2, r7
 80015fa:	0011      	movs	r1, r2
 80015fc:	1e4f      	subs	r7, r1, #1
 80015fe:	41b9      	sbcs	r1, r7
 8001600:	e6ac      	b.n	800135c <__aeabi_dadd+0x88>
 8001602:	4649      	mov	r1, r9
 8001604:	0758      	lsls	r0, r3, #29
 8001606:	08c9      	lsrs	r1, r1, #3
 8001608:	4301      	orrs	r1, r0
 800160a:	08db      	lsrs	r3, r3, #3
 800160c:	e787      	b.n	800151e <__aeabi_dadd+0x24a>
 800160e:	4649      	mov	r1, r9
 8001610:	075a      	lsls	r2, r3, #29
 8001612:	08c9      	lsrs	r1, r1, #3
 8001614:	4311      	orrs	r1, r2
 8001616:	08db      	lsrs	r3, r3, #3
 8001618:	e7a6      	b.n	8001568 <__aeabi_dadd+0x294>
 800161a:	490d      	ldr	r1, [pc, #52]	; (8001650 <__aeabi_dadd+0x37c>)
 800161c:	1c70      	adds	r0, r6, #1
 800161e:	4208      	tst	r0, r1
 8001620:	d000      	beq.n	8001624 <__aeabi_dadd+0x350>
 8001622:	e0bb      	b.n	800179c <__aeabi_dadd+0x4c8>
 8001624:	2e00      	cmp	r6, #0
 8001626:	d000      	beq.n	800162a <__aeabi_dadd+0x356>
 8001628:	e114      	b.n	8001854 <__aeabi_dadd+0x580>
 800162a:	4649      	mov	r1, r9
 800162c:	4319      	orrs	r1, r3
 800162e:	d100      	bne.n	8001632 <__aeabi_dadd+0x35e>
 8001630:	e175      	b.n	800191e <__aeabi_dadd+0x64a>
 8001632:	0029      	movs	r1, r5
 8001634:	4339      	orrs	r1, r7
 8001636:	d000      	beq.n	800163a <__aeabi_dadd+0x366>
 8001638:	e17e      	b.n	8001938 <__aeabi_dadd+0x664>
 800163a:	4649      	mov	r1, r9
 800163c:	0758      	lsls	r0, r3, #29
 800163e:	08c9      	lsrs	r1, r1, #3
 8001640:	4301      	orrs	r1, r0
 8001642:	08db      	lsrs	r3, r3, #3
 8001644:	e76e      	b.n	8001524 <__aeabi_dadd+0x250>
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	000007ff 	.word	0x000007ff
 800164c:	ff7fffff 	.word	0xff7fffff
 8001650:	000007fe 	.word	0x000007fe
 8001654:	4649      	mov	r1, r9
 8001656:	1bcd      	subs	r5, r1, r7
 8001658:	4661      	mov	r1, ip
 800165a:	1a58      	subs	r0, r3, r1
 800165c:	45a9      	cmp	r9, r5
 800165e:	4189      	sbcs	r1, r1
 8001660:	4249      	negs	r1, r1
 8001662:	4688      	mov	r8, r1
 8001664:	0001      	movs	r1, r0
 8001666:	4640      	mov	r0, r8
 8001668:	1a09      	subs	r1, r1, r0
 800166a:	4688      	mov	r8, r1
 800166c:	0209      	lsls	r1, r1, #8
 800166e:	d500      	bpl.n	8001672 <__aeabi_dadd+0x39e>
 8001670:	e0a6      	b.n	80017c0 <__aeabi_dadd+0x4ec>
 8001672:	4641      	mov	r1, r8
 8001674:	4329      	orrs	r1, r5
 8001676:	d000      	beq.n	800167a <__aeabi_dadd+0x3a6>
 8001678:	e67f      	b.n	800137a <__aeabi_dadd+0xa6>
 800167a:	2300      	movs	r3, #0
 800167c:	2400      	movs	r4, #0
 800167e:	e751      	b.n	8001524 <__aeabi_dadd+0x250>
 8001680:	4cc7      	ldr	r4, [pc, #796]	; (80019a0 <__aeabi_dadd+0x6cc>)
 8001682:	42a1      	cmp	r1, r4
 8001684:	d100      	bne.n	8001688 <__aeabi_dadd+0x3b4>
 8001686:	e0c7      	b.n	8001818 <__aeabi_dadd+0x544>
 8001688:	2480      	movs	r4, #128	; 0x80
 800168a:	0424      	lsls	r4, r4, #16
 800168c:	4323      	orrs	r3, r4
 800168e:	2a38      	cmp	r2, #56	; 0x38
 8001690:	dc54      	bgt.n	800173c <__aeabi_dadd+0x468>
 8001692:	2a1f      	cmp	r2, #31
 8001694:	dd00      	ble.n	8001698 <__aeabi_dadd+0x3c4>
 8001696:	e0cc      	b.n	8001832 <__aeabi_dadd+0x55e>
 8001698:	2420      	movs	r4, #32
 800169a:	4648      	mov	r0, r9
 800169c:	1aa4      	subs	r4, r4, r2
 800169e:	001d      	movs	r5, r3
 80016a0:	464e      	mov	r6, r9
 80016a2:	40a0      	lsls	r0, r4
 80016a4:	40d6      	lsrs	r6, r2
 80016a6:	40a5      	lsls	r5, r4
 80016a8:	0004      	movs	r4, r0
 80016aa:	40d3      	lsrs	r3, r2
 80016ac:	4662      	mov	r2, ip
 80016ae:	4335      	orrs	r5, r6
 80016b0:	1e66      	subs	r6, r4, #1
 80016b2:	41b4      	sbcs	r4, r6
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	469c      	mov	ip, r3
 80016b8:	4325      	orrs	r5, r4
 80016ba:	e044      	b.n	8001746 <__aeabi_dadd+0x472>
 80016bc:	4662      	mov	r2, ip
 80016be:	433a      	orrs	r2, r7
 80016c0:	0015      	movs	r5, r2
 80016c2:	1e6f      	subs	r7, r5, #1
 80016c4:	41bd      	sbcs	r5, r7
 80016c6:	444d      	add	r5, r9
 80016c8:	454d      	cmp	r5, r9
 80016ca:	4189      	sbcs	r1, r1
 80016cc:	4249      	negs	r1, r1
 80016ce:	4688      	mov	r8, r1
 80016d0:	4498      	add	r8, r3
 80016d2:	4643      	mov	r3, r8
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	d400      	bmi.n	80016da <__aeabi_dadd+0x406>
 80016d8:	e718      	b.n	800150c <__aeabi_dadd+0x238>
 80016da:	4bb1      	ldr	r3, [pc, #708]	; (80019a0 <__aeabi_dadd+0x6cc>)
 80016dc:	3601      	adds	r6, #1
 80016de:	429e      	cmp	r6, r3
 80016e0:	d049      	beq.n	8001776 <__aeabi_dadd+0x4a2>
 80016e2:	4642      	mov	r2, r8
 80016e4:	4baf      	ldr	r3, [pc, #700]	; (80019a4 <__aeabi_dadd+0x6d0>)
 80016e6:	2101      	movs	r1, #1
 80016e8:	401a      	ands	r2, r3
 80016ea:	0013      	movs	r3, r2
 80016ec:	086a      	lsrs	r2, r5, #1
 80016ee:	400d      	ands	r5, r1
 80016f0:	4315      	orrs	r5, r2
 80016f2:	07d9      	lsls	r1, r3, #31
 80016f4:	085b      	lsrs	r3, r3, #1
 80016f6:	4698      	mov	r8, r3
 80016f8:	430d      	orrs	r5, r1
 80016fa:	e665      	b.n	80013c8 <__aeabi_dadd+0xf4>
 80016fc:	0018      	movs	r0, r3
 80016fe:	3e1f      	subs	r6, #31
 8001700:	40f0      	lsrs	r0, r6
 8001702:	2a20      	cmp	r2, #32
 8001704:	d003      	beq.n	800170e <__aeabi_dadd+0x43a>
 8001706:	2140      	movs	r1, #64	; 0x40
 8001708:	1a8a      	subs	r2, r1, r2
 800170a:	4093      	lsls	r3, r2
 800170c:	431d      	orrs	r5, r3
 800170e:	1e69      	subs	r1, r5, #1
 8001710:	418d      	sbcs	r5, r1
 8001712:	2300      	movs	r3, #0
 8001714:	2600      	movs	r6, #0
 8001716:	4698      	mov	r8, r3
 8001718:	4305      	orrs	r5, r0
 800171a:	e6f7      	b.n	800150c <__aeabi_dadd+0x238>
 800171c:	0011      	movs	r1, r2
 800171e:	4665      	mov	r5, ip
 8001720:	3920      	subs	r1, #32
 8001722:	40cd      	lsrs	r5, r1
 8001724:	2a20      	cmp	r2, #32
 8001726:	d004      	beq.n	8001732 <__aeabi_dadd+0x45e>
 8001728:	2040      	movs	r0, #64	; 0x40
 800172a:	4661      	mov	r1, ip
 800172c:	1a82      	subs	r2, r0, r2
 800172e:	4091      	lsls	r1, r2
 8001730:	430f      	orrs	r7, r1
 8001732:	0039      	movs	r1, r7
 8001734:	1e4f      	subs	r7, r1, #1
 8001736:	41b9      	sbcs	r1, r7
 8001738:	4329      	orrs	r1, r5
 800173a:	e60f      	b.n	800135c <__aeabi_dadd+0x88>
 800173c:	464a      	mov	r2, r9
 800173e:	4313      	orrs	r3, r2
 8001740:	001d      	movs	r5, r3
 8001742:	1e6b      	subs	r3, r5, #1
 8001744:	419d      	sbcs	r5, r3
 8001746:	1b7d      	subs	r5, r7, r5
 8001748:	42af      	cmp	r7, r5
 800174a:	419b      	sbcs	r3, r3
 800174c:	4662      	mov	r2, ip
 800174e:	425b      	negs	r3, r3
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	4698      	mov	r8, r3
 8001754:	4654      	mov	r4, sl
 8001756:	000e      	movs	r6, r1
 8001758:	e607      	b.n	800136a <__aeabi_dadd+0x96>
 800175a:	4648      	mov	r0, r9
 800175c:	4318      	orrs	r0, r3
 800175e:	d100      	bne.n	8001762 <__aeabi_dadd+0x48e>
 8001760:	e0b3      	b.n	80018ca <__aeabi_dadd+0x5f6>
 8001762:	1e50      	subs	r0, r2, #1
 8001764:	2a01      	cmp	r2, #1
 8001766:	d100      	bne.n	800176a <__aeabi_dadd+0x496>
 8001768:	e10d      	b.n	8001986 <__aeabi_dadd+0x6b2>
 800176a:	4d8d      	ldr	r5, [pc, #564]	; (80019a0 <__aeabi_dadd+0x6cc>)
 800176c:	42aa      	cmp	r2, r5
 800176e:	d100      	bne.n	8001772 <__aeabi_dadd+0x49e>
 8001770:	e0a5      	b.n	80018be <__aeabi_dadd+0x5ea>
 8001772:	0002      	movs	r2, r0
 8001774:	e710      	b.n	8001598 <__aeabi_dadd+0x2c4>
 8001776:	0032      	movs	r2, r6
 8001778:	2300      	movs	r3, #0
 800177a:	2100      	movs	r1, #0
 800177c:	e644      	b.n	8001408 <__aeabi_dadd+0x134>
 800177e:	2120      	movs	r1, #32
 8001780:	0038      	movs	r0, r7
 8001782:	1a89      	subs	r1, r1, r2
 8001784:	4665      	mov	r5, ip
 8001786:	408f      	lsls	r7, r1
 8001788:	408d      	lsls	r5, r1
 800178a:	40d0      	lsrs	r0, r2
 800178c:	1e79      	subs	r1, r7, #1
 800178e:	418f      	sbcs	r7, r1
 8001790:	4305      	orrs	r5, r0
 8001792:	433d      	orrs	r5, r7
 8001794:	4667      	mov	r7, ip
 8001796:	40d7      	lsrs	r7, r2
 8001798:	19db      	adds	r3, r3, r7
 800179a:	e794      	b.n	80016c6 <__aeabi_dadd+0x3f2>
 800179c:	4a80      	ldr	r2, [pc, #512]	; (80019a0 <__aeabi_dadd+0x6cc>)
 800179e:	4290      	cmp	r0, r2
 80017a0:	d100      	bne.n	80017a4 <__aeabi_dadd+0x4d0>
 80017a2:	e0ec      	b.n	800197e <__aeabi_dadd+0x6aa>
 80017a4:	0039      	movs	r1, r7
 80017a6:	4449      	add	r1, r9
 80017a8:	4549      	cmp	r1, r9
 80017aa:	4192      	sbcs	r2, r2
 80017ac:	4463      	add	r3, ip
 80017ae:	4252      	negs	r2, r2
 80017b0:	189b      	adds	r3, r3, r2
 80017b2:	07dd      	lsls	r5, r3, #31
 80017b4:	0849      	lsrs	r1, r1, #1
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	4698      	mov	r8, r3
 80017ba:	0006      	movs	r6, r0
 80017bc:	430d      	orrs	r5, r1
 80017be:	e6a5      	b.n	800150c <__aeabi_dadd+0x238>
 80017c0:	464a      	mov	r2, r9
 80017c2:	1abd      	subs	r5, r7, r2
 80017c4:	42af      	cmp	r7, r5
 80017c6:	4189      	sbcs	r1, r1
 80017c8:	4662      	mov	r2, ip
 80017ca:	4249      	negs	r1, r1
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	1a5b      	subs	r3, r3, r1
 80017d0:	4698      	mov	r8, r3
 80017d2:	4654      	mov	r4, sl
 80017d4:	e5d1      	b.n	800137a <__aeabi_dadd+0xa6>
 80017d6:	076c      	lsls	r4, r5, #29
 80017d8:	08f9      	lsrs	r1, r7, #3
 80017da:	4321      	orrs	r1, r4
 80017dc:	08eb      	lsrs	r3, r5, #3
 80017de:	0004      	movs	r4, r0
 80017e0:	e69d      	b.n	800151e <__aeabi_dadd+0x24a>
 80017e2:	464a      	mov	r2, r9
 80017e4:	431a      	orrs	r2, r3
 80017e6:	d175      	bne.n	80018d4 <__aeabi_dadd+0x600>
 80017e8:	4661      	mov	r1, ip
 80017ea:	4339      	orrs	r1, r7
 80017ec:	d114      	bne.n	8001818 <__aeabi_dadd+0x544>
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	2400      	movs	r4, #0
 80017f2:	031b      	lsls	r3, r3, #12
 80017f4:	e6bc      	b.n	8001570 <__aeabi_dadd+0x29c>
 80017f6:	464a      	mov	r2, r9
 80017f8:	1bd5      	subs	r5, r2, r7
 80017fa:	45a9      	cmp	r9, r5
 80017fc:	4189      	sbcs	r1, r1
 80017fe:	4662      	mov	r2, ip
 8001800:	4249      	negs	r1, r1
 8001802:	1a9b      	subs	r3, r3, r2
 8001804:	1a5b      	subs	r3, r3, r1
 8001806:	4698      	mov	r8, r3
 8001808:	2601      	movs	r6, #1
 800180a:	e5ae      	b.n	800136a <__aeabi_dadd+0x96>
 800180c:	464a      	mov	r2, r9
 800180e:	08d1      	lsrs	r1, r2, #3
 8001810:	075a      	lsls	r2, r3, #29
 8001812:	4311      	orrs	r1, r2
 8001814:	08db      	lsrs	r3, r3, #3
 8001816:	e6a7      	b.n	8001568 <__aeabi_dadd+0x294>
 8001818:	4663      	mov	r3, ip
 800181a:	08f9      	lsrs	r1, r7, #3
 800181c:	075a      	lsls	r2, r3, #29
 800181e:	4654      	mov	r4, sl
 8001820:	4311      	orrs	r1, r2
 8001822:	08db      	lsrs	r3, r3, #3
 8001824:	e6a0      	b.n	8001568 <__aeabi_dadd+0x294>
 8001826:	464a      	mov	r2, r9
 8001828:	4313      	orrs	r3, r2
 800182a:	001d      	movs	r5, r3
 800182c:	1e6b      	subs	r3, r5, #1
 800182e:	419d      	sbcs	r5, r3
 8001830:	e6c7      	b.n	80015c2 <__aeabi_dadd+0x2ee>
 8001832:	0014      	movs	r4, r2
 8001834:	001e      	movs	r6, r3
 8001836:	3c20      	subs	r4, #32
 8001838:	40e6      	lsrs	r6, r4
 800183a:	2a20      	cmp	r2, #32
 800183c:	d005      	beq.n	800184a <__aeabi_dadd+0x576>
 800183e:	2440      	movs	r4, #64	; 0x40
 8001840:	1aa2      	subs	r2, r4, r2
 8001842:	4093      	lsls	r3, r2
 8001844:	464a      	mov	r2, r9
 8001846:	431a      	orrs	r2, r3
 8001848:	4691      	mov	r9, r2
 800184a:	464d      	mov	r5, r9
 800184c:	1e6b      	subs	r3, r5, #1
 800184e:	419d      	sbcs	r5, r3
 8001850:	4335      	orrs	r5, r6
 8001852:	e778      	b.n	8001746 <__aeabi_dadd+0x472>
 8001854:	464a      	mov	r2, r9
 8001856:	431a      	orrs	r2, r3
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x588>
 800185a:	e66b      	b.n	8001534 <__aeabi_dadd+0x260>
 800185c:	076b      	lsls	r3, r5, #29
 800185e:	08f9      	lsrs	r1, r7, #3
 8001860:	4319      	orrs	r1, r3
 8001862:	08eb      	lsrs	r3, r5, #3
 8001864:	e680      	b.n	8001568 <__aeabi_dadd+0x294>
 8001866:	4661      	mov	r1, ip
 8001868:	4339      	orrs	r1, r7
 800186a:	d054      	beq.n	8001916 <__aeabi_dadd+0x642>
 800186c:	4663      	mov	r3, ip
 800186e:	08f9      	lsrs	r1, r7, #3
 8001870:	075c      	lsls	r4, r3, #29
 8001872:	4321      	orrs	r1, r4
 8001874:	08db      	lsrs	r3, r3, #3
 8001876:	0004      	movs	r4, r0
 8001878:	e654      	b.n	8001524 <__aeabi_dadd+0x250>
 800187a:	464a      	mov	r2, r9
 800187c:	1abd      	subs	r5, r7, r2
 800187e:	42af      	cmp	r7, r5
 8001880:	4189      	sbcs	r1, r1
 8001882:	4662      	mov	r2, ip
 8001884:	4249      	negs	r1, r1
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	1a5b      	subs	r3, r3, r1
 800188a:	4698      	mov	r8, r3
 800188c:	0004      	movs	r4, r0
 800188e:	2601      	movs	r6, #1
 8001890:	e56b      	b.n	800136a <__aeabi_dadd+0x96>
 8001892:	464a      	mov	r2, r9
 8001894:	1bd5      	subs	r5, r2, r7
 8001896:	45a9      	cmp	r9, r5
 8001898:	4189      	sbcs	r1, r1
 800189a:	4662      	mov	r2, ip
 800189c:	4249      	negs	r1, r1
 800189e:	1a9a      	subs	r2, r3, r2
 80018a0:	1a52      	subs	r2, r2, r1
 80018a2:	4690      	mov	r8, r2
 80018a4:	0212      	lsls	r2, r2, #8
 80018a6:	d532      	bpl.n	800190e <__aeabi_dadd+0x63a>
 80018a8:	464a      	mov	r2, r9
 80018aa:	1abd      	subs	r5, r7, r2
 80018ac:	42af      	cmp	r7, r5
 80018ae:	4189      	sbcs	r1, r1
 80018b0:	4662      	mov	r2, ip
 80018b2:	4249      	negs	r1, r1
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	1a5b      	subs	r3, r3, r1
 80018b8:	4698      	mov	r8, r3
 80018ba:	0004      	movs	r4, r0
 80018bc:	e584      	b.n	80013c8 <__aeabi_dadd+0xf4>
 80018be:	4663      	mov	r3, ip
 80018c0:	08f9      	lsrs	r1, r7, #3
 80018c2:	075a      	lsls	r2, r3, #29
 80018c4:	4311      	orrs	r1, r2
 80018c6:	08db      	lsrs	r3, r3, #3
 80018c8:	e64e      	b.n	8001568 <__aeabi_dadd+0x294>
 80018ca:	08f9      	lsrs	r1, r7, #3
 80018cc:	0768      	lsls	r0, r5, #29
 80018ce:	4301      	orrs	r1, r0
 80018d0:	08eb      	lsrs	r3, r5, #3
 80018d2:	e624      	b.n	800151e <__aeabi_dadd+0x24a>
 80018d4:	4662      	mov	r2, ip
 80018d6:	433a      	orrs	r2, r7
 80018d8:	d100      	bne.n	80018dc <__aeabi_dadd+0x608>
 80018da:	e698      	b.n	800160e <__aeabi_dadd+0x33a>
 80018dc:	464a      	mov	r2, r9
 80018de:	08d1      	lsrs	r1, r2, #3
 80018e0:	075a      	lsls	r2, r3, #29
 80018e2:	4311      	orrs	r1, r2
 80018e4:	08da      	lsrs	r2, r3, #3
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	031b      	lsls	r3, r3, #12
 80018ea:	421a      	tst	r2, r3
 80018ec:	d008      	beq.n	8001900 <__aeabi_dadd+0x62c>
 80018ee:	4660      	mov	r0, ip
 80018f0:	08c5      	lsrs	r5, r0, #3
 80018f2:	421d      	tst	r5, r3
 80018f4:	d104      	bne.n	8001900 <__aeabi_dadd+0x62c>
 80018f6:	4654      	mov	r4, sl
 80018f8:	002a      	movs	r2, r5
 80018fa:	08f9      	lsrs	r1, r7, #3
 80018fc:	0743      	lsls	r3, r0, #29
 80018fe:	4319      	orrs	r1, r3
 8001900:	0f4b      	lsrs	r3, r1, #29
 8001902:	00c9      	lsls	r1, r1, #3
 8001904:	075b      	lsls	r3, r3, #29
 8001906:	08c9      	lsrs	r1, r1, #3
 8001908:	4319      	orrs	r1, r3
 800190a:	0013      	movs	r3, r2
 800190c:	e62c      	b.n	8001568 <__aeabi_dadd+0x294>
 800190e:	4641      	mov	r1, r8
 8001910:	4329      	orrs	r1, r5
 8001912:	d000      	beq.n	8001916 <__aeabi_dadd+0x642>
 8001914:	e5fa      	b.n	800150c <__aeabi_dadd+0x238>
 8001916:	2300      	movs	r3, #0
 8001918:	000a      	movs	r2, r1
 800191a:	2400      	movs	r4, #0
 800191c:	e602      	b.n	8001524 <__aeabi_dadd+0x250>
 800191e:	076b      	lsls	r3, r5, #29
 8001920:	08f9      	lsrs	r1, r7, #3
 8001922:	4319      	orrs	r1, r3
 8001924:	08eb      	lsrs	r3, r5, #3
 8001926:	e5fd      	b.n	8001524 <__aeabi_dadd+0x250>
 8001928:	4663      	mov	r3, ip
 800192a:	08f9      	lsrs	r1, r7, #3
 800192c:	075b      	lsls	r3, r3, #29
 800192e:	4319      	orrs	r1, r3
 8001930:	4663      	mov	r3, ip
 8001932:	0004      	movs	r4, r0
 8001934:	08db      	lsrs	r3, r3, #3
 8001936:	e617      	b.n	8001568 <__aeabi_dadd+0x294>
 8001938:	003d      	movs	r5, r7
 800193a:	444d      	add	r5, r9
 800193c:	4463      	add	r3, ip
 800193e:	454d      	cmp	r5, r9
 8001940:	4189      	sbcs	r1, r1
 8001942:	4698      	mov	r8, r3
 8001944:	4249      	negs	r1, r1
 8001946:	4488      	add	r8, r1
 8001948:	4643      	mov	r3, r8
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	d400      	bmi.n	8001950 <__aeabi_dadd+0x67c>
 800194e:	e5dd      	b.n	800150c <__aeabi_dadd+0x238>
 8001950:	4642      	mov	r2, r8
 8001952:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <__aeabi_dadd+0x6d0>)
 8001954:	2601      	movs	r6, #1
 8001956:	401a      	ands	r2, r3
 8001958:	4690      	mov	r8, r2
 800195a:	e5d7      	b.n	800150c <__aeabi_dadd+0x238>
 800195c:	0010      	movs	r0, r2
 800195e:	001e      	movs	r6, r3
 8001960:	3820      	subs	r0, #32
 8001962:	40c6      	lsrs	r6, r0
 8001964:	2a20      	cmp	r2, #32
 8001966:	d005      	beq.n	8001974 <__aeabi_dadd+0x6a0>
 8001968:	2040      	movs	r0, #64	; 0x40
 800196a:	1a82      	subs	r2, r0, r2
 800196c:	4093      	lsls	r3, r2
 800196e:	464a      	mov	r2, r9
 8001970:	431a      	orrs	r2, r3
 8001972:	4691      	mov	r9, r2
 8001974:	464d      	mov	r5, r9
 8001976:	1e6b      	subs	r3, r5, #1
 8001978:	419d      	sbcs	r5, r3
 800197a:	4335      	orrs	r5, r6
 800197c:	e621      	b.n	80015c2 <__aeabi_dadd+0x2ee>
 800197e:	0002      	movs	r2, r0
 8001980:	2300      	movs	r3, #0
 8001982:	2100      	movs	r1, #0
 8001984:	e540      	b.n	8001408 <__aeabi_dadd+0x134>
 8001986:	464a      	mov	r2, r9
 8001988:	19d5      	adds	r5, r2, r7
 800198a:	42bd      	cmp	r5, r7
 800198c:	4189      	sbcs	r1, r1
 800198e:	4463      	add	r3, ip
 8001990:	4698      	mov	r8, r3
 8001992:	4249      	negs	r1, r1
 8001994:	4488      	add	r8, r1
 8001996:	e5b3      	b.n	8001500 <__aeabi_dadd+0x22c>
 8001998:	2100      	movs	r1, #0
 800199a:	4a01      	ldr	r2, [pc, #4]	; (80019a0 <__aeabi_dadd+0x6cc>)
 800199c:	000b      	movs	r3, r1
 800199e:	e533      	b.n	8001408 <__aeabi_dadd+0x134>
 80019a0:	000007ff 	.word	0x000007ff
 80019a4:	ff7fffff 	.word	0xff7fffff

080019a8 <__aeabi_ddiv>:
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	4657      	mov	r7, sl
 80019ac:	464e      	mov	r6, r9
 80019ae:	4645      	mov	r5, r8
 80019b0:	46de      	mov	lr, fp
 80019b2:	b5e0      	push	{r5, r6, r7, lr}
 80019b4:	4681      	mov	r9, r0
 80019b6:	0005      	movs	r5, r0
 80019b8:	030c      	lsls	r4, r1, #12
 80019ba:	0048      	lsls	r0, r1, #1
 80019bc:	4692      	mov	sl, r2
 80019be:	001f      	movs	r7, r3
 80019c0:	b085      	sub	sp, #20
 80019c2:	0b24      	lsrs	r4, r4, #12
 80019c4:	0d40      	lsrs	r0, r0, #21
 80019c6:	0fce      	lsrs	r6, r1, #31
 80019c8:	2800      	cmp	r0, #0
 80019ca:	d059      	beq.n	8001a80 <__aeabi_ddiv+0xd8>
 80019cc:	4b87      	ldr	r3, [pc, #540]	; (8001bec <__aeabi_ddiv+0x244>)
 80019ce:	4298      	cmp	r0, r3
 80019d0:	d100      	bne.n	80019d4 <__aeabi_ddiv+0x2c>
 80019d2:	e098      	b.n	8001b06 <__aeabi_ddiv+0x15e>
 80019d4:	0f6b      	lsrs	r3, r5, #29
 80019d6:	00e4      	lsls	r4, r4, #3
 80019d8:	431c      	orrs	r4, r3
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	041b      	lsls	r3, r3, #16
 80019de:	4323      	orrs	r3, r4
 80019e0:	4698      	mov	r8, r3
 80019e2:	4b83      	ldr	r3, [pc, #524]	; (8001bf0 <__aeabi_ddiv+0x248>)
 80019e4:	00ed      	lsls	r5, r5, #3
 80019e6:	469b      	mov	fp, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	4699      	mov	r9, r3
 80019ec:	4483      	add	fp, r0
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	033c      	lsls	r4, r7, #12
 80019f2:	007b      	lsls	r3, r7, #1
 80019f4:	4650      	mov	r0, sl
 80019f6:	0b24      	lsrs	r4, r4, #12
 80019f8:	0d5b      	lsrs	r3, r3, #21
 80019fa:	0fff      	lsrs	r7, r7, #31
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d067      	beq.n	8001ad0 <__aeabi_ddiv+0x128>
 8001a00:	4a7a      	ldr	r2, [pc, #488]	; (8001bec <__aeabi_ddiv+0x244>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d018      	beq.n	8001a38 <__aeabi_ddiv+0x90>
 8001a06:	497a      	ldr	r1, [pc, #488]	; (8001bf0 <__aeabi_ddiv+0x248>)
 8001a08:	0f42      	lsrs	r2, r0, #29
 8001a0a:	468c      	mov	ip, r1
 8001a0c:	00e4      	lsls	r4, r4, #3
 8001a0e:	4659      	mov	r1, fp
 8001a10:	4314      	orrs	r4, r2
 8001a12:	2280      	movs	r2, #128	; 0x80
 8001a14:	4463      	add	r3, ip
 8001a16:	0412      	lsls	r2, r2, #16
 8001a18:	1acb      	subs	r3, r1, r3
 8001a1a:	4314      	orrs	r4, r2
 8001a1c:	469b      	mov	fp, r3
 8001a1e:	00c2      	lsls	r2, r0, #3
 8001a20:	2000      	movs	r0, #0
 8001a22:	0033      	movs	r3, r6
 8001a24:	407b      	eors	r3, r7
 8001a26:	469a      	mov	sl, r3
 8001a28:	464b      	mov	r3, r9
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	d900      	bls.n	8001a30 <__aeabi_ddiv+0x88>
 8001a2e:	e0ef      	b.n	8001c10 <__aeabi_ddiv+0x268>
 8001a30:	4970      	ldr	r1, [pc, #448]	; (8001bf4 <__aeabi_ddiv+0x24c>)
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	58cb      	ldr	r3, [r1, r3]
 8001a36:	469f      	mov	pc, r3
 8001a38:	4b6f      	ldr	r3, [pc, #444]	; (8001bf8 <__aeabi_ddiv+0x250>)
 8001a3a:	4652      	mov	r2, sl
 8001a3c:	469c      	mov	ip, r3
 8001a3e:	4322      	orrs	r2, r4
 8001a40:	44e3      	add	fp, ip
 8001a42:	2a00      	cmp	r2, #0
 8001a44:	d000      	beq.n	8001a48 <__aeabi_ddiv+0xa0>
 8001a46:	e095      	b.n	8001b74 <__aeabi_ddiv+0x1cc>
 8001a48:	4649      	mov	r1, r9
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	4319      	orrs	r1, r3
 8001a4e:	4689      	mov	r9, r1
 8001a50:	2400      	movs	r4, #0
 8001a52:	2002      	movs	r0, #2
 8001a54:	e7e5      	b.n	8001a22 <__aeabi_ddiv+0x7a>
 8001a56:	2300      	movs	r3, #0
 8001a58:	2400      	movs	r4, #0
 8001a5a:	2500      	movs	r5, #0
 8001a5c:	4652      	mov	r2, sl
 8001a5e:	051b      	lsls	r3, r3, #20
 8001a60:	4323      	orrs	r3, r4
 8001a62:	07d2      	lsls	r2, r2, #31
 8001a64:	4313      	orrs	r3, r2
 8001a66:	0028      	movs	r0, r5
 8001a68:	0019      	movs	r1, r3
 8001a6a:	b005      	add	sp, #20
 8001a6c:	bcf0      	pop	{r4, r5, r6, r7}
 8001a6e:	46bb      	mov	fp, r7
 8001a70:	46b2      	mov	sl, r6
 8001a72:	46a9      	mov	r9, r5
 8001a74:	46a0      	mov	r8, r4
 8001a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a78:	2400      	movs	r4, #0
 8001a7a:	2500      	movs	r5, #0
 8001a7c:	4b5b      	ldr	r3, [pc, #364]	; (8001bec <__aeabi_ddiv+0x244>)
 8001a7e:	e7ed      	b.n	8001a5c <__aeabi_ddiv+0xb4>
 8001a80:	464b      	mov	r3, r9
 8001a82:	4323      	orrs	r3, r4
 8001a84:	4698      	mov	r8, r3
 8001a86:	d100      	bne.n	8001a8a <__aeabi_ddiv+0xe2>
 8001a88:	e089      	b.n	8001b9e <__aeabi_ddiv+0x1f6>
 8001a8a:	2c00      	cmp	r4, #0
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_ddiv+0xe8>
 8001a8e:	e1e0      	b.n	8001e52 <__aeabi_ddiv+0x4aa>
 8001a90:	0020      	movs	r0, r4
 8001a92:	f000 fe13 	bl	80026bc <__clzsi2>
 8001a96:	0001      	movs	r1, r0
 8001a98:	0002      	movs	r2, r0
 8001a9a:	390b      	subs	r1, #11
 8001a9c:	231d      	movs	r3, #29
 8001a9e:	1a5b      	subs	r3, r3, r1
 8001aa0:	4649      	mov	r1, r9
 8001aa2:	0010      	movs	r0, r2
 8001aa4:	40d9      	lsrs	r1, r3
 8001aa6:	3808      	subs	r0, #8
 8001aa8:	4084      	lsls	r4, r0
 8001aaa:	000b      	movs	r3, r1
 8001aac:	464d      	mov	r5, r9
 8001aae:	4323      	orrs	r3, r4
 8001ab0:	4698      	mov	r8, r3
 8001ab2:	4085      	lsls	r5, r0
 8001ab4:	4851      	ldr	r0, [pc, #324]	; (8001bfc <__aeabi_ddiv+0x254>)
 8001ab6:	033c      	lsls	r4, r7, #12
 8001ab8:	1a83      	subs	r3, r0, r2
 8001aba:	469b      	mov	fp, r3
 8001abc:	2300      	movs	r3, #0
 8001abe:	4699      	mov	r9, r3
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	007b      	lsls	r3, r7, #1
 8001ac4:	4650      	mov	r0, sl
 8001ac6:	0b24      	lsrs	r4, r4, #12
 8001ac8:	0d5b      	lsrs	r3, r3, #21
 8001aca:	0fff      	lsrs	r7, r7, #31
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d197      	bne.n	8001a00 <__aeabi_ddiv+0x58>
 8001ad0:	4652      	mov	r2, sl
 8001ad2:	4322      	orrs	r2, r4
 8001ad4:	d055      	beq.n	8001b82 <__aeabi_ddiv+0x1da>
 8001ad6:	2c00      	cmp	r4, #0
 8001ad8:	d100      	bne.n	8001adc <__aeabi_ddiv+0x134>
 8001ada:	e1ca      	b.n	8001e72 <__aeabi_ddiv+0x4ca>
 8001adc:	0020      	movs	r0, r4
 8001ade:	f000 fded 	bl	80026bc <__clzsi2>
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	3a0b      	subs	r2, #11
 8001ae6:	231d      	movs	r3, #29
 8001ae8:	0001      	movs	r1, r0
 8001aea:	1a9b      	subs	r3, r3, r2
 8001aec:	4652      	mov	r2, sl
 8001aee:	3908      	subs	r1, #8
 8001af0:	40da      	lsrs	r2, r3
 8001af2:	408c      	lsls	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	4652      	mov	r2, sl
 8001af8:	408a      	lsls	r2, r1
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <__aeabi_ddiv+0x258>)
 8001afc:	4458      	add	r0, fp
 8001afe:	469b      	mov	fp, r3
 8001b00:	4483      	add	fp, r0
 8001b02:	2000      	movs	r0, #0
 8001b04:	e78d      	b.n	8001a22 <__aeabi_ddiv+0x7a>
 8001b06:	464b      	mov	r3, r9
 8001b08:	4323      	orrs	r3, r4
 8001b0a:	4698      	mov	r8, r3
 8001b0c:	d140      	bne.n	8001b90 <__aeabi_ddiv+0x1e8>
 8001b0e:	2308      	movs	r3, #8
 8001b10:	4699      	mov	r9, r3
 8001b12:	3b06      	subs	r3, #6
 8001b14:	2500      	movs	r5, #0
 8001b16:	4683      	mov	fp, r0
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	e769      	b.n	80019f0 <__aeabi_ddiv+0x48>
 8001b1c:	46b2      	mov	sl, r6
 8001b1e:	9b00      	ldr	r3, [sp, #0]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d0a9      	beq.n	8001a78 <__aeabi_ddiv+0xd0>
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d100      	bne.n	8001b2a <__aeabi_ddiv+0x182>
 8001b28:	e211      	b.n	8001f4e <__aeabi_ddiv+0x5a6>
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d093      	beq.n	8001a56 <__aeabi_ddiv+0xae>
 8001b2e:	4a35      	ldr	r2, [pc, #212]	; (8001c04 <__aeabi_ddiv+0x25c>)
 8001b30:	445a      	add	r2, fp
 8001b32:	2a00      	cmp	r2, #0
 8001b34:	dc00      	bgt.n	8001b38 <__aeabi_ddiv+0x190>
 8001b36:	e13c      	b.n	8001db2 <__aeabi_ddiv+0x40a>
 8001b38:	076b      	lsls	r3, r5, #29
 8001b3a:	d000      	beq.n	8001b3e <__aeabi_ddiv+0x196>
 8001b3c:	e1a7      	b.n	8001e8e <__aeabi_ddiv+0x4e6>
 8001b3e:	08ed      	lsrs	r5, r5, #3
 8001b40:	4643      	mov	r3, r8
 8001b42:	01db      	lsls	r3, r3, #7
 8001b44:	d506      	bpl.n	8001b54 <__aeabi_ddiv+0x1ac>
 8001b46:	4642      	mov	r2, r8
 8001b48:	4b2f      	ldr	r3, [pc, #188]	; (8001c08 <__aeabi_ddiv+0x260>)
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	4690      	mov	r8, r2
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	00d2      	lsls	r2, r2, #3
 8001b52:	445a      	add	r2, fp
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <__aeabi_ddiv+0x264>)
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dc8e      	bgt.n	8001a78 <__aeabi_ddiv+0xd0>
 8001b5a:	4643      	mov	r3, r8
 8001b5c:	0552      	lsls	r2, r2, #21
 8001b5e:	0758      	lsls	r0, r3, #29
 8001b60:	025c      	lsls	r4, r3, #9
 8001b62:	4305      	orrs	r5, r0
 8001b64:	0b24      	lsrs	r4, r4, #12
 8001b66:	0d53      	lsrs	r3, r2, #21
 8001b68:	e778      	b.n	8001a5c <__aeabi_ddiv+0xb4>
 8001b6a:	46ba      	mov	sl, r7
 8001b6c:	46a0      	mov	r8, r4
 8001b6e:	0015      	movs	r5, r2
 8001b70:	9000      	str	r0, [sp, #0]
 8001b72:	e7d4      	b.n	8001b1e <__aeabi_ddiv+0x176>
 8001b74:	464a      	mov	r2, r9
 8001b76:	2303      	movs	r3, #3
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	4691      	mov	r9, r2
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	4652      	mov	r2, sl
 8001b80:	e74f      	b.n	8001a22 <__aeabi_ddiv+0x7a>
 8001b82:	4649      	mov	r1, r9
 8001b84:	2301      	movs	r3, #1
 8001b86:	4319      	orrs	r1, r3
 8001b88:	4689      	mov	r9, r1
 8001b8a:	2400      	movs	r4, #0
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	e748      	b.n	8001a22 <__aeabi_ddiv+0x7a>
 8001b90:	230c      	movs	r3, #12
 8001b92:	4699      	mov	r9, r3
 8001b94:	3b09      	subs	r3, #9
 8001b96:	46a0      	mov	r8, r4
 8001b98:	4683      	mov	fp, r0
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	e728      	b.n	80019f0 <__aeabi_ddiv+0x48>
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	4699      	mov	r9, r3
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	469b      	mov	fp, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	2500      	movs	r5, #0
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	e720      	b.n	80019f0 <__aeabi_ddiv+0x48>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	2480      	movs	r4, #128	; 0x80
 8001bb2:	469a      	mov	sl, r3
 8001bb4:	2500      	movs	r5, #0
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <__aeabi_ddiv+0x244>)
 8001bb8:	0324      	lsls	r4, r4, #12
 8001bba:	e74f      	b.n	8001a5c <__aeabi_ddiv+0xb4>
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	4641      	mov	r1, r8
 8001bc0:	031b      	lsls	r3, r3, #12
 8001bc2:	4219      	tst	r1, r3
 8001bc4:	d008      	beq.n	8001bd8 <__aeabi_ddiv+0x230>
 8001bc6:	421c      	tst	r4, r3
 8001bc8:	d106      	bne.n	8001bd8 <__aeabi_ddiv+0x230>
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	46ba      	mov	sl, r7
 8001bd0:	0015      	movs	r5, r2
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_ddiv+0x244>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e741      	b.n	8001a5c <__aeabi_ddiv+0xb4>
 8001bd8:	2480      	movs	r4, #128	; 0x80
 8001bda:	4643      	mov	r3, r8
 8001bdc:	0324      	lsls	r4, r4, #12
 8001bde:	431c      	orrs	r4, r3
 8001be0:	0324      	lsls	r4, r4, #12
 8001be2:	46b2      	mov	sl, r6
 8001be4:	4b01      	ldr	r3, [pc, #4]	; (8001bec <__aeabi_ddiv+0x244>)
 8001be6:	0b24      	lsrs	r4, r4, #12
 8001be8:	e738      	b.n	8001a5c <__aeabi_ddiv+0xb4>
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	000007ff 	.word	0x000007ff
 8001bf0:	fffffc01 	.word	0xfffffc01
 8001bf4:	08006be0 	.word	0x08006be0
 8001bf8:	fffff801 	.word	0xfffff801
 8001bfc:	fffffc0d 	.word	0xfffffc0d
 8001c00:	000003f3 	.word	0x000003f3
 8001c04:	000003ff 	.word	0x000003ff
 8001c08:	feffffff 	.word	0xfeffffff
 8001c0c:	000007fe 	.word	0x000007fe
 8001c10:	4544      	cmp	r4, r8
 8001c12:	d200      	bcs.n	8001c16 <__aeabi_ddiv+0x26e>
 8001c14:	e116      	b.n	8001e44 <__aeabi_ddiv+0x49c>
 8001c16:	d100      	bne.n	8001c1a <__aeabi_ddiv+0x272>
 8001c18:	e111      	b.n	8001e3e <__aeabi_ddiv+0x496>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	469c      	mov	ip, r3
 8001c20:	002e      	movs	r6, r5
 8001c22:	4640      	mov	r0, r8
 8001c24:	2500      	movs	r5, #0
 8001c26:	44e3      	add	fp, ip
 8001c28:	0223      	lsls	r3, r4, #8
 8001c2a:	0e14      	lsrs	r4, r2, #24
 8001c2c:	431c      	orrs	r4, r3
 8001c2e:	0c1b      	lsrs	r3, r3, #16
 8001c30:	4699      	mov	r9, r3
 8001c32:	0423      	lsls	r3, r4, #16
 8001c34:	0c1f      	lsrs	r7, r3, #16
 8001c36:	0212      	lsls	r2, r2, #8
 8001c38:	4649      	mov	r1, r9
 8001c3a:	9200      	str	r2, [sp, #0]
 8001c3c:	9701      	str	r7, [sp, #4]
 8001c3e:	f7fe faf3 	bl	8000228 <__aeabi_uidivmod>
 8001c42:	0002      	movs	r2, r0
 8001c44:	437a      	muls	r2, r7
 8001c46:	040b      	lsls	r3, r1, #16
 8001c48:	0c31      	lsrs	r1, r6, #16
 8001c4a:	4680      	mov	r8, r0
 8001c4c:	4319      	orrs	r1, r3
 8001c4e:	428a      	cmp	r2, r1
 8001c50:	d90b      	bls.n	8001c6a <__aeabi_ddiv+0x2c2>
 8001c52:	2301      	movs	r3, #1
 8001c54:	425b      	negs	r3, r3
 8001c56:	469c      	mov	ip, r3
 8001c58:	1909      	adds	r1, r1, r4
 8001c5a:	44e0      	add	r8, ip
 8001c5c:	428c      	cmp	r4, r1
 8001c5e:	d804      	bhi.n	8001c6a <__aeabi_ddiv+0x2c2>
 8001c60:	428a      	cmp	r2, r1
 8001c62:	d902      	bls.n	8001c6a <__aeabi_ddiv+0x2c2>
 8001c64:	1e83      	subs	r3, r0, #2
 8001c66:	4698      	mov	r8, r3
 8001c68:	1909      	adds	r1, r1, r4
 8001c6a:	1a88      	subs	r0, r1, r2
 8001c6c:	4649      	mov	r1, r9
 8001c6e:	f7fe fadb 	bl	8000228 <__aeabi_uidivmod>
 8001c72:	0409      	lsls	r1, r1, #16
 8001c74:	468c      	mov	ip, r1
 8001c76:	0431      	lsls	r1, r6, #16
 8001c78:	4666      	mov	r6, ip
 8001c7a:	9a01      	ldr	r2, [sp, #4]
 8001c7c:	0c09      	lsrs	r1, r1, #16
 8001c7e:	4342      	muls	r2, r0
 8001c80:	0003      	movs	r3, r0
 8001c82:	4331      	orrs	r1, r6
 8001c84:	428a      	cmp	r2, r1
 8001c86:	d904      	bls.n	8001c92 <__aeabi_ddiv+0x2ea>
 8001c88:	1909      	adds	r1, r1, r4
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	428c      	cmp	r4, r1
 8001c8e:	d800      	bhi.n	8001c92 <__aeabi_ddiv+0x2ea>
 8001c90:	e111      	b.n	8001eb6 <__aeabi_ddiv+0x50e>
 8001c92:	1a89      	subs	r1, r1, r2
 8001c94:	4642      	mov	r2, r8
 8001c96:	9e00      	ldr	r6, [sp, #0]
 8001c98:	0412      	lsls	r2, r2, #16
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	0c33      	lsrs	r3, r6, #16
 8001c9e:	001f      	movs	r7, r3
 8001ca0:	0c10      	lsrs	r0, r2, #16
 8001ca2:	4690      	mov	r8, r2
 8001ca4:	9302      	str	r3, [sp, #8]
 8001ca6:	0413      	lsls	r3, r2, #16
 8001ca8:	0432      	lsls	r2, r6, #16
 8001caa:	0c16      	lsrs	r6, r2, #16
 8001cac:	0032      	movs	r2, r6
 8001cae:	0c1b      	lsrs	r3, r3, #16
 8001cb0:	435a      	muls	r2, r3
 8001cb2:	9603      	str	r6, [sp, #12]
 8001cb4:	437b      	muls	r3, r7
 8001cb6:	4346      	muls	r6, r0
 8001cb8:	4378      	muls	r0, r7
 8001cba:	0c17      	lsrs	r7, r2, #16
 8001cbc:	46bc      	mov	ip, r7
 8001cbe:	199b      	adds	r3, r3, r6
 8001cc0:	4463      	add	r3, ip
 8001cc2:	429e      	cmp	r6, r3
 8001cc4:	d903      	bls.n	8001cce <__aeabi_ddiv+0x326>
 8001cc6:	2680      	movs	r6, #128	; 0x80
 8001cc8:	0276      	lsls	r6, r6, #9
 8001cca:	46b4      	mov	ip, r6
 8001ccc:	4460      	add	r0, ip
 8001cce:	0c1e      	lsrs	r6, r3, #16
 8001cd0:	1830      	adds	r0, r6, r0
 8001cd2:	0416      	lsls	r6, r2, #16
 8001cd4:	041b      	lsls	r3, r3, #16
 8001cd6:	0c36      	lsrs	r6, r6, #16
 8001cd8:	199e      	adds	r6, r3, r6
 8001cda:	4281      	cmp	r1, r0
 8001cdc:	d200      	bcs.n	8001ce0 <__aeabi_ddiv+0x338>
 8001cde:	e09c      	b.n	8001e1a <__aeabi_ddiv+0x472>
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_ddiv+0x33c>
 8001ce2:	e097      	b.n	8001e14 <__aeabi_ddiv+0x46c>
 8001ce4:	1bae      	subs	r6, r5, r6
 8001ce6:	1a09      	subs	r1, r1, r0
 8001ce8:	42b5      	cmp	r5, r6
 8001cea:	4180      	sbcs	r0, r0
 8001cec:	4240      	negs	r0, r0
 8001cee:	1a08      	subs	r0, r1, r0
 8001cf0:	4284      	cmp	r4, r0
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_ddiv+0x34e>
 8001cf4:	e111      	b.n	8001f1a <__aeabi_ddiv+0x572>
 8001cf6:	4649      	mov	r1, r9
 8001cf8:	f7fe fa96 	bl	8000228 <__aeabi_uidivmod>
 8001cfc:	9a01      	ldr	r2, [sp, #4]
 8001cfe:	040b      	lsls	r3, r1, #16
 8001d00:	4342      	muls	r2, r0
 8001d02:	0c31      	lsrs	r1, r6, #16
 8001d04:	0005      	movs	r5, r0
 8001d06:	4319      	orrs	r1, r3
 8001d08:	428a      	cmp	r2, r1
 8001d0a:	d907      	bls.n	8001d1c <__aeabi_ddiv+0x374>
 8001d0c:	1909      	adds	r1, r1, r4
 8001d0e:	3d01      	subs	r5, #1
 8001d10:	428c      	cmp	r4, r1
 8001d12:	d803      	bhi.n	8001d1c <__aeabi_ddiv+0x374>
 8001d14:	428a      	cmp	r2, r1
 8001d16:	d901      	bls.n	8001d1c <__aeabi_ddiv+0x374>
 8001d18:	1e85      	subs	r5, r0, #2
 8001d1a:	1909      	adds	r1, r1, r4
 8001d1c:	1a88      	subs	r0, r1, r2
 8001d1e:	4649      	mov	r1, r9
 8001d20:	f7fe fa82 	bl	8000228 <__aeabi_uidivmod>
 8001d24:	0409      	lsls	r1, r1, #16
 8001d26:	468c      	mov	ip, r1
 8001d28:	0431      	lsls	r1, r6, #16
 8001d2a:	4666      	mov	r6, ip
 8001d2c:	9a01      	ldr	r2, [sp, #4]
 8001d2e:	0c09      	lsrs	r1, r1, #16
 8001d30:	4342      	muls	r2, r0
 8001d32:	0003      	movs	r3, r0
 8001d34:	4331      	orrs	r1, r6
 8001d36:	428a      	cmp	r2, r1
 8001d38:	d907      	bls.n	8001d4a <__aeabi_ddiv+0x3a2>
 8001d3a:	1909      	adds	r1, r1, r4
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	428c      	cmp	r4, r1
 8001d40:	d803      	bhi.n	8001d4a <__aeabi_ddiv+0x3a2>
 8001d42:	428a      	cmp	r2, r1
 8001d44:	d901      	bls.n	8001d4a <__aeabi_ddiv+0x3a2>
 8001d46:	1e83      	subs	r3, r0, #2
 8001d48:	1909      	adds	r1, r1, r4
 8001d4a:	9e03      	ldr	r6, [sp, #12]
 8001d4c:	1a89      	subs	r1, r1, r2
 8001d4e:	0032      	movs	r2, r6
 8001d50:	042d      	lsls	r5, r5, #16
 8001d52:	431d      	orrs	r5, r3
 8001d54:	9f02      	ldr	r7, [sp, #8]
 8001d56:	042b      	lsls	r3, r5, #16
 8001d58:	0c1b      	lsrs	r3, r3, #16
 8001d5a:	435a      	muls	r2, r3
 8001d5c:	437b      	muls	r3, r7
 8001d5e:	469c      	mov	ip, r3
 8001d60:	0c28      	lsrs	r0, r5, #16
 8001d62:	4346      	muls	r6, r0
 8001d64:	0c13      	lsrs	r3, r2, #16
 8001d66:	44b4      	add	ip, r6
 8001d68:	4463      	add	r3, ip
 8001d6a:	4378      	muls	r0, r7
 8001d6c:	429e      	cmp	r6, r3
 8001d6e:	d903      	bls.n	8001d78 <__aeabi_ddiv+0x3d0>
 8001d70:	2680      	movs	r6, #128	; 0x80
 8001d72:	0276      	lsls	r6, r6, #9
 8001d74:	46b4      	mov	ip, r6
 8001d76:	4460      	add	r0, ip
 8001d78:	0c1e      	lsrs	r6, r3, #16
 8001d7a:	0412      	lsls	r2, r2, #16
 8001d7c:	041b      	lsls	r3, r3, #16
 8001d7e:	0c12      	lsrs	r2, r2, #16
 8001d80:	1830      	adds	r0, r6, r0
 8001d82:	189b      	adds	r3, r3, r2
 8001d84:	4281      	cmp	r1, r0
 8001d86:	d306      	bcc.n	8001d96 <__aeabi_ddiv+0x3ee>
 8001d88:	d002      	beq.n	8001d90 <__aeabi_ddiv+0x3e8>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	431d      	orrs	r5, r3
 8001d8e:	e6ce      	b.n	8001b2e <__aeabi_ddiv+0x186>
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d100      	bne.n	8001d96 <__aeabi_ddiv+0x3ee>
 8001d94:	e6cb      	b.n	8001b2e <__aeabi_ddiv+0x186>
 8001d96:	1861      	adds	r1, r4, r1
 8001d98:	1e6e      	subs	r6, r5, #1
 8001d9a:	42a1      	cmp	r1, r4
 8001d9c:	d200      	bcs.n	8001da0 <__aeabi_ddiv+0x3f8>
 8001d9e:	e0a4      	b.n	8001eea <__aeabi_ddiv+0x542>
 8001da0:	4281      	cmp	r1, r0
 8001da2:	d200      	bcs.n	8001da6 <__aeabi_ddiv+0x3fe>
 8001da4:	e0c9      	b.n	8001f3a <__aeabi_ddiv+0x592>
 8001da6:	d100      	bne.n	8001daa <__aeabi_ddiv+0x402>
 8001da8:	e0d9      	b.n	8001f5e <__aeabi_ddiv+0x5b6>
 8001daa:	0035      	movs	r5, r6
 8001dac:	e7ed      	b.n	8001d8a <__aeabi_ddiv+0x3e2>
 8001dae:	2501      	movs	r5, #1
 8001db0:	426d      	negs	r5, r5
 8001db2:	2101      	movs	r1, #1
 8001db4:	1a89      	subs	r1, r1, r2
 8001db6:	2938      	cmp	r1, #56	; 0x38
 8001db8:	dd00      	ble.n	8001dbc <__aeabi_ddiv+0x414>
 8001dba:	e64c      	b.n	8001a56 <__aeabi_ddiv+0xae>
 8001dbc:	291f      	cmp	r1, #31
 8001dbe:	dc00      	bgt.n	8001dc2 <__aeabi_ddiv+0x41a>
 8001dc0:	e07f      	b.n	8001ec2 <__aeabi_ddiv+0x51a>
 8001dc2:	231f      	movs	r3, #31
 8001dc4:	425b      	negs	r3, r3
 8001dc6:	1a9a      	subs	r2, r3, r2
 8001dc8:	4643      	mov	r3, r8
 8001dca:	40d3      	lsrs	r3, r2
 8001dcc:	2920      	cmp	r1, #32
 8001dce:	d004      	beq.n	8001dda <__aeabi_ddiv+0x432>
 8001dd0:	4644      	mov	r4, r8
 8001dd2:	4a65      	ldr	r2, [pc, #404]	; (8001f68 <__aeabi_ddiv+0x5c0>)
 8001dd4:	445a      	add	r2, fp
 8001dd6:	4094      	lsls	r4, r2
 8001dd8:	4325      	orrs	r5, r4
 8001dda:	1e6a      	subs	r2, r5, #1
 8001ddc:	4195      	sbcs	r5, r2
 8001dde:	2207      	movs	r2, #7
 8001de0:	432b      	orrs	r3, r5
 8001de2:	0015      	movs	r5, r2
 8001de4:	2400      	movs	r4, #0
 8001de6:	401d      	ands	r5, r3
 8001de8:	421a      	tst	r2, r3
 8001dea:	d100      	bne.n	8001dee <__aeabi_ddiv+0x446>
 8001dec:	e0a1      	b.n	8001f32 <__aeabi_ddiv+0x58a>
 8001dee:	220f      	movs	r2, #15
 8001df0:	2400      	movs	r4, #0
 8001df2:	401a      	ands	r2, r3
 8001df4:	2a04      	cmp	r2, #4
 8001df6:	d100      	bne.n	8001dfa <__aeabi_ddiv+0x452>
 8001df8:	e098      	b.n	8001f2c <__aeabi_ddiv+0x584>
 8001dfa:	1d1a      	adds	r2, r3, #4
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	419b      	sbcs	r3, r3
 8001e00:	425b      	negs	r3, r3
 8001e02:	18e4      	adds	r4, r4, r3
 8001e04:	0013      	movs	r3, r2
 8001e06:	0222      	lsls	r2, r4, #8
 8001e08:	d400      	bmi.n	8001e0c <__aeabi_ddiv+0x464>
 8001e0a:	e08f      	b.n	8001f2c <__aeabi_ddiv+0x584>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	2400      	movs	r4, #0
 8001e10:	2500      	movs	r5, #0
 8001e12:	e623      	b.n	8001a5c <__aeabi_ddiv+0xb4>
 8001e14:	42b5      	cmp	r5, r6
 8001e16:	d300      	bcc.n	8001e1a <__aeabi_ddiv+0x472>
 8001e18:	e764      	b.n	8001ce4 <__aeabi_ddiv+0x33c>
 8001e1a:	4643      	mov	r3, r8
 8001e1c:	1e5a      	subs	r2, r3, #1
 8001e1e:	9b00      	ldr	r3, [sp, #0]
 8001e20:	469c      	mov	ip, r3
 8001e22:	4465      	add	r5, ip
 8001e24:	001f      	movs	r7, r3
 8001e26:	429d      	cmp	r5, r3
 8001e28:	419b      	sbcs	r3, r3
 8001e2a:	425b      	negs	r3, r3
 8001e2c:	191b      	adds	r3, r3, r4
 8001e2e:	18c9      	adds	r1, r1, r3
 8001e30:	428c      	cmp	r4, r1
 8001e32:	d23a      	bcs.n	8001eaa <__aeabi_ddiv+0x502>
 8001e34:	4288      	cmp	r0, r1
 8001e36:	d863      	bhi.n	8001f00 <__aeabi_ddiv+0x558>
 8001e38:	d060      	beq.n	8001efc <__aeabi_ddiv+0x554>
 8001e3a:	4690      	mov	r8, r2
 8001e3c:	e752      	b.n	8001ce4 <__aeabi_ddiv+0x33c>
 8001e3e:	42aa      	cmp	r2, r5
 8001e40:	d900      	bls.n	8001e44 <__aeabi_ddiv+0x49c>
 8001e42:	e6ea      	b.n	8001c1a <__aeabi_ddiv+0x272>
 8001e44:	4643      	mov	r3, r8
 8001e46:	07de      	lsls	r6, r3, #31
 8001e48:	0858      	lsrs	r0, r3, #1
 8001e4a:	086b      	lsrs	r3, r5, #1
 8001e4c:	431e      	orrs	r6, r3
 8001e4e:	07ed      	lsls	r5, r5, #31
 8001e50:	e6ea      	b.n	8001c28 <__aeabi_ddiv+0x280>
 8001e52:	4648      	mov	r0, r9
 8001e54:	f000 fc32 	bl	80026bc <__clzsi2>
 8001e58:	0001      	movs	r1, r0
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	3115      	adds	r1, #21
 8001e5e:	3220      	adds	r2, #32
 8001e60:	291c      	cmp	r1, #28
 8001e62:	dc00      	bgt.n	8001e66 <__aeabi_ddiv+0x4be>
 8001e64:	e61a      	b.n	8001a9c <__aeabi_ddiv+0xf4>
 8001e66:	464b      	mov	r3, r9
 8001e68:	3808      	subs	r0, #8
 8001e6a:	4083      	lsls	r3, r0
 8001e6c:	2500      	movs	r5, #0
 8001e6e:	4698      	mov	r8, r3
 8001e70:	e620      	b.n	8001ab4 <__aeabi_ddiv+0x10c>
 8001e72:	f000 fc23 	bl	80026bc <__clzsi2>
 8001e76:	0003      	movs	r3, r0
 8001e78:	001a      	movs	r2, r3
 8001e7a:	3215      	adds	r2, #21
 8001e7c:	3020      	adds	r0, #32
 8001e7e:	2a1c      	cmp	r2, #28
 8001e80:	dc00      	bgt.n	8001e84 <__aeabi_ddiv+0x4dc>
 8001e82:	e630      	b.n	8001ae6 <__aeabi_ddiv+0x13e>
 8001e84:	4654      	mov	r4, sl
 8001e86:	3b08      	subs	r3, #8
 8001e88:	2200      	movs	r2, #0
 8001e8a:	409c      	lsls	r4, r3
 8001e8c:	e635      	b.n	8001afa <__aeabi_ddiv+0x152>
 8001e8e:	230f      	movs	r3, #15
 8001e90:	402b      	ands	r3, r5
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d100      	bne.n	8001e98 <__aeabi_ddiv+0x4f0>
 8001e96:	e652      	b.n	8001b3e <__aeabi_ddiv+0x196>
 8001e98:	2305      	movs	r3, #5
 8001e9a:	425b      	negs	r3, r3
 8001e9c:	42ab      	cmp	r3, r5
 8001e9e:	419b      	sbcs	r3, r3
 8001ea0:	3504      	adds	r5, #4
 8001ea2:	425b      	negs	r3, r3
 8001ea4:	08ed      	lsrs	r5, r5, #3
 8001ea6:	4498      	add	r8, r3
 8001ea8:	e64a      	b.n	8001b40 <__aeabi_ddiv+0x198>
 8001eaa:	428c      	cmp	r4, r1
 8001eac:	d1c5      	bne.n	8001e3a <__aeabi_ddiv+0x492>
 8001eae:	42af      	cmp	r7, r5
 8001eb0:	d9c0      	bls.n	8001e34 <__aeabi_ddiv+0x48c>
 8001eb2:	4690      	mov	r8, r2
 8001eb4:	e716      	b.n	8001ce4 <__aeabi_ddiv+0x33c>
 8001eb6:	428a      	cmp	r2, r1
 8001eb8:	d800      	bhi.n	8001ebc <__aeabi_ddiv+0x514>
 8001eba:	e6ea      	b.n	8001c92 <__aeabi_ddiv+0x2ea>
 8001ebc:	1e83      	subs	r3, r0, #2
 8001ebe:	1909      	adds	r1, r1, r4
 8001ec0:	e6e7      	b.n	8001c92 <__aeabi_ddiv+0x2ea>
 8001ec2:	4a2a      	ldr	r2, [pc, #168]	; (8001f6c <__aeabi_ddiv+0x5c4>)
 8001ec4:	0028      	movs	r0, r5
 8001ec6:	445a      	add	r2, fp
 8001ec8:	4643      	mov	r3, r8
 8001eca:	4095      	lsls	r5, r2
 8001ecc:	4093      	lsls	r3, r2
 8001ece:	40c8      	lsrs	r0, r1
 8001ed0:	1e6a      	subs	r2, r5, #1
 8001ed2:	4195      	sbcs	r5, r2
 8001ed4:	4644      	mov	r4, r8
 8001ed6:	4303      	orrs	r3, r0
 8001ed8:	432b      	orrs	r3, r5
 8001eda:	40cc      	lsrs	r4, r1
 8001edc:	075a      	lsls	r2, r3, #29
 8001ede:	d092      	beq.n	8001e06 <__aeabi_ddiv+0x45e>
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	2a04      	cmp	r2, #4
 8001ee6:	d188      	bne.n	8001dfa <__aeabi_ddiv+0x452>
 8001ee8:	e78d      	b.n	8001e06 <__aeabi_ddiv+0x45e>
 8001eea:	0035      	movs	r5, r6
 8001eec:	4281      	cmp	r1, r0
 8001eee:	d000      	beq.n	8001ef2 <__aeabi_ddiv+0x54a>
 8001ef0:	e74b      	b.n	8001d8a <__aeabi_ddiv+0x3e2>
 8001ef2:	9a00      	ldr	r2, [sp, #0]
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d000      	beq.n	8001efa <__aeabi_ddiv+0x552>
 8001ef8:	e747      	b.n	8001d8a <__aeabi_ddiv+0x3e2>
 8001efa:	e618      	b.n	8001b2e <__aeabi_ddiv+0x186>
 8001efc:	42ae      	cmp	r6, r5
 8001efe:	d99c      	bls.n	8001e3a <__aeabi_ddiv+0x492>
 8001f00:	2302      	movs	r3, #2
 8001f02:	425b      	negs	r3, r3
 8001f04:	469c      	mov	ip, r3
 8001f06:	9b00      	ldr	r3, [sp, #0]
 8001f08:	44e0      	add	r8, ip
 8001f0a:	469c      	mov	ip, r3
 8001f0c:	4465      	add	r5, ip
 8001f0e:	429d      	cmp	r5, r3
 8001f10:	419b      	sbcs	r3, r3
 8001f12:	425b      	negs	r3, r3
 8001f14:	191b      	adds	r3, r3, r4
 8001f16:	18c9      	adds	r1, r1, r3
 8001f18:	e6e4      	b.n	8001ce4 <__aeabi_ddiv+0x33c>
 8001f1a:	4a15      	ldr	r2, [pc, #84]	; (8001f70 <__aeabi_ddiv+0x5c8>)
 8001f1c:	445a      	add	r2, fp
 8001f1e:	2a00      	cmp	r2, #0
 8001f20:	dc00      	bgt.n	8001f24 <__aeabi_ddiv+0x57c>
 8001f22:	e744      	b.n	8001dae <__aeabi_ddiv+0x406>
 8001f24:	2301      	movs	r3, #1
 8001f26:	2500      	movs	r5, #0
 8001f28:	4498      	add	r8, r3
 8001f2a:	e609      	b.n	8001b40 <__aeabi_ddiv+0x198>
 8001f2c:	0765      	lsls	r5, r4, #29
 8001f2e:	0264      	lsls	r4, r4, #9
 8001f30:	0b24      	lsrs	r4, r4, #12
 8001f32:	08db      	lsrs	r3, r3, #3
 8001f34:	431d      	orrs	r5, r3
 8001f36:	2300      	movs	r3, #0
 8001f38:	e590      	b.n	8001a5c <__aeabi_ddiv+0xb4>
 8001f3a:	9e00      	ldr	r6, [sp, #0]
 8001f3c:	3d02      	subs	r5, #2
 8001f3e:	0072      	lsls	r2, r6, #1
 8001f40:	42b2      	cmp	r2, r6
 8001f42:	41bf      	sbcs	r7, r7
 8001f44:	427f      	negs	r7, r7
 8001f46:	193c      	adds	r4, r7, r4
 8001f48:	1909      	adds	r1, r1, r4
 8001f4a:	9200      	str	r2, [sp, #0]
 8001f4c:	e7ce      	b.n	8001eec <__aeabi_ddiv+0x544>
 8001f4e:	2480      	movs	r4, #128	; 0x80
 8001f50:	4643      	mov	r3, r8
 8001f52:	0324      	lsls	r4, r4, #12
 8001f54:	431c      	orrs	r4, r3
 8001f56:	0324      	lsls	r4, r4, #12
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <__aeabi_ddiv+0x5cc>)
 8001f5a:	0b24      	lsrs	r4, r4, #12
 8001f5c:	e57e      	b.n	8001a5c <__aeabi_ddiv+0xb4>
 8001f5e:	9a00      	ldr	r2, [sp, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d3ea      	bcc.n	8001f3a <__aeabi_ddiv+0x592>
 8001f64:	0035      	movs	r5, r6
 8001f66:	e7c4      	b.n	8001ef2 <__aeabi_ddiv+0x54a>
 8001f68:	0000043e 	.word	0x0000043e
 8001f6c:	0000041e 	.word	0x0000041e
 8001f70:	000003ff 	.word	0x000003ff
 8001f74:	000007ff 	.word	0x000007ff

08001f78 <__aeabi_dmul>:
 8001f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f7a:	4657      	mov	r7, sl
 8001f7c:	464e      	mov	r6, r9
 8001f7e:	4645      	mov	r5, r8
 8001f80:	46de      	mov	lr, fp
 8001f82:	b5e0      	push	{r5, r6, r7, lr}
 8001f84:	4698      	mov	r8, r3
 8001f86:	030c      	lsls	r4, r1, #12
 8001f88:	004b      	lsls	r3, r1, #1
 8001f8a:	0006      	movs	r6, r0
 8001f8c:	4692      	mov	sl, r2
 8001f8e:	b087      	sub	sp, #28
 8001f90:	0b24      	lsrs	r4, r4, #12
 8001f92:	0d5b      	lsrs	r3, r3, #21
 8001f94:	0fcf      	lsrs	r7, r1, #31
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d06c      	beq.n	8002074 <__aeabi_dmul+0xfc>
 8001f9a:	4add      	ldr	r2, [pc, #884]	; (8002310 <__aeabi_dmul+0x398>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x2a>
 8001fa0:	e086      	b.n	80020b0 <__aeabi_dmul+0x138>
 8001fa2:	0f42      	lsrs	r2, r0, #29
 8001fa4:	00e4      	lsls	r4, r4, #3
 8001fa6:	4314      	orrs	r4, r2
 8001fa8:	2280      	movs	r2, #128	; 0x80
 8001faa:	0412      	lsls	r2, r2, #16
 8001fac:	4314      	orrs	r4, r2
 8001fae:	4ad9      	ldr	r2, [pc, #868]	; (8002314 <__aeabi_dmul+0x39c>)
 8001fb0:	00c5      	lsls	r5, r0, #3
 8001fb2:	4694      	mov	ip, r2
 8001fb4:	4463      	add	r3, ip
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	4699      	mov	r9, r3
 8001fbc:	469b      	mov	fp, r3
 8001fbe:	4643      	mov	r3, r8
 8001fc0:	4642      	mov	r2, r8
 8001fc2:	031e      	lsls	r6, r3, #12
 8001fc4:	0fd2      	lsrs	r2, r2, #31
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4650      	mov	r0, sl
 8001fca:	4690      	mov	r8, r2
 8001fcc:	0b36      	lsrs	r6, r6, #12
 8001fce:	0d5b      	lsrs	r3, r3, #21
 8001fd0:	d100      	bne.n	8001fd4 <__aeabi_dmul+0x5c>
 8001fd2:	e078      	b.n	80020c6 <__aeabi_dmul+0x14e>
 8001fd4:	4ace      	ldr	r2, [pc, #824]	; (8002310 <__aeabi_dmul+0x398>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d01d      	beq.n	8002016 <__aeabi_dmul+0x9e>
 8001fda:	49ce      	ldr	r1, [pc, #824]	; (8002314 <__aeabi_dmul+0x39c>)
 8001fdc:	0f42      	lsrs	r2, r0, #29
 8001fde:	468c      	mov	ip, r1
 8001fe0:	9900      	ldr	r1, [sp, #0]
 8001fe2:	4463      	add	r3, ip
 8001fe4:	00f6      	lsls	r6, r6, #3
 8001fe6:	468c      	mov	ip, r1
 8001fe8:	4316      	orrs	r6, r2
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	449c      	add	ip, r3
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	4663      	mov	r3, ip
 8001ff2:	4316      	orrs	r6, r2
 8001ff4:	00c2      	lsls	r2, r0, #3
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	9900      	ldr	r1, [sp, #0]
 8001ffc:	4643      	mov	r3, r8
 8001ffe:	3101      	adds	r1, #1
 8002000:	468c      	mov	ip, r1
 8002002:	4649      	mov	r1, r9
 8002004:	407b      	eors	r3, r7
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	290f      	cmp	r1, #15
 800200a:	d900      	bls.n	800200e <__aeabi_dmul+0x96>
 800200c:	e07e      	b.n	800210c <__aeabi_dmul+0x194>
 800200e:	4bc2      	ldr	r3, [pc, #776]	; (8002318 <__aeabi_dmul+0x3a0>)
 8002010:	0089      	lsls	r1, r1, #2
 8002012:	5859      	ldr	r1, [r3, r1]
 8002014:	468f      	mov	pc, r1
 8002016:	4652      	mov	r2, sl
 8002018:	9b00      	ldr	r3, [sp, #0]
 800201a:	4332      	orrs	r2, r6
 800201c:	d000      	beq.n	8002020 <__aeabi_dmul+0xa8>
 800201e:	e156      	b.n	80022ce <__aeabi_dmul+0x356>
 8002020:	49bb      	ldr	r1, [pc, #748]	; (8002310 <__aeabi_dmul+0x398>)
 8002022:	2600      	movs	r6, #0
 8002024:	468c      	mov	ip, r1
 8002026:	4463      	add	r3, ip
 8002028:	4649      	mov	r1, r9
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2302      	movs	r3, #2
 800202e:	4319      	orrs	r1, r3
 8002030:	4689      	mov	r9, r1
 8002032:	2002      	movs	r0, #2
 8002034:	e7e1      	b.n	8001ffa <__aeabi_dmul+0x82>
 8002036:	4643      	mov	r3, r8
 8002038:	9301      	str	r3, [sp, #4]
 800203a:	0034      	movs	r4, r6
 800203c:	0015      	movs	r5, r2
 800203e:	4683      	mov	fp, r0
 8002040:	465b      	mov	r3, fp
 8002042:	2b02      	cmp	r3, #2
 8002044:	d05e      	beq.n	8002104 <__aeabi_dmul+0x18c>
 8002046:	2b03      	cmp	r3, #3
 8002048:	d100      	bne.n	800204c <__aeabi_dmul+0xd4>
 800204a:	e1f3      	b.n	8002434 <__aeabi_dmul+0x4bc>
 800204c:	2b01      	cmp	r3, #1
 800204e:	d000      	beq.n	8002052 <__aeabi_dmul+0xda>
 8002050:	e118      	b.n	8002284 <__aeabi_dmul+0x30c>
 8002052:	2200      	movs	r2, #0
 8002054:	2400      	movs	r4, #0
 8002056:	2500      	movs	r5, #0
 8002058:	9b01      	ldr	r3, [sp, #4]
 800205a:	0512      	lsls	r2, r2, #20
 800205c:	4322      	orrs	r2, r4
 800205e:	07db      	lsls	r3, r3, #31
 8002060:	431a      	orrs	r2, r3
 8002062:	0028      	movs	r0, r5
 8002064:	0011      	movs	r1, r2
 8002066:	b007      	add	sp, #28
 8002068:	bcf0      	pop	{r4, r5, r6, r7}
 800206a:	46bb      	mov	fp, r7
 800206c:	46b2      	mov	sl, r6
 800206e:	46a9      	mov	r9, r5
 8002070:	46a0      	mov	r8, r4
 8002072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002074:	0025      	movs	r5, r4
 8002076:	4305      	orrs	r5, r0
 8002078:	d100      	bne.n	800207c <__aeabi_dmul+0x104>
 800207a:	e141      	b.n	8002300 <__aeabi_dmul+0x388>
 800207c:	2c00      	cmp	r4, #0
 800207e:	d100      	bne.n	8002082 <__aeabi_dmul+0x10a>
 8002080:	e1ad      	b.n	80023de <__aeabi_dmul+0x466>
 8002082:	0020      	movs	r0, r4
 8002084:	f000 fb1a 	bl	80026bc <__clzsi2>
 8002088:	0001      	movs	r1, r0
 800208a:	0002      	movs	r2, r0
 800208c:	390b      	subs	r1, #11
 800208e:	231d      	movs	r3, #29
 8002090:	0010      	movs	r0, r2
 8002092:	1a5b      	subs	r3, r3, r1
 8002094:	0031      	movs	r1, r6
 8002096:	0035      	movs	r5, r6
 8002098:	3808      	subs	r0, #8
 800209a:	4084      	lsls	r4, r0
 800209c:	40d9      	lsrs	r1, r3
 800209e:	4085      	lsls	r5, r0
 80020a0:	430c      	orrs	r4, r1
 80020a2:	489e      	ldr	r0, [pc, #632]	; (800231c <__aeabi_dmul+0x3a4>)
 80020a4:	1a83      	subs	r3, r0, r2
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	2300      	movs	r3, #0
 80020aa:	4699      	mov	r9, r3
 80020ac:	469b      	mov	fp, r3
 80020ae:	e786      	b.n	8001fbe <__aeabi_dmul+0x46>
 80020b0:	0005      	movs	r5, r0
 80020b2:	4325      	orrs	r5, r4
 80020b4:	d000      	beq.n	80020b8 <__aeabi_dmul+0x140>
 80020b6:	e11c      	b.n	80022f2 <__aeabi_dmul+0x37a>
 80020b8:	2208      	movs	r2, #8
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2302      	movs	r3, #2
 80020be:	2400      	movs	r4, #0
 80020c0:	4691      	mov	r9, r2
 80020c2:	469b      	mov	fp, r3
 80020c4:	e77b      	b.n	8001fbe <__aeabi_dmul+0x46>
 80020c6:	4652      	mov	r2, sl
 80020c8:	4332      	orrs	r2, r6
 80020ca:	d100      	bne.n	80020ce <__aeabi_dmul+0x156>
 80020cc:	e10a      	b.n	80022e4 <__aeabi_dmul+0x36c>
 80020ce:	2e00      	cmp	r6, #0
 80020d0:	d100      	bne.n	80020d4 <__aeabi_dmul+0x15c>
 80020d2:	e176      	b.n	80023c2 <__aeabi_dmul+0x44a>
 80020d4:	0030      	movs	r0, r6
 80020d6:	f000 faf1 	bl	80026bc <__clzsi2>
 80020da:	0002      	movs	r2, r0
 80020dc:	3a0b      	subs	r2, #11
 80020de:	231d      	movs	r3, #29
 80020e0:	0001      	movs	r1, r0
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	4652      	mov	r2, sl
 80020e6:	3908      	subs	r1, #8
 80020e8:	40da      	lsrs	r2, r3
 80020ea:	408e      	lsls	r6, r1
 80020ec:	4316      	orrs	r6, r2
 80020ee:	4652      	mov	r2, sl
 80020f0:	408a      	lsls	r2, r1
 80020f2:	9b00      	ldr	r3, [sp, #0]
 80020f4:	4989      	ldr	r1, [pc, #548]	; (800231c <__aeabi_dmul+0x3a4>)
 80020f6:	1a18      	subs	r0, r3, r0
 80020f8:	0003      	movs	r3, r0
 80020fa:	468c      	mov	ip, r1
 80020fc:	4463      	add	r3, ip
 80020fe:	2000      	movs	r0, #0
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	e77a      	b.n	8001ffa <__aeabi_dmul+0x82>
 8002104:	2400      	movs	r4, #0
 8002106:	2500      	movs	r5, #0
 8002108:	4a81      	ldr	r2, [pc, #516]	; (8002310 <__aeabi_dmul+0x398>)
 800210a:	e7a5      	b.n	8002058 <__aeabi_dmul+0xe0>
 800210c:	0c2f      	lsrs	r7, r5, #16
 800210e:	042d      	lsls	r5, r5, #16
 8002110:	0c2d      	lsrs	r5, r5, #16
 8002112:	002b      	movs	r3, r5
 8002114:	0c11      	lsrs	r1, r2, #16
 8002116:	0412      	lsls	r2, r2, #16
 8002118:	0c12      	lsrs	r2, r2, #16
 800211a:	4353      	muls	r3, r2
 800211c:	4698      	mov	r8, r3
 800211e:	0013      	movs	r3, r2
 8002120:	0028      	movs	r0, r5
 8002122:	437b      	muls	r3, r7
 8002124:	4699      	mov	r9, r3
 8002126:	4348      	muls	r0, r1
 8002128:	4448      	add	r0, r9
 800212a:	4683      	mov	fp, r0
 800212c:	4640      	mov	r0, r8
 800212e:	000b      	movs	r3, r1
 8002130:	0c00      	lsrs	r0, r0, #16
 8002132:	4682      	mov	sl, r0
 8002134:	4658      	mov	r0, fp
 8002136:	437b      	muls	r3, r7
 8002138:	4450      	add	r0, sl
 800213a:	9302      	str	r3, [sp, #8]
 800213c:	4581      	cmp	r9, r0
 800213e:	d906      	bls.n	800214e <__aeabi_dmul+0x1d6>
 8002140:	469a      	mov	sl, r3
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	025b      	lsls	r3, r3, #9
 8002146:	4699      	mov	r9, r3
 8002148:	44ca      	add	sl, r9
 800214a:	4653      	mov	r3, sl
 800214c:	9302      	str	r3, [sp, #8]
 800214e:	0c03      	lsrs	r3, r0, #16
 8002150:	469b      	mov	fp, r3
 8002152:	4643      	mov	r3, r8
 8002154:	041b      	lsls	r3, r3, #16
 8002156:	0400      	lsls	r0, r0, #16
 8002158:	0c1b      	lsrs	r3, r3, #16
 800215a:	4698      	mov	r8, r3
 800215c:	0003      	movs	r3, r0
 800215e:	4443      	add	r3, r8
 8002160:	9304      	str	r3, [sp, #16]
 8002162:	0c33      	lsrs	r3, r6, #16
 8002164:	4699      	mov	r9, r3
 8002166:	002b      	movs	r3, r5
 8002168:	0436      	lsls	r6, r6, #16
 800216a:	0c36      	lsrs	r6, r6, #16
 800216c:	4373      	muls	r3, r6
 800216e:	4698      	mov	r8, r3
 8002170:	0033      	movs	r3, r6
 8002172:	437b      	muls	r3, r7
 8002174:	469a      	mov	sl, r3
 8002176:	464b      	mov	r3, r9
 8002178:	435d      	muls	r5, r3
 800217a:	435f      	muls	r7, r3
 800217c:	4643      	mov	r3, r8
 800217e:	4455      	add	r5, sl
 8002180:	0c18      	lsrs	r0, r3, #16
 8002182:	1940      	adds	r0, r0, r5
 8002184:	4582      	cmp	sl, r0
 8002186:	d903      	bls.n	8002190 <__aeabi_dmul+0x218>
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	025b      	lsls	r3, r3, #9
 800218c:	469a      	mov	sl, r3
 800218e:	4457      	add	r7, sl
 8002190:	0c05      	lsrs	r5, r0, #16
 8002192:	19eb      	adds	r3, r5, r7
 8002194:	9305      	str	r3, [sp, #20]
 8002196:	4643      	mov	r3, r8
 8002198:	041d      	lsls	r5, r3, #16
 800219a:	0c2d      	lsrs	r5, r5, #16
 800219c:	0400      	lsls	r0, r0, #16
 800219e:	1940      	adds	r0, r0, r5
 80021a0:	0c25      	lsrs	r5, r4, #16
 80021a2:	0424      	lsls	r4, r4, #16
 80021a4:	0c24      	lsrs	r4, r4, #16
 80021a6:	0027      	movs	r7, r4
 80021a8:	4357      	muls	r7, r2
 80021aa:	436a      	muls	r2, r5
 80021ac:	4690      	mov	r8, r2
 80021ae:	002a      	movs	r2, r5
 80021b0:	0c3b      	lsrs	r3, r7, #16
 80021b2:	469a      	mov	sl, r3
 80021b4:	434a      	muls	r2, r1
 80021b6:	4361      	muls	r1, r4
 80021b8:	4441      	add	r1, r8
 80021ba:	4451      	add	r1, sl
 80021bc:	4483      	add	fp, r0
 80021be:	4588      	cmp	r8, r1
 80021c0:	d903      	bls.n	80021ca <__aeabi_dmul+0x252>
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	025b      	lsls	r3, r3, #9
 80021c6:	4698      	mov	r8, r3
 80021c8:	4442      	add	r2, r8
 80021ca:	043f      	lsls	r7, r7, #16
 80021cc:	0c0b      	lsrs	r3, r1, #16
 80021ce:	0c3f      	lsrs	r7, r7, #16
 80021d0:	0409      	lsls	r1, r1, #16
 80021d2:	19c9      	adds	r1, r1, r7
 80021d4:	0027      	movs	r7, r4
 80021d6:	4698      	mov	r8, r3
 80021d8:	464b      	mov	r3, r9
 80021da:	4377      	muls	r7, r6
 80021dc:	435c      	muls	r4, r3
 80021de:	436e      	muls	r6, r5
 80021e0:	435d      	muls	r5, r3
 80021e2:	0c3b      	lsrs	r3, r7, #16
 80021e4:	4699      	mov	r9, r3
 80021e6:	19a4      	adds	r4, r4, r6
 80021e8:	444c      	add	r4, r9
 80021ea:	4442      	add	r2, r8
 80021ec:	9503      	str	r5, [sp, #12]
 80021ee:	42a6      	cmp	r6, r4
 80021f0:	d904      	bls.n	80021fc <__aeabi_dmul+0x284>
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	025b      	lsls	r3, r3, #9
 80021f6:	4698      	mov	r8, r3
 80021f8:	4445      	add	r5, r8
 80021fa:	9503      	str	r5, [sp, #12]
 80021fc:	9b02      	ldr	r3, [sp, #8]
 80021fe:	043f      	lsls	r7, r7, #16
 8002200:	445b      	add	r3, fp
 8002202:	001e      	movs	r6, r3
 8002204:	4283      	cmp	r3, r0
 8002206:	4180      	sbcs	r0, r0
 8002208:	0423      	lsls	r3, r4, #16
 800220a:	4698      	mov	r8, r3
 800220c:	9b05      	ldr	r3, [sp, #20]
 800220e:	0c3f      	lsrs	r7, r7, #16
 8002210:	4447      	add	r7, r8
 8002212:	4698      	mov	r8, r3
 8002214:	1876      	adds	r6, r6, r1
 8002216:	428e      	cmp	r6, r1
 8002218:	4189      	sbcs	r1, r1
 800221a:	4447      	add	r7, r8
 800221c:	4240      	negs	r0, r0
 800221e:	183d      	adds	r5, r7, r0
 8002220:	46a8      	mov	r8, r5
 8002222:	4693      	mov	fp, r2
 8002224:	4249      	negs	r1, r1
 8002226:	468a      	mov	sl, r1
 8002228:	44c3      	add	fp, r8
 800222a:	429f      	cmp	r7, r3
 800222c:	41bf      	sbcs	r7, r7
 800222e:	4580      	cmp	r8, r0
 8002230:	4180      	sbcs	r0, r0
 8002232:	9b03      	ldr	r3, [sp, #12]
 8002234:	44da      	add	sl, fp
 8002236:	4698      	mov	r8, r3
 8002238:	4653      	mov	r3, sl
 800223a:	4240      	negs	r0, r0
 800223c:	427f      	negs	r7, r7
 800223e:	4307      	orrs	r7, r0
 8002240:	0c24      	lsrs	r4, r4, #16
 8002242:	4593      	cmp	fp, r2
 8002244:	4192      	sbcs	r2, r2
 8002246:	458a      	cmp	sl, r1
 8002248:	4189      	sbcs	r1, r1
 800224a:	193f      	adds	r7, r7, r4
 800224c:	0ddc      	lsrs	r4, r3, #23
 800224e:	9b04      	ldr	r3, [sp, #16]
 8002250:	0275      	lsls	r5, r6, #9
 8002252:	431d      	orrs	r5, r3
 8002254:	1e68      	subs	r0, r5, #1
 8002256:	4185      	sbcs	r5, r0
 8002258:	4653      	mov	r3, sl
 800225a:	4252      	negs	r2, r2
 800225c:	4249      	negs	r1, r1
 800225e:	430a      	orrs	r2, r1
 8002260:	18bf      	adds	r7, r7, r2
 8002262:	4447      	add	r7, r8
 8002264:	0df6      	lsrs	r6, r6, #23
 8002266:	027f      	lsls	r7, r7, #9
 8002268:	4335      	orrs	r5, r6
 800226a:	025a      	lsls	r2, r3, #9
 800226c:	433c      	orrs	r4, r7
 800226e:	4315      	orrs	r5, r2
 8002270:	01fb      	lsls	r3, r7, #7
 8002272:	d400      	bmi.n	8002276 <__aeabi_dmul+0x2fe>
 8002274:	e0c1      	b.n	80023fa <__aeabi_dmul+0x482>
 8002276:	2101      	movs	r1, #1
 8002278:	086a      	lsrs	r2, r5, #1
 800227a:	400d      	ands	r5, r1
 800227c:	4315      	orrs	r5, r2
 800227e:	07e2      	lsls	r2, r4, #31
 8002280:	4315      	orrs	r5, r2
 8002282:	0864      	lsrs	r4, r4, #1
 8002284:	4926      	ldr	r1, [pc, #152]	; (8002320 <__aeabi_dmul+0x3a8>)
 8002286:	4461      	add	r1, ip
 8002288:	2900      	cmp	r1, #0
 800228a:	dd56      	ble.n	800233a <__aeabi_dmul+0x3c2>
 800228c:	076b      	lsls	r3, r5, #29
 800228e:	d009      	beq.n	80022a4 <__aeabi_dmul+0x32c>
 8002290:	220f      	movs	r2, #15
 8002292:	402a      	ands	r2, r5
 8002294:	2a04      	cmp	r2, #4
 8002296:	d005      	beq.n	80022a4 <__aeabi_dmul+0x32c>
 8002298:	1d2a      	adds	r2, r5, #4
 800229a:	42aa      	cmp	r2, r5
 800229c:	41ad      	sbcs	r5, r5
 800229e:	426d      	negs	r5, r5
 80022a0:	1964      	adds	r4, r4, r5
 80022a2:	0015      	movs	r5, r2
 80022a4:	01e3      	lsls	r3, r4, #7
 80022a6:	d504      	bpl.n	80022b2 <__aeabi_dmul+0x33a>
 80022a8:	2180      	movs	r1, #128	; 0x80
 80022aa:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <__aeabi_dmul+0x3ac>)
 80022ac:	00c9      	lsls	r1, r1, #3
 80022ae:	4014      	ands	r4, r2
 80022b0:	4461      	add	r1, ip
 80022b2:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <__aeabi_dmul+0x3b0>)
 80022b4:	4291      	cmp	r1, r2
 80022b6:	dd00      	ble.n	80022ba <__aeabi_dmul+0x342>
 80022b8:	e724      	b.n	8002104 <__aeabi_dmul+0x18c>
 80022ba:	0762      	lsls	r2, r4, #29
 80022bc:	08ed      	lsrs	r5, r5, #3
 80022be:	0264      	lsls	r4, r4, #9
 80022c0:	0549      	lsls	r1, r1, #21
 80022c2:	4315      	orrs	r5, r2
 80022c4:	0b24      	lsrs	r4, r4, #12
 80022c6:	0d4a      	lsrs	r2, r1, #21
 80022c8:	e6c6      	b.n	8002058 <__aeabi_dmul+0xe0>
 80022ca:	9701      	str	r7, [sp, #4]
 80022cc:	e6b8      	b.n	8002040 <__aeabi_dmul+0xc8>
 80022ce:	4a10      	ldr	r2, [pc, #64]	; (8002310 <__aeabi_dmul+0x398>)
 80022d0:	2003      	movs	r0, #3
 80022d2:	4694      	mov	ip, r2
 80022d4:	4463      	add	r3, ip
 80022d6:	464a      	mov	r2, r9
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2303      	movs	r3, #3
 80022dc:	431a      	orrs	r2, r3
 80022de:	4691      	mov	r9, r2
 80022e0:	4652      	mov	r2, sl
 80022e2:	e68a      	b.n	8001ffa <__aeabi_dmul+0x82>
 80022e4:	4649      	mov	r1, r9
 80022e6:	2301      	movs	r3, #1
 80022e8:	4319      	orrs	r1, r3
 80022ea:	4689      	mov	r9, r1
 80022ec:	2600      	movs	r6, #0
 80022ee:	2001      	movs	r0, #1
 80022f0:	e683      	b.n	8001ffa <__aeabi_dmul+0x82>
 80022f2:	220c      	movs	r2, #12
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	2303      	movs	r3, #3
 80022f8:	0005      	movs	r5, r0
 80022fa:	4691      	mov	r9, r2
 80022fc:	469b      	mov	fp, r3
 80022fe:	e65e      	b.n	8001fbe <__aeabi_dmul+0x46>
 8002300:	2304      	movs	r3, #4
 8002302:	4699      	mov	r9, r3
 8002304:	2300      	movs	r3, #0
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	3301      	adds	r3, #1
 800230a:	2400      	movs	r4, #0
 800230c:	469b      	mov	fp, r3
 800230e:	e656      	b.n	8001fbe <__aeabi_dmul+0x46>
 8002310:	000007ff 	.word	0x000007ff
 8002314:	fffffc01 	.word	0xfffffc01
 8002318:	08006c20 	.word	0x08006c20
 800231c:	fffffc0d 	.word	0xfffffc0d
 8002320:	000003ff 	.word	0x000003ff
 8002324:	feffffff 	.word	0xfeffffff
 8002328:	000007fe 	.word	0x000007fe
 800232c:	2300      	movs	r3, #0
 800232e:	2480      	movs	r4, #128	; 0x80
 8002330:	2500      	movs	r5, #0
 8002332:	4a44      	ldr	r2, [pc, #272]	; (8002444 <__aeabi_dmul+0x4cc>)
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	0324      	lsls	r4, r4, #12
 8002338:	e68e      	b.n	8002058 <__aeabi_dmul+0xe0>
 800233a:	2001      	movs	r0, #1
 800233c:	1a40      	subs	r0, r0, r1
 800233e:	2838      	cmp	r0, #56	; 0x38
 8002340:	dd00      	ble.n	8002344 <__aeabi_dmul+0x3cc>
 8002342:	e686      	b.n	8002052 <__aeabi_dmul+0xda>
 8002344:	281f      	cmp	r0, #31
 8002346:	dd5b      	ble.n	8002400 <__aeabi_dmul+0x488>
 8002348:	221f      	movs	r2, #31
 800234a:	0023      	movs	r3, r4
 800234c:	4252      	negs	r2, r2
 800234e:	1a51      	subs	r1, r2, r1
 8002350:	40cb      	lsrs	r3, r1
 8002352:	0019      	movs	r1, r3
 8002354:	2820      	cmp	r0, #32
 8002356:	d003      	beq.n	8002360 <__aeabi_dmul+0x3e8>
 8002358:	4a3b      	ldr	r2, [pc, #236]	; (8002448 <__aeabi_dmul+0x4d0>)
 800235a:	4462      	add	r2, ip
 800235c:	4094      	lsls	r4, r2
 800235e:	4325      	orrs	r5, r4
 8002360:	1e6a      	subs	r2, r5, #1
 8002362:	4195      	sbcs	r5, r2
 8002364:	002a      	movs	r2, r5
 8002366:	430a      	orrs	r2, r1
 8002368:	2107      	movs	r1, #7
 800236a:	000d      	movs	r5, r1
 800236c:	2400      	movs	r4, #0
 800236e:	4015      	ands	r5, r2
 8002370:	4211      	tst	r1, r2
 8002372:	d05b      	beq.n	800242c <__aeabi_dmul+0x4b4>
 8002374:	210f      	movs	r1, #15
 8002376:	2400      	movs	r4, #0
 8002378:	4011      	ands	r1, r2
 800237a:	2904      	cmp	r1, #4
 800237c:	d053      	beq.n	8002426 <__aeabi_dmul+0x4ae>
 800237e:	1d11      	adds	r1, r2, #4
 8002380:	4291      	cmp	r1, r2
 8002382:	4192      	sbcs	r2, r2
 8002384:	4252      	negs	r2, r2
 8002386:	18a4      	adds	r4, r4, r2
 8002388:	000a      	movs	r2, r1
 800238a:	0223      	lsls	r3, r4, #8
 800238c:	d54b      	bpl.n	8002426 <__aeabi_dmul+0x4ae>
 800238e:	2201      	movs	r2, #1
 8002390:	2400      	movs	r4, #0
 8002392:	2500      	movs	r5, #0
 8002394:	e660      	b.n	8002058 <__aeabi_dmul+0xe0>
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	031b      	lsls	r3, r3, #12
 800239a:	421c      	tst	r4, r3
 800239c:	d009      	beq.n	80023b2 <__aeabi_dmul+0x43a>
 800239e:	421e      	tst	r6, r3
 80023a0:	d107      	bne.n	80023b2 <__aeabi_dmul+0x43a>
 80023a2:	4333      	orrs	r3, r6
 80023a4:	031c      	lsls	r4, r3, #12
 80023a6:	4643      	mov	r3, r8
 80023a8:	0015      	movs	r5, r2
 80023aa:	0b24      	lsrs	r4, r4, #12
 80023ac:	4a25      	ldr	r2, [pc, #148]	; (8002444 <__aeabi_dmul+0x4cc>)
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	e652      	b.n	8002058 <__aeabi_dmul+0xe0>
 80023b2:	2280      	movs	r2, #128	; 0x80
 80023b4:	0312      	lsls	r2, r2, #12
 80023b6:	4314      	orrs	r4, r2
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	4a22      	ldr	r2, [pc, #136]	; (8002444 <__aeabi_dmul+0x4cc>)
 80023bc:	0b24      	lsrs	r4, r4, #12
 80023be:	9701      	str	r7, [sp, #4]
 80023c0:	e64a      	b.n	8002058 <__aeabi_dmul+0xe0>
 80023c2:	f000 f97b 	bl	80026bc <__clzsi2>
 80023c6:	0003      	movs	r3, r0
 80023c8:	001a      	movs	r2, r3
 80023ca:	3215      	adds	r2, #21
 80023cc:	3020      	adds	r0, #32
 80023ce:	2a1c      	cmp	r2, #28
 80023d0:	dc00      	bgt.n	80023d4 <__aeabi_dmul+0x45c>
 80023d2:	e684      	b.n	80020de <__aeabi_dmul+0x166>
 80023d4:	4656      	mov	r6, sl
 80023d6:	3b08      	subs	r3, #8
 80023d8:	2200      	movs	r2, #0
 80023da:	409e      	lsls	r6, r3
 80023dc:	e689      	b.n	80020f2 <__aeabi_dmul+0x17a>
 80023de:	f000 f96d 	bl	80026bc <__clzsi2>
 80023e2:	0001      	movs	r1, r0
 80023e4:	0002      	movs	r2, r0
 80023e6:	3115      	adds	r1, #21
 80023e8:	3220      	adds	r2, #32
 80023ea:	291c      	cmp	r1, #28
 80023ec:	dc00      	bgt.n	80023f0 <__aeabi_dmul+0x478>
 80023ee:	e64e      	b.n	800208e <__aeabi_dmul+0x116>
 80023f0:	0034      	movs	r4, r6
 80023f2:	3808      	subs	r0, #8
 80023f4:	2500      	movs	r5, #0
 80023f6:	4084      	lsls	r4, r0
 80023f8:	e653      	b.n	80020a2 <__aeabi_dmul+0x12a>
 80023fa:	9b00      	ldr	r3, [sp, #0]
 80023fc:	469c      	mov	ip, r3
 80023fe:	e741      	b.n	8002284 <__aeabi_dmul+0x30c>
 8002400:	4912      	ldr	r1, [pc, #72]	; (800244c <__aeabi_dmul+0x4d4>)
 8002402:	0022      	movs	r2, r4
 8002404:	4461      	add	r1, ip
 8002406:	002e      	movs	r6, r5
 8002408:	408d      	lsls	r5, r1
 800240a:	408a      	lsls	r2, r1
 800240c:	40c6      	lsrs	r6, r0
 800240e:	1e69      	subs	r1, r5, #1
 8002410:	418d      	sbcs	r5, r1
 8002412:	4332      	orrs	r2, r6
 8002414:	432a      	orrs	r2, r5
 8002416:	40c4      	lsrs	r4, r0
 8002418:	0753      	lsls	r3, r2, #29
 800241a:	d0b6      	beq.n	800238a <__aeabi_dmul+0x412>
 800241c:	210f      	movs	r1, #15
 800241e:	4011      	ands	r1, r2
 8002420:	2904      	cmp	r1, #4
 8002422:	d1ac      	bne.n	800237e <__aeabi_dmul+0x406>
 8002424:	e7b1      	b.n	800238a <__aeabi_dmul+0x412>
 8002426:	0765      	lsls	r5, r4, #29
 8002428:	0264      	lsls	r4, r4, #9
 800242a:	0b24      	lsrs	r4, r4, #12
 800242c:	08d2      	lsrs	r2, r2, #3
 800242e:	4315      	orrs	r5, r2
 8002430:	2200      	movs	r2, #0
 8002432:	e611      	b.n	8002058 <__aeabi_dmul+0xe0>
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	0312      	lsls	r2, r2, #12
 8002438:	4314      	orrs	r4, r2
 800243a:	0324      	lsls	r4, r4, #12
 800243c:	4a01      	ldr	r2, [pc, #4]	; (8002444 <__aeabi_dmul+0x4cc>)
 800243e:	0b24      	lsrs	r4, r4, #12
 8002440:	e60a      	b.n	8002058 <__aeabi_dmul+0xe0>
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	000007ff 	.word	0x000007ff
 8002448:	0000043e 	.word	0x0000043e
 800244c:	0000041e 	.word	0x0000041e

08002450 <__aeabi_d2iz>:
 8002450:	000a      	movs	r2, r1
 8002452:	b530      	push	{r4, r5, lr}
 8002454:	4c13      	ldr	r4, [pc, #76]	; (80024a4 <__aeabi_d2iz+0x54>)
 8002456:	0053      	lsls	r3, r2, #1
 8002458:	0309      	lsls	r1, r1, #12
 800245a:	0005      	movs	r5, r0
 800245c:	0b09      	lsrs	r1, r1, #12
 800245e:	2000      	movs	r0, #0
 8002460:	0d5b      	lsrs	r3, r3, #21
 8002462:	0fd2      	lsrs	r2, r2, #31
 8002464:	42a3      	cmp	r3, r4
 8002466:	dd04      	ble.n	8002472 <__aeabi_d2iz+0x22>
 8002468:	480f      	ldr	r0, [pc, #60]	; (80024a8 <__aeabi_d2iz+0x58>)
 800246a:	4283      	cmp	r3, r0
 800246c:	dd02      	ble.n	8002474 <__aeabi_d2iz+0x24>
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <__aeabi_d2iz+0x5c>)
 8002470:	18d0      	adds	r0, r2, r3
 8002472:	bd30      	pop	{r4, r5, pc}
 8002474:	2080      	movs	r0, #128	; 0x80
 8002476:	0340      	lsls	r0, r0, #13
 8002478:	4301      	orrs	r1, r0
 800247a:	480d      	ldr	r0, [pc, #52]	; (80024b0 <__aeabi_d2iz+0x60>)
 800247c:	1ac0      	subs	r0, r0, r3
 800247e:	281f      	cmp	r0, #31
 8002480:	dd08      	ble.n	8002494 <__aeabi_d2iz+0x44>
 8002482:	480c      	ldr	r0, [pc, #48]	; (80024b4 <__aeabi_d2iz+0x64>)
 8002484:	1ac3      	subs	r3, r0, r3
 8002486:	40d9      	lsrs	r1, r3
 8002488:	000b      	movs	r3, r1
 800248a:	4258      	negs	r0, r3
 800248c:	2a00      	cmp	r2, #0
 800248e:	d1f0      	bne.n	8002472 <__aeabi_d2iz+0x22>
 8002490:	0018      	movs	r0, r3
 8002492:	e7ee      	b.n	8002472 <__aeabi_d2iz+0x22>
 8002494:	4c08      	ldr	r4, [pc, #32]	; (80024b8 <__aeabi_d2iz+0x68>)
 8002496:	40c5      	lsrs	r5, r0
 8002498:	46a4      	mov	ip, r4
 800249a:	4463      	add	r3, ip
 800249c:	4099      	lsls	r1, r3
 800249e:	000b      	movs	r3, r1
 80024a0:	432b      	orrs	r3, r5
 80024a2:	e7f2      	b.n	800248a <__aeabi_d2iz+0x3a>
 80024a4:	000003fe 	.word	0x000003fe
 80024a8:	0000041d 	.word	0x0000041d
 80024ac:	7fffffff 	.word	0x7fffffff
 80024b0:	00000433 	.word	0x00000433
 80024b4:	00000413 	.word	0x00000413
 80024b8:	fffffbed 	.word	0xfffffbed

080024bc <__aeabi_i2d>:
 80024bc:	b570      	push	{r4, r5, r6, lr}
 80024be:	2800      	cmp	r0, #0
 80024c0:	d016      	beq.n	80024f0 <__aeabi_i2d+0x34>
 80024c2:	17c3      	asrs	r3, r0, #31
 80024c4:	18c5      	adds	r5, r0, r3
 80024c6:	405d      	eors	r5, r3
 80024c8:	0fc4      	lsrs	r4, r0, #31
 80024ca:	0028      	movs	r0, r5
 80024cc:	f000 f8f6 	bl	80026bc <__clzsi2>
 80024d0:	4a11      	ldr	r2, [pc, #68]	; (8002518 <__aeabi_i2d+0x5c>)
 80024d2:	1a12      	subs	r2, r2, r0
 80024d4:	280a      	cmp	r0, #10
 80024d6:	dc16      	bgt.n	8002506 <__aeabi_i2d+0x4a>
 80024d8:	0003      	movs	r3, r0
 80024da:	002e      	movs	r6, r5
 80024dc:	3315      	adds	r3, #21
 80024de:	409e      	lsls	r6, r3
 80024e0:	230b      	movs	r3, #11
 80024e2:	1a18      	subs	r0, r3, r0
 80024e4:	40c5      	lsrs	r5, r0
 80024e6:	0553      	lsls	r3, r2, #21
 80024e8:	032d      	lsls	r5, r5, #12
 80024ea:	0b2d      	lsrs	r5, r5, #12
 80024ec:	0d5b      	lsrs	r3, r3, #21
 80024ee:	e003      	b.n	80024f8 <__aeabi_i2d+0x3c>
 80024f0:	2400      	movs	r4, #0
 80024f2:	2300      	movs	r3, #0
 80024f4:	2500      	movs	r5, #0
 80024f6:	2600      	movs	r6, #0
 80024f8:	051b      	lsls	r3, r3, #20
 80024fa:	432b      	orrs	r3, r5
 80024fc:	07e4      	lsls	r4, r4, #31
 80024fe:	4323      	orrs	r3, r4
 8002500:	0030      	movs	r0, r6
 8002502:	0019      	movs	r1, r3
 8002504:	bd70      	pop	{r4, r5, r6, pc}
 8002506:	380b      	subs	r0, #11
 8002508:	4085      	lsls	r5, r0
 800250a:	0553      	lsls	r3, r2, #21
 800250c:	032d      	lsls	r5, r5, #12
 800250e:	2600      	movs	r6, #0
 8002510:	0b2d      	lsrs	r5, r5, #12
 8002512:	0d5b      	lsrs	r3, r3, #21
 8002514:	e7f0      	b.n	80024f8 <__aeabi_i2d+0x3c>
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	0000041e 	.word	0x0000041e

0800251c <__aeabi_f2d>:
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	0043      	lsls	r3, r0, #1
 8002520:	0246      	lsls	r6, r0, #9
 8002522:	0fc4      	lsrs	r4, r0, #31
 8002524:	20fe      	movs	r0, #254	; 0xfe
 8002526:	0e1b      	lsrs	r3, r3, #24
 8002528:	1c59      	adds	r1, r3, #1
 800252a:	0a75      	lsrs	r5, r6, #9
 800252c:	4208      	tst	r0, r1
 800252e:	d00c      	beq.n	800254a <__aeabi_f2d+0x2e>
 8002530:	22e0      	movs	r2, #224	; 0xe0
 8002532:	0092      	lsls	r2, r2, #2
 8002534:	4694      	mov	ip, r2
 8002536:	076d      	lsls	r5, r5, #29
 8002538:	0b36      	lsrs	r6, r6, #12
 800253a:	4463      	add	r3, ip
 800253c:	051b      	lsls	r3, r3, #20
 800253e:	4333      	orrs	r3, r6
 8002540:	07e4      	lsls	r4, r4, #31
 8002542:	4323      	orrs	r3, r4
 8002544:	0028      	movs	r0, r5
 8002546:	0019      	movs	r1, r3
 8002548:	bd70      	pop	{r4, r5, r6, pc}
 800254a:	2b00      	cmp	r3, #0
 800254c:	d114      	bne.n	8002578 <__aeabi_f2d+0x5c>
 800254e:	2d00      	cmp	r5, #0
 8002550:	d01b      	beq.n	800258a <__aeabi_f2d+0x6e>
 8002552:	0028      	movs	r0, r5
 8002554:	f000 f8b2 	bl	80026bc <__clzsi2>
 8002558:	280a      	cmp	r0, #10
 800255a:	dc1c      	bgt.n	8002596 <__aeabi_f2d+0x7a>
 800255c:	230b      	movs	r3, #11
 800255e:	002a      	movs	r2, r5
 8002560:	1a1b      	subs	r3, r3, r0
 8002562:	40da      	lsrs	r2, r3
 8002564:	0003      	movs	r3, r0
 8002566:	3315      	adds	r3, #21
 8002568:	409d      	lsls	r5, r3
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <__aeabi_f2d+0x88>)
 800256c:	0312      	lsls	r2, r2, #12
 800256e:	1a1b      	subs	r3, r3, r0
 8002570:	055b      	lsls	r3, r3, #21
 8002572:	0b16      	lsrs	r6, r2, #12
 8002574:	0d5b      	lsrs	r3, r3, #21
 8002576:	e7e1      	b.n	800253c <__aeabi_f2d+0x20>
 8002578:	2d00      	cmp	r5, #0
 800257a:	d009      	beq.n	8002590 <__aeabi_f2d+0x74>
 800257c:	0b32      	lsrs	r2, r6, #12
 800257e:	2680      	movs	r6, #128	; 0x80
 8002580:	0336      	lsls	r6, r6, #12
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <__aeabi_f2d+0x8c>)
 8002584:	076d      	lsls	r5, r5, #29
 8002586:	4316      	orrs	r6, r2
 8002588:	e7d8      	b.n	800253c <__aeabi_f2d+0x20>
 800258a:	2300      	movs	r3, #0
 800258c:	2600      	movs	r6, #0
 800258e:	e7d5      	b.n	800253c <__aeabi_f2d+0x20>
 8002590:	2600      	movs	r6, #0
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <__aeabi_f2d+0x8c>)
 8002594:	e7d2      	b.n	800253c <__aeabi_f2d+0x20>
 8002596:	0003      	movs	r3, r0
 8002598:	002a      	movs	r2, r5
 800259a:	3b0b      	subs	r3, #11
 800259c:	409a      	lsls	r2, r3
 800259e:	2500      	movs	r5, #0
 80025a0:	e7e3      	b.n	800256a <__aeabi_f2d+0x4e>
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	00000389 	.word	0x00000389
 80025a8:	000007ff 	.word	0x000007ff

080025ac <__aeabi_d2f>:
 80025ac:	0002      	movs	r2, r0
 80025ae:	004b      	lsls	r3, r1, #1
 80025b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b2:	0308      	lsls	r0, r1, #12
 80025b4:	0d5b      	lsrs	r3, r3, #21
 80025b6:	4e3d      	ldr	r6, [pc, #244]	; (80026ac <__aeabi_d2f+0x100>)
 80025b8:	0fcc      	lsrs	r4, r1, #31
 80025ba:	0a40      	lsrs	r0, r0, #9
 80025bc:	0f51      	lsrs	r1, r2, #29
 80025be:	1c5f      	adds	r7, r3, #1
 80025c0:	4308      	orrs	r0, r1
 80025c2:	00d5      	lsls	r5, r2, #3
 80025c4:	4237      	tst	r7, r6
 80025c6:	d00a      	beq.n	80025de <__aeabi_d2f+0x32>
 80025c8:	4939      	ldr	r1, [pc, #228]	; (80026b0 <__aeabi_d2f+0x104>)
 80025ca:	185e      	adds	r6, r3, r1
 80025cc:	2efe      	cmp	r6, #254	; 0xfe
 80025ce:	dd16      	ble.n	80025fe <__aeabi_d2f+0x52>
 80025d0:	23ff      	movs	r3, #255	; 0xff
 80025d2:	2100      	movs	r1, #0
 80025d4:	05db      	lsls	r3, r3, #23
 80025d6:	430b      	orrs	r3, r1
 80025d8:	07e0      	lsls	r0, r4, #31
 80025da:	4318      	orrs	r0, r3
 80025dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <__aeabi_d2f+0x44>
 80025e2:	4328      	orrs	r0, r5
 80025e4:	d027      	beq.n	8002636 <__aeabi_d2f+0x8a>
 80025e6:	2105      	movs	r1, #5
 80025e8:	0189      	lsls	r1, r1, #6
 80025ea:	0a49      	lsrs	r1, r1, #9
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	e7f1      	b.n	80025d4 <__aeabi_d2f+0x28>
 80025f0:	4305      	orrs	r5, r0
 80025f2:	d0ed      	beq.n	80025d0 <__aeabi_d2f+0x24>
 80025f4:	2180      	movs	r1, #128	; 0x80
 80025f6:	03c9      	lsls	r1, r1, #15
 80025f8:	23ff      	movs	r3, #255	; 0xff
 80025fa:	4301      	orrs	r1, r0
 80025fc:	e7ea      	b.n	80025d4 <__aeabi_d2f+0x28>
 80025fe:	2e00      	cmp	r6, #0
 8002600:	dd1c      	ble.n	800263c <__aeabi_d2f+0x90>
 8002602:	0192      	lsls	r2, r2, #6
 8002604:	0011      	movs	r1, r2
 8002606:	1e4a      	subs	r2, r1, #1
 8002608:	4191      	sbcs	r1, r2
 800260a:	00c0      	lsls	r0, r0, #3
 800260c:	0f6d      	lsrs	r5, r5, #29
 800260e:	4301      	orrs	r1, r0
 8002610:	4329      	orrs	r1, r5
 8002612:	074b      	lsls	r3, r1, #29
 8002614:	d048      	beq.n	80026a8 <__aeabi_d2f+0xfc>
 8002616:	230f      	movs	r3, #15
 8002618:	400b      	ands	r3, r1
 800261a:	2b04      	cmp	r3, #4
 800261c:	d000      	beq.n	8002620 <__aeabi_d2f+0x74>
 800261e:	3104      	adds	r1, #4
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	04db      	lsls	r3, r3, #19
 8002624:	400b      	ands	r3, r1
 8002626:	d03f      	beq.n	80026a8 <__aeabi_d2f+0xfc>
 8002628:	1c72      	adds	r2, r6, #1
 800262a:	2efe      	cmp	r6, #254	; 0xfe
 800262c:	d0d0      	beq.n	80025d0 <__aeabi_d2f+0x24>
 800262e:	0189      	lsls	r1, r1, #6
 8002630:	0a49      	lsrs	r1, r1, #9
 8002632:	b2d3      	uxtb	r3, r2
 8002634:	e7ce      	b.n	80025d4 <__aeabi_d2f+0x28>
 8002636:	2300      	movs	r3, #0
 8002638:	2100      	movs	r1, #0
 800263a:	e7cb      	b.n	80025d4 <__aeabi_d2f+0x28>
 800263c:	0032      	movs	r2, r6
 800263e:	3217      	adds	r2, #23
 8002640:	db22      	blt.n	8002688 <__aeabi_d2f+0xdc>
 8002642:	2180      	movs	r1, #128	; 0x80
 8002644:	221e      	movs	r2, #30
 8002646:	0409      	lsls	r1, r1, #16
 8002648:	4308      	orrs	r0, r1
 800264a:	1b92      	subs	r2, r2, r6
 800264c:	2a1f      	cmp	r2, #31
 800264e:	dd1d      	ble.n	800268c <__aeabi_d2f+0xe0>
 8002650:	2102      	movs	r1, #2
 8002652:	4249      	negs	r1, r1
 8002654:	1b8e      	subs	r6, r1, r6
 8002656:	0001      	movs	r1, r0
 8002658:	40f1      	lsrs	r1, r6
 800265a:	000e      	movs	r6, r1
 800265c:	2a20      	cmp	r2, #32
 800265e:	d004      	beq.n	800266a <__aeabi_d2f+0xbe>
 8002660:	4a14      	ldr	r2, [pc, #80]	; (80026b4 <__aeabi_d2f+0x108>)
 8002662:	4694      	mov	ip, r2
 8002664:	4463      	add	r3, ip
 8002666:	4098      	lsls	r0, r3
 8002668:	4305      	orrs	r5, r0
 800266a:	0029      	movs	r1, r5
 800266c:	1e4d      	subs	r5, r1, #1
 800266e:	41a9      	sbcs	r1, r5
 8002670:	4331      	orrs	r1, r6
 8002672:	2600      	movs	r6, #0
 8002674:	074b      	lsls	r3, r1, #29
 8002676:	d1ce      	bne.n	8002616 <__aeabi_d2f+0x6a>
 8002678:	2080      	movs	r0, #128	; 0x80
 800267a:	000b      	movs	r3, r1
 800267c:	04c0      	lsls	r0, r0, #19
 800267e:	2201      	movs	r2, #1
 8002680:	4003      	ands	r3, r0
 8002682:	4201      	tst	r1, r0
 8002684:	d1d3      	bne.n	800262e <__aeabi_d2f+0x82>
 8002686:	e7af      	b.n	80025e8 <__aeabi_d2f+0x3c>
 8002688:	2300      	movs	r3, #0
 800268a:	e7ac      	b.n	80025e6 <__aeabi_d2f+0x3a>
 800268c:	490a      	ldr	r1, [pc, #40]	; (80026b8 <__aeabi_d2f+0x10c>)
 800268e:	468c      	mov	ip, r1
 8002690:	0029      	movs	r1, r5
 8002692:	4463      	add	r3, ip
 8002694:	40d1      	lsrs	r1, r2
 8002696:	409d      	lsls	r5, r3
 8002698:	000a      	movs	r2, r1
 800269a:	0029      	movs	r1, r5
 800269c:	4098      	lsls	r0, r3
 800269e:	1e4d      	subs	r5, r1, #1
 80026a0:	41a9      	sbcs	r1, r5
 80026a2:	4301      	orrs	r1, r0
 80026a4:	4311      	orrs	r1, r2
 80026a6:	e7e4      	b.n	8002672 <__aeabi_d2f+0xc6>
 80026a8:	0033      	movs	r3, r6
 80026aa:	e79d      	b.n	80025e8 <__aeabi_d2f+0x3c>
 80026ac:	000007fe 	.word	0x000007fe
 80026b0:	fffffc80 	.word	0xfffffc80
 80026b4:	fffffca2 	.word	0xfffffca2
 80026b8:	fffffc82 	.word	0xfffffc82

080026bc <__clzsi2>:
 80026bc:	211c      	movs	r1, #28
 80026be:	2301      	movs	r3, #1
 80026c0:	041b      	lsls	r3, r3, #16
 80026c2:	4298      	cmp	r0, r3
 80026c4:	d301      	bcc.n	80026ca <__clzsi2+0xe>
 80026c6:	0c00      	lsrs	r0, r0, #16
 80026c8:	3910      	subs	r1, #16
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	4298      	cmp	r0, r3
 80026ce:	d301      	bcc.n	80026d4 <__clzsi2+0x18>
 80026d0:	0a00      	lsrs	r0, r0, #8
 80026d2:	3908      	subs	r1, #8
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	4298      	cmp	r0, r3
 80026d8:	d301      	bcc.n	80026de <__clzsi2+0x22>
 80026da:	0900      	lsrs	r0, r0, #4
 80026dc:	3904      	subs	r1, #4
 80026de:	a202      	add	r2, pc, #8	; (adr r2, 80026e8 <__clzsi2+0x2c>)
 80026e0:	5c10      	ldrb	r0, [r2, r0]
 80026e2:	1840      	adds	r0, r0, r1
 80026e4:	4770      	bx	lr
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	02020304 	.word	0x02020304
 80026ec:	01010101 	.word	0x01010101
	...

080026f8 <__clzdi2>:
 80026f8:	b510      	push	{r4, lr}
 80026fa:	2900      	cmp	r1, #0
 80026fc:	d103      	bne.n	8002706 <__clzdi2+0xe>
 80026fe:	f7ff ffdd 	bl	80026bc <__clzsi2>
 8002702:	3020      	adds	r0, #32
 8002704:	e002      	b.n	800270c <__clzdi2+0x14>
 8002706:	1c08      	adds	r0, r1, #0
 8002708:	f7ff ffd8 	bl	80026bc <__clzsi2>
 800270c:	bd10      	pop	{r4, pc}
 800270e:	46c0      	nop			; (mov r8, r8)

08002710 <lcdSendHalf>:
 *      Author: Bartosz Pracz
 */

#include "../Display/an_disp.h"

void lcdSendHalf(uint8_t data) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	0002      	movs	r2, r0
 8002718:	1dfb      	adds	r3, r7, #7
 800271a:	701a      	strb	r2, [r3, #0]
	LCD_E_HIGH;
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	481e      	ldr	r0, [pc, #120]	; (800279c <lcdSendHalf+0x8c>)
 8002722:	2201      	movs	r2, #1
 8002724:	0019      	movs	r1, r3
 8002726:	f002 f939 	bl	800499c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN, (data & 0x01));
 800272a:	1dfb      	adds	r3, r7, #7
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2201      	movs	r2, #1
 8002730:	4013      	ands	r3, r2
 8002732:	b2da      	uxtb	r2, r3
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	00d9      	lsls	r1, r3, #3
 8002738:	23a0      	movs	r3, #160	; 0xa0
 800273a:	05db      	lsls	r3, r3, #23
 800273c:	0018      	movs	r0, r3
 800273e:	f002 f92d 	bl	800499c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_PORT, LCD_D5_PIN, (data & 0x02));
 8002742:	1dfb      	adds	r3, r7, #7
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2202      	movs	r2, #2
 8002748:	4013      	ands	r3, r2
 800274a:	b2da      	uxtb	r2, r3
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	0099      	lsls	r1, r3, #2
 8002750:	23a0      	movs	r3, #160	; 0xa0
 8002752:	05db      	lsls	r3, r3, #23
 8002754:	0018      	movs	r0, r3
 8002756:	f002 f921 	bl	800499c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_PORT, LCD_D6_PIN, (data & 0x04));
 800275a:	1dfb      	adds	r3, r7, #7
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2204      	movs	r2, #4
 8002760:	4013      	ands	r3, r2
 8002762:	b2db      	uxtb	r3, r3
 8002764:	480e      	ldr	r0, [pc, #56]	; (80027a0 <lcdSendHalf+0x90>)
 8002766:	001a      	movs	r2, r3
 8002768:	2102      	movs	r1, #2
 800276a:	f002 f917 	bl	800499c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_PORT, LCD_D7_PIN, (data & 0x08));
 800276e:	1dfb      	adds	r3, r7, #7
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2208      	movs	r2, #8
 8002774:	4013      	ands	r3, r2
 8002776:	b2da      	uxtb	r2, r3
 8002778:	23a0      	movs	r3, #160	; 0xa0
 800277a:	05db      	lsls	r3, r3, #23
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	0018      	movs	r0, r3
 8002780:	f002 f90c 	bl	800499c <HAL_GPIO_WritePin>
	LCD_E_LOW;
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	4804      	ldr	r0, [pc, #16]	; (800279c <lcdSendHalf+0x8c>)
 800278a:	2200      	movs	r2, #0
 800278c:	0019      	movs	r1, r3
 800278e:	f002 f905 	bl	800499c <HAL_GPIO_WritePin>
}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	46bd      	mov	sp, r7
 8002796:	b002      	add	sp, #8
 8002798:	bd80      	pop	{r7, pc}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	50000800 	.word	0x50000800
 80027a0:	50000400 	.word	0x50000400

080027a4 <lcdWriteByte>:

void lcdWriteByte(uint8_t data) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	0002      	movs	r2, r0
 80027ac:	1dfb      	adds	r3, r7, #7
 80027ae:	701a      	strb	r2, [r3, #0]
	lcdSendHalf(data >> 4);
 80027b0:	1dfb      	adds	r3, r7, #7
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	0018      	movs	r0, r3
 80027ba:	f7ff ffa9 	bl	8002710 <lcdSendHalf>
	lcdSendHalf(data);
 80027be:	1dfb      	adds	r3, r7, #7
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	0018      	movs	r0, r3
 80027c4:	f7ff ffa4 	bl	8002710 <lcdSendHalf>
	HAL_Delay(1);
 80027c8:	2001      	movs	r0, #1
 80027ca:	f001 f87f 	bl	80038cc <HAL_Delay>
}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b002      	add	sp, #8
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <lcdWriteCmd>:

void lcdWriteCmd(uint8_t cmd) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	0002      	movs	r2, r0
 80027e0:	1dfb      	adds	r3, r7, #7
 80027e2:	701a      	strb	r2, [r3, #0]
	LCD_RS_LOW;
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	01db      	lsls	r3, r3, #7
 80027e8:	4806      	ldr	r0, [pc, #24]	; (8002804 <lcdWriteCmd+0x2c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	0019      	movs	r1, r3
 80027ee:	f002 f8d5 	bl	800499c <HAL_GPIO_WritePin>
	lcdWriteByte(cmd);
 80027f2:	1dfb      	adds	r3, r7, #7
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	0018      	movs	r0, r3
 80027f8:	f7ff ffd4 	bl	80027a4 <lcdWriteByte>
}
 80027fc:	46c0      	nop			; (mov r8, r8)
 80027fe:	46bd      	mov	sp, r7
 8002800:	b002      	add	sp, #8
 8002802:	bd80      	pop	{r7, pc}
 8002804:	50000800 	.word	0x50000800

08002808 <lcdChar>:

void lcdChar(char data) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	0002      	movs	r2, r0
 8002810:	1dfb      	adds	r3, r7, #7
 8002812:	701a      	strb	r2, [r3, #0]
	LCD_RS_HIGH;
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	01db      	lsls	r3, r3, #7
 8002818:	4806      	ldr	r0, [pc, #24]	; (8002834 <lcdChar+0x2c>)
 800281a:	2201      	movs	r2, #1
 800281c:	0019      	movs	r1, r3
 800281e:	f002 f8bd 	bl	800499c <HAL_GPIO_WritePin>
	lcdWriteByte(data);
 8002822:	1dfb      	adds	r3, r7, #7
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	0018      	movs	r0, r3
 8002828:	f7ff ffbc 	bl	80027a4 <lcdWriteByte>
}
 800282c:	46c0      	nop			; (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b002      	add	sp, #8
 8002832:	bd80      	pop	{r7, pc}
 8002834:	50000800 	.word	0x50000800

08002838 <lcdInit>:

void lcdInit(void) {
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
	HAL_Delay(15);
 800283c:	200f      	movs	r0, #15
 800283e:	f001 f845 	bl	80038cc <HAL_Delay>

	LCD_E_LOW;
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	481f      	ldr	r0, [pc, #124]	; (80028c4 <lcdInit+0x8c>)
 8002848:	2200      	movs	r2, #0
 800284a:	0019      	movs	r1, r3
 800284c:	f002 f8a6 	bl	800499c <HAL_GPIO_WritePin>
	LCD_RS_LOW;
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	01db      	lsls	r3, r3, #7
 8002854:	481b      	ldr	r0, [pc, #108]	; (80028c4 <lcdInit+0x8c>)
 8002856:	2200      	movs	r2, #0
 8002858:	0019      	movs	r1, r3
 800285a:	f002 f89f 	bl	800499c <HAL_GPIO_WritePin>

	lcdSendHalf(0x03);
 800285e:	2003      	movs	r0, #3
 8002860:	f7ff ff56 	bl	8002710 <lcdSendHalf>
	HAL_Delay(5);
 8002864:	2005      	movs	r0, #5
 8002866:	f001 f831 	bl	80038cc <HAL_Delay>
	lcdSendHalf(0x03);
 800286a:	2003      	movs	r0, #3
 800286c:	f7ff ff50 	bl	8002710 <lcdSendHalf>
	HAL_Delay(5);
 8002870:	2005      	movs	r0, #5
 8002872:	f001 f82b 	bl	80038cc <HAL_Delay>
	lcdSendHalf(0x03);
 8002876:	2003      	movs	r0, #3
 8002878:	f7ff ff4a 	bl	8002710 <lcdSendHalf>
	HAL_Delay(5);
 800287c:	2005      	movs	r0, #5
 800287e:	f001 f825 	bl	80038cc <HAL_Delay>
	lcdSendHalf(0x02);
 8002882:	2002      	movs	r0, #2
 8002884:	f7ff ff44 	bl	8002710 <lcdSendHalf>
	HAL_Delay(5);
 8002888:	2005      	movs	r0, #5
 800288a:	f001 f81f 	bl	80038cc <HAL_Delay>

	lcdWriteCmd( LCD_FUNC | LCD_4_BIT | LCDC_TWO_LINE | LCDC_FONT_5x7);
 800288e:	2028      	movs	r0, #40	; 0x28
 8002890:	f7ff ffa2 	bl	80027d8 <lcdWriteCmd>
	HAL_Delay(5);
 8002894:	2005      	movs	r0, #5
 8002896:	f001 f819 	bl	80038cc <HAL_Delay>
	lcdWriteCmd( LCD_ONOFF | LCD_DISP_ON);
 800289a:	200c      	movs	r0, #12
 800289c:	f7ff ff9c 	bl	80027d8 <lcdWriteCmd>
	HAL_Delay(5);
 80028a0:	2005      	movs	r0, #5
 80028a2:	f001 f813 	bl	80038cc <HAL_Delay>
	lcdWriteCmd( LCD_CLEAR);
 80028a6:	2001      	movs	r0, #1
 80028a8:	f7ff ff96 	bl	80027d8 <lcdWriteCmd>
	HAL_Delay(5);
 80028ac:	2005      	movs	r0, #5
 80028ae:	f001 f80d 	bl	80038cc <HAL_Delay>
	lcdWriteCmd( LCDC_ENTRY_MODE | LCD_EM_SHIFT_CURSOR | LCD_EM_RIGHT);
 80028b2:	2006      	movs	r0, #6
 80028b4:	f7ff ff90 	bl	80027d8 <lcdWriteCmd>
	HAL_Delay(5);
 80028b8:	2005      	movs	r0, #5
 80028ba:	f001 f807 	bl	80038cc <HAL_Delay>
}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	50000800 	.word	0x50000800

080028c8 <lcdClear>:

void lcdClear(void){
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
	lcdWriteCmd(LCD_CLEAR);
 80028cc:	2001      	movs	r0, #1
 80028ce:	f7ff ff83 	bl	80027d8 <lcdWriteCmd>
}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <lcdLocate>:

void lcdLocate(uint8_t x, uint8_t y) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	0002      	movs	r2, r0
 80028e0:	1dfb      	adds	r3, r7, #7
 80028e2:	701a      	strb	r2, [r3, #0]
 80028e4:	1dbb      	adds	r3, r7, #6
 80028e6:	1c0a      	adds	r2, r1, #0
 80028e8:	701a      	strb	r2, [r3, #0]

	switch (y) {
 80028ea:	1dbb      	adds	r3, r7, #6
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d02e      	beq.n	8002950 <lcdLocate+0x78>
 80028f2:	dc3b      	bgt.n	800296c <lcdLocate+0x94>
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d01d      	beq.n	8002934 <lcdLocate+0x5c>
 80028f8:	dc38      	bgt.n	800296c <lcdLocate+0x94>
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <lcdLocate+0x2c>
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d00a      	beq.n	8002918 <lcdLocate+0x40>
	case 3:
		lcdWriteCmd( LCDC_SET_DDRAM | (LCD_LINE4 + (x - 12)));
		break;
	}

}
 8002902:	e033      	b.n	800296c <lcdLocate+0x94>
		lcdWriteCmd( LCDC_SET_DDRAM | (LCD_LINE1 + x));
 8002904:	1dfb      	adds	r3, r7, #7
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2280      	movs	r2, #128	; 0x80
 800290a:	4252      	negs	r2, r2
 800290c:	4313      	orrs	r3, r2
 800290e:	b2db      	uxtb	r3, r3
 8002910:	0018      	movs	r0, r3
 8002912:	f7ff ff61 	bl	80027d8 <lcdWriteCmd>
		break;
 8002916:	e029      	b.n	800296c <lcdLocate+0x94>
		lcdWriteCmd( LCDC_SET_DDRAM | (LCD_LINE2 + x));
 8002918:	1dfb      	adds	r3, r7, #7
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	3340      	adds	r3, #64	; 0x40
 800291e:	b2db      	uxtb	r3, r3
 8002920:	b25b      	sxtb	r3, r3
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	4252      	negs	r2, r2
 8002926:	4313      	orrs	r3, r2
 8002928:	b25b      	sxtb	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	0018      	movs	r0, r3
 800292e:	f7ff ff53 	bl	80027d8 <lcdWriteCmd>
		break;
 8002932:	e01b      	b.n	800296c <lcdLocate+0x94>
		lcdWriteCmd( LCDC_SET_DDRAM | (LCD_LINE3 + (x - 12)));
 8002934:	1dfb      	adds	r3, r7, #7
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	3314      	adds	r3, #20
 800293a:	b2db      	uxtb	r3, r3
 800293c:	b25b      	sxtb	r3, r3
 800293e:	2280      	movs	r2, #128	; 0x80
 8002940:	4252      	negs	r2, r2
 8002942:	4313      	orrs	r3, r2
 8002944:	b25b      	sxtb	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	0018      	movs	r0, r3
 800294a:	f7ff ff45 	bl	80027d8 <lcdWriteCmd>
		break;
 800294e:	e00d      	b.n	800296c <lcdLocate+0x94>
		lcdWriteCmd( LCDC_SET_DDRAM | (LCD_LINE4 + (x - 12)));
 8002950:	1dfb      	adds	r3, r7, #7
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	3354      	adds	r3, #84	; 0x54
 8002956:	b2db      	uxtb	r3, r3
 8002958:	b25b      	sxtb	r3, r3
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	4252      	negs	r2, r2
 800295e:	4313      	orrs	r3, r2
 8002960:	b25b      	sxtb	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	0018      	movs	r0, r3
 8002966:	f7ff ff37 	bl	80027d8 <lcdWriteCmd>
		break;
 800296a:	46c0      	nop			; (mov r8, r8)
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b002      	add	sp, #8
 8002972:	bd80      	pop	{r7, pc}

08002974 <lcdStr>:

void lcdStr(char *text) {
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	while (*text)
 800297c:	e006      	b.n	800298c <lcdStr+0x18>
		lcdChar(*text++);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	0018      	movs	r0, r3
 8002988:	f7ff ff3e 	bl	8002808 <lcdChar>
	while (*text)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f4      	bne.n	800297e <lcdStr+0xa>
}
 8002994:	46c0      	nop			; (mov r8, r8)
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	46bd      	mov	sp, r7
 800299a:	b002      	add	sp, #8
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <lcdInt>:

void lcdInt(int data){
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]

	char buffer[20];

	sprintf(buffer, "%d", data);
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	4907      	ldr	r1, [pc, #28]	; (80029c8 <lcdInt+0x28>)
 80029ac:	240c      	movs	r4, #12
 80029ae:	193b      	adds	r3, r7, r4
 80029b0:	0018      	movs	r0, r3
 80029b2:	f003 fc1d 	bl	80061f0 <siprintf>

	lcdStr(buffer);
 80029b6:	193b      	adds	r3, r7, r4
 80029b8:	0018      	movs	r0, r3
 80029ba:	f7ff ffdb 	bl	8002974 <lcdStr>

}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b009      	add	sp, #36	; 0x24
 80029c4:	bd90      	pop	{r4, r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	08006af0 	.word	0x08006af0

080029cc <floatToInts>:

void floatToInts(float data, uint32_t denominator, int32_t *ones, uint32_t *decimals){
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
	int32_t integer = (uint32_t)data;
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f7fd fcac 	bl	8000338 <__aeabi_f2uiz>
 80029e0:	0003      	movs	r3, r0
 80029e2:	61fb      	str	r3, [r7, #28]
	float afterComma = (data-(float)integer)*denominator;
 80029e4:	69f8      	ldr	r0, [r7, #28]
 80029e6:	f7fe fbf3 	bl	80011d0 <__aeabi_i2f>
 80029ea:	1c03      	adds	r3, r0, #0
 80029ec:	1c19      	adds	r1, r3, #0
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f7fe fa06 	bl	8000e00 <__aeabi_fsub>
 80029f4:	1c03      	adds	r3, r0, #0
 80029f6:	1c1c      	adds	r4, r3, #0
 80029f8:	68b8      	ldr	r0, [r7, #8]
 80029fa:	f7fe fc2f 	bl	800125c <__aeabi_ui2f>
 80029fe:	1c03      	adds	r3, r0, #0
 8002a00:	1c19      	adds	r1, r3, #0
 8002a02:	1c20      	adds	r0, r4, #0
 8002a04:	f7fe f8e2 	bl	8000bcc <__aeabi_fmul>
 8002a08:	1c03      	adds	r3, r0, #0
 8002a0a:	61bb      	str	r3, [r7, #24]
	int32_t afterComma2 = (int32_t)afterComma;
 8002a0c:	69b8      	ldr	r0, [r7, #24]
 8002a0e:	f7fe fbbf 	bl	8001190 <__aeabi_f2iz>
 8002a12:	0003      	movs	r3, r0
 8002a14:	617b      	str	r3, [r7, #20]
	*ones = integer;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69fa      	ldr	r2, [r7, #28]
 8002a1a:	601a      	str	r2, [r3, #0]
	*decimals = abs(afterComma2);
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	17da      	asrs	r2, r3, #31
 8002a20:	189b      	adds	r3, r3, r2
 8002a22:	4053      	eors	r3, r2
 8002a24:	001a      	movs	r2, r3
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	601a      	str	r2, [r3, #0]

}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b009      	add	sp, #36	; 0x24
 8002a30:	bd90      	pop	{r4, r7, pc}
	...

08002a34 <lcdFloat>:

void lcdFloat(float data, uint32_t denominator){
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]

	int32_t beforeComma;
	uint32_t afterComma;

	floatToInts(data, denominator, &beforeComma, &afterComma);
 8002a3e:	230c      	movs	r3, #12
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	2210      	movs	r2, #16
 8002a44:	18ba      	adds	r2, r7, r2
 8002a46:	6839      	ldr	r1, [r7, #0]
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ffbf 	bl	80029cc <floatToInts>

	lcdInt(beforeComma);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f7ff ffa5 	bl	80029a0 <lcdInt>
	lcdChar('.');
 8002a56:	202e      	movs	r0, #46	; 0x2e
 8002a58:	f7ff fed6 	bl	8002808 <lcdChar>
	float e = 10^1;
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <lcdFloat+0x6c>)
 8002a5e:	617b      	str	r3, [r7, #20]

	if(afterComma < denominator / e) lcdInt(0);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	0018      	movs	r0, r3
 8002a64:	f7fe fbfa 	bl	800125c <__aeabi_ui2f>
 8002a68:	1c04      	adds	r4, r0, #0
 8002a6a:	6838      	ldr	r0, [r7, #0]
 8002a6c:	f7fe fbf6 	bl	800125c <__aeabi_ui2f>
 8002a70:	1c03      	adds	r3, r0, #0
 8002a72:	6979      	ldr	r1, [r7, #20]
 8002a74:	1c18      	adds	r0, r3, #0
 8002a76:	f7fd fedf 	bl	8000838 <__aeabi_fdiv>
 8002a7a:	1c03      	adds	r3, r0, #0
 8002a7c:	1c19      	adds	r1, r3, #0
 8002a7e:	1c20      	adds	r0, r4, #0
 8002a80:	f7fd fbea 	bl	8000258 <__aeabi_fcmplt>
 8002a84:	1e03      	subs	r3, r0, #0
 8002a86:	d002      	beq.n	8002a8e <lcdFloat+0x5a>
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f7ff ff89 	bl	80029a0 <lcdInt>

	lcdInt(afterComma);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	0018      	movs	r0, r3
 8002a92:	f7ff ff85 	bl	80029a0 <lcdInt>

}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b007      	add	sp, #28
 8002a9c:	bd90      	pop	{r4, r7, pc}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	41300000 	.word	0x41300000

08002aa4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002aa8:	f000 fea0 	bl	80037ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002aac:	f000 faa4 	bl	8002ff8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002ab0:	f000 fc8e 	bl	80033d0 <MX_GPIO_Init>
	MX_DMA_Init();
 8002ab4:	f000 fc6e 	bl	8003394 <MX_DMA_Init>
	MX_ADC_Init();
 8002ab8:	f000 faf8 	bl	80030ac <MX_ADC_Init>
	MX_TIM2_Init();
 8002abc:	f000 fb96 	bl	80031ec <MX_TIM2_Init>
	MX_TIM21_Init();
 8002ac0:	f000 fc14 	bl	80032ec <MX_TIM21_Init>
	/* USER CODE BEGIN 2 */

	//inicjalizacja wyświetlacza
	lcdInit();
 8002ac4:	f7ff feb8 	bl	8002838 <lcdInit>
	lcdLocate(4, 0);
 8002ac8:	2100      	movs	r1, #0
 8002aca:	2004      	movs	r0, #4
 8002acc:	f7ff ff04 	bl	80028d8 <lcdLocate>
	lcdStr("smokePID");
 8002ad0:	4b59      	ldr	r3, [pc, #356]	; (8002c38 <main+0x194>)
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f7ff ff4e 	bl	8002974 <lcdStr>
	lcdLocate(12, 1);
 8002ad8:	2101      	movs	r1, #1
 8002ada:	200c      	movs	r0, #12
 8002adc:	f7ff fefc 	bl	80028d8 <lcdLocate>
	lcdStr("v1.1");
 8002ae0:	4b56      	ldr	r3, [pc, #344]	; (8002c3c <main+0x198>)
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f7ff ff46 	bl	8002974 <lcdStr>
	HAL_Delay(1000);
 8002ae8:	23fa      	movs	r3, #250	; 0xfa
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	0018      	movs	r0, r3
 8002aee:	f000 feed 	bl	80038cc <HAL_Delay>

	//uruchomienie PWM
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002af2:	4b53      	ldr	r3, [pc, #332]	; (8002c40 <main+0x19c>)
 8002af4:	2100      	movs	r1, #0
 8002af6:	0018      	movs	r0, r3
 8002af8:	f002 fdac 	bl	8005654 <HAL_TIM_PWM_Start>

	//test serwa
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2000);
 8002afc:	4b50      	ldr	r3, [pc, #320]	; (8002c40 <main+0x19c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	22fa      	movs	r2, #250	; 0xfa
 8002b02:	00d2      	lsls	r2, r2, #3
 8002b04:	635a      	str	r2, [r3, #52]	; 0x34
	lcdLocate(0, 1);
 8002b06:	2101      	movs	r1, #1
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f7ff fee5 	bl	80028d8 <lcdLocate>
	lcdStr("MAX");
 8002b0e:	4b4d      	ldr	r3, [pc, #308]	; (8002c44 <main+0x1a0>)
 8002b10:	0018      	movs	r0, r3
 8002b12:	f7ff ff2f 	bl	8002974 <lcdStr>
	HAL_Delay(1000);
 8002b16:	23fa      	movs	r3, #250	; 0xfa
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f000 fed6 	bl	80038cc <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8002b20:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <main+0x19c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	22fa      	movs	r2, #250	; 0xfa
 8002b26:	0092      	lsls	r2, r2, #2
 8002b28:	635a      	str	r2, [r3, #52]	; 0x34
	lcdLocate(0, 1);
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f7ff fed3 	bl	80028d8 <lcdLocate>
	lcdStr("MIN");
 8002b32:	4b45      	ldr	r3, [pc, #276]	; (8002c48 <main+0x1a4>)
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7ff ff1d 	bl	8002974 <lcdStr>
	HAL_Delay(1000);
 8002b3a:	23fa      	movs	r3, #250	; 0xfa
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 fec4 	bl	80038cc <HAL_Delay>

	lcdClear();
 8002b44:	f7ff fec0 	bl	80028c8 <lcdClear>

	//kalibracja ADC
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8002b48:	4b40      	ldr	r3, [pc, #256]	; (8002c4c <main+0x1a8>)
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f001 fa81 	bl	8004054 <HAL_ADCEx_Calibration_Start>

	//uruchomienie przetwornika
	HAL_ADC_Start_DMA(&hadc, adcReadings, 5);
 8002b52:	493f      	ldr	r1, [pc, #252]	; (8002c50 <main+0x1ac>)
 8002b54:	4b3d      	ldr	r3, [pc, #244]	; (8002c4c <main+0x1a8>)
 8002b56:	2205      	movs	r2, #5
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f001 f84f 	bl	8003bfc <HAL_ADC_Start_DMA>

	//uruchomienie niezależnego timera
	HAL_TIM_Base_Start_IT(&htim21);
 8002b5e:	4b3d      	ldr	r3, [pc, #244]	; (8002c54 <main+0x1b0>)
 8002b60:	0018      	movs	r0, r3
 8002b62:	f002 fce3 	bl	800552c <HAL_TIM_Base_Start_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		//pokaż położenie przepustnicy
		lcdLocate(8, 0);
 8002b66:	2100      	movs	r1, #0
 8002b68:	2008      	movs	r0, #8
 8002b6a:	f7ff feb5 	bl	80028d8 <lcdLocate>
		if (throttle < 2000)
 8002b6e:	4b3a      	ldr	r3, [pc, #232]	; (8002c58 <main+0x1b4>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	23fa      	movs	r3, #250	; 0xfa
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d20d      	bcs.n	8002b96 <main+0xf2>
			lcdInt((throttle - 1000) / 10);
 8002b7a:	4b37      	ldr	r3, [pc, #220]	; (8002c58 <main+0x1b4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a37      	ldr	r2, [pc, #220]	; (8002c5c <main+0x1b8>)
 8002b80:	4694      	mov	ip, r2
 8002b82:	4463      	add	r3, ip
 8002b84:	210a      	movs	r1, #10
 8002b86:	0018      	movs	r0, r3
 8002b88:	f7fd fac8 	bl	800011c <__udivsi3>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f7ff ff06 	bl	80029a0 <lcdInt>
 8002b94:	e002      	b.n	8002b9c <main+0xf8>
		else
			lcdInt(99);
 8002b96:	2063      	movs	r0, #99	; 0x63
 8002b98:	f7ff ff02 	bl	80029a0 <lcdInt>
		lcdStr(" ");
 8002b9c:	4b30      	ldr	r3, [pc, #192]	; (8002c60 <main+0x1bc>)
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7ff fee8 	bl	8002974 <lcdStr>

		//pokaż zadaną temperaturę
		lcdLocate(0, 0);
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f7ff fe96 	bl	80028d8 <lcdLocate>
		lcdInt(setPoint);
 8002bac:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <main+0x1c0>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f7ff fef5 	bl	80029a0 <lcdInt>
		lcdStr("stC  ");
 8002bb6:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <main+0x1c4>)
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7ff fedb 	bl	8002974 <lcdStr>

		//pokaż rzeczywistą temperaturę
		lcdLocate(11, 0);
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	200b      	movs	r0, #11
 8002bc2:	f7ff fe89 	bl	80028d8 <lcdLocate>
		lcdInt((uint32_t) temperature);
 8002bc6:	4b29      	ldr	r3, [pc, #164]	; (8002c6c <main+0x1c8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	1c18      	adds	r0, r3, #0
 8002bcc:	f7fd fbb4 	bl	8000338 <__aeabi_f2uiz>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f7ff fee4 	bl	80029a0 <lcdInt>
		lcdStr("stC");
 8002bd8:	4b25      	ldr	r3, [pc, #148]	; (8002c70 <main+0x1cc>)
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f7ff feca 	bl	8002974 <lcdStr>

		//pokaż wzmocnienia regulatorów
		lcdLocate(0, 1);
 8002be0:	2101      	movs	r1, #1
 8002be2:	2000      	movs	r0, #0
 8002be4:	f7ff fe78 	bl	80028d8 <lcdLocate>
		lcdFloat(amplificationP, 10);
 8002be8:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <main+0x1d0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	210a      	movs	r1, #10
 8002bee:	1c18      	adds	r0, r3, #0
 8002bf0:	f7ff ff20 	bl	8002a34 <lcdFloat>
		lcdStr(" ");
 8002bf4:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <main+0x1bc>)
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f7ff febc 	bl	8002974 <lcdStr>

		lcdLocate(6, 1);
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	2006      	movs	r0, #6
 8002c00:	f7ff fe6a 	bl	80028d8 <lcdLocate>
		lcdFloat(amplificationI, 100);
 8002c04:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <main+0x1d4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2164      	movs	r1, #100	; 0x64
 8002c0a:	1c18      	adds	r0, r3, #0
 8002c0c:	f7ff ff12 	bl	8002a34 <lcdFloat>
		lcdStr(" ");
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <main+0x1bc>)
 8002c12:	0018      	movs	r0, r3
 8002c14:	f7ff feae 	bl	8002974 <lcdStr>

		lcdLocate(12, 1);
 8002c18:	2101      	movs	r1, #1
 8002c1a:	200c      	movs	r0, #12
 8002c1c:	f7ff fe5c 	bl	80028d8 <lcdLocate>
		lcdFloat(amplificationD, 10);
 8002c20:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <main+0x1d8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	210a      	movs	r1, #10
 8002c26:	1c18      	adds	r0, r3, #0
 8002c28:	f7ff ff04 	bl	8002a34 <lcdFloat>
		lcdStr(" ");
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <main+0x1bc>)
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f7ff fea0 	bl	8002974 <lcdStr>
		lcdLocate(8, 0);
 8002c34:	e797      	b.n	8002b66 <main+0xc2>
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	08006af4 	.word	0x08006af4
 8002c3c:	08006b00 	.word	0x08006b00
 8002c40:	200000cc 	.word	0x200000cc
 8002c44:	08006b08 	.word	0x08006b08
 8002c48:	08006b0c 	.word	0x08006b0c
 8002c4c:	2000015c 	.word	0x2000015c
 8002c50:	200000a0 	.word	0x200000a0
 8002c54:	200001b8 	.word	0x200001b8
 8002c58:	200000b8 	.word	0x200000b8
 8002c5c:	fffffc18 	.word	0xfffffc18
 8002c60:	08006b10 	.word	0x08006b10
 8002c64:	20000110 	.word	0x20000110
 8002c68:	08006b14 	.word	0x08006b14
 8002c6c:	200000b4 	.word	0x200000b4
 8002c70:	08006b1c 	.word	0x08006b1c
 8002c74:	200000c8 	.word	0x200000c8
 8002c78:	2000009c 	.word	0x2000009c
 8002c7c:	200000bc 	.word	0x200000bc

08002c80 <HAL_TIM_PeriodElapsedCallback>:
		/* USER CODE BEGIN 3 */
	}

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c82:	b089      	sub	sp, #36	; 0x24
 8002c84:	af06      	add	r7, sp, #24
 8002c86:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM21) {
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a30      	ldr	r2, [pc, #192]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d15a      	bne.n	8002d48 <HAL_TIM_PeriodElapsedCallback+0xc8>
		//odczyt temperatury
		//różniczkowany
		//		if(conversionToTemperature(adcReadings[4])>temperature) temperature = temperature + 0.1;
		//		else if(conversionToTemperature(adcReadings[4])<temperature) temperature = temperature - 0.1;
		//bezpośredni
		temperature = conversionToTemperature(adcReadings[4]);
 8002c92:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f000 f8c1 	bl	8002e20 <conversionToTemperature>
 8002c9e:	1c02      	adds	r2, r0, #0
 8002ca0:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002ca2:	601a      	str	r2, [r3, #0]

		//stała wartość
		//		temperature = 30.54;

		//odczyt zadanej temperatury
		setPoint = adcReadings[0] / 28;
 8002ca4:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	211c      	movs	r1, #28
 8002caa:	0018      	movs	r0, r3
 8002cac:	f7fd fa36 	bl	800011c <__udivsi3>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	001a      	movs	r2, r3
 8002cb4:	4b29      	ldr	r3, [pc, #164]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002cb6:	601a      	str	r2, [r3, #0]

		//odczyt wzmocnień
		amplificationP = conversionToMultiplier(adcReadings[1], 50);
 8002cb8:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	2132      	movs	r1, #50	; 0x32
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 f85f 	bl	8002d84 <conversionToMultiplier>
 8002cc6:	1c02      	adds	r2, r0, #0
 8002cc8:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002cca:	601a      	str	r2, [r3, #0]
		amplificationI = conversionToMultiplier(adcReadings[2], 10);
 8002ccc:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	210a      	movs	r1, #10
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f000 f855 	bl	8002d84 <conversionToMultiplier>
 8002cda:	1c02      	adds	r2, r0, #0
 8002cdc:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002cde:	601a      	str	r2, [r3, #0]
		amplificationD = conversionToMultiplier(adcReadings[3], 90);
 8002ce0:	4b1c      	ldr	r3, [pc, #112]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	215a      	movs	r1, #90	; 0x5a
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 f84b 	bl	8002d84 <conversionToMultiplier>
 8002cee:	1c02      	adds	r2, r0, #0
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002cf2:	601a      	str	r2, [r3, #0]

		throttle = PID(setPoint, temperature, &integralSum, &lastError,
 8002cf4:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7fe faaf 	bl	800125c <__aeabi_ui2f>
 8002cfe:	1c06      	adds	r6, r0, #0
 8002d00:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002d0a:	6819      	ldr	r1, [r3, #0]
 8002d0c:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4d16      	ldr	r5, [pc, #88]	; (8002d6c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002d12:	4c17      	ldr	r4, [pc, #92]	; (8002d70 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002d14:	9304      	str	r3, [sp, #16]
 8002d16:	9103      	str	r1, [sp, #12]
 8002d18:	9202      	str	r2, [sp, #8]
 8002d1a:	4b16      	ldr	r3, [pc, #88]	; (8002d74 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	002b      	movs	r3, r5
 8002d24:	0022      	movs	r2, r4
 8002d26:	1c01      	adds	r1, r0, #0
 8002d28:	1c30      	adds	r0, r6, #0
 8002d2a:	f000 f8ad 	bl	8002e88 <PID>
 8002d2e:	0003      	movs	r3, r0
				&Dcounter, &xD, amplificationP, amplificationI, amplificationD)
				+ 1000;
 8002d30:	22fa      	movs	r2, #250	; 0xfa
 8002d32:	0092      	lsls	r2, r2, #2
 8002d34:	4694      	mov	ip, r2
 8002d36:	4463      	add	r3, ip
 8002d38:	001a      	movs	r2, r3
		throttle = PID(setPoint, temperature, &integralSum, &lastError,
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002d3c:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, throttle);
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	635a      	str	r2, [r3, #52]	; 0x34

	}

}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b003      	add	sp, #12
 8002d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d50:	40010800 	.word	0x40010800
 8002d54:	200000a0 	.word	0x200000a0
 8002d58:	200000b4 	.word	0x200000b4
 8002d5c:	20000110 	.word	0x20000110
 8002d60:	200000c8 	.word	0x200000c8
 8002d64:	2000009c 	.word	0x2000009c
 8002d68:	200000bc 	.word	0x200000bc
 8002d6c:	200000c0 	.word	0x200000c0
 8002d70:	20000098 	.word	0x20000098
 8002d74:	200000c4 	.word	0x200000c4
 8002d78:	2000010c 	.word	0x2000010c
 8002d7c:	200000b8 	.word	0x200000b8
 8002d80:	200000cc 	.word	0x200000cc

08002d84 <conversionToMultiplier>:

float conversionToMultiplier(uint16_t conversion, uint16_t maxMultiplier) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	1dbb      	adds	r3, r7, #6
 8002d8e:	801a      	strh	r2, [r3, #0]
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	1c0a      	adds	r2, r1, #0
 8002d94:	801a      	strh	r2, [r3, #0]
	/*przelicz odczyt z potencjometru na mnożnik. Poniżej połowy- mnoznik ułamkowy.
	 Powyżej połowy- mnożnik całkowity o maksymalnej wartości maxMultiplier*/

	float reg;

	if (conversion < 2048) {
 8002d96:	1dbb      	adds	r3, r7, #6
 8002d98:	881a      	ldrh	r2, [r3, #0]
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d20c      	bcs.n	8002dbc <conversionToMultiplier+0x38>
		reg = ((float) conversion * 1) / 2047;
 8002da2:	1dbb      	adds	r3, r7, #6
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	0018      	movs	r0, r3
 8002da8:	f7fe fa58 	bl	800125c <__aeabi_ui2f>
 8002dac:	1c03      	adds	r3, r0, #0
 8002dae:	491b      	ldr	r1, [pc, #108]	; (8002e1c <conversionToMultiplier+0x98>)
 8002db0:	1c18      	adds	r0, r3, #0
 8002db2:	f7fd fd41 	bl	8000838 <__aeabi_fdiv>
 8002db6:	1c03      	adds	r3, r0, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e029      	b.n	8002e10 <conversionToMultiplier+0x8c>

	} else if (conversion >= 2048) {
 8002dbc:	1dbb      	adds	r3, r7, #6
 8002dbe:	881a      	ldrh	r2, [r3, #0]
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d323      	bcc.n	8002e10 <conversionToMultiplier+0x8c>
		float conversion2 = (float) conversion - 2048;
 8002dc8:	1dbb      	adds	r3, r7, #6
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7fe fa45 	bl	800125c <__aeabi_ui2f>
 8002dd2:	1c03      	adds	r3, r0, #0
 8002dd4:	218a      	movs	r1, #138	; 0x8a
 8002dd6:	05c9      	lsls	r1, r1, #23
 8002dd8:	1c18      	adds	r0, r3, #0
 8002dda:	f7fe f811 	bl	8000e00 <__aeabi_fsub>
 8002dde:	1c03      	adds	r3, r0, #0
 8002de0:	60bb      	str	r3, [r7, #8]
		reg = (maxMultiplier * conversion2 / 2047)+1;
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	0018      	movs	r0, r3
 8002de8:	f7fe f9f2 	bl	80011d0 <__aeabi_i2f>
 8002dec:	1c03      	adds	r3, r0, #0
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	1c18      	adds	r0, r3, #0
 8002df2:	f7fd feeb 	bl	8000bcc <__aeabi_fmul>
 8002df6:	1c03      	adds	r3, r0, #0
 8002df8:	4908      	ldr	r1, [pc, #32]	; (8002e1c <conversionToMultiplier+0x98>)
 8002dfa:	1c18      	adds	r0, r3, #0
 8002dfc:	f7fd fd1c 	bl	8000838 <__aeabi_fdiv>
 8002e00:	1c03      	adds	r3, r0, #0
 8002e02:	21fe      	movs	r1, #254	; 0xfe
 8002e04:	0589      	lsls	r1, r1, #22
 8002e06:	1c18      	adds	r0, r3, #0
 8002e08:	f7fd fb7a 	bl	8000500 <__aeabi_fadd>
 8002e0c:	1c03      	adds	r3, r0, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
	}
	return reg;
 8002e10:	68fb      	ldr	r3, [r7, #12]
}
 8002e12:	1c18      	adds	r0, r3, #0
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b004      	add	sp, #16
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	44ffe000 	.word	0x44ffe000

08002e20 <conversionToTemperature>:

float conversionToTemperature(uint16_t conversion) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	0002      	movs	r2, r0
 8002e28:	1dbb      	adds	r3, r7, #6
 8002e2a:	801a      	strh	r2, [r3, #0]
	/*przelicz odczyt z termometru na temperaturę wg klucza 10mV/stC*/

	float temperature = (conversion * 3.3 / 4095) * 100;
 8002e2c:	1dbb      	adds	r3, r7, #6
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7ff fb43 	bl	80024bc <__aeabi_i2d>
 8002e36:	4a10      	ldr	r2, [pc, #64]	; (8002e78 <conversionToTemperature+0x58>)
 8002e38:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <conversionToTemperature+0x5c>)
 8002e3a:	f7ff f89d 	bl	8001f78 <__aeabi_dmul>
 8002e3e:	0002      	movs	r2, r0
 8002e40:	000b      	movs	r3, r1
 8002e42:	0010      	movs	r0, r2
 8002e44:	0019      	movs	r1, r3
 8002e46:	2200      	movs	r2, #0
 8002e48:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <conversionToTemperature+0x60>)
 8002e4a:	f7fe fdad 	bl	80019a8 <__aeabi_ddiv>
 8002e4e:	0002      	movs	r2, r0
 8002e50:	000b      	movs	r3, r1
 8002e52:	0010      	movs	r0, r2
 8002e54:	0019      	movs	r1, r3
 8002e56:	2200      	movs	r2, #0
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <conversionToTemperature+0x64>)
 8002e5a:	f7ff f88d 	bl	8001f78 <__aeabi_dmul>
 8002e5e:	0002      	movs	r2, r0
 8002e60:	000b      	movs	r3, r1
 8002e62:	0010      	movs	r0, r2
 8002e64:	0019      	movs	r1, r3
 8002e66:	f7ff fba1 	bl	80025ac <__aeabi_d2f>
 8002e6a:	1c03      	adds	r3, r0, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
	return temperature;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
}
 8002e70:	1c18      	adds	r0, r3, #0
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b004      	add	sp, #16
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	66666666 	.word	0x66666666
 8002e7c:	400a6666 	.word	0x400a6666
 8002e80:	40affe00 	.word	0x40affe00
 8002e84:	40590000 	.word	0x40590000

08002e88 <PID>:
	return ((reading * 100) / 4095) + 100;
}

int32_t PID(float targetValue, float currentValue, float *integralSum,
		float *lastError, uint32_t *Dcounter, float *xD, float Pmultiplier,
		float Imultiplier, float Dmultiplier) {
 8002e88:	b590      	push	{r4, r7, lr}
 8002e8a:	b08d      	sub	sp, #52	; 0x34
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]

	//obliczenie uchybu
	float currentError = targetValue - currentValue;
 8002e96:	68b9      	ldr	r1, [r7, #8]
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f7fd ffb1 	bl	8000e00 <__aeabi_fsub>
 8002e9e:	1c03      	adds	r3, r0, #0
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28

	//człon proporcjonalny
	float xP = currentError * Pmultiplier;
 8002ea2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ea6:	f7fd fe91 	bl	8000bcc <__aeabi_fmul>
 8002eaa:	1c03      	adds	r3, r0, #0
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24

	//człon całkujący
	*integralSum = *integralSum + (currentError / 100);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681c      	ldr	r4, [r3, #0]
 8002eb2:	494e      	ldr	r1, [pc, #312]	; (8002fec <PID+0x164>)
 8002eb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eb6:	f7fd fcbf 	bl	8000838 <__aeabi_fdiv>
 8002eba:	1c03      	adds	r3, r0, #0
 8002ebc:	1c19      	adds	r1, r3, #0
 8002ebe:	1c20      	adds	r0, r4, #0
 8002ec0:	f7fd fb1e 	bl	8000500 <__aeabi_fadd>
 8002ec4:	1c03      	adds	r3, r0, #0
 8002ec6:	1c1a      	adds	r2, r3, #0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	601a      	str	r2, [r3, #0]
	float xI = *integralSum * Imultiplier;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	1c19      	adds	r1, r3, #0
 8002ed2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002ed4:	f7fd fe7a 	bl	8000bcc <__aeabi_fmul>
 8002ed8:	1c03      	adds	r3, r0, #0
 8002eda:	623b      	str	r3, [r7, #32]

	//anty Wind-Up(blokada pętli całkowania)
	float antiWindUp = 1000;//max windUp
 8002edc:	4b44      	ldr	r3, [pc, #272]	; (8002ff0 <PID+0x168>)
 8002ede:	61fb      	str	r3, [r7, #28]
	if (*integralSum >= antiWindUp && currentError > 0)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	1c19      	adds	r1, r3, #0
 8002ee6:	69f8      	ldr	r0, [r7, #28]
 8002ee8:	f7fd f9c0 	bl	800026c <__aeabi_fcmple>
 8002eec:	1e03      	subs	r3, r0, #0
 8002eee:	d009      	beq.n	8002f04 <PID+0x7c>
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ef4:	f7fd f9c4 	bl	8000280 <__aeabi_fcmpgt>
 8002ef8:	1e03      	subs	r3, r0, #0
 8002efa:	d003      	beq.n	8002f04 <PID+0x7c>
		*integralSum = antiWindUp;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	e01a      	b.n	8002f3a <PID+0xb2>
	else if (*integralSum <= 0 - antiWindUp && currentError < 0)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681c      	ldr	r4, [r3, #0]
 8002f08:	69f9      	ldr	r1, [r7, #28]
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7fd ff78 	bl	8000e00 <__aeabi_fsub>
 8002f10:	1c03      	adds	r3, r0, #0
 8002f12:	1c19      	adds	r1, r3, #0
 8002f14:	1c20      	adds	r0, r4, #0
 8002f16:	f7fd f9a9 	bl	800026c <__aeabi_fcmple>
 8002f1a:	1e03      	subs	r3, r0, #0
 8002f1c:	d00d      	beq.n	8002f3a <PID+0xb2>
 8002f1e:	2100      	movs	r1, #0
 8002f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f22:	f7fd f999 	bl	8000258 <__aeabi_fcmplt>
 8002f26:	1e03      	subs	r3, r0, #0
 8002f28:	d007      	beq.n	8002f3a <PID+0xb2>
		*integralSum = 0 - antiWindUp;
 8002f2a:	69f9      	ldr	r1, [r7, #28]
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7fd ff67 	bl	8000e00 <__aeabi_fsub>
 8002f32:	1c03      	adds	r3, r0, #0
 8002f34:	1c1a      	adds	r2, r3, #0
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	601a      	str	r2, [r3, #0]
	//^ blokada ma zapobiec nieskończonemu wzrastaniu integralSum.

	//człon różniczkujący
	uint32_t Ddivider = 200;		//dzielnik opóźniający
 8002f3a:	23c8      	movs	r3, #200	; 0xc8
 8002f3c:	61bb      	str	r3, [r7, #24]
	(*Dcounter)++;		//licznik wywołań funkcji PID
 8002f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f46:	601a      	str	r2, [r3, #0]
	if (*Dcounter >= Ddivider) {
 8002f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d819      	bhi.n	8002f86 <PID+0xfe>
		*xD = (currentError - *lastError) * Dmultiplier * 10; //-1
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	1c19      	adds	r1, r3, #0
 8002f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f5a:	f7fd ff51 	bl	8000e00 <__aeabi_fsub>
 8002f5e:	1c03      	adds	r3, r0, #0
 8002f60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002f62:	1c18      	adds	r0, r3, #0
 8002f64:	f7fd fe32 	bl	8000bcc <__aeabi_fmul>
 8002f68:	1c03      	adds	r3, r0, #0
 8002f6a:	4922      	ldr	r1, [pc, #136]	; (8002ff4 <PID+0x16c>)
 8002f6c:	1c18      	adds	r0, r3, #0
 8002f6e:	f7fd fe2d 	bl	8000bcc <__aeabi_fmul>
 8002f72:	1c03      	adds	r3, r0, #0
 8002f74:	1c1a      	adds	r2, r3, #0
 8002f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f78:	601a      	str	r2, [r3, #0]
		*lastError = currentError;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f7e:	601a      	str	r2, [r3, #0]
		*Dcounter = 0;
 8002f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
	}
	//^Człon różniczkujący jest opóźniony, wykonuje się raz na divider wywołań funkcji.
	//potrzebuje do tego licznika(Dcounter), a xD jest zachowywane do następnego wywołania.

	//sumowanie korekt
	float sum = xP + xI + *xD;
 8002f86:	6a39      	ldr	r1, [r7, #32]
 8002f88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f8a:	f7fd fab9 	bl	8000500 <__aeabi_fadd>
 8002f8e:	1c03      	adds	r3, r0, #0
 8002f90:	1c1a      	adds	r2, r3, #0
 8002f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	1c19      	adds	r1, r3, #0
 8002f98:	1c10      	adds	r0, r2, #0
 8002f9a:	f7fd fab1 	bl	8000500 <__aeabi_fadd>
 8002f9e:	1c03      	adds	r3, r0, #0
 8002fa0:	617b      	str	r3, [r7, #20]
	int32_t throttle = (int32_t) round(sum);
 8002fa2:	6978      	ldr	r0, [r7, #20]
 8002fa4:	f7ff faba 	bl	800251c <__aeabi_f2d>
 8002fa8:	0002      	movs	r2, r0
 8002faa:	000b      	movs	r3, r1
 8002fac:	0010      	movs	r0, r2
 8002fae:	0019      	movs	r1, r3
 8002fb0:	f003 fd44 	bl	8006a3c <round>
 8002fb4:	0002      	movs	r2, r0
 8002fb6:	000b      	movs	r3, r1
 8002fb8:	0010      	movs	r0, r2
 8002fba:	0019      	movs	r1, r3
 8002fbc:	f7ff fa48 	bl	8002450 <__aeabi_d2iz>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

	int32_t maxThrottle = 1000;
 8002fc4:	23fa      	movs	r3, #250	; 0xfa
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	613b      	str	r3, [r7, #16]
	if (throttle > maxThrottle)
 8002fca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	dd02      	ble.n	8002fd8 <PID+0x150>
		throttle = maxThrottle;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd6:	e004      	b.n	8002fe2 <PID+0x15a>
	else if (throttle < 0)
 8002fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	da01      	bge.n	8002fe2 <PID+0x15a>
		throttle = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c

	return throttle;
 8002fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	/* USER CODE END 3 */
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b00d      	add	sp, #52	; 0x34
 8002fea:	bd90      	pop	{r4, r7, pc}
 8002fec:	42c80000 	.word	0x42c80000
 8002ff0:	447a0000 	.word	0x447a0000
 8002ff4:	41200000 	.word	0x41200000

08002ff8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002ff8:	b590      	push	{r4, r7, lr}
 8002ffa:	b093      	sub	sp, #76	; 0x4c
 8002ffc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002ffe:	2414      	movs	r4, #20
 8003000:	193b      	adds	r3, r7, r4
 8003002:	0018      	movs	r0, r3
 8003004:	2334      	movs	r3, #52	; 0x34
 8003006:	001a      	movs	r2, r3
 8003008:	2100      	movs	r1, #0
 800300a:	f003 f8e9 	bl	80061e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800300e:	003b      	movs	r3, r7
 8003010:	0018      	movs	r0, r3
 8003012:	2314      	movs	r3, #20
 8003014:	001a      	movs	r2, r3
 8003016:	2100      	movs	r1, #0
 8003018:	f003 f8e2 	bl	80061e0 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800301c:	4b21      	ldr	r3, [pc, #132]	; (80030a4 <SystemClock_Config+0xac>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a21      	ldr	r2, [pc, #132]	; (80030a8 <SystemClock_Config+0xb0>)
 8003022:	401a      	ands	r2, r3
 8003024:	4b1f      	ldr	r3, [pc, #124]	; (80030a4 <SystemClock_Config+0xac>)
 8003026:	2180      	movs	r1, #128	; 0x80
 8003028:	0109      	lsls	r1, r1, #4
 800302a:	430a      	orrs	r2, r1
 800302c:	601a      	str	r2, [r3, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800302e:	0021      	movs	r1, r4
 8003030:	187b      	adds	r3, r7, r1
 8003032:	2202      	movs	r2, #2
 8003034:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003036:	187b      	adds	r3, r7, r1
 8003038:	2201      	movs	r2, #1
 800303a:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800303c:	187b      	adds	r3, r7, r1
 800303e:	2210      	movs	r2, #16
 8003040:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003042:	187b      	adds	r3, r7, r1
 8003044:	2202      	movs	r2, #2
 8003046:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003048:	187b      	adds	r3, r7, r1
 800304a:	2200      	movs	r2, #0
 800304c:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800304e:	187b      	adds	r3, r7, r1
 8003050:	2200      	movs	r2, #0
 8003052:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003054:	187b      	adds	r3, r7, r1
 8003056:	2280      	movs	r2, #128	; 0x80
 8003058:	03d2      	lsls	r2, r2, #15
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800305c:	187b      	adds	r3, r7, r1
 800305e:	0018      	movs	r0, r3
 8003060:	f001 fcba 	bl	80049d8 <HAL_RCC_OscConfig>
 8003064:	1e03      	subs	r3, r0, #0
 8003066:	d001      	beq.n	800306c <SystemClock_Config+0x74>
		Error_Handler();
 8003068:	f000 fa3c 	bl	80034e4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800306c:	003b      	movs	r3, r7
 800306e:	220f      	movs	r2, #15
 8003070:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003072:	003b      	movs	r3, r7
 8003074:	2203      	movs	r2, #3
 8003076:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003078:	003b      	movs	r3, r7
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800307e:	003b      	movs	r3, r7
 8003080:	2200      	movs	r2, #0
 8003082:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003084:	003b      	movs	r3, r7
 8003086:	2200      	movs	r2, #0
 8003088:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800308a:	003b      	movs	r3, r7
 800308c:	2101      	movs	r1, #1
 800308e:	0018      	movs	r0, r3
 8003090:	f002 f81e 	bl	80050d0 <HAL_RCC_ClockConfig>
 8003094:	1e03      	subs	r3, r0, #0
 8003096:	d001      	beq.n	800309c <SystemClock_Config+0xa4>
		Error_Handler();
 8003098:	f000 fa24 	bl	80034e4 <Error_Handler>
	}
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b013      	add	sp, #76	; 0x4c
 80030a2:	bd90      	pop	{r4, r7, pc}
 80030a4:	40007000 	.word	0x40007000
 80030a8:	ffffe7ff 	.word	0xffffe7ff

080030ac <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80030b2:	003b      	movs	r3, r7
 80030b4:	0018      	movs	r0, r3
 80030b6:	2308      	movs	r3, #8
 80030b8:	001a      	movs	r2, r3
 80030ba:	2100      	movs	r1, #0
 80030bc:	f003 f890 	bl	80061e0 <memset>
	/* USER CODE BEGIN ADC_Init 1 */

	/* USER CODE END ADC_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 80030c0:	4b44      	ldr	r3, [pc, #272]	; (80031d4 <MX_ADC_Init+0x128>)
 80030c2:	4a45      	ldr	r2, [pc, #276]	; (80031d8 <MX_ADC_Init+0x12c>)
 80030c4:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 80030c6:	4b43      	ldr	r3, [pc, #268]	; (80031d4 <MX_ADC_Init+0x128>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80030cc:	4b41      	ldr	r3, [pc, #260]	; (80031d4 <MX_ADC_Init+0x128>)
 80030ce:	2280      	movs	r2, #128	; 0x80
 80030d0:	05d2      	lsls	r2, r2, #23
 80030d2:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80030d4:	4b3f      	ldr	r3, [pc, #252]	; (80031d4 <MX_ADC_Init+0x128>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80030da:	4b3e      	ldr	r3, [pc, #248]	; (80031d4 <MX_ADC_Init+0x128>)
 80030dc:	2207      	movs	r2, #7
 80030de:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80030e0:	4b3c      	ldr	r3, [pc, #240]	; (80031d4 <MX_ADC_Init+0x128>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030e6:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <MX_ADC_Init+0x128>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = ENABLE;
 80030ec:	4b39      	ldr	r3, [pc, #228]	; (80031d4 <MX_ADC_Init+0x128>)
 80030ee:	2220      	movs	r2, #32
 80030f0:	2101      	movs	r1, #1
 80030f2:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80030f4:	4b37      	ldr	r3, [pc, #220]	; (80031d4 <MX_ADC_Init+0x128>)
 80030f6:	2221      	movs	r2, #33	; 0x21
 80030f8:	2100      	movs	r1, #0
 80030fa:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030fc:	4b35      	ldr	r3, [pc, #212]	; (80031d4 <MX_ADC_Init+0x128>)
 80030fe:	2200      	movs	r2, #0
 8003100:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003102:	4b34      	ldr	r3, [pc, #208]	; (80031d4 <MX_ADC_Init+0x128>)
 8003104:	22c2      	movs	r2, #194	; 0xc2
 8003106:	32ff      	adds	r2, #255	; 0xff
 8003108:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = ENABLE;
 800310a:	4b32      	ldr	r3, [pc, #200]	; (80031d4 <MX_ADC_Init+0x128>)
 800310c:	222c      	movs	r2, #44	; 0x2c
 800310e:	2101      	movs	r1, #1
 8003110:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003112:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <MX_ADC_Init+0x128>)
 8003114:	2204      	movs	r2, #4
 8003116:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003118:	4b2e      	ldr	r3, [pc, #184]	; (80031d4 <MX_ADC_Init+0x128>)
 800311a:	2280      	movs	r2, #128	; 0x80
 800311c:	0152      	lsls	r2, r2, #5
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 8003120:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <MX_ADC_Init+0x128>)
 8003122:	2200      	movs	r2, #0
 8003124:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003126:	4b2b      	ldr	r3, [pc, #172]	; (80031d4 <MX_ADC_Init+0x128>)
 8003128:	2200      	movs	r2, #0
 800312a:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800312c:	4b29      	ldr	r3, [pc, #164]	; (80031d4 <MX_ADC_Init+0x128>)
 800312e:	2200      	movs	r2, #0
 8003130:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8003132:	4b28      	ldr	r3, [pc, #160]	; (80031d4 <MX_ADC_Init+0x128>)
 8003134:	0018      	movs	r0, r3
 8003136:	f000 fbed 	bl	8003914 <HAL_ADC_Init>
 800313a:	1e03      	subs	r3, r0, #0
 800313c:	d001      	beq.n	8003142 <MX_ADC_Init+0x96>
		Error_Handler();
 800313e:	f000 f9d1 	bl	80034e4 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8003142:	003b      	movs	r3, r7
 8003144:	2201      	movs	r2, #1
 8003146:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003148:	003b      	movs	r3, r7
 800314a:	2280      	movs	r2, #128	; 0x80
 800314c:	0152      	lsls	r2, r2, #5
 800314e:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8003150:	003a      	movs	r2, r7
 8003152:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <MX_ADC_Init+0x128>)
 8003154:	0011      	movs	r1, r2
 8003156:	0018      	movs	r0, r3
 8003158:	f000 fdea 	bl	8003d30 <HAL_ADC_ConfigChannel>
 800315c:	1e03      	subs	r3, r0, #0
 800315e:	d001      	beq.n	8003164 <MX_ADC_Init+0xb8>
		Error_Handler();
 8003160:	f000 f9c0 	bl	80034e4 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8003164:	003b      	movs	r3, r7
 8003166:	4a1d      	ldr	r2, [pc, #116]	; (80031dc <MX_ADC_Init+0x130>)
 8003168:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800316a:	003a      	movs	r2, r7
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <MX_ADC_Init+0x128>)
 800316e:	0011      	movs	r1, r2
 8003170:	0018      	movs	r0, r3
 8003172:	f000 fddd 	bl	8003d30 <HAL_ADC_ConfigChannel>
 8003176:	1e03      	subs	r3, r0, #0
 8003178:	d001      	beq.n	800317e <MX_ADC_Init+0xd2>
		Error_Handler();
 800317a:	f000 f9b3 	bl	80034e4 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 800317e:	003b      	movs	r3, r7
 8003180:	4a17      	ldr	r2, [pc, #92]	; (80031e0 <MX_ADC_Init+0x134>)
 8003182:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8003184:	003a      	movs	r2, r7
 8003186:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <MX_ADC_Init+0x128>)
 8003188:	0011      	movs	r1, r2
 800318a:	0018      	movs	r0, r3
 800318c:	f000 fdd0 	bl	8003d30 <HAL_ADC_ConfigChannel>
 8003190:	1e03      	subs	r3, r0, #0
 8003192:	d001      	beq.n	8003198 <MX_ADC_Init+0xec>
		Error_Handler();
 8003194:	f000 f9a6 	bl	80034e4 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8003198:	003b      	movs	r3, r7
 800319a:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <MX_ADC_Init+0x138>)
 800319c:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800319e:	003a      	movs	r2, r7
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <MX_ADC_Init+0x128>)
 80031a2:	0011      	movs	r1, r2
 80031a4:	0018      	movs	r0, r3
 80031a6:	f000 fdc3 	bl	8003d30 <HAL_ADC_ConfigChannel>
 80031aa:	1e03      	subs	r3, r0, #0
 80031ac:	d001      	beq.n	80031b2 <MX_ADC_Init+0x106>
		Error_Handler();
 80031ae:	f000 f999 	bl	80034e4 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80031b2:	003b      	movs	r3, r7
 80031b4:	4a0c      	ldr	r2, [pc, #48]	; (80031e8 <MX_ADC_Init+0x13c>)
 80031b6:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80031b8:	003a      	movs	r2, r7
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <MX_ADC_Init+0x128>)
 80031bc:	0011      	movs	r1, r2
 80031be:	0018      	movs	r0, r3
 80031c0:	f000 fdb6 	bl	8003d30 <HAL_ADC_ConfigChannel>
 80031c4:	1e03      	subs	r3, r0, #0
 80031c6:	d001      	beq.n	80031cc <MX_ADC_Init+0x120>
		Error_Handler();
 80031c8:	f000 f98c 	bl	80034e4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b002      	add	sp, #8
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	2000015c 	.word	0x2000015c
 80031d8:	40012400 	.word	0x40012400
 80031dc:	04000002 	.word	0x04000002
 80031e0:	08000004 	.word	0x08000004
 80031e4:	0c000008 	.word	0x0c000008
 80031e8:	10000010 	.word	0x10000010

080031ec <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80031f2:	2318      	movs	r3, #24
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	0018      	movs	r0, r3
 80031f8:	2310      	movs	r3, #16
 80031fa:	001a      	movs	r2, r3
 80031fc:	2100      	movs	r1, #0
 80031fe:	f002 ffef 	bl	80061e0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003202:	2310      	movs	r3, #16
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	0018      	movs	r0, r3
 8003208:	2308      	movs	r3, #8
 800320a:	001a      	movs	r2, r3
 800320c:	2100      	movs	r1, #0
 800320e:	f002 ffe7 	bl	80061e0 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003212:	003b      	movs	r3, r7
 8003214:	0018      	movs	r0, r3
 8003216:	2310      	movs	r3, #16
 8003218:	001a      	movs	r2, r3
 800321a:	2100      	movs	r1, #0
 800321c:	f002 ffe0 	bl	80061e0 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003220:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <MX_TIM2_Init+0xf8>)
 8003222:	2280      	movs	r2, #128	; 0x80
 8003224:	05d2      	lsls	r2, r2, #23
 8003226:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 23;
 8003228:	4b2e      	ldr	r3, [pc, #184]	; (80032e4 <MX_TIM2_Init+0xf8>)
 800322a:	2217      	movs	r2, #23
 800322c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800322e:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <MX_TIM2_Init+0xf8>)
 8003230:	2200      	movs	r2, #0
 8003232:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 19999;
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <MX_TIM2_Init+0xf8>)
 8003236:	4a2c      	ldr	r2, [pc, #176]	; (80032e8 <MX_TIM2_Init+0xfc>)
 8003238:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800323a:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <MX_TIM2_Init+0xf8>)
 800323c:	2200      	movs	r2, #0
 800323e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <MX_TIM2_Init+0xf8>)
 8003242:	2200      	movs	r2, #0
 8003244:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8003246:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <MX_TIM2_Init+0xf8>)
 8003248:	0018      	movs	r0, r3
 800324a:	f002 f92f 	bl	80054ac <HAL_TIM_Base_Init>
 800324e:	1e03      	subs	r3, r0, #0
 8003250:	d001      	beq.n	8003256 <MX_TIM2_Init+0x6a>
		Error_Handler();
 8003252:	f000 f947 	bl	80034e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003256:	2118      	movs	r1, #24
 8003258:	187b      	adds	r3, r7, r1
 800325a:	2280      	movs	r2, #128	; 0x80
 800325c:	0152      	lsls	r2, r2, #5
 800325e:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8003260:	187a      	adds	r2, r7, r1
 8003262:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <MX_TIM2_Init+0xf8>)
 8003264:	0011      	movs	r1, r2
 8003266:	0018      	movs	r0, r3
 8003268:	f002 fc2e 	bl	8005ac8 <HAL_TIM_ConfigClockSource>
 800326c:	1e03      	subs	r3, r0, #0
 800326e:	d001      	beq.n	8003274 <MX_TIM2_Init+0x88>
		Error_Handler();
 8003270:	f000 f938 	bl	80034e4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <MX_TIM2_Init+0xf8>)
 8003276:	0018      	movs	r0, r3
 8003278:	f002 f9a4 	bl	80055c4 <HAL_TIM_PWM_Init>
 800327c:	1e03      	subs	r3, r0, #0
 800327e:	d001      	beq.n	8003284 <MX_TIM2_Init+0x98>
		Error_Handler();
 8003280:	f000 f930 	bl	80034e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003284:	2110      	movs	r1, #16
 8003286:	187b      	adds	r3, r7, r1
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800328c:	187b      	adds	r3, r7, r1
 800328e:	2200      	movs	r2, #0
 8003290:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003292:	187a      	adds	r2, r7, r1
 8003294:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <MX_TIM2_Init+0xf8>)
 8003296:	0011      	movs	r1, r2
 8003298:	0018      	movs	r0, r3
 800329a:	f002 ff1f 	bl	80060dc <HAL_TIMEx_MasterConfigSynchronization>
 800329e:	1e03      	subs	r3, r0, #0
 80032a0:	d001      	beq.n	80032a6 <MX_TIM2_Init+0xba>
			!= HAL_OK) {
		Error_Handler();
 80032a2:	f000 f91f 	bl	80034e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032a6:	003b      	movs	r3, r7
 80032a8:	2260      	movs	r2, #96	; 0x60
 80032aa:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80032ac:	003b      	movs	r3, r7
 80032ae:	2200      	movs	r2, #0
 80032b0:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032b2:	003b      	movs	r3, r7
 80032b4:	2200      	movs	r2, #0
 80032b6:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032b8:	003b      	movs	r3, r7
 80032ba:	2200      	movs	r2, #0
 80032bc:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80032be:	0039      	movs	r1, r7
 80032c0:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <MX_TIM2_Init+0xf8>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	0018      	movs	r0, r3
 80032c6:	f002 fb39 	bl	800593c <HAL_TIM_PWM_ConfigChannel>
 80032ca:	1e03      	subs	r3, r0, #0
 80032cc:	d001      	beq.n	80032d2 <MX_TIM2_Init+0xe6>
			!= HAL_OK) {
		Error_Handler();
 80032ce:	f000 f909 	bl	80034e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80032d2:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <MX_TIM2_Init+0xf8>)
 80032d4:	0018      	movs	r0, r3
 80032d6:	f000 f9b7 	bl	8003648 <HAL_TIM_MspPostInit>

}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	b00a      	add	sp, #40	; 0x28
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	200000cc 	.word	0x200000cc
 80032e8:	00004e1f 	.word	0x00004e1f

080032ec <MX_TIM21_Init>:
/**
 * @brief TIM21 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM21_Init(void) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM21_Init 0 */

	/* USER CODE END TIM21_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80032f2:	2308      	movs	r3, #8
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	0018      	movs	r0, r3
 80032f8:	2310      	movs	r3, #16
 80032fa:	001a      	movs	r2, r3
 80032fc:	2100      	movs	r1, #0
 80032fe:	f002 ff6f 	bl	80061e0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003302:	003b      	movs	r3, r7
 8003304:	0018      	movs	r0, r3
 8003306:	2308      	movs	r3, #8
 8003308:	001a      	movs	r2, r3
 800330a:	2100      	movs	r1, #0
 800330c:	f002 ff68 	bl	80061e0 <memset>

	/* USER CODE BEGIN TIM21_Init 1 */

	/* USER CODE END TIM21_Init 1 */
	htim21.Instance = TIM21;
 8003310:	4b1e      	ldr	r3, [pc, #120]	; (800338c <MX_TIM21_Init+0xa0>)
 8003312:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <MX_TIM21_Init+0xa4>)
 8003314:	601a      	str	r2, [r3, #0]
	htim21.Init.Prescaler = 149;
 8003316:	4b1d      	ldr	r3, [pc, #116]	; (800338c <MX_TIM21_Init+0xa0>)
 8003318:	2295      	movs	r2, #149	; 0x95
 800331a:	605a      	str	r2, [r3, #4]
	htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800331c:	4b1b      	ldr	r3, [pc, #108]	; (800338c <MX_TIM21_Init+0xa0>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
	htim21.Init.Period = 399;
 8003322:	4b1a      	ldr	r3, [pc, #104]	; (800338c <MX_TIM21_Init+0xa0>)
 8003324:	2290      	movs	r2, #144	; 0x90
 8003326:	32ff      	adds	r2, #255	; 0xff
 8003328:	60da      	str	r2, [r3, #12]
	htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800332a:	4b18      	ldr	r3, [pc, #96]	; (800338c <MX_TIM21_Init+0xa0>)
 800332c:	2200      	movs	r2, #0
 800332e:	611a      	str	r2, [r3, #16]
	htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003330:	4b16      	ldr	r3, [pc, #88]	; (800338c <MX_TIM21_Init+0xa0>)
 8003332:	2200      	movs	r2, #0
 8003334:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim21) != HAL_OK) {
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <MX_TIM21_Init+0xa0>)
 8003338:	0018      	movs	r0, r3
 800333a:	f002 f8b7 	bl	80054ac <HAL_TIM_Base_Init>
 800333e:	1e03      	subs	r3, r0, #0
 8003340:	d001      	beq.n	8003346 <MX_TIM21_Init+0x5a>
		Error_Handler();
 8003342:	f000 f8cf 	bl	80034e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003346:	2108      	movs	r1, #8
 8003348:	187b      	adds	r3, r7, r1
 800334a:	2280      	movs	r2, #128	; 0x80
 800334c:	0152      	lsls	r2, r2, #5
 800334e:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK) {
 8003350:	187a      	adds	r2, r7, r1
 8003352:	4b0e      	ldr	r3, [pc, #56]	; (800338c <MX_TIM21_Init+0xa0>)
 8003354:	0011      	movs	r1, r2
 8003356:	0018      	movs	r0, r3
 8003358:	f002 fbb6 	bl	8005ac8 <HAL_TIM_ConfigClockSource>
 800335c:	1e03      	subs	r3, r0, #0
 800335e:	d001      	beq.n	8003364 <MX_TIM21_Init+0x78>
		Error_Handler();
 8003360:	f000 f8c0 	bl	80034e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003364:	003b      	movs	r3, r7
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800336a:	003b      	movs	r3, r7
 800336c:	2200      	movs	r2, #0
 800336e:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig)
 8003370:	003a      	movs	r2, r7
 8003372:	4b06      	ldr	r3, [pc, #24]	; (800338c <MX_TIM21_Init+0xa0>)
 8003374:	0011      	movs	r1, r2
 8003376:	0018      	movs	r0, r3
 8003378:	f002 feb0 	bl	80060dc <HAL_TIMEx_MasterConfigSynchronization>
 800337c:	1e03      	subs	r3, r0, #0
 800337e:	d001      	beq.n	8003384 <MX_TIM21_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8003380:	f000 f8b0 	bl	80034e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM21_Init 2 */

	/* USER CODE END TIM21_Init 2 */

}
 8003384:	46c0      	nop			; (mov r8, r8)
 8003386:	46bd      	mov	sp, r7
 8003388:	b006      	add	sp, #24
 800338a:	bd80      	pop	{r7, pc}
 800338c:	200001b8 	.word	0x200001b8
 8003390:	40010800 	.word	0x40010800

08003394 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800339a:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <MX_DMA_Init+0x38>)
 800339c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <MX_DMA_Init+0x38>)
 80033a0:	2101      	movs	r1, #1
 80033a2:	430a      	orrs	r2, r1
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <MX_DMA_Init+0x38>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	2201      	movs	r2, #1
 80033ac:	4013      	ands	r3, r2
 80033ae:	607b      	str	r3, [r7, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80033b2:	2200      	movs	r2, #0
 80033b4:	2100      	movs	r1, #0
 80033b6:	2009      	movs	r0, #9
 80033b8:	f000 ff96 	bl	80042e8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80033bc:	2009      	movs	r0, #9
 80033be:	f000 ffa8 	bl	8004312 <HAL_NVIC_EnableIRQ>

}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b002      	add	sp, #8
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	40021000 	.word	0x40021000

080033d0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b089      	sub	sp, #36	; 0x24
 80033d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80033d6:	240c      	movs	r4, #12
 80033d8:	193b      	adds	r3, r7, r4
 80033da:	0018      	movs	r0, r3
 80033dc:	2314      	movs	r3, #20
 80033de:	001a      	movs	r2, r3
 80033e0:	2100      	movs	r1, #0
 80033e2:	f002 fefd 	bl	80061e0 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80033e6:	4b3c      	ldr	r3, [pc, #240]	; (80034d8 <MX_GPIO_Init+0x108>)
 80033e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ea:	4b3b      	ldr	r3, [pc, #236]	; (80034d8 <MX_GPIO_Init+0x108>)
 80033ec:	2104      	movs	r1, #4
 80033ee:	430a      	orrs	r2, r1
 80033f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80033f2:	4b39      	ldr	r3, [pc, #228]	; (80034d8 <MX_GPIO_Init+0x108>)
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	2204      	movs	r2, #4
 80033f8:	4013      	ands	r3, r2
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80033fe:	4b36      	ldr	r3, [pc, #216]	; (80034d8 <MX_GPIO_Init+0x108>)
 8003400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003402:	4b35      	ldr	r3, [pc, #212]	; (80034d8 <MX_GPIO_Init+0x108>)
 8003404:	2101      	movs	r1, #1
 8003406:	430a      	orrs	r2, r1
 8003408:	62da      	str	r2, [r3, #44]	; 0x2c
 800340a:	4b33      	ldr	r3, [pc, #204]	; (80034d8 <MX_GPIO_Init+0x108>)
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	2201      	movs	r2, #1
 8003410:	4013      	ands	r3, r2
 8003412:	607b      	str	r3, [r7, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003416:	4b30      	ldr	r3, [pc, #192]	; (80034d8 <MX_GPIO_Init+0x108>)
 8003418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341a:	4b2f      	ldr	r3, [pc, #188]	; (80034d8 <MX_GPIO_Init+0x108>)
 800341c:	2102      	movs	r1, #2
 800341e:	430a      	orrs	r2, r1
 8003420:	62da      	str	r2, [r3, #44]	; 0x2c
 8003422:	4b2d      	ldr	r3, [pc, #180]	; (80034d8 <MX_GPIO_Init+0x108>)
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	2202      	movs	r2, #2
 8003428:	4013      	ands	r3, r2
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, DISP_RS_Pin | DISP_E_Pin, GPIO_PIN_RESET);
 800342e:	23c0      	movs	r3, #192	; 0xc0
 8003430:	021b      	lsls	r3, r3, #8
 8003432:	482a      	ldr	r0, [pc, #168]	; (80034dc <MX_GPIO_Init+0x10c>)
 8003434:	2200      	movs	r2, #0
 8003436:	0019      	movs	r1, r3
 8003438:	f001 fab0 	bl	800499c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800343c:	23d8      	movs	r3, #216	; 0xd8
 800343e:	00d9      	lsls	r1, r3, #3
 8003440:	23a0      	movs	r3, #160	; 0xa0
 8003442:	05db      	lsls	r3, r3, #23
 8003444:	2200      	movs	r2, #0
 8003446:	0018      	movs	r0, r3
 8003448:	f001 faa8 	bl	800499c <HAL_GPIO_WritePin>
	LED_STATUS_Pin | DISP_D7_Pin | DISP_D5_Pin | DISP_D4_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DISP_D6_GPIO_Port, DISP_D6_Pin, GPIO_PIN_RESET);
 800344c:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <MX_GPIO_Init+0x110>)
 800344e:	2200      	movs	r2, #0
 8003450:	2102      	movs	r1, #2
 8003452:	0018      	movs	r0, r3
 8003454:	f001 faa2 	bl	800499c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : DISP_RS_Pin DISP_E_Pin */
	GPIO_InitStruct.Pin = DISP_RS_Pin | DISP_E_Pin;
 8003458:	193b      	adds	r3, r7, r4
 800345a:	22c0      	movs	r2, #192	; 0xc0
 800345c:	0212      	lsls	r2, r2, #8
 800345e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003460:	193b      	adds	r3, r7, r4
 8003462:	2201      	movs	r2, #1
 8003464:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	193b      	adds	r3, r7, r4
 8003468:	2200      	movs	r2, #0
 800346a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346c:	193b      	adds	r3, r7, r4
 800346e:	2200      	movs	r2, #0
 8003470:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003472:	193b      	adds	r3, r7, r4
 8003474:	4a19      	ldr	r2, [pc, #100]	; (80034dc <MX_GPIO_Init+0x10c>)
 8003476:	0019      	movs	r1, r3
 8003478:	0010      	movs	r0, r2
 800347a:	f001 f921 	bl	80046c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_STATUS_Pin DISP_D7_Pin DISP_D5_Pin DISP_D4_Pin */
	GPIO_InitStruct.Pin = LED_STATUS_Pin | DISP_D7_Pin | DISP_D5_Pin
 800347e:	0021      	movs	r1, r4
 8003480:	187b      	adds	r3, r7, r1
 8003482:	22d8      	movs	r2, #216	; 0xd8
 8003484:	00d2      	lsls	r2, r2, #3
 8003486:	601a      	str	r2, [r3, #0]
			| DISP_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003488:	000c      	movs	r4, r1
 800348a:	193b      	adds	r3, r7, r4
 800348c:	2201      	movs	r2, #1
 800348e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003490:	193b      	adds	r3, r7, r4
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003496:	193b      	adds	r3, r7, r4
 8003498:	2200      	movs	r2, #0
 800349a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349c:	193a      	adds	r2, r7, r4
 800349e:	23a0      	movs	r3, #160	; 0xa0
 80034a0:	05db      	lsls	r3, r3, #23
 80034a2:	0011      	movs	r1, r2
 80034a4:	0018      	movs	r0, r3
 80034a6:	f001 f90b 	bl	80046c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DISP_D6_Pin */
	GPIO_InitStruct.Pin = DISP_D6_Pin;
 80034aa:	0021      	movs	r1, r4
 80034ac:	187b      	adds	r3, r7, r1
 80034ae:	2202      	movs	r2, #2
 80034b0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b2:	187b      	adds	r3, r7, r1
 80034b4:	2201      	movs	r2, #1
 80034b6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	187b      	adds	r3, r7, r1
 80034ba:	2200      	movs	r2, #0
 80034bc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034be:	187b      	adds	r3, r7, r1
 80034c0:	2200      	movs	r2, #0
 80034c2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(DISP_D6_GPIO_Port, &GPIO_InitStruct);
 80034c4:	187b      	adds	r3, r7, r1
 80034c6:	4a06      	ldr	r2, [pc, #24]	; (80034e0 <MX_GPIO_Init+0x110>)
 80034c8:	0019      	movs	r1, r3
 80034ca:	0010      	movs	r0, r2
 80034cc:	f001 f8f8 	bl	80046c0 <HAL_GPIO_Init>

}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b009      	add	sp, #36	; 0x24
 80034d6:	bd90      	pop	{r4, r7, pc}
 80034d8:	40021000 	.word	0x40021000
 80034dc:	50000800 	.word	0x50000800
 80034e0:	50000400 	.word	0x50000400

080034e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034e8:	b672      	cpsid	i
}
 80034ea:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80034ec:	e7fe      	b.n	80034ec <Error_Handler+0x8>
	...

080034f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f4:	4b07      	ldr	r3, [pc, #28]	; (8003514 <HAL_MspInit+0x24>)
 80034f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f8:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_MspInit+0x24>)
 80034fa:	2101      	movs	r1, #1
 80034fc:	430a      	orrs	r2, r1
 80034fe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003500:	4b04      	ldr	r3, [pc, #16]	; (8003514 <HAL_MspInit+0x24>)
 8003502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <HAL_MspInit+0x24>)
 8003506:	2180      	movs	r1, #128	; 0x80
 8003508:	0549      	lsls	r1, r1, #21
 800350a:	430a      	orrs	r2, r1
 800350c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40021000 	.word	0x40021000

08003518 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003520:	240c      	movs	r4, #12
 8003522:	193b      	adds	r3, r7, r4
 8003524:	0018      	movs	r0, r3
 8003526:	2314      	movs	r3, #20
 8003528:	001a      	movs	r2, r3
 800352a:	2100      	movs	r1, #0
 800352c:	f002 fe58 	bl	80061e0 <memset>
  if(hadc->Instance==ADC1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a2a      	ldr	r2, [pc, #168]	; (80035e0 <HAL_ADC_MspInit+0xc8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d14d      	bne.n	80035d6 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800353a:	4b2a      	ldr	r3, [pc, #168]	; (80035e4 <HAL_ADC_MspInit+0xcc>)
 800353c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800353e:	4b29      	ldr	r3, [pc, #164]	; (80035e4 <HAL_ADC_MspInit+0xcc>)
 8003540:	2180      	movs	r1, #128	; 0x80
 8003542:	0089      	lsls	r1, r1, #2
 8003544:	430a      	orrs	r2, r1
 8003546:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003548:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <HAL_ADC_MspInit+0xcc>)
 800354a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354c:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <HAL_ADC_MspInit+0xcc>)
 800354e:	2101      	movs	r1, #1
 8003550:	430a      	orrs	r2, r1
 8003552:	62da      	str	r2, [r3, #44]	; 0x2c
 8003554:	4b23      	ldr	r3, [pc, #140]	; (80035e4 <HAL_ADC_MspInit+0xcc>)
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	2201      	movs	r2, #1
 800355a:	4013      	ands	r3, r2
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = SET_Pin|REG_P_Pin|REG_I_Pin|REG_D_Pin
 8003560:	193b      	adds	r3, r7, r4
 8003562:	221f      	movs	r2, #31
 8003564:	601a      	str	r2, [r3, #0]
                          |TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003566:	193b      	adds	r3, r7, r4
 8003568:	2203      	movs	r2, #3
 800356a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	193b      	adds	r3, r7, r4
 800356e:	2200      	movs	r2, #0
 8003570:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003572:	193a      	adds	r2, r7, r4
 8003574:	23a0      	movs	r3, #160	; 0xa0
 8003576:	05db      	lsls	r3, r3, #23
 8003578:	0011      	movs	r1, r2
 800357a:	0018      	movs	r0, r3
 800357c:	f001 f8a0 	bl	80046c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003580:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <HAL_ADC_MspInit+0xd0>)
 8003582:	4a1a      	ldr	r2, [pc, #104]	; (80035ec <HAL_ADC_MspInit+0xd4>)
 8003584:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8003586:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <HAL_ADC_MspInit+0xd0>)
 8003588:	2200      	movs	r2, #0
 800358a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800358c:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <HAL_ADC_MspInit+0xd0>)
 800358e:	2200      	movs	r2, #0
 8003590:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003592:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <HAL_ADC_MspInit+0xd0>)
 8003594:	2200      	movs	r2, #0
 8003596:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003598:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <HAL_ADC_MspInit+0xd0>)
 800359a:	2280      	movs	r2, #128	; 0x80
 800359c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HAL_ADC_MspInit+0xd0>)
 80035a0:	2280      	movs	r2, #128	; 0x80
 80035a2:	0092      	lsls	r2, r2, #2
 80035a4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <HAL_ADC_MspInit+0xd0>)
 80035a8:	2280      	movs	r2, #128	; 0x80
 80035aa:	0112      	lsls	r2, r2, #4
 80035ac:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80035ae:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <HAL_ADC_MspInit+0xd0>)
 80035b0:	2220      	movs	r2, #32
 80035b2:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <HAL_ADC_MspInit+0xd0>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_ADC_MspInit+0xd0>)
 80035bc:	0018      	movs	r0, r3
 80035be:	f000 fec5 	bl	800434c <HAL_DMA_Init>
 80035c2:	1e03      	subs	r3, r0, #0
 80035c4:	d001      	beq.n	80035ca <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80035c6:	f7ff ff8d 	bl	80034e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a06      	ldr	r2, [pc, #24]	; (80035e8 <HAL_ADC_MspInit+0xd0>)
 80035ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <HAL_ADC_MspInit+0xd0>)
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	b009      	add	sp, #36	; 0x24
 80035dc:	bd90      	pop	{r4, r7, pc}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	40012400 	.word	0x40012400
 80035e4:	40021000 	.word	0x40021000
 80035e8:	20000114 	.word	0x20000114
 80035ec:	40020008 	.word	0x40020008

080035f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	2380      	movs	r3, #128	; 0x80
 80035fe:	05db      	lsls	r3, r3, #23
 8003600:	429a      	cmp	r2, r3
 8003602:	d106      	bne.n	8003612 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003604:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <HAL_TIM_Base_MspInit+0x50>)
 8003606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003608:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <HAL_TIM_Base_MspInit+0x50>)
 800360a:	2101      	movs	r1, #1
 800360c:	430a      	orrs	r2, r1
 800360e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8003610:	e012      	b.n	8003638 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM21)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a0b      	ldr	r2, [pc, #44]	; (8003644 <HAL_TIM_Base_MspInit+0x54>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d10d      	bne.n	8003638 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM21_CLK_ENABLE();
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <HAL_TIM_Base_MspInit+0x50>)
 800361e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003620:	4b07      	ldr	r3, [pc, #28]	; (8003640 <HAL_TIM_Base_MspInit+0x50>)
 8003622:	2104      	movs	r1, #4
 8003624:	430a      	orrs	r2, r1
 8003626:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8003628:	2200      	movs	r2, #0
 800362a:	2100      	movs	r1, #0
 800362c:	2014      	movs	r0, #20
 800362e:	f000 fe5b 	bl	80042e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8003632:	2014      	movs	r0, #20
 8003634:	f000 fe6d 	bl	8004312 <HAL_NVIC_EnableIRQ>
}
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	b002      	add	sp, #8
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000
 8003644:	40010800 	.word	0x40010800

08003648 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b089      	sub	sp, #36	; 0x24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003650:	240c      	movs	r4, #12
 8003652:	193b      	adds	r3, r7, r4
 8003654:	0018      	movs	r0, r3
 8003656:	2314      	movs	r3, #20
 8003658:	001a      	movs	r2, r3
 800365a:	2100      	movs	r1, #0
 800365c:	f002 fdc0 	bl	80061e0 <memset>
  if(htim->Instance==TIM2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	05db      	lsls	r3, r3, #23
 8003668:	429a      	cmp	r2, r3
 800366a:	d122      	bne.n	80036b2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <HAL_TIM_MspPostInit+0x74>)
 800366e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003670:	4b12      	ldr	r3, [pc, #72]	; (80036bc <HAL_TIM_MspPostInit+0x74>)
 8003672:	2101      	movs	r1, #1
 8003674:	430a      	orrs	r2, r1
 8003676:	62da      	str	r2, [r3, #44]	; 0x2c
 8003678:	4b10      	ldr	r3, [pc, #64]	; (80036bc <HAL_TIM_MspPostInit+0x74>)
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	2201      	movs	r2, #1
 800367e:	4013      	ands	r3, r2
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
 8003684:	0021      	movs	r1, r4
 8003686:	187b      	adds	r3, r7, r1
 8003688:	2220      	movs	r2, #32
 800368a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368c:	187b      	adds	r3, r7, r1
 800368e:	2202      	movs	r2, #2
 8003690:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	187b      	adds	r3, r7, r1
 8003694:	2200      	movs	r2, #0
 8003696:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003698:	187b      	adds	r3, r7, r1
 800369a:	2200      	movs	r2, #0
 800369c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800369e:	187b      	adds	r3, r7, r1
 80036a0:	2205      	movs	r2, #5
 80036a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 80036a4:	187a      	adds	r2, r7, r1
 80036a6:	23a0      	movs	r3, #160	; 0xa0
 80036a8:	05db      	lsls	r3, r3, #23
 80036aa:	0011      	movs	r1, r2
 80036ac:	0018      	movs	r0, r3
 80036ae:	f001 f807 	bl	80046c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b009      	add	sp, #36	; 0x24
 80036b8:	bd90      	pop	{r4, r7, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	40021000 	.word	0x40021000

080036c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036c4:	e7fe      	b.n	80036c4 <NMI_Handler+0x4>

080036c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036ca:	e7fe      	b.n	80036ca <HardFault_Handler+0x4>

080036cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80036d0:	46c0      	nop			; (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036e4:	f000 f8d6 	bl	8003894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80036f4:	4b03      	ldr	r3, [pc, #12]	; (8003704 <DMA1_Channel1_IRQHandler+0x14>)
 80036f6:	0018      	movs	r0, r3
 80036f8:	f000 ff06 	bl	8004508 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80036fc:	46c0      	nop			; (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	20000114 	.word	0x20000114

08003708 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 800370c:	4b03      	ldr	r3, [pc, #12]	; (800371c <TIM21_IRQHandler+0x14>)
 800370e:	0018      	movs	r0, r3
 8003710:	f002 f82c 	bl	800576c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8003714:	46c0      	nop			; (mov r8, r8)
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	200001b8 	.word	0x200001b8

08003720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003728:	4a14      	ldr	r2, [pc, #80]	; (800377c <_sbrk+0x5c>)
 800372a:	4b15      	ldr	r3, [pc, #84]	; (8003780 <_sbrk+0x60>)
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003734:	4b13      	ldr	r3, [pc, #76]	; (8003784 <_sbrk+0x64>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d102      	bne.n	8003742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800373c:	4b11      	ldr	r3, [pc, #68]	; (8003784 <_sbrk+0x64>)
 800373e:	4a12      	ldr	r2, [pc, #72]	; (8003788 <_sbrk+0x68>)
 8003740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003742:	4b10      	ldr	r3, [pc, #64]	; (8003784 <_sbrk+0x64>)
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	18d3      	adds	r3, r2, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	429a      	cmp	r2, r3
 800374e:	d207      	bcs.n	8003760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003750:	f002 fd1c 	bl	800618c <__errno>
 8003754:	0003      	movs	r3, r0
 8003756:	220c      	movs	r2, #12
 8003758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800375a:	2301      	movs	r3, #1
 800375c:	425b      	negs	r3, r3
 800375e:	e009      	b.n	8003774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003760:	4b08      	ldr	r3, [pc, #32]	; (8003784 <_sbrk+0x64>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003766:	4b07      	ldr	r3, [pc, #28]	; (8003784 <_sbrk+0x64>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	18d2      	adds	r2, r2, r3
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <_sbrk+0x64>)
 8003770:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003772:	68fb      	ldr	r3, [r7, #12]
}
 8003774:	0018      	movs	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	b006      	add	sp, #24
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20002000 	.word	0x20002000
 8003780:	00000400 	.word	0x00000400
 8003784:	2000008c 	.word	0x2000008c
 8003788:	20000210 	.word	0x20000210

0800378c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003798:	480d      	ldr	r0, [pc, #52]	; (80037d0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800379a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800379c:	480d      	ldr	r0, [pc, #52]	; (80037d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800379e:	490e      	ldr	r1, [pc, #56]	; (80037d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037a0:	4a0e      	ldr	r2, [pc, #56]	; (80037dc <LoopForever+0xe>)
  movs r3, #0
 80037a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037a4:	e002      	b.n	80037ac <LoopCopyDataInit>

080037a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037aa:	3304      	adds	r3, #4

080037ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037b0:	d3f9      	bcc.n	80037a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037b2:	4a0b      	ldr	r2, [pc, #44]	; (80037e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037b4:	4c0b      	ldr	r4, [pc, #44]	; (80037e4 <LoopForever+0x16>)
  movs r3, #0
 80037b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037b8:	e001      	b.n	80037be <LoopFillZerobss>

080037ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037bc:	3204      	adds	r2, #4

080037be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037c0:	d3fb      	bcc.n	80037ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80037c2:	f7ff ffe3 	bl	800378c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037c6:	f002 fce7 	bl	8006198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037ca:	f7ff f96b 	bl	8002aa4 <main>

080037ce <LoopForever>:

LoopForever:
    b LoopForever
 80037ce:	e7fe      	b.n	80037ce <LoopForever>
   ldr   r0, =_estack
 80037d0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80037d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80037dc:	08006cbc 	.word	0x08006cbc
  ldr r2, =_sbss
 80037e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80037e4:	2000020c 	.word	0x2000020c

080037e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037e8:	e7fe      	b.n	80037e8 <ADC1_COMP_IRQHandler>
	...

080037ec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037f2:	1dfb      	adds	r3, r7, #7
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_Init+0x3c>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <HAL_Init+0x3c>)
 80037fe:	2140      	movs	r1, #64	; 0x40
 8003800:	430a      	orrs	r2, r1
 8003802:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003804:	2000      	movs	r0, #0
 8003806:	f000 f811 	bl	800382c <HAL_InitTick>
 800380a:	1e03      	subs	r3, r0, #0
 800380c:	d003      	beq.n	8003816 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	2201      	movs	r2, #1
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e001      	b.n	800381a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003816:	f7ff fe6b 	bl	80034f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800381a:	1dfb      	adds	r3, r7, #7
 800381c:	781b      	ldrb	r3, [r3, #0]
}
 800381e:	0018      	movs	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	b002      	add	sp, #8
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	40022000 	.word	0x40022000

0800382c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003834:	4b14      	ldr	r3, [pc, #80]	; (8003888 <HAL_InitTick+0x5c>)
 8003836:	681c      	ldr	r4, [r3, #0]
 8003838:	4b14      	ldr	r3, [pc, #80]	; (800388c <HAL_InitTick+0x60>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	0019      	movs	r1, r3
 800383e:	23fa      	movs	r3, #250	; 0xfa
 8003840:	0098      	lsls	r0, r3, #2
 8003842:	f7fc fc6b 	bl	800011c <__udivsi3>
 8003846:	0003      	movs	r3, r0
 8003848:	0019      	movs	r1, r3
 800384a:	0020      	movs	r0, r4
 800384c:	f7fc fc66 	bl	800011c <__udivsi3>
 8003850:	0003      	movs	r3, r0
 8003852:	0018      	movs	r0, r3
 8003854:	f000 fd6d 	bl	8004332 <HAL_SYSTICK_Config>
 8003858:	1e03      	subs	r3, r0, #0
 800385a:	d001      	beq.n	8003860 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e00f      	b.n	8003880 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b03      	cmp	r3, #3
 8003864:	d80b      	bhi.n	800387e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	2301      	movs	r3, #1
 800386a:	425b      	negs	r3, r3
 800386c:	2200      	movs	r2, #0
 800386e:	0018      	movs	r0, r3
 8003870:	f000 fd3a 	bl	80042e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <HAL_InitTick+0x64>)
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e000      	b.n	8003880 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
}
 8003880:	0018      	movs	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	b003      	add	sp, #12
 8003886:	bd90      	pop	{r4, r7, pc}
 8003888:	20000000 	.word	0x20000000
 800388c:	20000008 	.word	0x20000008
 8003890:	20000004 	.word	0x20000004

08003894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_IncTick+0x1c>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	001a      	movs	r2, r3
 800389e:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_IncTick+0x20>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	18d2      	adds	r2, r2, r3
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <HAL_IncTick+0x20>)
 80038a6:	601a      	str	r2, [r3, #0]
}
 80038a8:	46c0      	nop			; (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	20000008 	.word	0x20000008
 80038b4:	200001f8 	.word	0x200001f8

080038b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  return uwTick;
 80038bc:	4b02      	ldr	r3, [pc, #8]	; (80038c8 <HAL_GetTick+0x10>)
 80038be:	681b      	ldr	r3, [r3, #0]
}
 80038c0:	0018      	movs	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	200001f8 	.word	0x200001f8

080038cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038d4:	f7ff fff0 	bl	80038b8 <HAL_GetTick>
 80038d8:	0003      	movs	r3, r0
 80038da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3301      	adds	r3, #1
 80038e4:	d005      	beq.n	80038f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <HAL_Delay+0x44>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	001a      	movs	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	189b      	adds	r3, r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	f7ff ffe0 	bl	80038b8 <HAL_GetTick>
 80038f8:	0002      	movs	r2, r0
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	429a      	cmp	r2, r3
 8003902:	d8f7      	bhi.n	80038f4 <HAL_Delay+0x28>
  {
  }
}
 8003904:	46c0      	nop			; (mov r8, r8)
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	46bd      	mov	sp, r7
 800390a:	b004      	add	sp, #16
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	20000008 	.word	0x20000008

08003914 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e159      	b.n	8003bda <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2250      	movs	r2, #80	; 0x50
 8003938:	2100      	movs	r1, #0
 800393a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	0018      	movs	r0, r3
 8003940:	f7ff fdea 	bl	8003518 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	2210      	movs	r2, #16
 800394a:	4013      	ands	r3, r2
 800394c:	2b10      	cmp	r3, #16
 800394e:	d005      	beq.n	800395c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2204      	movs	r2, #4
 8003958:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800395a:	d00b      	beq.n	8003974 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003960:	2210      	movs	r2, #16
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2250      	movs	r2, #80	; 0x50
 800396c:	2100      	movs	r1, #0
 800396e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e132      	b.n	8003bda <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003978:	4a9a      	ldr	r2, [pc, #616]	; (8003be4 <HAL_ADC_Init+0x2d0>)
 800397a:	4013      	ands	r3, r2
 800397c:	2202      	movs	r2, #2
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2203      	movs	r2, #3
 800398c:	4013      	ands	r3, r2
 800398e:	2b01      	cmp	r3, #1
 8003990:	d108      	bne.n	80039a4 <HAL_ADC_Init+0x90>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2201      	movs	r2, #1
 800399a:	4013      	ands	r3, r2
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_ADC_Init+0x90>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <HAL_ADC_Init+0x92>
 80039a4:	2300      	movs	r3, #0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d149      	bne.n	8003a3e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	23c0      	movs	r3, #192	; 0xc0
 80039b0:	061b      	lsls	r3, r3, #24
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d00b      	beq.n	80039ce <HAL_ADC_Init+0xba>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	05db      	lsls	r3, r3, #23
 80039be:	429a      	cmp	r2, r3
 80039c0:	d005      	beq.n	80039ce <HAL_ADC_Init+0xba>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	2380      	movs	r3, #128	; 0x80
 80039c8:	061b      	lsls	r3, r3, #24
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d111      	bne.n	80039f2 <HAL_ADC_Init+0xde>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	0092      	lsls	r2, r2, #2
 80039da:	0892      	lsrs	r2, r2, #2
 80039dc:	611a      	str	r2, [r3, #16]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6919      	ldr	r1, [r3, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	611a      	str	r2, [r3, #16]
 80039f0:	e014      	b.n	8003a1c <HAL_ADC_Init+0x108>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	0092      	lsls	r2, r2, #2
 80039fe:	0892      	lsrs	r2, r2, #2
 8003a00:	611a      	str	r2, [r3, #16]
 8003a02:	4b79      	ldr	r3, [pc, #484]	; (8003be8 <HAL_ADC_Init+0x2d4>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4b78      	ldr	r3, [pc, #480]	; (8003be8 <HAL_ADC_Init+0x2d4>)
 8003a08:	4978      	ldr	r1, [pc, #480]	; (8003bec <HAL_ADC_Init+0x2d8>)
 8003a0a:	400a      	ands	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	4b76      	ldr	r3, [pc, #472]	; (8003be8 <HAL_ADC_Init+0x2d4>)
 8003a10:	6819      	ldr	r1, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	4b74      	ldr	r3, [pc, #464]	; (8003be8 <HAL_ADC_Init+0x2d4>)
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2118      	movs	r1, #24
 8003a28:	438a      	bics	r2, r1
 8003a2a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68d9      	ldr	r1, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003a3e:	4b6a      	ldr	r3, [pc, #424]	; (8003be8 <HAL_ADC_Init+0x2d4>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	4b69      	ldr	r3, [pc, #420]	; (8003be8 <HAL_ADC_Init+0x2d4>)
 8003a44:	496a      	ldr	r1, [pc, #424]	; (8003bf0 <HAL_ADC_Init+0x2dc>)
 8003a46:	400a      	ands	r2, r1
 8003a48:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8003a4a:	4b67      	ldr	r3, [pc, #412]	; (8003be8 <HAL_ADC_Init+0x2d4>)
 8003a4c:	6819      	ldr	r1, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a52:	065a      	lsls	r2, r3, #25
 8003a54:	4b64      	ldr	r3, [pc, #400]	; (8003be8 <HAL_ADC_Init+0x2d4>)
 8003a56:	430a      	orrs	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	055b      	lsls	r3, r3, #21
 8003a64:	4013      	ands	r3, r2
 8003a66:	d108      	bne.n	8003a7a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2180      	movs	r1, #128	; 0x80
 8003a74:	0549      	lsls	r1, r1, #21
 8003a76:	430a      	orrs	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	495b      	ldr	r1, [pc, #364]	; (8003bf4 <HAL_ADC_Init+0x2e0>)
 8003a86:	400a      	ands	r2, r1
 8003a88:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68d9      	ldr	r1, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d101      	bne.n	8003aa0 <HAL_ADC_Init+0x18c>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	e000      	b.n	8003aa2 <HAL_ADC_Init+0x18e>
 8003aa0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003aa2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2020      	movs	r0, #32
 8003aa8:	5c1b      	ldrb	r3, [r3, r0]
 8003aaa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003aac:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	202c      	movs	r0, #44	; 0x2c
 8003ab2:	5c1b      	ldrb	r3, [r3, r0]
 8003ab4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003ab6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003abc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003ac4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003acc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ada:	23c2      	movs	r3, #194	; 0xc2
 8003adc:	33ff      	adds	r3, #255	; 0xff
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d00b      	beq.n	8003afa <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68d9      	ldr	r1, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2221      	movs	r2, #33	; 0x21
 8003afe:	5c9b      	ldrb	r3, [r3, r2]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d11a      	bne.n	8003b3a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	5c9b      	ldrb	r3, [r3, r2]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2180      	movs	r1, #128	; 0x80
 8003b1a:	0249      	lsls	r1, r1, #9
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	60da      	str	r2, [r3, #12]
 8003b20:	e00b      	b.n	8003b3a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	2220      	movs	r2, #32
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	2201      	movs	r2, #1
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d11f      	bne.n	8003b82 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	492a      	ldr	r1, [pc, #168]	; (8003bf8 <HAL_ADC_Init+0x2e4>)
 8003b4e:	400a      	ands	r2, r1
 8003b50:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6919      	ldr	r1, [r3, #16]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003b60:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8003b66:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	611a      	str	r2, [r3, #16]
 8003b80:	e00e      	b.n	8003ba0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d107      	bne.n	8003ba0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	438a      	bics	r2, r1
 8003b9e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2107      	movs	r1, #7
 8003bac:	438a      	bics	r2, r1
 8003bae:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6959      	ldr	r1, [r3, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bcc:	2203      	movs	r2, #3
 8003bce:	4393      	bics	r3, r2
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	0018      	movs	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b002      	add	sp, #8
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	fffffefd 	.word	0xfffffefd
 8003be8:	40012708 	.word	0x40012708
 8003bec:	ffc3ffff 	.word	0xffc3ffff
 8003bf0:	fdffffff 	.word	0xfdffffff
 8003bf4:	fffe0219 	.word	0xfffe0219
 8003bf8:	fffffc03 	.word	0xfffffc03

08003bfc <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003bfc:	b590      	push	{r4, r7, lr}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c08:	2317      	movs	r3, #23
 8003c0a:	18fb      	adds	r3, r7, r3
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2204      	movs	r2, #4
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d15e      	bne.n	8003cda <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2250      	movs	r2, #80	; 0x50
 8003c20:	5c9b      	ldrb	r3, [r3, r2]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_ADC_Start_DMA+0x2e>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e05e      	b.n	8003ce8 <HAL_ADC_Start_DMA+0xec>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2250      	movs	r2, #80	; 0x50
 8003c2e:	2101      	movs	r1, #1
 8003c30:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d007      	beq.n	8003c5a <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003c4a:	2317      	movs	r3, #23
 8003c4c:	18fc      	adds	r4, r7, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	0018      	movs	r0, r3
 8003c52:	f000 f8f3 	bl	8003e3c <ADC_Enable>
 8003c56:	0003      	movs	r3, r0
 8003c58:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c5a:	2317      	movs	r3, #23
 8003c5c:	18fb      	adds	r3, r7, r3
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d13e      	bne.n	8003ce2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c68:	4a21      	ldr	r2, [pc, #132]	; (8003cf0 <HAL_ADC_Start_DMA+0xf4>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2280      	movs	r2, #128	; 0x80
 8003c6e:	0052      	lsls	r2, r2, #1
 8003c70:	431a      	orrs	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2250      	movs	r2, #80	; 0x50
 8003c80:	2100      	movs	r1, #0
 8003c82:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c88:	4a1a      	ldr	r2, [pc, #104]	; (8003cf4 <HAL_ADC_Start_DMA+0xf8>)
 8003c8a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c90:	4a19      	ldr	r2, [pc, #100]	; (8003cf8 <HAL_ADC_Start_DMA+0xfc>)
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c98:	4a18      	ldr	r2, [pc, #96]	; (8003cfc <HAL_ADC_Start_DMA+0x100>)
 8003c9a:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	221c      	movs	r2, #28
 8003ca2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2110      	movs	r1, #16
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3340      	adds	r3, #64	; 0x40
 8003cbe:	0019      	movs	r1, r3
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f000 fbba 	bl	800443c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2104      	movs	r1, #4
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	e003      	b.n	8003ce2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003cda:	2317      	movs	r3, #23
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	2202      	movs	r2, #2
 8003ce0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003ce2:	2317      	movs	r3, #23
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	781b      	ldrb	r3, [r3, #0]
}
 8003ce8:	0018      	movs	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b007      	add	sp, #28
 8003cee:	bd90      	pop	{r4, r7, pc}
 8003cf0:	fffff0fe 	.word	0xfffff0fe
 8003cf4:	08003f0d 	.word	0x08003f0d
 8003cf8:	08003fc1 	.word	0x08003fc1
 8003cfc:	08003fdf 	.word	0x08003fdf

08003d00 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003d08:	46c0      	nop			; (mov r8, r8)
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003d18:	46c0      	nop			; (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b002      	add	sp, #8
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b002      	add	sp, #8
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2250      	movs	r2, #80	; 0x50
 8003d3e:	5c9b      	ldrb	r3, [r3, r2]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x18>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e06c      	b.n	8003e22 <HAL_ADC_ConfigChannel+0xf2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2250      	movs	r2, #80	; 0x50
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2204      	movs	r2, #4
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d00b      	beq.n	8003d74 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d60:	2220      	movs	r2, #32
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2250      	movs	r2, #80	; 0x50
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e056      	b.n	8003e22 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4a2c      	ldr	r2, [pc, #176]	; (8003e2c <HAL_ADC_ConfigChannel+0xfc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d028      	beq.n	8003dd0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	035b      	lsls	r3, r3, #13
 8003d8a:	0b5a      	lsrs	r2, r3, #13
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	02db      	lsls	r3, r3, #11
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d009      	beq.n	8003db4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8003da0:	4b23      	ldr	r3, [pc, #140]	; (8003e30 <HAL_ADC_ConfigChannel+0x100>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <HAL_ADC_ConfigChannel+0x100>)
 8003da6:	2180      	movs	r1, #128	; 0x80
 8003da8:	0409      	lsls	r1, r1, #16
 8003daa:	430a      	orrs	r2, r1
 8003dac:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003dae:	200a      	movs	r0, #10
 8003db0:	f000 f930 	bl	8004014 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	029b      	lsls	r3, r3, #10
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d02b      	beq.n	8003e18 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <HAL_ADC_ConfigChannel+0x100>)
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	4b1a      	ldr	r3, [pc, #104]	; (8003e30 <HAL_ADC_ConfigChannel+0x100>)
 8003dc6:	2180      	movs	r1, #128	; 0x80
 8003dc8:	03c9      	lsls	r1, r1, #15
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	e023      	b.n	8003e18 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	035b      	lsls	r3, r3, #13
 8003ddc:	0b5b      	lsrs	r3, r3, #13
 8003dde:	43d9      	mvns	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	400a      	ands	r2, r1
 8003de6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	02db      	lsls	r3, r3, #11
 8003df0:	4013      	ands	r3, r2
 8003df2:	d005      	beq.n	8003e00 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8003df4:	4b0e      	ldr	r3, [pc, #56]	; (8003e30 <HAL_ADC_ConfigChannel+0x100>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4b0d      	ldr	r3, [pc, #52]	; (8003e30 <HAL_ADC_ConfigChannel+0x100>)
 8003dfa:	490e      	ldr	r1, [pc, #56]	; (8003e34 <HAL_ADC_ConfigChannel+0x104>)
 8003dfc:	400a      	ands	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	029b      	lsls	r3, r3, #10
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d005      	beq.n	8003e18 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003e0c:	4b08      	ldr	r3, [pc, #32]	; (8003e30 <HAL_ADC_ConfigChannel+0x100>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <HAL_ADC_ConfigChannel+0x100>)
 8003e12:	4909      	ldr	r1, [pc, #36]	; (8003e38 <HAL_ADC_ConfigChannel+0x108>)
 8003e14:	400a      	ands	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2250      	movs	r2, #80	; 0x50
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	0018      	movs	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b002      	add	sp, #8
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	00001001 	.word	0x00001001
 8003e30:	40012708 	.word	0x40012708
 8003e34:	ff7fffff 	.word	0xff7fffff
 8003e38:	ffbfffff 	.word	0xffbfffff

08003e3c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2203      	movs	r2, #3
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d108      	bne.n	8003e68 <ADC_Enable+0x2c>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <ADC_Enable+0x2c>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <ADC_Enable+0x2e>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d146      	bne.n	8003efc <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	4a24      	ldr	r2, [pc, #144]	; (8003f08 <ADC_Enable+0xcc>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	d00d      	beq.n	8003e96 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	2210      	movs	r2, #16
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e033      	b.n	8003efe <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	f000 f8b4 	bl	8004014 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003eac:	f7ff fd04 	bl	80038b8 <HAL_GetTick>
 8003eb0:	0003      	movs	r3, r0
 8003eb2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003eb4:	e01b      	b.n	8003eee <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003eb6:	f7ff fcff 	bl	80038b8 <HAL_GetTick>
 8003eba:	0002      	movs	r2, r0
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b0a      	cmp	r3, #10
 8003ec2:	d914      	bls.n	8003eee <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d00d      	beq.n	8003eee <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	2210      	movs	r2, #16
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e007      	b.n	8003efe <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d1dc      	bne.n	8003eb6 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b004      	add	sp, #16
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	80000017 	.word	0x80000017

08003f0c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1e:	2250      	movs	r2, #80	; 0x50
 8003f20:	4013      	ands	r3, r2
 8003f22:	d141      	bne.n	8003fa8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	2280      	movs	r2, #128	; 0x80
 8003f2a:	0092      	lsls	r2, r2, #2
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	23c0      	movs	r3, #192	; 0xc0
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	d12e      	bne.n	8003f9e <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d129      	bne.n	8003f9e <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2208      	movs	r2, #8
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d122      	bne.n	8003f9e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2204      	movs	r2, #4
 8003f60:	4013      	ands	r3, r2
 8003f62:	d110      	bne.n	8003f86 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	210c      	movs	r1, #12
 8003f70:	438a      	bics	r2, r1
 8003f72:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	4a10      	ldr	r2, [pc, #64]	; (8003fbc <ADC_DMAConvCplt+0xb0>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	655a      	str	r2, [r3, #84]	; 0x54
 8003f84:	e00b      	b.n	8003f9e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f96:	2201      	movs	r2, #1
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f7ff fead 	bl	8003d00 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003fa6:	e005      	b.n	8003fb4 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	0010      	movs	r0, r2
 8003fb2:	4798      	blx	r3
}
 8003fb4:	46c0      	nop			; (mov r8, r8)
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b004      	add	sp, #16
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	fffffefe 	.word	0xfffffefe

08003fc0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f7ff fe9d 	bl	8003d10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b004      	add	sp, #16
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	2240      	movs	r2, #64	; 0x40
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffc:	2204      	movs	r2, #4
 8003ffe:	431a      	orrs	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	0018      	movs	r0, r3
 8004008:	f7ff fe8a 	bl	8003d20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800400c:	46c0      	nop			; (mov r8, r8)
 800400e:	46bd      	mov	sp, r7
 8004010:	b004      	add	sp, #16
 8004012:	bd80      	pop	{r7, pc}

08004014 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <ADC_DelayMicroSecond+0x38>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	490b      	ldr	r1, [pc, #44]	; (8004050 <ADC_DelayMicroSecond+0x3c>)
 8004022:	0018      	movs	r0, r3
 8004024:	f7fc f87a 	bl	800011c <__udivsi3>
 8004028:	0003      	movs	r3, r0
 800402a:	001a      	movs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4353      	muls	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8004032:	e002      	b.n	800403a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3b01      	subs	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f9      	bne.n	8004034 <ADC_DelayMicroSecond+0x20>
  } 
}
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	b004      	add	sp, #16
 8004048:	bd80      	pop	{r7, pc}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	20000000 	.word	0x20000000
 8004050:	000f4240 	.word	0x000f4240

08004054 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800405e:	2317      	movs	r3, #23
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	2200      	movs	r2, #0
 8004064:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2250      	movs	r2, #80	; 0x50
 8004072:	5c9b      	ldrb	r3, [r3, r2]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_ADCEx_Calibration_Start+0x28>
 8004078:	2302      	movs	r3, #2
 800407a:	e083      	b.n	8004184 <HAL_ADCEx_Calibration_Start+0x130>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2250      	movs	r2, #80	; 0x50
 8004080:	2101      	movs	r1, #1
 8004082:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2203      	movs	r2, #3
 800408c:	4013      	ands	r3, r2
 800408e:	2b01      	cmp	r3, #1
 8004090:	d108      	bne.n	80040a4 <HAL_ADCEx_Calibration_Start+0x50>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2201      	movs	r2, #1
 800409a:	4013      	ands	r3, r2
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_ADCEx_Calibration_Start+0x50>
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <HAL_ADCEx_Calibration_Start+0x52>
 80040a4:	2300      	movs	r3, #0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d15b      	bne.n	8004162 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	4a37      	ldr	r2, [pc, #220]	; (800418c <HAL_ADCEx_Calibration_Start+0x138>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	2202      	movs	r2, #2
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2203      	movs	r2, #3
 80040c2:	4013      	ands	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2103      	movs	r1, #3
 80040d2:	438a      	bics	r2, r1
 80040d4:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2180      	movs	r1, #128	; 0x80
 80040e2:	0609      	lsls	r1, r1, #24
 80040e4:	430a      	orrs	r2, r1
 80040e6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80040e8:	f7ff fbe6 	bl	80038b8 <HAL_GetTick>
 80040ec:	0003      	movs	r3, r0
 80040ee:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80040f0:	e01d      	b.n	800412e <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80040f2:	f7ff fbe1 	bl	80038b8 <HAL_GetTick>
 80040f6:	0002      	movs	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b0a      	cmp	r3, #10
 80040fe:	d916      	bls.n	800412e <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	0fdb      	lsrs	r3, r3, #31
 8004108:	07da      	lsls	r2, r3, #31
 800410a:	2380      	movs	r3, #128	; 0x80
 800410c:	061b      	lsls	r3, r3, #24
 800410e:	429a      	cmp	r2, r3
 8004110:	d10d      	bne.n	800412e <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	2212      	movs	r2, #18
 8004118:	4393      	bics	r3, r2
 800411a:	2210      	movs	r2, #16
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2250      	movs	r2, #80	; 0x50
 8004126:	2100      	movs	r1, #0
 8004128:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e02a      	b.n	8004184 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	0fdb      	lsrs	r3, r3, #31
 8004136:	07da      	lsls	r2, r3, #31
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	061b      	lsls	r3, r3, #24
 800413c:	429a      	cmp	r2, r3
 800413e:	d0d8      	beq.n	80040f2 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68d9      	ldr	r1, [r3, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	430a      	orrs	r2, r1
 800414e:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004154:	2203      	movs	r2, #3
 8004156:	4393      	bics	r3, r2
 8004158:	2201      	movs	r2, #1
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	655a      	str	r2, [r3, #84]	; 0x54
 8004160:	e009      	b.n	8004176 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	2220      	movs	r2, #32
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 800416e:	2317      	movs	r3, #23
 8004170:	18fb      	adds	r3, r7, r3
 8004172:	2201      	movs	r2, #1
 8004174:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2250      	movs	r2, #80	; 0x50
 800417a:	2100      	movs	r1, #0
 800417c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800417e:	2317      	movs	r3, #23
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	781b      	ldrb	r3, [r3, #0]
}
 8004184:	0018      	movs	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	b006      	add	sp, #24
 800418a:	bd80      	pop	{r7, pc}
 800418c:	fffffefd 	.word	0xfffffefd

08004190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	0002      	movs	r2, r0
 8004198:	1dfb      	adds	r3, r7, #7
 800419a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800419c:	1dfb      	adds	r3, r7, #7
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b7f      	cmp	r3, #127	; 0x7f
 80041a2:	d809      	bhi.n	80041b8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041a4:	1dfb      	adds	r3, r7, #7
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	001a      	movs	r2, r3
 80041aa:	231f      	movs	r3, #31
 80041ac:	401a      	ands	r2, r3
 80041ae:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <__NVIC_EnableIRQ+0x30>)
 80041b0:	2101      	movs	r1, #1
 80041b2:	4091      	lsls	r1, r2
 80041b4:	000a      	movs	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]
  }
}
 80041b8:	46c0      	nop			; (mov r8, r8)
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b002      	add	sp, #8
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	e000e100 	.word	0xe000e100

080041c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	0002      	movs	r2, r0
 80041cc:	6039      	str	r1, [r7, #0]
 80041ce:	1dfb      	adds	r3, r7, #7
 80041d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041d2:	1dfb      	adds	r3, r7, #7
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b7f      	cmp	r3, #127	; 0x7f
 80041d8:	d828      	bhi.n	800422c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041da:	4a2f      	ldr	r2, [pc, #188]	; (8004298 <__NVIC_SetPriority+0xd4>)
 80041dc:	1dfb      	adds	r3, r7, #7
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	b25b      	sxtb	r3, r3
 80041e2:	089b      	lsrs	r3, r3, #2
 80041e4:	33c0      	adds	r3, #192	; 0xc0
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	589b      	ldr	r3, [r3, r2]
 80041ea:	1dfa      	adds	r2, r7, #7
 80041ec:	7812      	ldrb	r2, [r2, #0]
 80041ee:	0011      	movs	r1, r2
 80041f0:	2203      	movs	r2, #3
 80041f2:	400a      	ands	r2, r1
 80041f4:	00d2      	lsls	r2, r2, #3
 80041f6:	21ff      	movs	r1, #255	; 0xff
 80041f8:	4091      	lsls	r1, r2
 80041fa:	000a      	movs	r2, r1
 80041fc:	43d2      	mvns	r2, r2
 80041fe:	401a      	ands	r2, r3
 8004200:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	019b      	lsls	r3, r3, #6
 8004206:	22ff      	movs	r2, #255	; 0xff
 8004208:	401a      	ands	r2, r3
 800420a:	1dfb      	adds	r3, r7, #7
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	0018      	movs	r0, r3
 8004210:	2303      	movs	r3, #3
 8004212:	4003      	ands	r3, r0
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004218:	481f      	ldr	r0, [pc, #124]	; (8004298 <__NVIC_SetPriority+0xd4>)
 800421a:	1dfb      	adds	r3, r7, #7
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	b25b      	sxtb	r3, r3
 8004220:	089b      	lsrs	r3, r3, #2
 8004222:	430a      	orrs	r2, r1
 8004224:	33c0      	adds	r3, #192	; 0xc0
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800422a:	e031      	b.n	8004290 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800422c:	4a1b      	ldr	r2, [pc, #108]	; (800429c <__NVIC_SetPriority+0xd8>)
 800422e:	1dfb      	adds	r3, r7, #7
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	0019      	movs	r1, r3
 8004234:	230f      	movs	r3, #15
 8004236:	400b      	ands	r3, r1
 8004238:	3b08      	subs	r3, #8
 800423a:	089b      	lsrs	r3, r3, #2
 800423c:	3306      	adds	r3, #6
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	18d3      	adds	r3, r2, r3
 8004242:	3304      	adds	r3, #4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	1dfa      	adds	r2, r7, #7
 8004248:	7812      	ldrb	r2, [r2, #0]
 800424a:	0011      	movs	r1, r2
 800424c:	2203      	movs	r2, #3
 800424e:	400a      	ands	r2, r1
 8004250:	00d2      	lsls	r2, r2, #3
 8004252:	21ff      	movs	r1, #255	; 0xff
 8004254:	4091      	lsls	r1, r2
 8004256:	000a      	movs	r2, r1
 8004258:	43d2      	mvns	r2, r2
 800425a:	401a      	ands	r2, r3
 800425c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	019b      	lsls	r3, r3, #6
 8004262:	22ff      	movs	r2, #255	; 0xff
 8004264:	401a      	ands	r2, r3
 8004266:	1dfb      	adds	r3, r7, #7
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	0018      	movs	r0, r3
 800426c:	2303      	movs	r3, #3
 800426e:	4003      	ands	r3, r0
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004274:	4809      	ldr	r0, [pc, #36]	; (800429c <__NVIC_SetPriority+0xd8>)
 8004276:	1dfb      	adds	r3, r7, #7
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	001c      	movs	r4, r3
 800427c:	230f      	movs	r3, #15
 800427e:	4023      	ands	r3, r4
 8004280:	3b08      	subs	r3, #8
 8004282:	089b      	lsrs	r3, r3, #2
 8004284:	430a      	orrs	r2, r1
 8004286:	3306      	adds	r3, #6
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	18c3      	adds	r3, r0, r3
 800428c:	3304      	adds	r3, #4
 800428e:	601a      	str	r2, [r3, #0]
}
 8004290:	46c0      	nop			; (mov r8, r8)
 8004292:	46bd      	mov	sp, r7
 8004294:	b003      	add	sp, #12
 8004296:	bd90      	pop	{r4, r7, pc}
 8004298:	e000e100 	.word	0xe000e100
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	1e5a      	subs	r2, r3, #1
 80042ac:	2380      	movs	r3, #128	; 0x80
 80042ae:	045b      	lsls	r3, r3, #17
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d301      	bcc.n	80042b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042b4:	2301      	movs	r3, #1
 80042b6:	e010      	b.n	80042da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <SysTick_Config+0x44>)
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	3a01      	subs	r2, #1
 80042be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042c0:	2301      	movs	r3, #1
 80042c2:	425b      	negs	r3, r3
 80042c4:	2103      	movs	r1, #3
 80042c6:	0018      	movs	r0, r3
 80042c8:	f7ff ff7c 	bl	80041c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <SysTick_Config+0x44>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042d2:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <SysTick_Config+0x44>)
 80042d4:	2207      	movs	r2, #7
 80042d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042d8:	2300      	movs	r3, #0
}
 80042da:	0018      	movs	r0, r3
 80042dc:	46bd      	mov	sp, r7
 80042de:	b002      	add	sp, #8
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	e000e010 	.word	0xe000e010

080042e8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	210f      	movs	r1, #15
 80042f4:	187b      	adds	r3, r7, r1
 80042f6:	1c02      	adds	r2, r0, #0
 80042f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	187b      	adds	r3, r7, r1
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	b25b      	sxtb	r3, r3
 8004302:	0011      	movs	r1, r2
 8004304:	0018      	movs	r0, r3
 8004306:	f7ff ff5d 	bl	80041c4 <__NVIC_SetPriority>
}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	46bd      	mov	sp, r7
 800430e:	b004      	add	sp, #16
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b082      	sub	sp, #8
 8004316:	af00      	add	r7, sp, #0
 8004318:	0002      	movs	r2, r0
 800431a:	1dfb      	adds	r3, r7, #7
 800431c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800431e:	1dfb      	adds	r3, r7, #7
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	b25b      	sxtb	r3, r3
 8004324:	0018      	movs	r0, r3
 8004326:	f7ff ff33 	bl	8004190 <__NVIC_EnableIRQ>
}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	46bd      	mov	sp, r7
 800432e:	b002      	add	sp, #8
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	0018      	movs	r0, r3
 800433e:	f7ff ffaf 	bl	80042a0 <SysTick_Config>
 8004342:	0003      	movs	r3, r0
}
 8004344:	0018      	movs	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	b002      	add	sp, #8
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e061      	b.n	8004422 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a32      	ldr	r2, [pc, #200]	; (800442c <HAL_DMA_Init+0xe0>)
 8004364:	4694      	mov	ip, r2
 8004366:	4463      	add	r3, ip
 8004368:	2114      	movs	r1, #20
 800436a:	0018      	movs	r0, r3
 800436c:	f7fb fed6 	bl	800011c <__udivsi3>
 8004370:	0003      	movs	r3, r0
 8004372:	009a      	lsls	r2, r3, #2
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a2d      	ldr	r2, [pc, #180]	; (8004430 <HAL_DMA_Init+0xe4>)
 800437c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2225      	movs	r2, #37	; 0x25
 8004382:	2102      	movs	r1, #2
 8004384:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4a28      	ldr	r2, [pc, #160]	; (8004434 <HAL_DMA_Init+0xe8>)
 8004392:	4013      	ands	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800439e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	2380      	movs	r3, #128	; 0x80
 80043d2:	01db      	lsls	r3, r3, #7
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d018      	beq.n	800440a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80043d8:	4b17      	ldr	r3, [pc, #92]	; (8004438 <HAL_DMA_Init+0xec>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	211c      	movs	r1, #28
 80043e2:	400b      	ands	r3, r1
 80043e4:	210f      	movs	r1, #15
 80043e6:	4099      	lsls	r1, r3
 80043e8:	000b      	movs	r3, r1
 80043ea:	43d9      	mvns	r1, r3
 80043ec:	4b12      	ldr	r3, [pc, #72]	; (8004438 <HAL_DMA_Init+0xec>)
 80043ee:	400a      	ands	r2, r1
 80043f0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80043f2:	4b11      	ldr	r3, [pc, #68]	; (8004438 <HAL_DMA_Init+0xec>)
 80043f4:	6819      	ldr	r1, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	201c      	movs	r0, #28
 8004400:	4003      	ands	r3, r0
 8004402:	409a      	lsls	r2, r3
 8004404:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <HAL_DMA_Init+0xec>)
 8004406:	430a      	orrs	r2, r1
 8004408:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2225      	movs	r2, #37	; 0x25
 8004414:	2101      	movs	r1, #1
 8004416:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2224      	movs	r2, #36	; 0x24
 800441c:	2100      	movs	r1, #0
 800441e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	0018      	movs	r0, r3
 8004424:	46bd      	mov	sp, r7
 8004426:	b004      	add	sp, #16
 8004428:	bd80      	pop	{r7, pc}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	bffdfff8 	.word	0xbffdfff8
 8004430:	40020000 	.word	0x40020000
 8004434:	ffff800f 	.word	0xffff800f
 8004438:	400200a8 	.word	0x400200a8

0800443c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800444a:	2317      	movs	r3, #23
 800444c:	18fb      	adds	r3, r7, r3
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2224      	movs	r2, #36	; 0x24
 8004456:	5c9b      	ldrb	r3, [r3, r2]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_DMA_Start_IT+0x24>
 800445c:	2302      	movs	r3, #2
 800445e:	e04f      	b.n	8004500 <HAL_DMA_Start_IT+0xc4>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2224      	movs	r2, #36	; 0x24
 8004464:	2101      	movs	r1, #1
 8004466:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2225      	movs	r2, #37	; 0x25
 800446c:	5c9b      	ldrb	r3, [r3, r2]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d13a      	bne.n	80044ea <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2225      	movs	r2, #37	; 0x25
 8004478:	2102      	movs	r1, #2
 800447a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2101      	movs	r1, #1
 800448e:	438a      	bics	r2, r1
 8004490:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f8e3 	bl	8004664 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d008      	beq.n	80044b8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	210e      	movs	r1, #14
 80044b2:	430a      	orrs	r2, r1
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	e00f      	b.n	80044d8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2104      	movs	r1, #4
 80044c4:	438a      	bics	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	210a      	movs	r1, #10
 80044d4:	430a      	orrs	r2, r1
 80044d6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2101      	movs	r1, #1
 80044e4:	430a      	orrs	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	e007      	b.n	80044fa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2224      	movs	r2, #36	; 0x24
 80044ee:	2100      	movs	r1, #0
 80044f0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80044f2:	2317      	movs	r3, #23
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	2202      	movs	r2, #2
 80044f8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80044fa:	2317      	movs	r3, #23
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	781b      	ldrb	r3, [r3, #0]
}
 8004500:	0018      	movs	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	b006      	add	sp, #24
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004524:	221c      	movs	r2, #28
 8004526:	4013      	ands	r3, r2
 8004528:	2204      	movs	r2, #4
 800452a:	409a      	lsls	r2, r3
 800452c:	0013      	movs	r3, r2
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4013      	ands	r3, r2
 8004532:	d026      	beq.n	8004582 <HAL_DMA_IRQHandler+0x7a>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2204      	movs	r2, #4
 8004538:	4013      	ands	r3, r2
 800453a:	d022      	beq.n	8004582 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2220      	movs	r2, #32
 8004544:	4013      	ands	r3, r2
 8004546:	d107      	bne.n	8004558 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2104      	movs	r1, #4
 8004554:	438a      	bics	r2, r1
 8004556:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455c:	221c      	movs	r2, #28
 800455e:	401a      	ands	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	2104      	movs	r1, #4
 8004566:	4091      	lsls	r1, r2
 8004568:	000a      	movs	r2, r1
 800456a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004570:	2b00      	cmp	r3, #0
 8004572:	d100      	bne.n	8004576 <HAL_DMA_IRQHandler+0x6e>
 8004574:	e071      	b.n	800465a <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	0010      	movs	r0, r2
 800457e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8004580:	e06b      	b.n	800465a <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	221c      	movs	r2, #28
 8004588:	4013      	ands	r3, r2
 800458a:	2202      	movs	r2, #2
 800458c:	409a      	lsls	r2, r3
 800458e:	0013      	movs	r3, r2
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4013      	ands	r3, r2
 8004594:	d02d      	beq.n	80045f2 <HAL_DMA_IRQHandler+0xea>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2202      	movs	r2, #2
 800459a:	4013      	ands	r3, r2
 800459c:	d029      	beq.n	80045f2 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2220      	movs	r2, #32
 80045a6:	4013      	ands	r3, r2
 80045a8:	d10b      	bne.n	80045c2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	210a      	movs	r1, #10
 80045b6:	438a      	bics	r2, r1
 80045b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2225      	movs	r2, #37	; 0x25
 80045be:	2101      	movs	r1, #1
 80045c0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	221c      	movs	r2, #28
 80045c8:	401a      	ands	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	2102      	movs	r1, #2
 80045d0:	4091      	lsls	r1, r2
 80045d2:	000a      	movs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2224      	movs	r2, #36	; 0x24
 80045da:	2100      	movs	r1, #0
 80045dc:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d039      	beq.n	800465a <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	0010      	movs	r0, r2
 80045ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80045f0:	e033      	b.n	800465a <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	221c      	movs	r2, #28
 80045f8:	4013      	ands	r3, r2
 80045fa:	2208      	movs	r2, #8
 80045fc:	409a      	lsls	r2, r3
 80045fe:	0013      	movs	r3, r2
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4013      	ands	r3, r2
 8004604:	d02a      	beq.n	800465c <HAL_DMA_IRQHandler+0x154>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2208      	movs	r2, #8
 800460a:	4013      	ands	r3, r2
 800460c:	d026      	beq.n	800465c <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	210e      	movs	r1, #14
 800461a:	438a      	bics	r2, r1
 800461c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	221c      	movs	r2, #28
 8004624:	401a      	ands	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	2101      	movs	r1, #1
 800462c:	4091      	lsls	r1, r2
 800462e:	000a      	movs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2225      	movs	r2, #37	; 0x25
 800463c:	2101      	movs	r1, #1
 800463e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2224      	movs	r2, #36	; 0x24
 8004644:	2100      	movs	r1, #0
 8004646:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	0010      	movs	r0, r2
 8004658:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	46c0      	nop			; (mov r8, r8)
}
 800465e:	46bd      	mov	sp, r7
 8004660:	b004      	add	sp, #16
 8004662:	bd80      	pop	{r7, pc}

08004664 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004676:	221c      	movs	r2, #28
 8004678:	401a      	ands	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	2101      	movs	r1, #1
 8004680:	4091      	lsls	r1, r2
 8004682:	000a      	movs	r2, r1
 8004684:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b10      	cmp	r3, #16
 8004694:	d108      	bne.n	80046a8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80046a6:	e007      	b.n	80046b8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	60da      	str	r2, [r3, #12]
}
 80046b8:	46c0      	nop			; (mov r8, r8)
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b004      	add	sp, #16
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80046d6:	e149      	b.n	800496c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2101      	movs	r1, #1
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4091      	lsls	r1, r2
 80046e2:	000a      	movs	r2, r1
 80046e4:	4013      	ands	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d100      	bne.n	80046f0 <HAL_GPIO_Init+0x30>
 80046ee:	e13a      	b.n	8004966 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2203      	movs	r2, #3
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d005      	beq.n	8004708 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2203      	movs	r2, #3
 8004702:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004704:	2b02      	cmp	r3, #2
 8004706:	d130      	bne.n	800476a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	2203      	movs	r2, #3
 8004714:	409a      	lsls	r2, r3
 8004716:	0013      	movs	r3, r2
 8004718:	43da      	mvns	r2, r3
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	4013      	ands	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	409a      	lsls	r2, r3
 800472a:	0013      	movs	r3, r2
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800473e:	2201      	movs	r2, #1
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	409a      	lsls	r2, r3
 8004744:	0013      	movs	r3, r2
 8004746:	43da      	mvns	r2, r3
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	4013      	ands	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	091b      	lsrs	r3, r3, #4
 8004754:	2201      	movs	r2, #1
 8004756:	401a      	ands	r2, r3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	409a      	lsls	r2, r3
 800475c:	0013      	movs	r3, r2
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2203      	movs	r2, #3
 8004770:	4013      	ands	r3, r2
 8004772:	2b03      	cmp	r3, #3
 8004774:	d017      	beq.n	80047a6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	2203      	movs	r2, #3
 8004782:	409a      	lsls	r2, r3
 8004784:	0013      	movs	r3, r2
 8004786:	43da      	mvns	r2, r3
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4013      	ands	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	409a      	lsls	r2, r3
 8004798:	0013      	movs	r3, r2
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2203      	movs	r2, #3
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d123      	bne.n	80047fa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	08da      	lsrs	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3208      	adds	r2, #8
 80047ba:	0092      	lsls	r2, r2, #2
 80047bc:	58d3      	ldr	r3, [r2, r3]
 80047be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2207      	movs	r2, #7
 80047c4:	4013      	ands	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	220f      	movs	r2, #15
 80047ca:	409a      	lsls	r2, r3
 80047cc:	0013      	movs	r3, r2
 80047ce:	43da      	mvns	r2, r3
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4013      	ands	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2107      	movs	r1, #7
 80047de:	400b      	ands	r3, r1
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	409a      	lsls	r2, r3
 80047e4:	0013      	movs	r3, r2
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	08da      	lsrs	r2, r3, #3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3208      	adds	r2, #8
 80047f4:	0092      	lsls	r2, r2, #2
 80047f6:	6939      	ldr	r1, [r7, #16]
 80047f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	2203      	movs	r2, #3
 8004806:	409a      	lsls	r2, r3
 8004808:	0013      	movs	r3, r2
 800480a:	43da      	mvns	r2, r3
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4013      	ands	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2203      	movs	r2, #3
 8004818:	401a      	ands	r2, r3
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	409a      	lsls	r2, r3
 8004820:	0013      	movs	r3, r2
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	23c0      	movs	r3, #192	; 0xc0
 8004834:	029b      	lsls	r3, r3, #10
 8004836:	4013      	ands	r3, r2
 8004838:	d100      	bne.n	800483c <HAL_GPIO_Init+0x17c>
 800483a:	e094      	b.n	8004966 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800483c:	4b51      	ldr	r3, [pc, #324]	; (8004984 <HAL_GPIO_Init+0x2c4>)
 800483e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004840:	4b50      	ldr	r3, [pc, #320]	; (8004984 <HAL_GPIO_Init+0x2c4>)
 8004842:	2101      	movs	r1, #1
 8004844:	430a      	orrs	r2, r1
 8004846:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004848:	4a4f      	ldr	r2, [pc, #316]	; (8004988 <HAL_GPIO_Init+0x2c8>)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	089b      	lsrs	r3, r3, #2
 800484e:	3302      	adds	r3, #2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	589b      	ldr	r3, [r3, r2]
 8004854:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2203      	movs	r2, #3
 800485a:	4013      	ands	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	220f      	movs	r2, #15
 8004860:	409a      	lsls	r2, r3
 8004862:	0013      	movs	r3, r2
 8004864:	43da      	mvns	r2, r3
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4013      	ands	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	23a0      	movs	r3, #160	; 0xa0
 8004870:	05db      	lsls	r3, r3, #23
 8004872:	429a      	cmp	r2, r3
 8004874:	d013      	beq.n	800489e <HAL_GPIO_Init+0x1de>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a44      	ldr	r2, [pc, #272]	; (800498c <HAL_GPIO_Init+0x2cc>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00d      	beq.n	800489a <HAL_GPIO_Init+0x1da>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a43      	ldr	r2, [pc, #268]	; (8004990 <HAL_GPIO_Init+0x2d0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d007      	beq.n	8004896 <HAL_GPIO_Init+0x1d6>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a42      	ldr	r2, [pc, #264]	; (8004994 <HAL_GPIO_Init+0x2d4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d101      	bne.n	8004892 <HAL_GPIO_Init+0x1d2>
 800488e:	2305      	movs	r3, #5
 8004890:	e006      	b.n	80048a0 <HAL_GPIO_Init+0x1e0>
 8004892:	2306      	movs	r3, #6
 8004894:	e004      	b.n	80048a0 <HAL_GPIO_Init+0x1e0>
 8004896:	2302      	movs	r3, #2
 8004898:	e002      	b.n	80048a0 <HAL_GPIO_Init+0x1e0>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <HAL_GPIO_Init+0x1e0>
 800489e:	2300      	movs	r3, #0
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	2103      	movs	r1, #3
 80048a4:	400a      	ands	r2, r1
 80048a6:	0092      	lsls	r2, r2, #2
 80048a8:	4093      	lsls	r3, r2
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048b0:	4935      	ldr	r1, [pc, #212]	; (8004988 <HAL_GPIO_Init+0x2c8>)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	089b      	lsrs	r3, r3, #2
 80048b6:	3302      	adds	r3, #2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048be:	4b36      	ldr	r3, [pc, #216]	; (8004998 <HAL_GPIO_Init+0x2d8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	43da      	mvns	r2, r3
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4013      	ands	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	2380      	movs	r3, #128	; 0x80
 80048d4:	025b      	lsls	r3, r3, #9
 80048d6:	4013      	ands	r3, r2
 80048d8:	d003      	beq.n	80048e2 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80048e2:	4b2d      	ldr	r3, [pc, #180]	; (8004998 <HAL_GPIO_Init+0x2d8>)
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80048e8:	4b2b      	ldr	r3, [pc, #172]	; (8004998 <HAL_GPIO_Init+0x2d8>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	43da      	mvns	r2, r3
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4013      	ands	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	2380      	movs	r3, #128	; 0x80
 80048fe:	029b      	lsls	r3, r3, #10
 8004900:	4013      	ands	r3, r2
 8004902:	d003      	beq.n	800490c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800490c:	4b22      	ldr	r3, [pc, #136]	; (8004998 <HAL_GPIO_Init+0x2d8>)
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004912:	4b21      	ldr	r3, [pc, #132]	; (8004998 <HAL_GPIO_Init+0x2d8>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	43da      	mvns	r2, r3
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	4013      	ands	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	2380      	movs	r3, #128	; 0x80
 8004928:	035b      	lsls	r3, r3, #13
 800492a:	4013      	ands	r3, r2
 800492c:	d003      	beq.n	8004936 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004936:	4b18      	ldr	r3, [pc, #96]	; (8004998 <HAL_GPIO_Init+0x2d8>)
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800493c:	4b16      	ldr	r3, [pc, #88]	; (8004998 <HAL_GPIO_Init+0x2d8>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	43da      	mvns	r2, r3
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	4013      	ands	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	2380      	movs	r3, #128	; 0x80
 8004952:	039b      	lsls	r3, r3, #14
 8004954:	4013      	ands	r3, r2
 8004956:	d003      	beq.n	8004960 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004960:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <HAL_GPIO_Init+0x2d8>)
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	3301      	adds	r3, #1
 800496a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	40da      	lsrs	r2, r3
 8004974:	1e13      	subs	r3, r2, #0
 8004976:	d000      	beq.n	800497a <HAL_GPIO_Init+0x2ba>
 8004978:	e6ae      	b.n	80046d8 <HAL_GPIO_Init+0x18>
  }
}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	46c0      	nop			; (mov r8, r8)
 800497e:	46bd      	mov	sp, r7
 8004980:	b006      	add	sp, #24
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40021000 	.word	0x40021000
 8004988:	40010000 	.word	0x40010000
 800498c:	50000400 	.word	0x50000400
 8004990:	50000800 	.word	0x50000800
 8004994:	50001c00 	.word	0x50001c00
 8004998:	40010400 	.word	0x40010400

0800499c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	0008      	movs	r0, r1
 80049a6:	0011      	movs	r1, r2
 80049a8:	1cbb      	adds	r3, r7, #2
 80049aa:	1c02      	adds	r2, r0, #0
 80049ac:	801a      	strh	r2, [r3, #0]
 80049ae:	1c7b      	adds	r3, r7, #1
 80049b0:	1c0a      	adds	r2, r1, #0
 80049b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049b4:	1c7b      	adds	r3, r7, #1
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d004      	beq.n	80049c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049bc:	1cbb      	adds	r3, r7, #2
 80049be:	881a      	ldrh	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80049c4:	e003      	b.n	80049ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80049c6:	1cbb      	adds	r3, r7, #2
 80049c8:	881a      	ldrh	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b002      	add	sp, #8
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d8:	b5b0      	push	{r4, r5, r7, lr}
 80049da:	b08a      	sub	sp, #40	; 0x28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d102      	bne.n	80049ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f000 fb6c 	bl	80050c4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ec:	4bc8      	ldr	r3, [pc, #800]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	220c      	movs	r2, #12
 80049f2:	4013      	ands	r3, r2
 80049f4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049f6:	4bc6      	ldr	r3, [pc, #792]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	2380      	movs	r3, #128	; 0x80
 80049fc:	025b      	lsls	r3, r3, #9
 80049fe:	4013      	ands	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2201      	movs	r2, #1
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d100      	bne.n	8004a0e <HAL_RCC_OscConfig+0x36>
 8004a0c:	e07d      	b.n	8004b0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d007      	beq.n	8004a24 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	2b0c      	cmp	r3, #12
 8004a18:	d112      	bne.n	8004a40 <HAL_RCC_OscConfig+0x68>
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	025b      	lsls	r3, r3, #9
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d10d      	bne.n	8004a40 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a24:	4bba      	ldr	r3, [pc, #744]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	029b      	lsls	r3, r3, #10
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d100      	bne.n	8004a32 <HAL_RCC_OscConfig+0x5a>
 8004a30:	e06a      	b.n	8004b08 <HAL_RCC_OscConfig+0x130>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d166      	bne.n	8004b08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	f000 fb42 	bl	80050c4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	025b      	lsls	r3, r3, #9
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d107      	bne.n	8004a5c <HAL_RCC_OscConfig+0x84>
 8004a4c:	4bb0      	ldr	r3, [pc, #704]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4baf      	ldr	r3, [pc, #700]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a52:	2180      	movs	r1, #128	; 0x80
 8004a54:	0249      	lsls	r1, r1, #9
 8004a56:	430a      	orrs	r2, r1
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	e027      	b.n	8004aac <HAL_RCC_OscConfig+0xd4>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	23a0      	movs	r3, #160	; 0xa0
 8004a62:	02db      	lsls	r3, r3, #11
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d10e      	bne.n	8004a86 <HAL_RCC_OscConfig+0xae>
 8004a68:	4ba9      	ldr	r3, [pc, #676]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	4ba8      	ldr	r3, [pc, #672]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a6e:	2180      	movs	r1, #128	; 0x80
 8004a70:	02c9      	lsls	r1, r1, #11
 8004a72:	430a      	orrs	r2, r1
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	4ba6      	ldr	r3, [pc, #664]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4ba5      	ldr	r3, [pc, #660]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a7c:	2180      	movs	r1, #128	; 0x80
 8004a7e:	0249      	lsls	r1, r1, #9
 8004a80:	430a      	orrs	r2, r1
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	e012      	b.n	8004aac <HAL_RCC_OscConfig+0xd4>
 8004a86:	4ba2      	ldr	r3, [pc, #648]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4ba1      	ldr	r3, [pc, #644]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a8c:	49a1      	ldr	r1, [pc, #644]	; (8004d14 <HAL_RCC_OscConfig+0x33c>)
 8004a8e:	400a      	ands	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	4b9f      	ldr	r3, [pc, #636]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	2380      	movs	r3, #128	; 0x80
 8004a98:	025b      	lsls	r3, r3, #9
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4b9b      	ldr	r3, [pc, #620]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	4b9a      	ldr	r3, [pc, #616]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004aa6:	499c      	ldr	r1, [pc, #624]	; (8004d18 <HAL_RCC_OscConfig+0x340>)
 8004aa8:	400a      	ands	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d014      	beq.n	8004ade <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab4:	f7fe ff00 	bl	80038b8 <HAL_GetTick>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004abe:	f7fe fefb 	bl	80038b8 <HAL_GetTick>
 8004ac2:	0002      	movs	r2, r0
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b64      	cmp	r3, #100	; 0x64
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e2f9      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ad0:	4b8f      	ldr	r3, [pc, #572]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	2380      	movs	r3, #128	; 0x80
 8004ad6:	029b      	lsls	r3, r3, #10
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d0f0      	beq.n	8004abe <HAL_RCC_OscConfig+0xe6>
 8004adc:	e015      	b.n	8004b0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ade:	f7fe feeb 	bl	80038b8 <HAL_GetTick>
 8004ae2:	0003      	movs	r3, r0
 8004ae4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae8:	f7fe fee6 	bl	80038b8 <HAL_GetTick>
 8004aec:	0002      	movs	r2, r0
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b64      	cmp	r3, #100	; 0x64
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e2e4      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004afa:	4b85      	ldr	r3, [pc, #532]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	2380      	movs	r3, #128	; 0x80
 8004b00:	029b      	lsls	r3, r3, #10
 8004b02:	4013      	ands	r3, r2
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x110>
 8004b06:	e000      	b.n	8004b0a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b08:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	4013      	ands	r3, r2
 8004b12:	d100      	bne.n	8004b16 <HAL_RCC_OscConfig+0x13e>
 8004b14:	e099      	b.n	8004c4a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	2220      	movs	r2, #32
 8004b20:	4013      	ands	r3, r2
 8004b22:	d009      	beq.n	8004b38 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004b24:	4b7a      	ldr	r3, [pc, #488]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4b79      	ldr	r3, [pc, #484]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004b2a:	2120      	movs	r1, #32
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	2220      	movs	r2, #32
 8004b34:	4393      	bics	r3, r2
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d005      	beq.n	8004b4a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	2b0c      	cmp	r3, #12
 8004b42:	d13e      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x1ea>
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d13b      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004b4a:	4b71      	ldr	r3, [pc, #452]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2204      	movs	r2, #4
 8004b50:	4013      	ands	r3, r2
 8004b52:	d004      	beq.n	8004b5e <HAL_RCC_OscConfig+0x186>
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e2b2      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b5e:	4b6c      	ldr	r3, [pc, #432]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	4a6e      	ldr	r2, [pc, #440]	; (8004d1c <HAL_RCC_OscConfig+0x344>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	0019      	movs	r1, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	021a      	lsls	r2, r3, #8
 8004b6e:	4b68      	ldr	r3, [pc, #416]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004b70:	430a      	orrs	r2, r1
 8004b72:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004b74:	4b66      	ldr	r3, [pc, #408]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2209      	movs	r2, #9
 8004b7a:	4393      	bics	r3, r2
 8004b7c:	0019      	movs	r1, r3
 8004b7e:	4b64      	ldr	r3, [pc, #400]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b82:	430a      	orrs	r2, r1
 8004b84:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b86:	f000 fbeb 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 8004b8a:	0001      	movs	r1, r0
 8004b8c:	4b60      	ldr	r3, [pc, #384]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	091b      	lsrs	r3, r3, #4
 8004b92:	220f      	movs	r2, #15
 8004b94:	4013      	ands	r3, r2
 8004b96:	4a62      	ldr	r2, [pc, #392]	; (8004d20 <HAL_RCC_OscConfig+0x348>)
 8004b98:	5cd3      	ldrb	r3, [r2, r3]
 8004b9a:	000a      	movs	r2, r1
 8004b9c:	40da      	lsrs	r2, r3
 8004b9e:	4b61      	ldr	r3, [pc, #388]	; (8004d24 <HAL_RCC_OscConfig+0x34c>)
 8004ba0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004ba2:	4b61      	ldr	r3, [pc, #388]	; (8004d28 <HAL_RCC_OscConfig+0x350>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2513      	movs	r5, #19
 8004ba8:	197c      	adds	r4, r7, r5
 8004baa:	0018      	movs	r0, r3
 8004bac:	f7fe fe3e 	bl	800382c <HAL_InitTick>
 8004bb0:	0003      	movs	r3, r0
 8004bb2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004bb4:	197b      	adds	r3, r7, r5
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d046      	beq.n	8004c4a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004bbc:	197b      	adds	r3, r7, r5
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	e280      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d027      	beq.n	8004c18 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004bc8:	4b51      	ldr	r3, [pc, #324]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2209      	movs	r2, #9
 8004bce:	4393      	bics	r3, r2
 8004bd0:	0019      	movs	r1, r3
 8004bd2:	4b4f      	ldr	r3, [pc, #316]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bda:	f7fe fe6d 	bl	80038b8 <HAL_GetTick>
 8004bde:	0003      	movs	r3, r0
 8004be0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004be4:	f7fe fe68 	bl	80038b8 <HAL_GetTick>
 8004be8:	0002      	movs	r2, r0
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e266      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bf6:	4b46      	ldr	r3, [pc, #280]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d0f1      	beq.n	8004be4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c00:	4b43      	ldr	r3, [pc, #268]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	4a45      	ldr	r2, [pc, #276]	; (8004d1c <HAL_RCC_OscConfig+0x344>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	0019      	movs	r1, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	021a      	lsls	r2, r3, #8
 8004c10:	4b3f      	ldr	r3, [pc, #252]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
 8004c16:	e018      	b.n	8004c4a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c18:	4b3d      	ldr	r3, [pc, #244]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b3c      	ldr	r3, [pc, #240]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c1e:	2101      	movs	r1, #1
 8004c20:	438a      	bics	r2, r1
 8004c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c24:	f7fe fe48 	bl	80038b8 <HAL_GetTick>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c2e:	f7fe fe43 	bl	80038b8 <HAL_GetTick>
 8004c32:	0002      	movs	r2, r0
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e241      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c40:	4b33      	ldr	r3, [pc, #204]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2204      	movs	r2, #4
 8004c46:	4013      	ands	r3, r2
 8004c48:	d1f1      	bne.n	8004c2e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2210      	movs	r2, #16
 8004c50:	4013      	ands	r3, r2
 8004c52:	d100      	bne.n	8004c56 <HAL_RCC_OscConfig+0x27e>
 8004c54:	e0a1      	b.n	8004d9a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d140      	bne.n	8004cde <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c5c:	4b2c      	ldr	r3, [pc, #176]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	2380      	movs	r3, #128	; 0x80
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4013      	ands	r3, r2
 8004c66:	d005      	beq.n	8004c74 <HAL_RCC_OscConfig+0x29c>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e227      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c74:	4b26      	ldr	r3, [pc, #152]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	4a2c      	ldr	r2, [pc, #176]	; (8004d2c <HAL_RCC_OscConfig+0x354>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	0019      	movs	r1, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1a      	ldr	r2, [r3, #32]
 8004c82:	4b23      	ldr	r3, [pc, #140]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c84:	430a      	orrs	r2, r1
 8004c86:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c88:	4b21      	ldr	r3, [pc, #132]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	0a19      	lsrs	r1, r3, #8
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	061a      	lsls	r2, r3, #24
 8004c96:	4b1e      	ldr	r3, [pc, #120]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	0b5b      	lsrs	r3, r3, #13
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	2280      	movs	r2, #128	; 0x80
 8004ca6:	0212      	lsls	r2, r2, #8
 8004ca8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004caa:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	210f      	movs	r1, #15
 8004cb2:	400b      	ands	r3, r1
 8004cb4:	491a      	ldr	r1, [pc, #104]	; (8004d20 <HAL_RCC_OscConfig+0x348>)
 8004cb6:	5ccb      	ldrb	r3, [r1, r3]
 8004cb8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004cba:	4b1a      	ldr	r3, [pc, #104]	; (8004d24 <HAL_RCC_OscConfig+0x34c>)
 8004cbc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004cbe:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <HAL_RCC_OscConfig+0x350>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2513      	movs	r5, #19
 8004cc4:	197c      	adds	r4, r7, r5
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f7fe fdb0 	bl	800382c <HAL_InitTick>
 8004ccc:	0003      	movs	r3, r0
 8004cce:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004cd0:	197b      	adds	r3, r7, r5
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d060      	beq.n	8004d9a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8004cd8:	197b      	adds	r3, r7, r5
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	e1f2      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d03f      	beq.n	8004d66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ce6:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004cec:	2180      	movs	r1, #128	; 0x80
 8004cee:	0049      	lsls	r1, r1, #1
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf4:	f7fe fde0 	bl	80038b8 <HAL_GetTick>
 8004cf8:	0003      	movs	r3, r0
 8004cfa:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004cfc:	e018      	b.n	8004d30 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cfe:	f7fe fddb 	bl	80038b8 <HAL_GetTick>
 8004d02:	0002      	movs	r2, r0
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d911      	bls.n	8004d30 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e1d9      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
 8004d10:	40021000 	.word	0x40021000
 8004d14:	fffeffff 	.word	0xfffeffff
 8004d18:	fffbffff 	.word	0xfffbffff
 8004d1c:	ffffe0ff 	.word	0xffffe0ff
 8004d20:	08006c60 	.word	0x08006c60
 8004d24:	20000000 	.word	0x20000000
 8004d28:	20000004 	.word	0x20000004
 8004d2c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d30:	4bc9      	ldr	r3, [pc, #804]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	2380      	movs	r3, #128	; 0x80
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4013      	ands	r3, r2
 8004d3a:	d0e0      	beq.n	8004cfe <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d3c:	4bc6      	ldr	r3, [pc, #792]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	4ac6      	ldr	r2, [pc, #792]	; (800505c <HAL_RCC_OscConfig+0x684>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	0019      	movs	r1, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1a      	ldr	r2, [r3, #32]
 8004d4a:	4bc3      	ldr	r3, [pc, #780]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d50:	4bc1      	ldr	r3, [pc, #772]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	0a19      	lsrs	r1, r3, #8
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	061a      	lsls	r2, r3, #24
 8004d5e:	4bbe      	ldr	r3, [pc, #760]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
 8004d64:	e019      	b.n	8004d9a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d66:	4bbc      	ldr	r3, [pc, #752]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4bbb      	ldr	r3, [pc, #748]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004d6c:	49bc      	ldr	r1, [pc, #752]	; (8005060 <HAL_RCC_OscConfig+0x688>)
 8004d6e:	400a      	ands	r2, r1
 8004d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d72:	f7fe fda1 	bl	80038b8 <HAL_GetTick>
 8004d76:	0003      	movs	r3, r0
 8004d78:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d7c:	f7fe fd9c 	bl	80038b8 <HAL_GetTick>
 8004d80:	0002      	movs	r2, r0
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e19a      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d8e:	4bb2      	ldr	r3, [pc, #712]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	2380      	movs	r3, #128	; 0x80
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4013      	ands	r3, r2
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2208      	movs	r2, #8
 8004da0:	4013      	ands	r3, r2
 8004da2:	d036      	beq.n	8004e12 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d019      	beq.n	8004de0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dac:	4baa      	ldr	r3, [pc, #680]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004dae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004db0:	4ba9      	ldr	r3, [pc, #676]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004db2:	2101      	movs	r1, #1
 8004db4:	430a      	orrs	r2, r1
 8004db6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db8:	f7fe fd7e 	bl	80038b8 <HAL_GetTick>
 8004dbc:	0003      	movs	r3, r0
 8004dbe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dc2:	f7fe fd79 	bl	80038b8 <HAL_GetTick>
 8004dc6:	0002      	movs	r2, r0
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e177      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dd4:	4ba0      	ldr	r3, [pc, #640]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd8:	2202      	movs	r2, #2
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d0f1      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x3ea>
 8004dde:	e018      	b.n	8004e12 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004de0:	4b9d      	ldr	r3, [pc, #628]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004de2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004de4:	4b9c      	ldr	r3, [pc, #624]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004de6:	2101      	movs	r1, #1
 8004de8:	438a      	bics	r2, r1
 8004dea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dec:	f7fe fd64 	bl	80038b8 <HAL_GetTick>
 8004df0:	0003      	movs	r3, r0
 8004df2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004df6:	f7fe fd5f 	bl	80038b8 <HAL_GetTick>
 8004dfa:	0002      	movs	r2, r0
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e15d      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e08:	4b93      	ldr	r3, [pc, #588]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	4013      	ands	r3, r2
 8004e10:	d1f1      	bne.n	8004df6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2204      	movs	r2, #4
 8004e18:	4013      	ands	r3, r2
 8004e1a:	d100      	bne.n	8004e1e <HAL_RCC_OscConfig+0x446>
 8004e1c:	e0ae      	b.n	8004f7c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e1e:	2023      	movs	r0, #35	; 0x23
 8004e20:	183b      	adds	r3, r7, r0
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e26:	4b8c      	ldr	r3, [pc, #560]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e2a:	2380      	movs	r3, #128	; 0x80
 8004e2c:	055b      	lsls	r3, r3, #21
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d109      	bne.n	8004e46 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e32:	4b89      	ldr	r3, [pc, #548]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e36:	4b88      	ldr	r3, [pc, #544]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004e38:	2180      	movs	r1, #128	; 0x80
 8004e3a:	0549      	lsls	r1, r1, #21
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004e40:	183b      	adds	r3, r7, r0
 8004e42:	2201      	movs	r2, #1
 8004e44:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e46:	4b87      	ldr	r3, [pc, #540]	; (8005064 <HAL_RCC_OscConfig+0x68c>)
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	2380      	movs	r3, #128	; 0x80
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	4013      	ands	r3, r2
 8004e50:	d11a      	bne.n	8004e88 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e52:	4b84      	ldr	r3, [pc, #528]	; (8005064 <HAL_RCC_OscConfig+0x68c>)
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4b83      	ldr	r3, [pc, #524]	; (8005064 <HAL_RCC_OscConfig+0x68c>)
 8004e58:	2180      	movs	r1, #128	; 0x80
 8004e5a:	0049      	lsls	r1, r1, #1
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e60:	f7fe fd2a 	bl	80038b8 <HAL_GetTick>
 8004e64:	0003      	movs	r3, r0
 8004e66:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6a:	f7fe fd25 	bl	80038b8 <HAL_GetTick>
 8004e6e:	0002      	movs	r2, r0
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b64      	cmp	r3, #100	; 0x64
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e123      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e7c:	4b79      	ldr	r3, [pc, #484]	; (8005064 <HAL_RCC_OscConfig+0x68c>)
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	2380      	movs	r3, #128	; 0x80
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	4013      	ands	r3, r2
 8004e86:	d0f0      	beq.n	8004e6a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	2380      	movs	r3, #128	; 0x80
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d107      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x4cc>
 8004e94:	4b70      	ldr	r3, [pc, #448]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004e96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e98:	4b6f      	ldr	r3, [pc, #444]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004e9a:	2180      	movs	r1, #128	; 0x80
 8004e9c:	0049      	lsls	r1, r1, #1
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	651a      	str	r2, [r3, #80]	; 0x50
 8004ea2:	e031      	b.n	8004f08 <HAL_RCC_OscConfig+0x530>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10c      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x4ee>
 8004eac:	4b6a      	ldr	r3, [pc, #424]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004eae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eb0:	4b69      	ldr	r3, [pc, #420]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004eb2:	496b      	ldr	r1, [pc, #428]	; (8005060 <HAL_RCC_OscConfig+0x688>)
 8004eb4:	400a      	ands	r2, r1
 8004eb6:	651a      	str	r2, [r3, #80]	; 0x50
 8004eb8:	4b67      	ldr	r3, [pc, #412]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004eba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ebc:	4b66      	ldr	r3, [pc, #408]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004ebe:	496a      	ldr	r1, [pc, #424]	; (8005068 <HAL_RCC_OscConfig+0x690>)
 8004ec0:	400a      	ands	r2, r1
 8004ec2:	651a      	str	r2, [r3, #80]	; 0x50
 8004ec4:	e020      	b.n	8004f08 <HAL_RCC_OscConfig+0x530>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	23a0      	movs	r3, #160	; 0xa0
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d10e      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x518>
 8004ed2:	4b61      	ldr	r3, [pc, #388]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004ed4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ed6:	4b60      	ldr	r3, [pc, #384]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004ed8:	2180      	movs	r1, #128	; 0x80
 8004eda:	00c9      	lsls	r1, r1, #3
 8004edc:	430a      	orrs	r2, r1
 8004ede:	651a      	str	r2, [r3, #80]	; 0x50
 8004ee0:	4b5d      	ldr	r3, [pc, #372]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004ee2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ee4:	4b5c      	ldr	r3, [pc, #368]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004ee6:	2180      	movs	r1, #128	; 0x80
 8004ee8:	0049      	lsls	r1, r1, #1
 8004eea:	430a      	orrs	r2, r1
 8004eec:	651a      	str	r2, [r3, #80]	; 0x50
 8004eee:	e00b      	b.n	8004f08 <HAL_RCC_OscConfig+0x530>
 8004ef0:	4b59      	ldr	r3, [pc, #356]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004ef2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ef4:	4b58      	ldr	r3, [pc, #352]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004ef6:	495a      	ldr	r1, [pc, #360]	; (8005060 <HAL_RCC_OscConfig+0x688>)
 8004ef8:	400a      	ands	r2, r1
 8004efa:	651a      	str	r2, [r3, #80]	; 0x50
 8004efc:	4b56      	ldr	r3, [pc, #344]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004efe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f00:	4b55      	ldr	r3, [pc, #340]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004f02:	4959      	ldr	r1, [pc, #356]	; (8005068 <HAL_RCC_OscConfig+0x690>)
 8004f04:	400a      	ands	r2, r1
 8004f06:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d015      	beq.n	8004f3c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f10:	f7fe fcd2 	bl	80038b8 <HAL_GetTick>
 8004f14:	0003      	movs	r3, r0
 8004f16:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f18:	e009      	b.n	8004f2e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f1a:	f7fe fccd 	bl	80038b8 <HAL_GetTick>
 8004f1e:	0002      	movs	r2, r0
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	4a51      	ldr	r2, [pc, #324]	; (800506c <HAL_RCC_OscConfig+0x694>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e0ca      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f2e:	4b4a      	ldr	r3, [pc, #296]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004f30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f32:	2380      	movs	r3, #128	; 0x80
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4013      	ands	r3, r2
 8004f38:	d0ef      	beq.n	8004f1a <HAL_RCC_OscConfig+0x542>
 8004f3a:	e014      	b.n	8004f66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f3c:	f7fe fcbc 	bl	80038b8 <HAL_GetTick>
 8004f40:	0003      	movs	r3, r0
 8004f42:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f44:	e009      	b.n	8004f5a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f46:	f7fe fcb7 	bl	80038b8 <HAL_GetTick>
 8004f4a:	0002      	movs	r2, r0
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	4a46      	ldr	r2, [pc, #280]	; (800506c <HAL_RCC_OscConfig+0x694>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e0b4      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f5a:	4b3f      	ldr	r3, [pc, #252]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004f5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f5e:	2380      	movs	r3, #128	; 0x80
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4013      	ands	r3, r2
 8004f64:	d1ef      	bne.n	8004f46 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f66:	2323      	movs	r3, #35	; 0x23
 8004f68:	18fb      	adds	r3, r7, r3
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d105      	bne.n	8004f7c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f70:	4b39      	ldr	r3, [pc, #228]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f74:	4b38      	ldr	r3, [pc, #224]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004f76:	493e      	ldr	r1, [pc, #248]	; (8005070 <HAL_RCC_OscConfig+0x698>)
 8004f78:	400a      	ands	r2, r1
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d100      	bne.n	8004f86 <HAL_RCC_OscConfig+0x5ae>
 8004f84:	e09d      	b.n	80050c2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	2b0c      	cmp	r3, #12
 8004f8a:	d100      	bne.n	8004f8e <HAL_RCC_OscConfig+0x5b6>
 8004f8c:	e076      	b.n	800507c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d145      	bne.n	8005022 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f96:	4b30      	ldr	r3, [pc, #192]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	4b2f      	ldr	r3, [pc, #188]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004f9c:	4935      	ldr	r1, [pc, #212]	; (8005074 <HAL_RCC_OscConfig+0x69c>)
 8004f9e:	400a      	ands	r2, r1
 8004fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa2:	f7fe fc89 	bl	80038b8 <HAL_GetTick>
 8004fa6:	0003      	movs	r3, r0
 8004fa8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fac:	f7fe fc84 	bl	80038b8 <HAL_GetTick>
 8004fb0:	0002      	movs	r2, r0
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e082      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004fbe:	4b26      	ldr	r3, [pc, #152]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	2380      	movs	r3, #128	; 0x80
 8004fc4:	049b      	lsls	r3, r3, #18
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fca:	4b23      	ldr	r3, [pc, #140]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	4a2a      	ldr	r2, [pc, #168]	; (8005078 <HAL_RCC_OscConfig+0x6a0>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	0019      	movs	r1, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	4b1c      	ldr	r3, [pc, #112]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fea:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b1a      	ldr	r3, [pc, #104]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004ff0:	2180      	movs	r1, #128	; 0x80
 8004ff2:	0449      	lsls	r1, r1, #17
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff8:	f7fe fc5e 	bl	80038b8 <HAL_GetTick>
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005002:	f7fe fc59 	bl	80038b8 <HAL_GetTick>
 8005006:	0002      	movs	r2, r0
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e057      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005014:	4b10      	ldr	r3, [pc, #64]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	2380      	movs	r3, #128	; 0x80
 800501a:	049b      	lsls	r3, r3, #18
 800501c:	4013      	ands	r3, r2
 800501e:	d0f0      	beq.n	8005002 <HAL_RCC_OscConfig+0x62a>
 8005020:	e04f      	b.n	80050c2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005022:	4b0d      	ldr	r3, [pc, #52]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8005028:	4912      	ldr	r1, [pc, #72]	; (8005074 <HAL_RCC_OscConfig+0x69c>)
 800502a:	400a      	ands	r2, r1
 800502c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502e:	f7fe fc43 	bl	80038b8 <HAL_GetTick>
 8005032:	0003      	movs	r3, r0
 8005034:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005038:	f7fe fc3e 	bl	80038b8 <HAL_GetTick>
 800503c:	0002      	movs	r2, r0
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e03c      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800504a:	4b03      	ldr	r3, [pc, #12]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	049b      	lsls	r3, r3, #18
 8005052:	4013      	ands	r3, r2
 8005054:	d1f0      	bne.n	8005038 <HAL_RCC_OscConfig+0x660>
 8005056:	e034      	b.n	80050c2 <HAL_RCC_OscConfig+0x6ea>
 8005058:	40021000 	.word	0x40021000
 800505c:	ffff1fff 	.word	0xffff1fff
 8005060:	fffffeff 	.word	0xfffffeff
 8005064:	40007000 	.word	0x40007000
 8005068:	fffffbff 	.word	0xfffffbff
 800506c:	00001388 	.word	0x00001388
 8005070:	efffffff 	.word	0xefffffff
 8005074:	feffffff 	.word	0xfeffffff
 8005078:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e01d      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005088:	4b10      	ldr	r3, [pc, #64]	; (80050cc <HAL_RCC_OscConfig+0x6f4>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	2380      	movs	r3, #128	; 0x80
 8005092:	025b      	lsls	r3, r3, #9
 8005094:	401a      	ands	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	429a      	cmp	r2, r3
 800509c:	d10f      	bne.n	80050be <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	23f0      	movs	r3, #240	; 0xf0
 80050a2:	039b      	lsls	r3, r3, #14
 80050a4:	401a      	ands	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d107      	bne.n	80050be <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	23c0      	movs	r3, #192	; 0xc0
 80050b2:	041b      	lsls	r3, r3, #16
 80050b4:	401a      	ands	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d001      	beq.n	80050c2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	0018      	movs	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b00a      	add	sp, #40	; 0x28
 80050ca:	bdb0      	pop	{r4, r5, r7, pc}
 80050cc:	40021000 	.word	0x40021000

080050d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050d0:	b5b0      	push	{r4, r5, r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e128      	b.n	8005336 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050e4:	4b96      	ldr	r3, [pc, #600]	; (8005340 <HAL_RCC_ClockConfig+0x270>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2201      	movs	r2, #1
 80050ea:	4013      	ands	r3, r2
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d91e      	bls.n	8005130 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f2:	4b93      	ldr	r3, [pc, #588]	; (8005340 <HAL_RCC_ClockConfig+0x270>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2201      	movs	r2, #1
 80050f8:	4393      	bics	r3, r2
 80050fa:	0019      	movs	r1, r3
 80050fc:	4b90      	ldr	r3, [pc, #576]	; (8005340 <HAL_RCC_ClockConfig+0x270>)
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005104:	f7fe fbd8 	bl	80038b8 <HAL_GetTick>
 8005108:	0003      	movs	r3, r0
 800510a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510c:	e009      	b.n	8005122 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800510e:	f7fe fbd3 	bl	80038b8 <HAL_GetTick>
 8005112:	0002      	movs	r2, r0
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	4a8a      	ldr	r2, [pc, #552]	; (8005344 <HAL_RCC_ClockConfig+0x274>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e109      	b.n	8005336 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005122:	4b87      	ldr	r3, [pc, #540]	; (8005340 <HAL_RCC_ClockConfig+0x270>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2201      	movs	r2, #1
 8005128:	4013      	ands	r3, r2
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d1ee      	bne.n	800510e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2202      	movs	r2, #2
 8005136:	4013      	ands	r3, r2
 8005138:	d009      	beq.n	800514e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800513a:	4b83      	ldr	r3, [pc, #524]	; (8005348 <HAL_RCC_ClockConfig+0x278>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	22f0      	movs	r2, #240	; 0xf0
 8005140:	4393      	bics	r3, r2
 8005142:	0019      	movs	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	4b7f      	ldr	r3, [pc, #508]	; (8005348 <HAL_RCC_ClockConfig+0x278>)
 800514a:	430a      	orrs	r2, r1
 800514c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2201      	movs	r2, #1
 8005154:	4013      	ands	r3, r2
 8005156:	d100      	bne.n	800515a <HAL_RCC_ClockConfig+0x8a>
 8005158:	e089      	b.n	800526e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d107      	bne.n	8005172 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005162:	4b79      	ldr	r3, [pc, #484]	; (8005348 <HAL_RCC_ClockConfig+0x278>)
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	2380      	movs	r3, #128	; 0x80
 8005168:	029b      	lsls	r3, r3, #10
 800516a:	4013      	ands	r3, r2
 800516c:	d120      	bne.n	80051b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e0e1      	b.n	8005336 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b03      	cmp	r3, #3
 8005178:	d107      	bne.n	800518a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800517a:	4b73      	ldr	r3, [pc, #460]	; (8005348 <HAL_RCC_ClockConfig+0x278>)
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	2380      	movs	r3, #128	; 0x80
 8005180:	049b      	lsls	r3, r3, #18
 8005182:	4013      	ands	r3, r2
 8005184:	d114      	bne.n	80051b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e0d5      	b.n	8005336 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d106      	bne.n	80051a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005192:	4b6d      	ldr	r3, [pc, #436]	; (8005348 <HAL_RCC_ClockConfig+0x278>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2204      	movs	r2, #4
 8005198:	4013      	ands	r3, r2
 800519a:	d109      	bne.n	80051b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0ca      	b.n	8005336 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80051a0:	4b69      	ldr	r3, [pc, #420]	; (8005348 <HAL_RCC_ClockConfig+0x278>)
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	2380      	movs	r3, #128	; 0x80
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4013      	ands	r3, r2
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0c2      	b.n	8005336 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051b0:	4b65      	ldr	r3, [pc, #404]	; (8005348 <HAL_RCC_ClockConfig+0x278>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	2203      	movs	r2, #3
 80051b6:	4393      	bics	r3, r2
 80051b8:	0019      	movs	r1, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	4b62      	ldr	r3, [pc, #392]	; (8005348 <HAL_RCC_ClockConfig+0x278>)
 80051c0:	430a      	orrs	r2, r1
 80051c2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051c4:	f7fe fb78 	bl	80038b8 <HAL_GetTick>
 80051c8:	0003      	movs	r3, r0
 80051ca:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d111      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80051d4:	e009      	b.n	80051ea <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d6:	f7fe fb6f 	bl	80038b8 <HAL_GetTick>
 80051da:	0002      	movs	r2, r0
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	4a58      	ldr	r2, [pc, #352]	; (8005344 <HAL_RCC_ClockConfig+0x274>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e0a5      	b.n	8005336 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80051ea:	4b57      	ldr	r3, [pc, #348]	; (8005348 <HAL_RCC_ClockConfig+0x278>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	220c      	movs	r2, #12
 80051f0:	4013      	ands	r3, r2
 80051f2:	2b08      	cmp	r3, #8
 80051f4:	d1ef      	bne.n	80051d6 <HAL_RCC_ClockConfig+0x106>
 80051f6:	e03a      	b.n	800526e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d111      	bne.n	8005224 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005200:	e009      	b.n	8005216 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005202:	f7fe fb59 	bl	80038b8 <HAL_GetTick>
 8005206:	0002      	movs	r2, r0
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	4a4d      	ldr	r2, [pc, #308]	; (8005344 <HAL_RCC_ClockConfig+0x274>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e08f      	b.n	8005336 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005216:	4b4c      	ldr	r3, [pc, #304]	; (8005348 <HAL_RCC_ClockConfig+0x278>)
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	220c      	movs	r2, #12
 800521c:	4013      	ands	r3, r2
 800521e:	2b0c      	cmp	r3, #12
 8005220:	d1ef      	bne.n	8005202 <HAL_RCC_ClockConfig+0x132>
 8005222:	e024      	b.n	800526e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d11b      	bne.n	8005264 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800522c:	e009      	b.n	8005242 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800522e:	f7fe fb43 	bl	80038b8 <HAL_GetTick>
 8005232:	0002      	movs	r2, r0
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	4a42      	ldr	r2, [pc, #264]	; (8005344 <HAL_RCC_ClockConfig+0x274>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e079      	b.n	8005336 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005242:	4b41      	ldr	r3, [pc, #260]	; (8005348 <HAL_RCC_ClockConfig+0x278>)
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	220c      	movs	r2, #12
 8005248:	4013      	ands	r3, r2
 800524a:	2b04      	cmp	r3, #4
 800524c:	d1ef      	bne.n	800522e <HAL_RCC_ClockConfig+0x15e>
 800524e:	e00e      	b.n	800526e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005250:	f7fe fb32 	bl	80038b8 <HAL_GetTick>
 8005254:	0002      	movs	r2, r0
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	4a3a      	ldr	r2, [pc, #232]	; (8005344 <HAL_RCC_ClockConfig+0x274>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e068      	b.n	8005336 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005264:	4b38      	ldr	r3, [pc, #224]	; (8005348 <HAL_RCC_ClockConfig+0x278>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	220c      	movs	r2, #12
 800526a:	4013      	ands	r3, r2
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800526e:	4b34      	ldr	r3, [pc, #208]	; (8005340 <HAL_RCC_ClockConfig+0x270>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2201      	movs	r2, #1
 8005274:	4013      	ands	r3, r2
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d21e      	bcs.n	80052ba <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527c:	4b30      	ldr	r3, [pc, #192]	; (8005340 <HAL_RCC_ClockConfig+0x270>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2201      	movs	r2, #1
 8005282:	4393      	bics	r3, r2
 8005284:	0019      	movs	r1, r3
 8005286:	4b2e      	ldr	r3, [pc, #184]	; (8005340 <HAL_RCC_ClockConfig+0x270>)
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800528e:	f7fe fb13 	bl	80038b8 <HAL_GetTick>
 8005292:	0003      	movs	r3, r0
 8005294:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005296:	e009      	b.n	80052ac <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005298:	f7fe fb0e 	bl	80038b8 <HAL_GetTick>
 800529c:	0002      	movs	r2, r0
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	4a28      	ldr	r2, [pc, #160]	; (8005344 <HAL_RCC_ClockConfig+0x274>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e044      	b.n	8005336 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ac:	4b24      	ldr	r3, [pc, #144]	; (8005340 <HAL_RCC_ClockConfig+0x270>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2201      	movs	r2, #1
 80052b2:	4013      	ands	r3, r2
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d1ee      	bne.n	8005298 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2204      	movs	r2, #4
 80052c0:	4013      	ands	r3, r2
 80052c2:	d009      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052c4:	4b20      	ldr	r3, [pc, #128]	; (8005348 <HAL_RCC_ClockConfig+0x278>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	4a20      	ldr	r2, [pc, #128]	; (800534c <HAL_RCC_ClockConfig+0x27c>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	0019      	movs	r1, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	4b1d      	ldr	r3, [pc, #116]	; (8005348 <HAL_RCC_ClockConfig+0x278>)
 80052d4:	430a      	orrs	r2, r1
 80052d6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2208      	movs	r2, #8
 80052de:	4013      	ands	r3, r2
 80052e0:	d00a      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052e2:	4b19      	ldr	r3, [pc, #100]	; (8005348 <HAL_RCC_ClockConfig+0x278>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	4a1a      	ldr	r2, [pc, #104]	; (8005350 <HAL_RCC_ClockConfig+0x280>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	0019      	movs	r1, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	00da      	lsls	r2, r3, #3
 80052f2:	4b15      	ldr	r3, [pc, #84]	; (8005348 <HAL_RCC_ClockConfig+0x278>)
 80052f4:	430a      	orrs	r2, r1
 80052f6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052f8:	f000 f832 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 80052fc:	0001      	movs	r1, r0
 80052fe:	4b12      	ldr	r3, [pc, #72]	; (8005348 <HAL_RCC_ClockConfig+0x278>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	091b      	lsrs	r3, r3, #4
 8005304:	220f      	movs	r2, #15
 8005306:	4013      	ands	r3, r2
 8005308:	4a12      	ldr	r2, [pc, #72]	; (8005354 <HAL_RCC_ClockConfig+0x284>)
 800530a:	5cd3      	ldrb	r3, [r2, r3]
 800530c:	000a      	movs	r2, r1
 800530e:	40da      	lsrs	r2, r3
 8005310:	4b11      	ldr	r3, [pc, #68]	; (8005358 <HAL_RCC_ClockConfig+0x288>)
 8005312:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005314:	4b11      	ldr	r3, [pc, #68]	; (800535c <HAL_RCC_ClockConfig+0x28c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	250b      	movs	r5, #11
 800531a:	197c      	adds	r4, r7, r5
 800531c:	0018      	movs	r0, r3
 800531e:	f7fe fa85 	bl	800382c <HAL_InitTick>
 8005322:	0003      	movs	r3, r0
 8005324:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005326:	197b      	adds	r3, r7, r5
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800532e:	197b      	adds	r3, r7, r5
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	e000      	b.n	8005336 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	0018      	movs	r0, r3
 8005338:	46bd      	mov	sp, r7
 800533a:	b004      	add	sp, #16
 800533c:	bdb0      	pop	{r4, r5, r7, pc}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	40022000 	.word	0x40022000
 8005344:	00001388 	.word	0x00001388
 8005348:	40021000 	.word	0x40021000
 800534c:	fffff8ff 	.word	0xfffff8ff
 8005350:	ffffc7ff 	.word	0xffffc7ff
 8005354:	08006c60 	.word	0x08006c60
 8005358:	20000000 	.word	0x20000000
 800535c:	20000004 	.word	0x20000004

08005360 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005360:	b5b0      	push	{r4, r5, r7, lr}
 8005362:	b08e      	sub	sp, #56	; 0x38
 8005364:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005366:	4b4c      	ldr	r3, [pc, #304]	; (8005498 <HAL_RCC_GetSysClockFreq+0x138>)
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800536c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800536e:	230c      	movs	r3, #12
 8005370:	4013      	ands	r3, r2
 8005372:	2b0c      	cmp	r3, #12
 8005374:	d014      	beq.n	80053a0 <HAL_RCC_GetSysClockFreq+0x40>
 8005376:	d900      	bls.n	800537a <HAL_RCC_GetSysClockFreq+0x1a>
 8005378:	e07b      	b.n	8005472 <HAL_RCC_GetSysClockFreq+0x112>
 800537a:	2b04      	cmp	r3, #4
 800537c:	d002      	beq.n	8005384 <HAL_RCC_GetSysClockFreq+0x24>
 800537e:	2b08      	cmp	r3, #8
 8005380:	d00b      	beq.n	800539a <HAL_RCC_GetSysClockFreq+0x3a>
 8005382:	e076      	b.n	8005472 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005384:	4b44      	ldr	r3, [pc, #272]	; (8005498 <HAL_RCC_GetSysClockFreq+0x138>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2210      	movs	r2, #16
 800538a:	4013      	ands	r3, r2
 800538c:	d002      	beq.n	8005394 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800538e:	4b43      	ldr	r3, [pc, #268]	; (800549c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005390:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005392:	e07c      	b.n	800548e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005394:	4b42      	ldr	r3, [pc, #264]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x140>)
 8005396:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005398:	e079      	b.n	800548e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800539a:	4b42      	ldr	r3, [pc, #264]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x144>)
 800539c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800539e:	e076      	b.n	800548e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80053a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a2:	0c9a      	lsrs	r2, r3, #18
 80053a4:	230f      	movs	r3, #15
 80053a6:	401a      	ands	r2, r3
 80053a8:	4b3f      	ldr	r3, [pc, #252]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x148>)
 80053aa:	5c9b      	ldrb	r3, [r3, r2]
 80053ac:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80053ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b0:	0d9a      	lsrs	r2, r3, #22
 80053b2:	2303      	movs	r3, #3
 80053b4:	4013      	ands	r3, r2
 80053b6:	3301      	adds	r3, #1
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053ba:	4b37      	ldr	r3, [pc, #220]	; (8005498 <HAL_RCC_GetSysClockFreq+0x138>)
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	2380      	movs	r3, #128	; 0x80
 80053c0:	025b      	lsls	r3, r3, #9
 80053c2:	4013      	ands	r3, r2
 80053c4:	d01a      	beq.n	80053fc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	2300      	movs	r3, #0
 80053cc:	61fb      	str	r3, [r7, #28]
 80053ce:	4a35      	ldr	r2, [pc, #212]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x144>)
 80053d0:	2300      	movs	r3, #0
 80053d2:	69b8      	ldr	r0, [r7, #24]
 80053d4:	69f9      	ldr	r1, [r7, #28]
 80053d6:	f7fa ff87 	bl	80002e8 <__aeabi_lmul>
 80053da:	0002      	movs	r2, r0
 80053dc:	000b      	movs	r3, r1
 80053de:	0010      	movs	r0, r2
 80053e0:	0019      	movs	r1, r3
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	2300      	movs	r3, #0
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f7fa ff5b 	bl	80002a8 <__aeabi_uldivmod>
 80053f2:	0002      	movs	r2, r0
 80053f4:	000b      	movs	r3, r1
 80053f6:	0013      	movs	r3, r2
 80053f8:	637b      	str	r3, [r7, #52]	; 0x34
 80053fa:	e037      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80053fc:	4b26      	ldr	r3, [pc, #152]	; (8005498 <HAL_RCC_GetSysClockFreq+0x138>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2210      	movs	r2, #16
 8005402:	4013      	ands	r3, r2
 8005404:	d01a      	beq.n	800543c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	60bb      	str	r3, [r7, #8]
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	4a23      	ldr	r2, [pc, #140]	; (800549c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005410:	2300      	movs	r3, #0
 8005412:	68b8      	ldr	r0, [r7, #8]
 8005414:	68f9      	ldr	r1, [r7, #12]
 8005416:	f7fa ff67 	bl	80002e8 <__aeabi_lmul>
 800541a:	0002      	movs	r2, r0
 800541c:	000b      	movs	r3, r1
 800541e:	0010      	movs	r0, r2
 8005420:	0019      	movs	r1, r3
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	603b      	str	r3, [r7, #0]
 8005426:	2300      	movs	r3, #0
 8005428:	607b      	str	r3, [r7, #4]
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f7fa ff3b 	bl	80002a8 <__aeabi_uldivmod>
 8005432:	0002      	movs	r2, r0
 8005434:	000b      	movs	r3, r1
 8005436:	0013      	movs	r3, r2
 8005438:	637b      	str	r3, [r7, #52]	; 0x34
 800543a:	e017      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800543c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543e:	0018      	movs	r0, r3
 8005440:	2300      	movs	r3, #0
 8005442:	0019      	movs	r1, r3
 8005444:	4a16      	ldr	r2, [pc, #88]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x140>)
 8005446:	2300      	movs	r3, #0
 8005448:	f7fa ff4e 	bl	80002e8 <__aeabi_lmul>
 800544c:	0002      	movs	r2, r0
 800544e:	000b      	movs	r3, r1
 8005450:	0010      	movs	r0, r2
 8005452:	0019      	movs	r1, r3
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	001c      	movs	r4, r3
 8005458:	2300      	movs	r3, #0
 800545a:	001d      	movs	r5, r3
 800545c:	0022      	movs	r2, r4
 800545e:	002b      	movs	r3, r5
 8005460:	f7fa ff22 	bl	80002a8 <__aeabi_uldivmod>
 8005464:	0002      	movs	r2, r0
 8005466:	000b      	movs	r3, r1
 8005468:	0013      	movs	r3, r2
 800546a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800546c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005470:	e00d      	b.n	800548e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005472:	4b09      	ldr	r3, [pc, #36]	; (8005498 <HAL_RCC_GetSysClockFreq+0x138>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	0b5b      	lsrs	r3, r3, #13
 8005478:	2207      	movs	r2, #7
 800547a:	4013      	ands	r3, r2
 800547c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	3301      	adds	r3, #1
 8005482:	2280      	movs	r2, #128	; 0x80
 8005484:	0212      	lsls	r2, r2, #8
 8005486:	409a      	lsls	r2, r3
 8005488:	0013      	movs	r3, r2
 800548a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800548c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005490:	0018      	movs	r0, r3
 8005492:	46bd      	mov	sp, r7
 8005494:	b00e      	add	sp, #56	; 0x38
 8005496:	bdb0      	pop	{r4, r5, r7, pc}
 8005498:	40021000 	.word	0x40021000
 800549c:	003d0900 	.word	0x003d0900
 80054a0:	00f42400 	.word	0x00f42400
 80054a4:	007a1200 	.word	0x007a1200
 80054a8:	08006c70 	.word	0x08006c70

080054ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e032      	b.n	8005524 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2239      	movs	r2, #57	; 0x39
 80054c2:	5c9b      	ldrb	r3, [r3, r2]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d107      	bne.n	80054da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2238      	movs	r2, #56	; 0x38
 80054ce:	2100      	movs	r1, #0
 80054d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	0018      	movs	r0, r3
 80054d6:	f7fe f88b 	bl	80035f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2239      	movs	r2, #57	; 0x39
 80054de:	2102      	movs	r1, #2
 80054e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3304      	adds	r3, #4
 80054ea:	0019      	movs	r1, r3
 80054ec:	0010      	movs	r0, r2
 80054ee:	f000 fbdf 	bl	8005cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	223e      	movs	r2, #62	; 0x3e
 80054f6:	2101      	movs	r1, #1
 80054f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	223a      	movs	r2, #58	; 0x3a
 80054fe:	2101      	movs	r1, #1
 8005500:	5499      	strb	r1, [r3, r2]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	223b      	movs	r2, #59	; 0x3b
 8005506:	2101      	movs	r1, #1
 8005508:	5499      	strb	r1, [r3, r2]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	223c      	movs	r2, #60	; 0x3c
 800550e:	2101      	movs	r1, #1
 8005510:	5499      	strb	r1, [r3, r2]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	223d      	movs	r2, #61	; 0x3d
 8005516:	2101      	movs	r1, #1
 8005518:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2239      	movs	r2, #57	; 0x39
 800551e:	2101      	movs	r1, #1
 8005520:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	0018      	movs	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	b002      	add	sp, #8
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2239      	movs	r2, #57	; 0x39
 8005538:	5c9b      	ldrb	r3, [r3, r2]
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	d001      	beq.n	8005544 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e036      	b.n	80055b2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2239      	movs	r2, #57	; 0x39
 8005548:	2102      	movs	r1, #2
 800554a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2101      	movs	r1, #1
 8005558:	430a      	orrs	r2, r1
 800555a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	2380      	movs	r3, #128	; 0x80
 8005562:	05db      	lsls	r3, r3, #23
 8005564:	429a      	cmp	r2, r3
 8005566:	d009      	beq.n	800557c <HAL_TIM_Base_Start_IT+0x50>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a13      	ldr	r2, [pc, #76]	; (80055bc <HAL_TIM_Base_Start_IT+0x90>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d004      	beq.n	800557c <HAL_TIM_Base_Start_IT+0x50>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a12      	ldr	r2, [pc, #72]	; (80055c0 <HAL_TIM_Base_Start_IT+0x94>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d111      	bne.n	80055a0 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	2207      	movs	r2, #7
 8005584:	4013      	ands	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b06      	cmp	r3, #6
 800558c:	d010      	beq.n	80055b0 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2101      	movs	r1, #1
 800559a:	430a      	orrs	r2, r1
 800559c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559e:	e007      	b.n	80055b0 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2101      	movs	r1, #1
 80055ac:	430a      	orrs	r2, r1
 80055ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	0018      	movs	r0, r3
 80055b4:	46bd      	mov	sp, r7
 80055b6:	b004      	add	sp, #16
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	40010800 	.word	0x40010800
 80055c0:	40011400 	.word	0x40011400

080055c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e032      	b.n	800563c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2239      	movs	r2, #57	; 0x39
 80055da:	5c9b      	ldrb	r3, [r3, r2]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d107      	bne.n	80055f2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2238      	movs	r2, #56	; 0x38
 80055e6:	2100      	movs	r1, #0
 80055e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	0018      	movs	r0, r3
 80055ee:	f000 f829 	bl	8005644 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2239      	movs	r2, #57	; 0x39
 80055f6:	2102      	movs	r1, #2
 80055f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3304      	adds	r3, #4
 8005602:	0019      	movs	r1, r3
 8005604:	0010      	movs	r0, r2
 8005606:	f000 fb53 	bl	8005cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	223e      	movs	r2, #62	; 0x3e
 800560e:	2101      	movs	r1, #1
 8005610:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	223a      	movs	r2, #58	; 0x3a
 8005616:	2101      	movs	r1, #1
 8005618:	5499      	strb	r1, [r3, r2]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	223b      	movs	r2, #59	; 0x3b
 800561e:	2101      	movs	r1, #1
 8005620:	5499      	strb	r1, [r3, r2]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	223c      	movs	r2, #60	; 0x3c
 8005626:	2101      	movs	r1, #1
 8005628:	5499      	strb	r1, [r3, r2]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	223d      	movs	r2, #61	; 0x3d
 800562e:	2101      	movs	r1, #1
 8005630:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2239      	movs	r2, #57	; 0x39
 8005636:	2101      	movs	r1, #1
 8005638:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	0018      	movs	r0, r3
 800563e:	46bd      	mov	sp, r7
 8005640:	b002      	add	sp, #8
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800564c:	46c0      	nop			; (mov r8, r8)
 800564e:	46bd      	mov	sp, r7
 8005650:	b002      	add	sp, #8
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d108      	bne.n	8005676 <HAL_TIM_PWM_Start+0x22>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	223a      	movs	r2, #58	; 0x3a
 8005668:	5c9b      	ldrb	r3, [r3, r2]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	1e5a      	subs	r2, r3, #1
 8005670:	4193      	sbcs	r3, r2
 8005672:	b2db      	uxtb	r3, r3
 8005674:	e01f      	b.n	80056b6 <HAL_TIM_PWM_Start+0x62>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b04      	cmp	r3, #4
 800567a:	d108      	bne.n	800568e <HAL_TIM_PWM_Start+0x3a>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	223b      	movs	r2, #59	; 0x3b
 8005680:	5c9b      	ldrb	r3, [r3, r2]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	3b01      	subs	r3, #1
 8005686:	1e5a      	subs	r2, r3, #1
 8005688:	4193      	sbcs	r3, r2
 800568a:	b2db      	uxtb	r3, r3
 800568c:	e013      	b.n	80056b6 <HAL_TIM_PWM_Start+0x62>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b08      	cmp	r3, #8
 8005692:	d108      	bne.n	80056a6 <HAL_TIM_PWM_Start+0x52>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	223c      	movs	r2, #60	; 0x3c
 8005698:	5c9b      	ldrb	r3, [r3, r2]
 800569a:	b2db      	uxtb	r3, r3
 800569c:	3b01      	subs	r3, #1
 800569e:	1e5a      	subs	r2, r3, #1
 80056a0:	4193      	sbcs	r3, r2
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	e007      	b.n	80056b6 <HAL_TIM_PWM_Start+0x62>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	223d      	movs	r2, #61	; 0x3d
 80056aa:	5c9b      	ldrb	r3, [r3, r2]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	1e5a      	subs	r2, r3, #1
 80056b2:	4193      	sbcs	r3, r2
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e04d      	b.n	800575a <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d104      	bne.n	80056ce <HAL_TIM_PWM_Start+0x7a>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	223a      	movs	r2, #58	; 0x3a
 80056c8:	2102      	movs	r1, #2
 80056ca:	5499      	strb	r1, [r3, r2]
 80056cc:	e013      	b.n	80056f6 <HAL_TIM_PWM_Start+0xa2>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d104      	bne.n	80056de <HAL_TIM_PWM_Start+0x8a>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	223b      	movs	r2, #59	; 0x3b
 80056d8:	2102      	movs	r1, #2
 80056da:	5499      	strb	r1, [r3, r2]
 80056dc:	e00b      	b.n	80056f6 <HAL_TIM_PWM_Start+0xa2>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d104      	bne.n	80056ee <HAL_TIM_PWM_Start+0x9a>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	223c      	movs	r2, #60	; 0x3c
 80056e8:	2102      	movs	r1, #2
 80056ea:	5499      	strb	r1, [r3, r2]
 80056ec:	e003      	b.n	80056f6 <HAL_TIM_PWM_Start+0xa2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	223d      	movs	r2, #61	; 0x3d
 80056f2:	2102      	movs	r1, #2
 80056f4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6839      	ldr	r1, [r7, #0]
 80056fc:	2201      	movs	r2, #1
 80056fe:	0018      	movs	r0, r3
 8005700:	f000 fcc8 	bl	8006094 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	2380      	movs	r3, #128	; 0x80
 800570a:	05db      	lsls	r3, r3, #23
 800570c:	429a      	cmp	r2, r3
 800570e:	d009      	beq.n	8005724 <HAL_TIM_PWM_Start+0xd0>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a13      	ldr	r2, [pc, #76]	; (8005764 <HAL_TIM_PWM_Start+0x110>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d004      	beq.n	8005724 <HAL_TIM_PWM_Start+0xd0>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a12      	ldr	r2, [pc, #72]	; (8005768 <HAL_TIM_PWM_Start+0x114>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d111      	bne.n	8005748 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2207      	movs	r2, #7
 800572c:	4013      	ands	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b06      	cmp	r3, #6
 8005734:	d010      	beq.n	8005758 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2101      	movs	r1, #1
 8005742:	430a      	orrs	r2, r1
 8005744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005746:	e007      	b.n	8005758 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2101      	movs	r1, #1
 8005754:	430a      	orrs	r2, r1
 8005756:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	0018      	movs	r0, r3
 800575c:	46bd      	mov	sp, r7
 800575e:	b004      	add	sp, #16
 8005760:	bd80      	pop	{r7, pc}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	40010800 	.word	0x40010800
 8005768:	40011400 	.word	0x40011400

0800576c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	2202      	movs	r2, #2
 800577c:	4013      	ands	r3, r2
 800577e:	2b02      	cmp	r3, #2
 8005780:	d124      	bne.n	80057cc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	2202      	movs	r2, #2
 800578a:	4013      	ands	r3, r2
 800578c:	2b02      	cmp	r3, #2
 800578e:	d11d      	bne.n	80057cc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2203      	movs	r2, #3
 8005796:	4252      	negs	r2, r2
 8005798:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	2203      	movs	r2, #3
 80057a8:	4013      	ands	r3, r2
 80057aa:	d004      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	0018      	movs	r0, r3
 80057b0:	f000 fa66 	bl	8005c80 <HAL_TIM_IC_CaptureCallback>
 80057b4:	e007      	b.n	80057c6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	0018      	movs	r0, r3
 80057ba:	f000 fa59 	bl	8005c70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	0018      	movs	r0, r3
 80057c2:	f000 fa65 	bl	8005c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	2204      	movs	r2, #4
 80057d4:	4013      	ands	r3, r2
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d125      	bne.n	8005826 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	2204      	movs	r2, #4
 80057e2:	4013      	ands	r3, r2
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d11e      	bne.n	8005826 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2205      	movs	r2, #5
 80057ee:	4252      	negs	r2, r2
 80057f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2202      	movs	r2, #2
 80057f6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	23c0      	movs	r3, #192	; 0xc0
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4013      	ands	r3, r2
 8005804:	d004      	beq.n	8005810 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	0018      	movs	r0, r3
 800580a:	f000 fa39 	bl	8005c80 <HAL_TIM_IC_CaptureCallback>
 800580e:	e007      	b.n	8005820 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	0018      	movs	r0, r3
 8005814:	f000 fa2c 	bl	8005c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	0018      	movs	r0, r3
 800581c:	f000 fa38 	bl	8005c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	2208      	movs	r2, #8
 800582e:	4013      	ands	r3, r2
 8005830:	2b08      	cmp	r3, #8
 8005832:	d124      	bne.n	800587e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	2208      	movs	r2, #8
 800583c:	4013      	ands	r3, r2
 800583e:	2b08      	cmp	r3, #8
 8005840:	d11d      	bne.n	800587e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2209      	movs	r2, #9
 8005848:	4252      	negs	r2, r2
 800584a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2204      	movs	r2, #4
 8005850:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	2203      	movs	r2, #3
 800585a:	4013      	ands	r3, r2
 800585c:	d004      	beq.n	8005868 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	0018      	movs	r0, r3
 8005862:	f000 fa0d 	bl	8005c80 <HAL_TIM_IC_CaptureCallback>
 8005866:	e007      	b.n	8005878 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	0018      	movs	r0, r3
 800586c:	f000 fa00 	bl	8005c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	0018      	movs	r0, r3
 8005874:	f000 fa0c 	bl	8005c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	2210      	movs	r2, #16
 8005886:	4013      	ands	r3, r2
 8005888:	2b10      	cmp	r3, #16
 800588a:	d125      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	2210      	movs	r2, #16
 8005894:	4013      	ands	r3, r2
 8005896:	2b10      	cmp	r3, #16
 8005898:	d11e      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2211      	movs	r2, #17
 80058a0:	4252      	negs	r2, r2
 80058a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2208      	movs	r2, #8
 80058a8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	23c0      	movs	r3, #192	; 0xc0
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4013      	ands	r3, r2
 80058b6:	d004      	beq.n	80058c2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	0018      	movs	r0, r3
 80058bc:	f000 f9e0 	bl	8005c80 <HAL_TIM_IC_CaptureCallback>
 80058c0:	e007      	b.n	80058d2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	0018      	movs	r0, r3
 80058c6:	f000 f9d3 	bl	8005c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	0018      	movs	r0, r3
 80058ce:	f000 f9df 	bl	8005c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	2201      	movs	r2, #1
 80058e0:	4013      	ands	r3, r2
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d10f      	bne.n	8005906 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	4013      	ands	r3, r2
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d108      	bne.n	8005906 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2202      	movs	r2, #2
 80058fa:	4252      	negs	r2, r2
 80058fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	0018      	movs	r0, r3
 8005902:	f7fd f9bd 	bl	8002c80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	2240      	movs	r2, #64	; 0x40
 800590e:	4013      	ands	r3, r2
 8005910:	2b40      	cmp	r3, #64	; 0x40
 8005912:	d10f      	bne.n	8005934 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	2240      	movs	r2, #64	; 0x40
 800591c:	4013      	ands	r3, r2
 800591e:	2b40      	cmp	r3, #64	; 0x40
 8005920:	d108      	bne.n	8005934 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2241      	movs	r2, #65	; 0x41
 8005928:	4252      	negs	r2, r2
 800592a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	0018      	movs	r0, r3
 8005930:	f000 f9b6 	bl	8005ca0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005934:	46c0      	nop			; (mov r8, r8)
 8005936:	46bd      	mov	sp, r7
 8005938:	b002      	add	sp, #8
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005948:	2317      	movs	r3, #23
 800594a:	18fb      	adds	r3, r7, r3
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2238      	movs	r2, #56	; 0x38
 8005954:	5c9b      	ldrb	r3, [r3, r2]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_TIM_PWM_ConfigChannel+0x22>
 800595a:	2302      	movs	r3, #2
 800595c:	e0ad      	b.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x17e>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2238      	movs	r2, #56	; 0x38
 8005962:	2101      	movs	r1, #1
 8005964:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b0c      	cmp	r3, #12
 800596a:	d100      	bne.n	800596e <HAL_TIM_PWM_ConfigChannel+0x32>
 800596c:	e076      	b.n	8005a5c <HAL_TIM_PWM_ConfigChannel+0x120>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b0c      	cmp	r3, #12
 8005972:	d900      	bls.n	8005976 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005974:	e095      	b.n	8005aa2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b08      	cmp	r3, #8
 800597a:	d04e      	beq.n	8005a1a <HAL_TIM_PWM_ConfigChannel+0xde>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b08      	cmp	r3, #8
 8005980:	d900      	bls.n	8005984 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005982:	e08e      	b.n	8005aa2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_TIM_PWM_ConfigChannel+0x56>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b04      	cmp	r3, #4
 800598e:	d021      	beq.n	80059d4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005990:	e087      	b.n	8005aa2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	0011      	movs	r1, r2
 800599a:	0018      	movs	r0, r3
 800599c:	f000 f9dc 	bl	8005d58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699a      	ldr	r2, [r3, #24]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2108      	movs	r1, #8
 80059ac:	430a      	orrs	r2, r1
 80059ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2104      	movs	r1, #4
 80059bc:	438a      	bics	r2, r1
 80059be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6999      	ldr	r1, [r3, #24]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	619a      	str	r2, [r3, #24]
      break;
 80059d2:	e06b      	b.n	8005aac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	0011      	movs	r1, r2
 80059dc:	0018      	movs	r0, r3
 80059de:	f000 f9f7 	bl	8005dd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699a      	ldr	r2, [r3, #24]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2180      	movs	r1, #128	; 0x80
 80059ee:	0109      	lsls	r1, r1, #4
 80059f0:	430a      	orrs	r2, r1
 80059f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4931      	ldr	r1, [pc, #196]	; (8005ac4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005a00:	400a      	ands	r2, r1
 8005a02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6999      	ldr	r1, [r3, #24]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	021a      	lsls	r2, r3, #8
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	619a      	str	r2, [r3, #24]
      break;
 8005a18:	e048      	b.n	8005aac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	0011      	movs	r1, r2
 8005a22:	0018      	movs	r0, r3
 8005a24:	f000 fa16 	bl	8005e54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	69da      	ldr	r2, [r3, #28]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2108      	movs	r1, #8
 8005a34:	430a      	orrs	r2, r1
 8005a36:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69da      	ldr	r2, [r3, #28]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2104      	movs	r1, #4
 8005a44:	438a      	bics	r2, r1
 8005a46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	69d9      	ldr	r1, [r3, #28]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	61da      	str	r2, [r3, #28]
      break;
 8005a5a:	e027      	b.n	8005aac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	0011      	movs	r1, r2
 8005a64:	0018      	movs	r0, r3
 8005a66:	f000 fa35 	bl	8005ed4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69da      	ldr	r2, [r3, #28]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2180      	movs	r1, #128	; 0x80
 8005a76:	0109      	lsls	r1, r1, #4
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69da      	ldr	r2, [r3, #28]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	490f      	ldr	r1, [pc, #60]	; (8005ac4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005a88:	400a      	ands	r2, r1
 8005a8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69d9      	ldr	r1, [r3, #28]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	021a      	lsls	r2, r3, #8
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	61da      	str	r2, [r3, #28]
      break;
 8005aa0:	e004      	b.n	8005aac <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005aa2:	2317      	movs	r3, #23
 8005aa4:	18fb      	adds	r3, r7, r3
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	701a      	strb	r2, [r3, #0]
      break;
 8005aaa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2238      	movs	r2, #56	; 0x38
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	5499      	strb	r1, [r3, r2]

  return status;
 8005ab4:	2317      	movs	r3, #23
 8005ab6:	18fb      	adds	r3, r7, r3
 8005ab8:	781b      	ldrb	r3, [r3, #0]
}
 8005aba:	0018      	movs	r0, r3
 8005abc:	46bd      	mov	sp, r7
 8005abe:	b006      	add	sp, #24
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	fffffbff 	.word	0xfffffbff

08005ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad2:	230f      	movs	r3, #15
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2238      	movs	r2, #56	; 0x38
 8005ade:	5c9b      	ldrb	r3, [r3, r2]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_TIM_ConfigClockSource+0x20>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e0bc      	b.n	8005c62 <HAL_TIM_ConfigClockSource+0x19a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2238      	movs	r2, #56	; 0x38
 8005aec:	2101      	movs	r1, #1
 8005aee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2239      	movs	r2, #57	; 0x39
 8005af4:	2102      	movs	r1, #2
 8005af6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2277      	movs	r2, #119	; 0x77
 8005b04:	4393      	bics	r3, r2
 8005b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	4a58      	ldr	r2, [pc, #352]	; (8005c6c <HAL_TIM_ConfigClockSource+0x1a4>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2280      	movs	r2, #128	; 0x80
 8005b1e:	0192      	lsls	r2, r2, #6
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d040      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0xde>
 8005b24:	2280      	movs	r2, #128	; 0x80
 8005b26:	0192      	lsls	r2, r2, #6
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d900      	bls.n	8005b2e <HAL_TIM_ConfigClockSource+0x66>
 8005b2c:	e088      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x178>
 8005b2e:	2280      	movs	r2, #128	; 0x80
 8005b30:	0152      	lsls	r2, r2, #5
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d100      	bne.n	8005b38 <HAL_TIM_ConfigClockSource+0x70>
 8005b36:	e088      	b.n	8005c4a <HAL_TIM_ConfigClockSource+0x182>
 8005b38:	2280      	movs	r2, #128	; 0x80
 8005b3a:	0152      	lsls	r2, r2, #5
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d900      	bls.n	8005b42 <HAL_TIM_ConfigClockSource+0x7a>
 8005b40:	e07e      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x178>
 8005b42:	2b70      	cmp	r3, #112	; 0x70
 8005b44:	d018      	beq.n	8005b78 <HAL_TIM_ConfigClockSource+0xb0>
 8005b46:	d900      	bls.n	8005b4a <HAL_TIM_ConfigClockSource+0x82>
 8005b48:	e07a      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x178>
 8005b4a:	2b60      	cmp	r3, #96	; 0x60
 8005b4c:	d04f      	beq.n	8005bee <HAL_TIM_ConfigClockSource+0x126>
 8005b4e:	d900      	bls.n	8005b52 <HAL_TIM_ConfigClockSource+0x8a>
 8005b50:	e076      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x178>
 8005b52:	2b50      	cmp	r3, #80	; 0x50
 8005b54:	d03b      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x106>
 8005b56:	d900      	bls.n	8005b5a <HAL_TIM_ConfigClockSource+0x92>
 8005b58:	e072      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x178>
 8005b5a:	2b40      	cmp	r3, #64	; 0x40
 8005b5c:	d057      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x146>
 8005b5e:	d900      	bls.n	8005b62 <HAL_TIM_ConfigClockSource+0x9a>
 8005b60:	e06e      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x178>
 8005b62:	2b30      	cmp	r3, #48	; 0x30
 8005b64:	d063      	beq.n	8005c2e <HAL_TIM_ConfigClockSource+0x166>
 8005b66:	d86b      	bhi.n	8005c40 <HAL_TIM_ConfigClockSource+0x178>
 8005b68:	2b20      	cmp	r3, #32
 8005b6a:	d060      	beq.n	8005c2e <HAL_TIM_ConfigClockSource+0x166>
 8005b6c:	d868      	bhi.n	8005c40 <HAL_TIM_ConfigClockSource+0x178>
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d05d      	beq.n	8005c2e <HAL_TIM_ConfigClockSource+0x166>
 8005b72:	2b10      	cmp	r3, #16
 8005b74:	d05b      	beq.n	8005c2e <HAL_TIM_ConfigClockSource+0x166>
 8005b76:	e063      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6818      	ldr	r0, [r3, #0]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	6899      	ldr	r1, [r3, #8]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f000 fa64 	bl	8006054 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2277      	movs	r2, #119	; 0x77
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	609a      	str	r2, [r3, #8]
      break;
 8005ba4:	e052      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6818      	ldr	r0, [r3, #0]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	6899      	ldr	r1, [r3, #8]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f000 fa4d 	bl	8006054 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2180      	movs	r1, #128	; 0x80
 8005bc6:	01c9      	lsls	r1, r1, #7
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	609a      	str	r2, [r3, #8]
      break;
 8005bcc:	e03e      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	6859      	ldr	r1, [r3, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	001a      	movs	r2, r3
 8005bdc:	f000 f9c0 	bl	8005f60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2150      	movs	r1, #80	; 0x50
 8005be6:	0018      	movs	r0, r3
 8005be8:	f000 fa1a 	bl	8006020 <TIM_ITRx_SetConfig>
      break;
 8005bec:	e02e      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	6859      	ldr	r1, [r3, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	001a      	movs	r2, r3
 8005bfc:	f000 f9de 	bl	8005fbc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2160      	movs	r1, #96	; 0x60
 8005c06:	0018      	movs	r0, r3
 8005c08:	f000 fa0a 	bl	8006020 <TIM_ITRx_SetConfig>
      break;
 8005c0c:	e01e      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6818      	ldr	r0, [r3, #0]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	6859      	ldr	r1, [r3, #4]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	001a      	movs	r2, r3
 8005c1c:	f000 f9a0 	bl	8005f60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2140      	movs	r1, #64	; 0x40
 8005c26:	0018      	movs	r0, r3
 8005c28:	f000 f9fa 	bl	8006020 <TIM_ITRx_SetConfig>
      break;
 8005c2c:	e00e      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	0019      	movs	r1, r3
 8005c38:	0010      	movs	r0, r2
 8005c3a:	f000 f9f1 	bl	8006020 <TIM_ITRx_SetConfig>
      break;
 8005c3e:	e005      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005c40:	230f      	movs	r3, #15
 8005c42:	18fb      	adds	r3, r7, r3
 8005c44:	2201      	movs	r2, #1
 8005c46:	701a      	strb	r2, [r3, #0]
      break;
 8005c48:	e000      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005c4a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2239      	movs	r2, #57	; 0x39
 8005c50:	2101      	movs	r1, #1
 8005c52:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2238      	movs	r2, #56	; 0x38
 8005c58:	2100      	movs	r1, #0
 8005c5a:	5499      	strb	r1, [r3, r2]

  return status;
 8005c5c:	230f      	movs	r3, #15
 8005c5e:	18fb      	adds	r3, r7, r3
 8005c60:	781b      	ldrb	r3, [r3, #0]
}
 8005c62:	0018      	movs	r0, r3
 8005c64:	46bd      	mov	sp, r7
 8005c66:	b004      	add	sp, #16
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	ffff00ff 	.word	0xffff00ff

08005c70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c78:	46c0      	nop			; (mov r8, r8)
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	b002      	add	sp, #8
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c88:	46c0      	nop			; (mov r8, r8)
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	b002      	add	sp, #8
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c98:	46c0      	nop			; (mov r8, r8)
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	b002      	add	sp, #8
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ca8:	46c0      	nop			; (mov r8, r8)
 8005caa:	46bd      	mov	sp, r7
 8005cac:	b002      	add	sp, #8
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	2380      	movs	r3, #128	; 0x80
 8005cc4:	05db      	lsls	r3, r3, #23
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d007      	beq.n	8005cda <TIM_Base_SetConfig+0x2a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a1f      	ldr	r2, [pc, #124]	; (8005d4c <TIM_Base_SetConfig+0x9c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d003      	beq.n	8005cda <TIM_Base_SetConfig+0x2a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a1e      	ldr	r2, [pc, #120]	; (8005d50 <TIM_Base_SetConfig+0xa0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d108      	bne.n	8005cec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2270      	movs	r2, #112	; 0x70
 8005cde:	4393      	bics	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	2380      	movs	r3, #128	; 0x80
 8005cf0:	05db      	lsls	r3, r3, #23
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d007      	beq.n	8005d06 <TIM_Base_SetConfig+0x56>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a14      	ldr	r2, [pc, #80]	; (8005d4c <TIM_Base_SetConfig+0x9c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_Base_SetConfig+0x56>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a13      	ldr	r2, [pc, #76]	; (8005d50 <TIM_Base_SetConfig+0xa0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d108      	bne.n	8005d18 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4a12      	ldr	r2, [pc, #72]	; (8005d54 <TIM_Base_SetConfig+0xa4>)
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2280      	movs	r2, #128	; 0x80
 8005d1c:	4393      	bics	r3, r2
 8005d1e:	001a      	movs	r2, r3
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	615a      	str	r2, [r3, #20]
}
 8005d44:	46c0      	nop			; (mov r8, r8)
 8005d46:	46bd      	mov	sp, r7
 8005d48:	b004      	add	sp, #16
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	40010800 	.word	0x40010800
 8005d50:	40011400 	.word	0x40011400
 8005d54:	fffffcff 	.word	0xfffffcff

08005d58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	2201      	movs	r2, #1
 8005d68:	4393      	bics	r3, r2
 8005d6a:	001a      	movs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2270      	movs	r2, #112	; 0x70
 8005d86:	4393      	bics	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2203      	movs	r2, #3
 8005d8e:	4393      	bics	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	4393      	bics	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	621a      	str	r2, [r3, #32]
}
 8005dc8:	46c0      	nop			; (mov r8, r8)
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	b006      	add	sp, #24
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	2210      	movs	r2, #16
 8005de0:	4393      	bics	r3, r2
 8005de2:	001a      	movs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4a13      	ldr	r2, [pc, #76]	; (8005e4c <TIM_OC2_SetConfig+0x7c>)
 8005dfe:	4013      	ands	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4a12      	ldr	r2, [pc, #72]	; (8005e50 <TIM_OC2_SetConfig+0x80>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	021b      	lsls	r3, r3, #8
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	4393      	bics	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	621a      	str	r2, [r3, #32]
}
 8005e44:	46c0      	nop			; (mov r8, r8)
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b006      	add	sp, #24
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	ffff8fff 	.word	0xffff8fff
 8005e50:	fffffcff 	.word	0xfffffcff

08005e54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	4a1a      	ldr	r2, [pc, #104]	; (8005ecc <TIM_OC3_SetConfig+0x78>)
 8005e64:	401a      	ands	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2270      	movs	r2, #112	; 0x70
 8005e80:	4393      	bics	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2203      	movs	r2, #3
 8005e88:	4393      	bics	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	4a0d      	ldr	r2, [pc, #52]	; (8005ed0 <TIM_OC3_SetConfig+0x7c>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	621a      	str	r2, [r3, #32]
}
 8005ec4:	46c0      	nop			; (mov r8, r8)
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b006      	add	sp, #24
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	fffffeff 	.word	0xfffffeff
 8005ed0:	fffffdff 	.word	0xfffffdff

08005ed4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	4a1b      	ldr	r2, [pc, #108]	; (8005f50 <TIM_OC4_SetConfig+0x7c>)
 8005ee4:	401a      	ands	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4a15      	ldr	r2, [pc, #84]	; (8005f54 <TIM_OC4_SetConfig+0x80>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4a14      	ldr	r2, [pc, #80]	; (8005f58 <TIM_OC4_SetConfig+0x84>)
 8005f08:	4013      	ands	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	021b      	lsls	r3, r3, #8
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	4a10      	ldr	r2, [pc, #64]	; (8005f5c <TIM_OC4_SetConfig+0x88>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	031b      	lsls	r3, r3, #12
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	621a      	str	r2, [r3, #32]
}
 8005f46:	46c0      	nop			; (mov r8, r8)
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	b006      	add	sp, #24
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	46c0      	nop			; (mov r8, r8)
 8005f50:	ffffefff 	.word	0xffffefff
 8005f54:	ffff8fff 	.word	0xffff8fff
 8005f58:	fffffcff 	.word	0xfffffcff
 8005f5c:	ffffdfff 	.word	0xffffdfff

08005f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	2201      	movs	r2, #1
 8005f78:	4393      	bics	r3, r2
 8005f7a:	001a      	movs	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	22f0      	movs	r2, #240	; 0xf0
 8005f8a:	4393      	bics	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	220a      	movs	r2, #10
 8005f9c:	4393      	bics	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	621a      	str	r2, [r3, #32]
}
 8005fb4:	46c0      	nop			; (mov r8, r8)
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	b006      	add	sp, #24
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	2210      	movs	r2, #16
 8005fce:	4393      	bics	r3, r2
 8005fd0:	001a      	movs	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	4a0d      	ldr	r2, [pc, #52]	; (800601c <TIM_TI2_ConfigInputStage+0x60>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	031b      	lsls	r3, r3, #12
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	22a0      	movs	r2, #160	; 0xa0
 8005ff8:	4393      	bics	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	4313      	orrs	r3, r2
 8006004:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	621a      	str	r2, [r3, #32]
}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	46bd      	mov	sp, r7
 8006016:	b006      	add	sp, #24
 8006018:	bd80      	pop	{r7, pc}
 800601a:	46c0      	nop			; (mov r8, r8)
 800601c:	ffff0fff 	.word	0xffff0fff

08006020 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2270      	movs	r2, #112	; 0x70
 8006034:	4393      	bics	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4313      	orrs	r3, r2
 800603e:	2207      	movs	r2, #7
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	609a      	str	r2, [r3, #8]
}
 800604a:	46c0      	nop			; (mov r8, r8)
 800604c:	46bd      	mov	sp, r7
 800604e:	b004      	add	sp, #16
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	4a09      	ldr	r2, [pc, #36]	; (8006090 <TIM_ETR_SetConfig+0x3c>)
 800606c:	4013      	ands	r3, r2
 800606e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	021a      	lsls	r2, r3, #8
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	431a      	orrs	r2, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4313      	orrs	r3, r2
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	609a      	str	r2, [r3, #8]
}
 8006088:	46c0      	nop			; (mov r8, r8)
 800608a:	46bd      	mov	sp, r7
 800608c:	b006      	add	sp, #24
 800608e:	bd80      	pop	{r7, pc}
 8006090:	ffff00ff 	.word	0xffff00ff

08006094 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	221f      	movs	r2, #31
 80060a4:	4013      	ands	r3, r2
 80060a6:	2201      	movs	r2, #1
 80060a8:	409a      	lsls	r2, r3
 80060aa:	0013      	movs	r3, r2
 80060ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	43d2      	mvns	r2, r2
 80060b6:	401a      	ands	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a1a      	ldr	r2, [r3, #32]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	211f      	movs	r1, #31
 80060c4:	400b      	ands	r3, r1
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	4099      	lsls	r1, r3
 80060ca:	000b      	movs	r3, r1
 80060cc:	431a      	orrs	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	621a      	str	r2, [r3, #32]
}
 80060d2:	46c0      	nop			; (mov r8, r8)
 80060d4:	46bd      	mov	sp, r7
 80060d6:	b006      	add	sp, #24
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2238      	movs	r2, #56	; 0x38
 80060ea:	5c9b      	ldrb	r3, [r3, r2]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060f0:	2302      	movs	r3, #2
 80060f2:	e042      	b.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2238      	movs	r2, #56	; 0x38
 80060f8:	2101      	movs	r1, #1
 80060fa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2239      	movs	r2, #57	; 0x39
 8006100:	2102      	movs	r1, #2
 8006102:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2270      	movs	r2, #112	; 0x70
 8006118:	4393      	bics	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	2380      	movs	r3, #128	; 0x80
 8006134:	05db      	lsls	r3, r3, #23
 8006136:	429a      	cmp	r2, r3
 8006138:	d009      	beq.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a11      	ldr	r2, [pc, #68]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d004      	beq.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a0f      	ldr	r2, [pc, #60]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d10c      	bne.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2280      	movs	r2, #128	; 0x80
 8006152:	4393      	bics	r3, r2
 8006154:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	4313      	orrs	r3, r2
 800615e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2239      	movs	r2, #57	; 0x39
 800616c:	2101      	movs	r1, #1
 800616e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2238      	movs	r2, #56	; 0x38
 8006174:	2100      	movs	r1, #0
 8006176:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	0018      	movs	r0, r3
 800617c:	46bd      	mov	sp, r7
 800617e:	b004      	add	sp, #16
 8006180:	bd80      	pop	{r7, pc}
 8006182:	46c0      	nop			; (mov r8, r8)
 8006184:	40010800 	.word	0x40010800
 8006188:	40011400 	.word	0x40011400

0800618c <__errno>:
 800618c:	4b01      	ldr	r3, [pc, #4]	; (8006194 <__errno+0x8>)
 800618e:	6818      	ldr	r0, [r3, #0]
 8006190:	4770      	bx	lr
 8006192:	46c0      	nop			; (mov r8, r8)
 8006194:	2000000c 	.word	0x2000000c

08006198 <__libc_init_array>:
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	2600      	movs	r6, #0
 800619c:	4d0c      	ldr	r5, [pc, #48]	; (80061d0 <__libc_init_array+0x38>)
 800619e:	4c0d      	ldr	r4, [pc, #52]	; (80061d4 <__libc_init_array+0x3c>)
 80061a0:	1b64      	subs	r4, r4, r5
 80061a2:	10a4      	asrs	r4, r4, #2
 80061a4:	42a6      	cmp	r6, r4
 80061a6:	d109      	bne.n	80061bc <__libc_init_array+0x24>
 80061a8:	2600      	movs	r6, #0
 80061aa:	f000 fc95 	bl	8006ad8 <_init>
 80061ae:	4d0a      	ldr	r5, [pc, #40]	; (80061d8 <__libc_init_array+0x40>)
 80061b0:	4c0a      	ldr	r4, [pc, #40]	; (80061dc <__libc_init_array+0x44>)
 80061b2:	1b64      	subs	r4, r4, r5
 80061b4:	10a4      	asrs	r4, r4, #2
 80061b6:	42a6      	cmp	r6, r4
 80061b8:	d105      	bne.n	80061c6 <__libc_init_array+0x2e>
 80061ba:	bd70      	pop	{r4, r5, r6, pc}
 80061bc:	00b3      	lsls	r3, r6, #2
 80061be:	58eb      	ldr	r3, [r5, r3]
 80061c0:	4798      	blx	r3
 80061c2:	3601      	adds	r6, #1
 80061c4:	e7ee      	b.n	80061a4 <__libc_init_array+0xc>
 80061c6:	00b3      	lsls	r3, r6, #2
 80061c8:	58eb      	ldr	r3, [r5, r3]
 80061ca:	4798      	blx	r3
 80061cc:	3601      	adds	r6, #1
 80061ce:	e7f2      	b.n	80061b6 <__libc_init_array+0x1e>
 80061d0:	08006cb4 	.word	0x08006cb4
 80061d4:	08006cb4 	.word	0x08006cb4
 80061d8:	08006cb4 	.word	0x08006cb4
 80061dc:	08006cb8 	.word	0x08006cb8

080061e0 <memset>:
 80061e0:	0003      	movs	r3, r0
 80061e2:	1882      	adds	r2, r0, r2
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d100      	bne.n	80061ea <memset+0xa>
 80061e8:	4770      	bx	lr
 80061ea:	7019      	strb	r1, [r3, #0]
 80061ec:	3301      	adds	r3, #1
 80061ee:	e7f9      	b.n	80061e4 <memset+0x4>

080061f0 <siprintf>:
 80061f0:	b40e      	push	{r1, r2, r3}
 80061f2:	b500      	push	{lr}
 80061f4:	490b      	ldr	r1, [pc, #44]	; (8006224 <siprintf+0x34>)
 80061f6:	b09c      	sub	sp, #112	; 0x70
 80061f8:	ab1d      	add	r3, sp, #116	; 0x74
 80061fa:	9002      	str	r0, [sp, #8]
 80061fc:	9006      	str	r0, [sp, #24]
 80061fe:	9107      	str	r1, [sp, #28]
 8006200:	9104      	str	r1, [sp, #16]
 8006202:	4809      	ldr	r0, [pc, #36]	; (8006228 <siprintf+0x38>)
 8006204:	4909      	ldr	r1, [pc, #36]	; (800622c <siprintf+0x3c>)
 8006206:	cb04      	ldmia	r3!, {r2}
 8006208:	9105      	str	r1, [sp, #20]
 800620a:	6800      	ldr	r0, [r0, #0]
 800620c:	a902      	add	r1, sp, #8
 800620e:	9301      	str	r3, [sp, #4]
 8006210:	f000 f870 	bl	80062f4 <_svfiprintf_r>
 8006214:	2300      	movs	r3, #0
 8006216:	9a02      	ldr	r2, [sp, #8]
 8006218:	7013      	strb	r3, [r2, #0]
 800621a:	b01c      	add	sp, #112	; 0x70
 800621c:	bc08      	pop	{r3}
 800621e:	b003      	add	sp, #12
 8006220:	4718      	bx	r3
 8006222:	46c0      	nop			; (mov r8, r8)
 8006224:	7fffffff 	.word	0x7fffffff
 8006228:	2000000c 	.word	0x2000000c
 800622c:	ffff0208 	.word	0xffff0208

08006230 <__ssputs_r>:
 8006230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006232:	688e      	ldr	r6, [r1, #8]
 8006234:	b085      	sub	sp, #20
 8006236:	0007      	movs	r7, r0
 8006238:	000c      	movs	r4, r1
 800623a:	9203      	str	r2, [sp, #12]
 800623c:	9301      	str	r3, [sp, #4]
 800623e:	429e      	cmp	r6, r3
 8006240:	d83c      	bhi.n	80062bc <__ssputs_r+0x8c>
 8006242:	2390      	movs	r3, #144	; 0x90
 8006244:	898a      	ldrh	r2, [r1, #12]
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	421a      	tst	r2, r3
 800624a:	d034      	beq.n	80062b6 <__ssputs_r+0x86>
 800624c:	2503      	movs	r5, #3
 800624e:	6909      	ldr	r1, [r1, #16]
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	1a5b      	subs	r3, r3, r1
 8006254:	9302      	str	r3, [sp, #8]
 8006256:	6963      	ldr	r3, [r4, #20]
 8006258:	9802      	ldr	r0, [sp, #8]
 800625a:	435d      	muls	r5, r3
 800625c:	0feb      	lsrs	r3, r5, #31
 800625e:	195d      	adds	r5, r3, r5
 8006260:	9b01      	ldr	r3, [sp, #4]
 8006262:	106d      	asrs	r5, r5, #1
 8006264:	3301      	adds	r3, #1
 8006266:	181b      	adds	r3, r3, r0
 8006268:	42ab      	cmp	r3, r5
 800626a:	d900      	bls.n	800626e <__ssputs_r+0x3e>
 800626c:	001d      	movs	r5, r3
 800626e:	0553      	lsls	r3, r2, #21
 8006270:	d532      	bpl.n	80062d8 <__ssputs_r+0xa8>
 8006272:	0029      	movs	r1, r5
 8006274:	0038      	movs	r0, r7
 8006276:	f000 fb31 	bl	80068dc <_malloc_r>
 800627a:	1e06      	subs	r6, r0, #0
 800627c:	d109      	bne.n	8006292 <__ssputs_r+0x62>
 800627e:	230c      	movs	r3, #12
 8006280:	603b      	str	r3, [r7, #0]
 8006282:	2340      	movs	r3, #64	; 0x40
 8006284:	2001      	movs	r0, #1
 8006286:	89a2      	ldrh	r2, [r4, #12]
 8006288:	4240      	negs	r0, r0
 800628a:	4313      	orrs	r3, r2
 800628c:	81a3      	strh	r3, [r4, #12]
 800628e:	b005      	add	sp, #20
 8006290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006292:	9a02      	ldr	r2, [sp, #8]
 8006294:	6921      	ldr	r1, [r4, #16]
 8006296:	f000 faba 	bl	800680e <memcpy>
 800629a:	89a3      	ldrh	r3, [r4, #12]
 800629c:	4a14      	ldr	r2, [pc, #80]	; (80062f0 <__ssputs_r+0xc0>)
 800629e:	401a      	ands	r2, r3
 80062a0:	2380      	movs	r3, #128	; 0x80
 80062a2:	4313      	orrs	r3, r2
 80062a4:	81a3      	strh	r3, [r4, #12]
 80062a6:	9b02      	ldr	r3, [sp, #8]
 80062a8:	6126      	str	r6, [r4, #16]
 80062aa:	18f6      	adds	r6, r6, r3
 80062ac:	6026      	str	r6, [r4, #0]
 80062ae:	6165      	str	r5, [r4, #20]
 80062b0:	9e01      	ldr	r6, [sp, #4]
 80062b2:	1aed      	subs	r5, r5, r3
 80062b4:	60a5      	str	r5, [r4, #8]
 80062b6:	9b01      	ldr	r3, [sp, #4]
 80062b8:	429e      	cmp	r6, r3
 80062ba:	d900      	bls.n	80062be <__ssputs_r+0x8e>
 80062bc:	9e01      	ldr	r6, [sp, #4]
 80062be:	0032      	movs	r2, r6
 80062c0:	9903      	ldr	r1, [sp, #12]
 80062c2:	6820      	ldr	r0, [r4, #0]
 80062c4:	f000 faac 	bl	8006820 <memmove>
 80062c8:	68a3      	ldr	r3, [r4, #8]
 80062ca:	2000      	movs	r0, #0
 80062cc:	1b9b      	subs	r3, r3, r6
 80062ce:	60a3      	str	r3, [r4, #8]
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	199e      	adds	r6, r3, r6
 80062d4:	6026      	str	r6, [r4, #0]
 80062d6:	e7da      	b.n	800628e <__ssputs_r+0x5e>
 80062d8:	002a      	movs	r2, r5
 80062da:	0038      	movs	r0, r7
 80062dc:	f000 fb5c 	bl	8006998 <_realloc_r>
 80062e0:	1e06      	subs	r6, r0, #0
 80062e2:	d1e0      	bne.n	80062a6 <__ssputs_r+0x76>
 80062e4:	0038      	movs	r0, r7
 80062e6:	6921      	ldr	r1, [r4, #16]
 80062e8:	f000 faae 	bl	8006848 <_free_r>
 80062ec:	e7c7      	b.n	800627e <__ssputs_r+0x4e>
 80062ee:	46c0      	nop			; (mov r8, r8)
 80062f0:	fffffb7f 	.word	0xfffffb7f

080062f4 <_svfiprintf_r>:
 80062f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062f6:	b0a1      	sub	sp, #132	; 0x84
 80062f8:	9003      	str	r0, [sp, #12]
 80062fa:	001d      	movs	r5, r3
 80062fc:	898b      	ldrh	r3, [r1, #12]
 80062fe:	000f      	movs	r7, r1
 8006300:	0016      	movs	r6, r2
 8006302:	061b      	lsls	r3, r3, #24
 8006304:	d511      	bpl.n	800632a <_svfiprintf_r+0x36>
 8006306:	690b      	ldr	r3, [r1, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10e      	bne.n	800632a <_svfiprintf_r+0x36>
 800630c:	2140      	movs	r1, #64	; 0x40
 800630e:	f000 fae5 	bl	80068dc <_malloc_r>
 8006312:	6038      	str	r0, [r7, #0]
 8006314:	6138      	str	r0, [r7, #16]
 8006316:	2800      	cmp	r0, #0
 8006318:	d105      	bne.n	8006326 <_svfiprintf_r+0x32>
 800631a:	230c      	movs	r3, #12
 800631c:	9a03      	ldr	r2, [sp, #12]
 800631e:	3801      	subs	r0, #1
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	b021      	add	sp, #132	; 0x84
 8006324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006326:	2340      	movs	r3, #64	; 0x40
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	2300      	movs	r3, #0
 800632c:	ac08      	add	r4, sp, #32
 800632e:	6163      	str	r3, [r4, #20]
 8006330:	3320      	adds	r3, #32
 8006332:	7663      	strb	r3, [r4, #25]
 8006334:	3310      	adds	r3, #16
 8006336:	76a3      	strb	r3, [r4, #26]
 8006338:	9507      	str	r5, [sp, #28]
 800633a:	0035      	movs	r5, r6
 800633c:	782b      	ldrb	r3, [r5, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <_svfiprintf_r+0x52>
 8006342:	2b25      	cmp	r3, #37	; 0x25
 8006344:	d147      	bne.n	80063d6 <_svfiprintf_r+0xe2>
 8006346:	1bab      	subs	r3, r5, r6
 8006348:	9305      	str	r3, [sp, #20]
 800634a:	42b5      	cmp	r5, r6
 800634c:	d00c      	beq.n	8006368 <_svfiprintf_r+0x74>
 800634e:	0032      	movs	r2, r6
 8006350:	0039      	movs	r1, r7
 8006352:	9803      	ldr	r0, [sp, #12]
 8006354:	f7ff ff6c 	bl	8006230 <__ssputs_r>
 8006358:	1c43      	adds	r3, r0, #1
 800635a:	d100      	bne.n	800635e <_svfiprintf_r+0x6a>
 800635c:	e0ae      	b.n	80064bc <_svfiprintf_r+0x1c8>
 800635e:	6962      	ldr	r2, [r4, #20]
 8006360:	9b05      	ldr	r3, [sp, #20]
 8006362:	4694      	mov	ip, r2
 8006364:	4463      	add	r3, ip
 8006366:	6163      	str	r3, [r4, #20]
 8006368:	782b      	ldrb	r3, [r5, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d100      	bne.n	8006370 <_svfiprintf_r+0x7c>
 800636e:	e0a5      	b.n	80064bc <_svfiprintf_r+0x1c8>
 8006370:	2201      	movs	r2, #1
 8006372:	2300      	movs	r3, #0
 8006374:	4252      	negs	r2, r2
 8006376:	6062      	str	r2, [r4, #4]
 8006378:	a904      	add	r1, sp, #16
 800637a:	3254      	adds	r2, #84	; 0x54
 800637c:	1852      	adds	r2, r2, r1
 800637e:	1c6e      	adds	r6, r5, #1
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	60e3      	str	r3, [r4, #12]
 8006384:	60a3      	str	r3, [r4, #8]
 8006386:	7013      	strb	r3, [r2, #0]
 8006388:	65a3      	str	r3, [r4, #88]	; 0x58
 800638a:	2205      	movs	r2, #5
 800638c:	7831      	ldrb	r1, [r6, #0]
 800638e:	4854      	ldr	r0, [pc, #336]	; (80064e0 <_svfiprintf_r+0x1ec>)
 8006390:	f000 fa32 	bl	80067f8 <memchr>
 8006394:	1c75      	adds	r5, r6, #1
 8006396:	2800      	cmp	r0, #0
 8006398:	d11f      	bne.n	80063da <_svfiprintf_r+0xe6>
 800639a:	6822      	ldr	r2, [r4, #0]
 800639c:	06d3      	lsls	r3, r2, #27
 800639e:	d504      	bpl.n	80063aa <_svfiprintf_r+0xb6>
 80063a0:	2353      	movs	r3, #83	; 0x53
 80063a2:	a904      	add	r1, sp, #16
 80063a4:	185b      	adds	r3, r3, r1
 80063a6:	2120      	movs	r1, #32
 80063a8:	7019      	strb	r1, [r3, #0]
 80063aa:	0713      	lsls	r3, r2, #28
 80063ac:	d504      	bpl.n	80063b8 <_svfiprintf_r+0xc4>
 80063ae:	2353      	movs	r3, #83	; 0x53
 80063b0:	a904      	add	r1, sp, #16
 80063b2:	185b      	adds	r3, r3, r1
 80063b4:	212b      	movs	r1, #43	; 0x2b
 80063b6:	7019      	strb	r1, [r3, #0]
 80063b8:	7833      	ldrb	r3, [r6, #0]
 80063ba:	2b2a      	cmp	r3, #42	; 0x2a
 80063bc:	d016      	beq.n	80063ec <_svfiprintf_r+0xf8>
 80063be:	0035      	movs	r5, r6
 80063c0:	2100      	movs	r1, #0
 80063c2:	200a      	movs	r0, #10
 80063c4:	68e3      	ldr	r3, [r4, #12]
 80063c6:	782a      	ldrb	r2, [r5, #0]
 80063c8:	1c6e      	adds	r6, r5, #1
 80063ca:	3a30      	subs	r2, #48	; 0x30
 80063cc:	2a09      	cmp	r2, #9
 80063ce:	d94e      	bls.n	800646e <_svfiprintf_r+0x17a>
 80063d0:	2900      	cmp	r1, #0
 80063d2:	d111      	bne.n	80063f8 <_svfiprintf_r+0x104>
 80063d4:	e017      	b.n	8006406 <_svfiprintf_r+0x112>
 80063d6:	3501      	adds	r5, #1
 80063d8:	e7b0      	b.n	800633c <_svfiprintf_r+0x48>
 80063da:	4b41      	ldr	r3, [pc, #260]	; (80064e0 <_svfiprintf_r+0x1ec>)
 80063dc:	6822      	ldr	r2, [r4, #0]
 80063de:	1ac0      	subs	r0, r0, r3
 80063e0:	2301      	movs	r3, #1
 80063e2:	4083      	lsls	r3, r0
 80063e4:	4313      	orrs	r3, r2
 80063e6:	002e      	movs	r6, r5
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	e7ce      	b.n	800638a <_svfiprintf_r+0x96>
 80063ec:	9b07      	ldr	r3, [sp, #28]
 80063ee:	1d19      	adds	r1, r3, #4
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	9107      	str	r1, [sp, #28]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	db01      	blt.n	80063fc <_svfiprintf_r+0x108>
 80063f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80063fa:	e004      	b.n	8006406 <_svfiprintf_r+0x112>
 80063fc:	425b      	negs	r3, r3
 80063fe:	60e3      	str	r3, [r4, #12]
 8006400:	2302      	movs	r3, #2
 8006402:	4313      	orrs	r3, r2
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	782b      	ldrb	r3, [r5, #0]
 8006408:	2b2e      	cmp	r3, #46	; 0x2e
 800640a:	d10a      	bne.n	8006422 <_svfiprintf_r+0x12e>
 800640c:	786b      	ldrb	r3, [r5, #1]
 800640e:	2b2a      	cmp	r3, #42	; 0x2a
 8006410:	d135      	bne.n	800647e <_svfiprintf_r+0x18a>
 8006412:	9b07      	ldr	r3, [sp, #28]
 8006414:	3502      	adds	r5, #2
 8006416:	1d1a      	adds	r2, r3, #4
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	9207      	str	r2, [sp, #28]
 800641c:	2b00      	cmp	r3, #0
 800641e:	db2b      	blt.n	8006478 <_svfiprintf_r+0x184>
 8006420:	9309      	str	r3, [sp, #36]	; 0x24
 8006422:	4e30      	ldr	r6, [pc, #192]	; (80064e4 <_svfiprintf_r+0x1f0>)
 8006424:	2203      	movs	r2, #3
 8006426:	0030      	movs	r0, r6
 8006428:	7829      	ldrb	r1, [r5, #0]
 800642a:	f000 f9e5 	bl	80067f8 <memchr>
 800642e:	2800      	cmp	r0, #0
 8006430:	d006      	beq.n	8006440 <_svfiprintf_r+0x14c>
 8006432:	2340      	movs	r3, #64	; 0x40
 8006434:	1b80      	subs	r0, r0, r6
 8006436:	4083      	lsls	r3, r0
 8006438:	6822      	ldr	r2, [r4, #0]
 800643a:	3501      	adds	r5, #1
 800643c:	4313      	orrs	r3, r2
 800643e:	6023      	str	r3, [r4, #0]
 8006440:	7829      	ldrb	r1, [r5, #0]
 8006442:	2206      	movs	r2, #6
 8006444:	4828      	ldr	r0, [pc, #160]	; (80064e8 <_svfiprintf_r+0x1f4>)
 8006446:	1c6e      	adds	r6, r5, #1
 8006448:	7621      	strb	r1, [r4, #24]
 800644a:	f000 f9d5 	bl	80067f8 <memchr>
 800644e:	2800      	cmp	r0, #0
 8006450:	d03c      	beq.n	80064cc <_svfiprintf_r+0x1d8>
 8006452:	4b26      	ldr	r3, [pc, #152]	; (80064ec <_svfiprintf_r+0x1f8>)
 8006454:	2b00      	cmp	r3, #0
 8006456:	d125      	bne.n	80064a4 <_svfiprintf_r+0x1b0>
 8006458:	2207      	movs	r2, #7
 800645a:	9b07      	ldr	r3, [sp, #28]
 800645c:	3307      	adds	r3, #7
 800645e:	4393      	bics	r3, r2
 8006460:	3308      	adds	r3, #8
 8006462:	9307      	str	r3, [sp, #28]
 8006464:	6963      	ldr	r3, [r4, #20]
 8006466:	9a04      	ldr	r2, [sp, #16]
 8006468:	189b      	adds	r3, r3, r2
 800646a:	6163      	str	r3, [r4, #20]
 800646c:	e765      	b.n	800633a <_svfiprintf_r+0x46>
 800646e:	4343      	muls	r3, r0
 8006470:	0035      	movs	r5, r6
 8006472:	2101      	movs	r1, #1
 8006474:	189b      	adds	r3, r3, r2
 8006476:	e7a6      	b.n	80063c6 <_svfiprintf_r+0xd2>
 8006478:	2301      	movs	r3, #1
 800647a:	425b      	negs	r3, r3
 800647c:	e7d0      	b.n	8006420 <_svfiprintf_r+0x12c>
 800647e:	2300      	movs	r3, #0
 8006480:	200a      	movs	r0, #10
 8006482:	001a      	movs	r2, r3
 8006484:	3501      	adds	r5, #1
 8006486:	6063      	str	r3, [r4, #4]
 8006488:	7829      	ldrb	r1, [r5, #0]
 800648a:	1c6e      	adds	r6, r5, #1
 800648c:	3930      	subs	r1, #48	; 0x30
 800648e:	2909      	cmp	r1, #9
 8006490:	d903      	bls.n	800649a <_svfiprintf_r+0x1a6>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0c5      	beq.n	8006422 <_svfiprintf_r+0x12e>
 8006496:	9209      	str	r2, [sp, #36]	; 0x24
 8006498:	e7c3      	b.n	8006422 <_svfiprintf_r+0x12e>
 800649a:	4342      	muls	r2, r0
 800649c:	0035      	movs	r5, r6
 800649e:	2301      	movs	r3, #1
 80064a0:	1852      	adds	r2, r2, r1
 80064a2:	e7f1      	b.n	8006488 <_svfiprintf_r+0x194>
 80064a4:	ab07      	add	r3, sp, #28
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	003a      	movs	r2, r7
 80064aa:	0021      	movs	r1, r4
 80064ac:	4b10      	ldr	r3, [pc, #64]	; (80064f0 <_svfiprintf_r+0x1fc>)
 80064ae:	9803      	ldr	r0, [sp, #12]
 80064b0:	e000      	b.n	80064b4 <_svfiprintf_r+0x1c0>
 80064b2:	bf00      	nop
 80064b4:	9004      	str	r0, [sp, #16]
 80064b6:	9b04      	ldr	r3, [sp, #16]
 80064b8:	3301      	adds	r3, #1
 80064ba:	d1d3      	bne.n	8006464 <_svfiprintf_r+0x170>
 80064bc:	89bb      	ldrh	r3, [r7, #12]
 80064be:	980d      	ldr	r0, [sp, #52]	; 0x34
 80064c0:	065b      	lsls	r3, r3, #25
 80064c2:	d400      	bmi.n	80064c6 <_svfiprintf_r+0x1d2>
 80064c4:	e72d      	b.n	8006322 <_svfiprintf_r+0x2e>
 80064c6:	2001      	movs	r0, #1
 80064c8:	4240      	negs	r0, r0
 80064ca:	e72a      	b.n	8006322 <_svfiprintf_r+0x2e>
 80064cc:	ab07      	add	r3, sp, #28
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	003a      	movs	r2, r7
 80064d2:	0021      	movs	r1, r4
 80064d4:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <_svfiprintf_r+0x1fc>)
 80064d6:	9803      	ldr	r0, [sp, #12]
 80064d8:	f000 f87c 	bl	80065d4 <_printf_i>
 80064dc:	e7ea      	b.n	80064b4 <_svfiprintf_r+0x1c0>
 80064de:	46c0      	nop			; (mov r8, r8)
 80064e0:	08006c79 	.word	0x08006c79
 80064e4:	08006c7f 	.word	0x08006c7f
 80064e8:	08006c83 	.word	0x08006c83
 80064ec:	00000000 	.word	0x00000000
 80064f0:	08006231 	.word	0x08006231

080064f4 <_printf_common>:
 80064f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064f6:	0015      	movs	r5, r2
 80064f8:	9301      	str	r3, [sp, #4]
 80064fa:	688a      	ldr	r2, [r1, #8]
 80064fc:	690b      	ldr	r3, [r1, #16]
 80064fe:	000c      	movs	r4, r1
 8006500:	9000      	str	r0, [sp, #0]
 8006502:	4293      	cmp	r3, r2
 8006504:	da00      	bge.n	8006508 <_printf_common+0x14>
 8006506:	0013      	movs	r3, r2
 8006508:	0022      	movs	r2, r4
 800650a:	602b      	str	r3, [r5, #0]
 800650c:	3243      	adds	r2, #67	; 0x43
 800650e:	7812      	ldrb	r2, [r2, #0]
 8006510:	2a00      	cmp	r2, #0
 8006512:	d001      	beq.n	8006518 <_printf_common+0x24>
 8006514:	3301      	adds	r3, #1
 8006516:	602b      	str	r3, [r5, #0]
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	069b      	lsls	r3, r3, #26
 800651c:	d502      	bpl.n	8006524 <_printf_common+0x30>
 800651e:	682b      	ldr	r3, [r5, #0]
 8006520:	3302      	adds	r3, #2
 8006522:	602b      	str	r3, [r5, #0]
 8006524:	6822      	ldr	r2, [r4, #0]
 8006526:	2306      	movs	r3, #6
 8006528:	0017      	movs	r7, r2
 800652a:	401f      	ands	r7, r3
 800652c:	421a      	tst	r2, r3
 800652e:	d027      	beq.n	8006580 <_printf_common+0x8c>
 8006530:	0023      	movs	r3, r4
 8006532:	3343      	adds	r3, #67	; 0x43
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	1e5a      	subs	r2, r3, #1
 8006538:	4193      	sbcs	r3, r2
 800653a:	6822      	ldr	r2, [r4, #0]
 800653c:	0692      	lsls	r2, r2, #26
 800653e:	d430      	bmi.n	80065a2 <_printf_common+0xae>
 8006540:	0022      	movs	r2, r4
 8006542:	9901      	ldr	r1, [sp, #4]
 8006544:	9800      	ldr	r0, [sp, #0]
 8006546:	9e08      	ldr	r6, [sp, #32]
 8006548:	3243      	adds	r2, #67	; 0x43
 800654a:	47b0      	blx	r6
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d025      	beq.n	800659c <_printf_common+0xa8>
 8006550:	2306      	movs	r3, #6
 8006552:	6820      	ldr	r0, [r4, #0]
 8006554:	682a      	ldr	r2, [r5, #0]
 8006556:	68e1      	ldr	r1, [r4, #12]
 8006558:	2500      	movs	r5, #0
 800655a:	4003      	ands	r3, r0
 800655c:	2b04      	cmp	r3, #4
 800655e:	d103      	bne.n	8006568 <_printf_common+0x74>
 8006560:	1a8d      	subs	r5, r1, r2
 8006562:	43eb      	mvns	r3, r5
 8006564:	17db      	asrs	r3, r3, #31
 8006566:	401d      	ands	r5, r3
 8006568:	68a3      	ldr	r3, [r4, #8]
 800656a:	6922      	ldr	r2, [r4, #16]
 800656c:	4293      	cmp	r3, r2
 800656e:	dd01      	ble.n	8006574 <_printf_common+0x80>
 8006570:	1a9b      	subs	r3, r3, r2
 8006572:	18ed      	adds	r5, r5, r3
 8006574:	2700      	movs	r7, #0
 8006576:	42bd      	cmp	r5, r7
 8006578:	d120      	bne.n	80065bc <_printf_common+0xc8>
 800657a:	2000      	movs	r0, #0
 800657c:	e010      	b.n	80065a0 <_printf_common+0xac>
 800657e:	3701      	adds	r7, #1
 8006580:	68e3      	ldr	r3, [r4, #12]
 8006582:	682a      	ldr	r2, [r5, #0]
 8006584:	1a9b      	subs	r3, r3, r2
 8006586:	42bb      	cmp	r3, r7
 8006588:	ddd2      	ble.n	8006530 <_printf_common+0x3c>
 800658a:	0022      	movs	r2, r4
 800658c:	2301      	movs	r3, #1
 800658e:	9901      	ldr	r1, [sp, #4]
 8006590:	9800      	ldr	r0, [sp, #0]
 8006592:	9e08      	ldr	r6, [sp, #32]
 8006594:	3219      	adds	r2, #25
 8006596:	47b0      	blx	r6
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d1f0      	bne.n	800657e <_printf_common+0x8a>
 800659c:	2001      	movs	r0, #1
 800659e:	4240      	negs	r0, r0
 80065a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065a2:	2030      	movs	r0, #48	; 0x30
 80065a4:	18e1      	adds	r1, r4, r3
 80065a6:	3143      	adds	r1, #67	; 0x43
 80065a8:	7008      	strb	r0, [r1, #0]
 80065aa:	0021      	movs	r1, r4
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	3145      	adds	r1, #69	; 0x45
 80065b0:	7809      	ldrb	r1, [r1, #0]
 80065b2:	18a2      	adds	r2, r4, r2
 80065b4:	3243      	adds	r2, #67	; 0x43
 80065b6:	3302      	adds	r3, #2
 80065b8:	7011      	strb	r1, [r2, #0]
 80065ba:	e7c1      	b.n	8006540 <_printf_common+0x4c>
 80065bc:	0022      	movs	r2, r4
 80065be:	2301      	movs	r3, #1
 80065c0:	9901      	ldr	r1, [sp, #4]
 80065c2:	9800      	ldr	r0, [sp, #0]
 80065c4:	9e08      	ldr	r6, [sp, #32]
 80065c6:	321a      	adds	r2, #26
 80065c8:	47b0      	blx	r6
 80065ca:	1c43      	adds	r3, r0, #1
 80065cc:	d0e6      	beq.n	800659c <_printf_common+0xa8>
 80065ce:	3701      	adds	r7, #1
 80065d0:	e7d1      	b.n	8006576 <_printf_common+0x82>
	...

080065d4 <_printf_i>:
 80065d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065d6:	b08b      	sub	sp, #44	; 0x2c
 80065d8:	9206      	str	r2, [sp, #24]
 80065da:	000a      	movs	r2, r1
 80065dc:	3243      	adds	r2, #67	; 0x43
 80065de:	9307      	str	r3, [sp, #28]
 80065e0:	9005      	str	r0, [sp, #20]
 80065e2:	9204      	str	r2, [sp, #16]
 80065e4:	7e0a      	ldrb	r2, [r1, #24]
 80065e6:	000c      	movs	r4, r1
 80065e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065ea:	2a78      	cmp	r2, #120	; 0x78
 80065ec:	d806      	bhi.n	80065fc <_printf_i+0x28>
 80065ee:	2a62      	cmp	r2, #98	; 0x62
 80065f0:	d808      	bhi.n	8006604 <_printf_i+0x30>
 80065f2:	2a00      	cmp	r2, #0
 80065f4:	d100      	bne.n	80065f8 <_printf_i+0x24>
 80065f6:	e0c0      	b.n	800677a <_printf_i+0x1a6>
 80065f8:	2a58      	cmp	r2, #88	; 0x58
 80065fa:	d052      	beq.n	80066a2 <_printf_i+0xce>
 80065fc:	0026      	movs	r6, r4
 80065fe:	3642      	adds	r6, #66	; 0x42
 8006600:	7032      	strb	r2, [r6, #0]
 8006602:	e022      	b.n	800664a <_printf_i+0x76>
 8006604:	0010      	movs	r0, r2
 8006606:	3863      	subs	r0, #99	; 0x63
 8006608:	2815      	cmp	r0, #21
 800660a:	d8f7      	bhi.n	80065fc <_printf_i+0x28>
 800660c:	f7f9 fd7c 	bl	8000108 <__gnu_thumb1_case_shi>
 8006610:	001f0016 	.word	0x001f0016
 8006614:	fff6fff6 	.word	0xfff6fff6
 8006618:	fff6fff6 	.word	0xfff6fff6
 800661c:	fff6001f 	.word	0xfff6001f
 8006620:	fff6fff6 	.word	0xfff6fff6
 8006624:	00a8fff6 	.word	0x00a8fff6
 8006628:	009a0036 	.word	0x009a0036
 800662c:	fff6fff6 	.word	0xfff6fff6
 8006630:	fff600b9 	.word	0xfff600b9
 8006634:	fff60036 	.word	0xfff60036
 8006638:	009efff6 	.word	0x009efff6
 800663c:	0026      	movs	r6, r4
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	3642      	adds	r6, #66	; 0x42
 8006642:	1d11      	adds	r1, r2, #4
 8006644:	6019      	str	r1, [r3, #0]
 8006646:	6813      	ldr	r3, [r2, #0]
 8006648:	7033      	strb	r3, [r6, #0]
 800664a:	2301      	movs	r3, #1
 800664c:	e0a7      	b.n	800679e <_printf_i+0x1ca>
 800664e:	6808      	ldr	r0, [r1, #0]
 8006650:	6819      	ldr	r1, [r3, #0]
 8006652:	1d0a      	adds	r2, r1, #4
 8006654:	0605      	lsls	r5, r0, #24
 8006656:	d50b      	bpl.n	8006670 <_printf_i+0x9c>
 8006658:	680d      	ldr	r5, [r1, #0]
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	2d00      	cmp	r5, #0
 800665e:	da03      	bge.n	8006668 <_printf_i+0x94>
 8006660:	232d      	movs	r3, #45	; 0x2d
 8006662:	9a04      	ldr	r2, [sp, #16]
 8006664:	426d      	negs	r5, r5
 8006666:	7013      	strb	r3, [r2, #0]
 8006668:	4b61      	ldr	r3, [pc, #388]	; (80067f0 <_printf_i+0x21c>)
 800666a:	270a      	movs	r7, #10
 800666c:	9303      	str	r3, [sp, #12]
 800666e:	e032      	b.n	80066d6 <_printf_i+0x102>
 8006670:	680d      	ldr	r5, [r1, #0]
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	0641      	lsls	r1, r0, #25
 8006676:	d5f1      	bpl.n	800665c <_printf_i+0x88>
 8006678:	b22d      	sxth	r5, r5
 800667a:	e7ef      	b.n	800665c <_printf_i+0x88>
 800667c:	680d      	ldr	r5, [r1, #0]
 800667e:	6819      	ldr	r1, [r3, #0]
 8006680:	1d08      	adds	r0, r1, #4
 8006682:	6018      	str	r0, [r3, #0]
 8006684:	062e      	lsls	r6, r5, #24
 8006686:	d501      	bpl.n	800668c <_printf_i+0xb8>
 8006688:	680d      	ldr	r5, [r1, #0]
 800668a:	e003      	b.n	8006694 <_printf_i+0xc0>
 800668c:	066d      	lsls	r5, r5, #25
 800668e:	d5fb      	bpl.n	8006688 <_printf_i+0xb4>
 8006690:	680d      	ldr	r5, [r1, #0]
 8006692:	b2ad      	uxth	r5, r5
 8006694:	4b56      	ldr	r3, [pc, #344]	; (80067f0 <_printf_i+0x21c>)
 8006696:	270a      	movs	r7, #10
 8006698:	9303      	str	r3, [sp, #12]
 800669a:	2a6f      	cmp	r2, #111	; 0x6f
 800669c:	d117      	bne.n	80066ce <_printf_i+0xfa>
 800669e:	2708      	movs	r7, #8
 80066a0:	e015      	b.n	80066ce <_printf_i+0xfa>
 80066a2:	3145      	adds	r1, #69	; 0x45
 80066a4:	700a      	strb	r2, [r1, #0]
 80066a6:	4a52      	ldr	r2, [pc, #328]	; (80067f0 <_printf_i+0x21c>)
 80066a8:	9203      	str	r2, [sp, #12]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	6821      	ldr	r1, [r4, #0]
 80066ae:	ca20      	ldmia	r2!, {r5}
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	0608      	lsls	r0, r1, #24
 80066b4:	d550      	bpl.n	8006758 <_printf_i+0x184>
 80066b6:	07cb      	lsls	r3, r1, #31
 80066b8:	d502      	bpl.n	80066c0 <_printf_i+0xec>
 80066ba:	2320      	movs	r3, #32
 80066bc:	4319      	orrs	r1, r3
 80066be:	6021      	str	r1, [r4, #0]
 80066c0:	2710      	movs	r7, #16
 80066c2:	2d00      	cmp	r5, #0
 80066c4:	d103      	bne.n	80066ce <_printf_i+0xfa>
 80066c6:	2320      	movs	r3, #32
 80066c8:	6822      	ldr	r2, [r4, #0]
 80066ca:	439a      	bics	r2, r3
 80066cc:	6022      	str	r2, [r4, #0]
 80066ce:	0023      	movs	r3, r4
 80066d0:	2200      	movs	r2, #0
 80066d2:	3343      	adds	r3, #67	; 0x43
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	6863      	ldr	r3, [r4, #4]
 80066d8:	60a3      	str	r3, [r4, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	db03      	blt.n	80066e6 <_printf_i+0x112>
 80066de:	2204      	movs	r2, #4
 80066e0:	6821      	ldr	r1, [r4, #0]
 80066e2:	4391      	bics	r1, r2
 80066e4:	6021      	str	r1, [r4, #0]
 80066e6:	2d00      	cmp	r5, #0
 80066e8:	d102      	bne.n	80066f0 <_printf_i+0x11c>
 80066ea:	9e04      	ldr	r6, [sp, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00c      	beq.n	800670a <_printf_i+0x136>
 80066f0:	9e04      	ldr	r6, [sp, #16]
 80066f2:	0028      	movs	r0, r5
 80066f4:	0039      	movs	r1, r7
 80066f6:	f7f9 fd97 	bl	8000228 <__aeabi_uidivmod>
 80066fa:	9b03      	ldr	r3, [sp, #12]
 80066fc:	3e01      	subs	r6, #1
 80066fe:	5c5b      	ldrb	r3, [r3, r1]
 8006700:	7033      	strb	r3, [r6, #0]
 8006702:	002b      	movs	r3, r5
 8006704:	0005      	movs	r5, r0
 8006706:	429f      	cmp	r7, r3
 8006708:	d9f3      	bls.n	80066f2 <_printf_i+0x11e>
 800670a:	2f08      	cmp	r7, #8
 800670c:	d109      	bne.n	8006722 <_printf_i+0x14e>
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	07db      	lsls	r3, r3, #31
 8006712:	d506      	bpl.n	8006722 <_printf_i+0x14e>
 8006714:	6863      	ldr	r3, [r4, #4]
 8006716:	6922      	ldr	r2, [r4, #16]
 8006718:	4293      	cmp	r3, r2
 800671a:	dc02      	bgt.n	8006722 <_printf_i+0x14e>
 800671c:	2330      	movs	r3, #48	; 0x30
 800671e:	3e01      	subs	r6, #1
 8006720:	7033      	strb	r3, [r6, #0]
 8006722:	9b04      	ldr	r3, [sp, #16]
 8006724:	1b9b      	subs	r3, r3, r6
 8006726:	6123      	str	r3, [r4, #16]
 8006728:	9b07      	ldr	r3, [sp, #28]
 800672a:	0021      	movs	r1, r4
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	9805      	ldr	r0, [sp, #20]
 8006730:	9b06      	ldr	r3, [sp, #24]
 8006732:	aa09      	add	r2, sp, #36	; 0x24
 8006734:	f7ff fede 	bl	80064f4 <_printf_common>
 8006738:	1c43      	adds	r3, r0, #1
 800673a:	d135      	bne.n	80067a8 <_printf_i+0x1d4>
 800673c:	2001      	movs	r0, #1
 800673e:	4240      	negs	r0, r0
 8006740:	b00b      	add	sp, #44	; 0x2c
 8006742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006744:	2220      	movs	r2, #32
 8006746:	6809      	ldr	r1, [r1, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	6022      	str	r2, [r4, #0]
 800674c:	0022      	movs	r2, r4
 800674e:	2178      	movs	r1, #120	; 0x78
 8006750:	3245      	adds	r2, #69	; 0x45
 8006752:	7011      	strb	r1, [r2, #0]
 8006754:	4a27      	ldr	r2, [pc, #156]	; (80067f4 <_printf_i+0x220>)
 8006756:	e7a7      	b.n	80066a8 <_printf_i+0xd4>
 8006758:	0648      	lsls	r0, r1, #25
 800675a:	d5ac      	bpl.n	80066b6 <_printf_i+0xe2>
 800675c:	b2ad      	uxth	r5, r5
 800675e:	e7aa      	b.n	80066b6 <_printf_i+0xe2>
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	680d      	ldr	r5, [r1, #0]
 8006764:	1d10      	adds	r0, r2, #4
 8006766:	6949      	ldr	r1, [r1, #20]
 8006768:	6018      	str	r0, [r3, #0]
 800676a:	6813      	ldr	r3, [r2, #0]
 800676c:	062e      	lsls	r6, r5, #24
 800676e:	d501      	bpl.n	8006774 <_printf_i+0x1a0>
 8006770:	6019      	str	r1, [r3, #0]
 8006772:	e002      	b.n	800677a <_printf_i+0x1a6>
 8006774:	066d      	lsls	r5, r5, #25
 8006776:	d5fb      	bpl.n	8006770 <_printf_i+0x19c>
 8006778:	8019      	strh	r1, [r3, #0]
 800677a:	2300      	movs	r3, #0
 800677c:	9e04      	ldr	r6, [sp, #16]
 800677e:	6123      	str	r3, [r4, #16]
 8006780:	e7d2      	b.n	8006728 <_printf_i+0x154>
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	1d11      	adds	r1, r2, #4
 8006786:	6019      	str	r1, [r3, #0]
 8006788:	6816      	ldr	r6, [r2, #0]
 800678a:	2100      	movs	r1, #0
 800678c:	0030      	movs	r0, r6
 800678e:	6862      	ldr	r2, [r4, #4]
 8006790:	f000 f832 	bl	80067f8 <memchr>
 8006794:	2800      	cmp	r0, #0
 8006796:	d001      	beq.n	800679c <_printf_i+0x1c8>
 8006798:	1b80      	subs	r0, r0, r6
 800679a:	6060      	str	r0, [r4, #4]
 800679c:	6863      	ldr	r3, [r4, #4]
 800679e:	6123      	str	r3, [r4, #16]
 80067a0:	2300      	movs	r3, #0
 80067a2:	9a04      	ldr	r2, [sp, #16]
 80067a4:	7013      	strb	r3, [r2, #0]
 80067a6:	e7bf      	b.n	8006728 <_printf_i+0x154>
 80067a8:	6923      	ldr	r3, [r4, #16]
 80067aa:	0032      	movs	r2, r6
 80067ac:	9906      	ldr	r1, [sp, #24]
 80067ae:	9805      	ldr	r0, [sp, #20]
 80067b0:	9d07      	ldr	r5, [sp, #28]
 80067b2:	47a8      	blx	r5
 80067b4:	1c43      	adds	r3, r0, #1
 80067b6:	d0c1      	beq.n	800673c <_printf_i+0x168>
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	079b      	lsls	r3, r3, #30
 80067bc:	d415      	bmi.n	80067ea <_printf_i+0x216>
 80067be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c0:	68e0      	ldr	r0, [r4, #12]
 80067c2:	4298      	cmp	r0, r3
 80067c4:	dabc      	bge.n	8006740 <_printf_i+0x16c>
 80067c6:	0018      	movs	r0, r3
 80067c8:	e7ba      	b.n	8006740 <_printf_i+0x16c>
 80067ca:	0022      	movs	r2, r4
 80067cc:	2301      	movs	r3, #1
 80067ce:	9906      	ldr	r1, [sp, #24]
 80067d0:	9805      	ldr	r0, [sp, #20]
 80067d2:	9e07      	ldr	r6, [sp, #28]
 80067d4:	3219      	adds	r2, #25
 80067d6:	47b0      	blx	r6
 80067d8:	1c43      	adds	r3, r0, #1
 80067da:	d0af      	beq.n	800673c <_printf_i+0x168>
 80067dc:	3501      	adds	r5, #1
 80067de:	68e3      	ldr	r3, [r4, #12]
 80067e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067e2:	1a9b      	subs	r3, r3, r2
 80067e4:	42ab      	cmp	r3, r5
 80067e6:	dcf0      	bgt.n	80067ca <_printf_i+0x1f6>
 80067e8:	e7e9      	b.n	80067be <_printf_i+0x1ea>
 80067ea:	2500      	movs	r5, #0
 80067ec:	e7f7      	b.n	80067de <_printf_i+0x20a>
 80067ee:	46c0      	nop			; (mov r8, r8)
 80067f0:	08006c8a 	.word	0x08006c8a
 80067f4:	08006c9b 	.word	0x08006c9b

080067f8 <memchr>:
 80067f8:	b2c9      	uxtb	r1, r1
 80067fa:	1882      	adds	r2, r0, r2
 80067fc:	4290      	cmp	r0, r2
 80067fe:	d101      	bne.n	8006804 <memchr+0xc>
 8006800:	2000      	movs	r0, #0
 8006802:	4770      	bx	lr
 8006804:	7803      	ldrb	r3, [r0, #0]
 8006806:	428b      	cmp	r3, r1
 8006808:	d0fb      	beq.n	8006802 <memchr+0xa>
 800680a:	3001      	adds	r0, #1
 800680c:	e7f6      	b.n	80067fc <memchr+0x4>

0800680e <memcpy>:
 800680e:	2300      	movs	r3, #0
 8006810:	b510      	push	{r4, lr}
 8006812:	429a      	cmp	r2, r3
 8006814:	d100      	bne.n	8006818 <memcpy+0xa>
 8006816:	bd10      	pop	{r4, pc}
 8006818:	5ccc      	ldrb	r4, [r1, r3]
 800681a:	54c4      	strb	r4, [r0, r3]
 800681c:	3301      	adds	r3, #1
 800681e:	e7f8      	b.n	8006812 <memcpy+0x4>

08006820 <memmove>:
 8006820:	b510      	push	{r4, lr}
 8006822:	4288      	cmp	r0, r1
 8006824:	d902      	bls.n	800682c <memmove+0xc>
 8006826:	188b      	adds	r3, r1, r2
 8006828:	4298      	cmp	r0, r3
 800682a:	d303      	bcc.n	8006834 <memmove+0x14>
 800682c:	2300      	movs	r3, #0
 800682e:	e007      	b.n	8006840 <memmove+0x20>
 8006830:	5c8b      	ldrb	r3, [r1, r2]
 8006832:	5483      	strb	r3, [r0, r2]
 8006834:	3a01      	subs	r2, #1
 8006836:	d2fb      	bcs.n	8006830 <memmove+0x10>
 8006838:	bd10      	pop	{r4, pc}
 800683a:	5ccc      	ldrb	r4, [r1, r3]
 800683c:	54c4      	strb	r4, [r0, r3]
 800683e:	3301      	adds	r3, #1
 8006840:	429a      	cmp	r2, r3
 8006842:	d1fa      	bne.n	800683a <memmove+0x1a>
 8006844:	e7f8      	b.n	8006838 <memmove+0x18>
	...

08006848 <_free_r>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	0005      	movs	r5, r0
 800684c:	2900      	cmp	r1, #0
 800684e:	d010      	beq.n	8006872 <_free_r+0x2a>
 8006850:	1f0c      	subs	r4, r1, #4
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	da00      	bge.n	800685a <_free_r+0x12>
 8006858:	18e4      	adds	r4, r4, r3
 800685a:	0028      	movs	r0, r5
 800685c:	f000 f8d4 	bl	8006a08 <__malloc_lock>
 8006860:	4a1d      	ldr	r2, [pc, #116]	; (80068d8 <_free_r+0x90>)
 8006862:	6813      	ldr	r3, [r2, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d105      	bne.n	8006874 <_free_r+0x2c>
 8006868:	6063      	str	r3, [r4, #4]
 800686a:	6014      	str	r4, [r2, #0]
 800686c:	0028      	movs	r0, r5
 800686e:	f000 f8d3 	bl	8006a18 <__malloc_unlock>
 8006872:	bd70      	pop	{r4, r5, r6, pc}
 8006874:	42a3      	cmp	r3, r4
 8006876:	d908      	bls.n	800688a <_free_r+0x42>
 8006878:	6821      	ldr	r1, [r4, #0]
 800687a:	1860      	adds	r0, r4, r1
 800687c:	4283      	cmp	r3, r0
 800687e:	d1f3      	bne.n	8006868 <_free_r+0x20>
 8006880:	6818      	ldr	r0, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	1841      	adds	r1, r0, r1
 8006886:	6021      	str	r1, [r4, #0]
 8006888:	e7ee      	b.n	8006868 <_free_r+0x20>
 800688a:	001a      	movs	r2, r3
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <_free_r+0x4e>
 8006892:	42a3      	cmp	r3, r4
 8006894:	d9f9      	bls.n	800688a <_free_r+0x42>
 8006896:	6811      	ldr	r1, [r2, #0]
 8006898:	1850      	adds	r0, r2, r1
 800689a:	42a0      	cmp	r0, r4
 800689c:	d10b      	bne.n	80068b6 <_free_r+0x6e>
 800689e:	6820      	ldr	r0, [r4, #0]
 80068a0:	1809      	adds	r1, r1, r0
 80068a2:	1850      	adds	r0, r2, r1
 80068a4:	6011      	str	r1, [r2, #0]
 80068a6:	4283      	cmp	r3, r0
 80068a8:	d1e0      	bne.n	800686c <_free_r+0x24>
 80068aa:	6818      	ldr	r0, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	1841      	adds	r1, r0, r1
 80068b0:	6011      	str	r1, [r2, #0]
 80068b2:	6053      	str	r3, [r2, #4]
 80068b4:	e7da      	b.n	800686c <_free_r+0x24>
 80068b6:	42a0      	cmp	r0, r4
 80068b8:	d902      	bls.n	80068c0 <_free_r+0x78>
 80068ba:	230c      	movs	r3, #12
 80068bc:	602b      	str	r3, [r5, #0]
 80068be:	e7d5      	b.n	800686c <_free_r+0x24>
 80068c0:	6821      	ldr	r1, [r4, #0]
 80068c2:	1860      	adds	r0, r4, r1
 80068c4:	4283      	cmp	r3, r0
 80068c6:	d103      	bne.n	80068d0 <_free_r+0x88>
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	1841      	adds	r1, r0, r1
 80068ce:	6021      	str	r1, [r4, #0]
 80068d0:	6063      	str	r3, [r4, #4]
 80068d2:	6054      	str	r4, [r2, #4]
 80068d4:	e7ca      	b.n	800686c <_free_r+0x24>
 80068d6:	46c0      	nop			; (mov r8, r8)
 80068d8:	20000090 	.word	0x20000090

080068dc <_malloc_r>:
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068de:	2303      	movs	r3, #3
 80068e0:	1ccd      	adds	r5, r1, #3
 80068e2:	439d      	bics	r5, r3
 80068e4:	3508      	adds	r5, #8
 80068e6:	0006      	movs	r6, r0
 80068e8:	2d0c      	cmp	r5, #12
 80068ea:	d21f      	bcs.n	800692c <_malloc_r+0x50>
 80068ec:	250c      	movs	r5, #12
 80068ee:	42a9      	cmp	r1, r5
 80068f0:	d81e      	bhi.n	8006930 <_malloc_r+0x54>
 80068f2:	0030      	movs	r0, r6
 80068f4:	f000 f888 	bl	8006a08 <__malloc_lock>
 80068f8:	4925      	ldr	r1, [pc, #148]	; (8006990 <_malloc_r+0xb4>)
 80068fa:	680a      	ldr	r2, [r1, #0]
 80068fc:	0014      	movs	r4, r2
 80068fe:	2c00      	cmp	r4, #0
 8006900:	d11a      	bne.n	8006938 <_malloc_r+0x5c>
 8006902:	4f24      	ldr	r7, [pc, #144]	; (8006994 <_malloc_r+0xb8>)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d104      	bne.n	8006914 <_malloc_r+0x38>
 800690a:	0021      	movs	r1, r4
 800690c:	0030      	movs	r0, r6
 800690e:	f000 f869 	bl	80069e4 <_sbrk_r>
 8006912:	6038      	str	r0, [r7, #0]
 8006914:	0029      	movs	r1, r5
 8006916:	0030      	movs	r0, r6
 8006918:	f000 f864 	bl	80069e4 <_sbrk_r>
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	d12b      	bne.n	8006978 <_malloc_r+0x9c>
 8006920:	230c      	movs	r3, #12
 8006922:	0030      	movs	r0, r6
 8006924:	6033      	str	r3, [r6, #0]
 8006926:	f000 f877 	bl	8006a18 <__malloc_unlock>
 800692a:	e003      	b.n	8006934 <_malloc_r+0x58>
 800692c:	2d00      	cmp	r5, #0
 800692e:	dade      	bge.n	80068ee <_malloc_r+0x12>
 8006930:	230c      	movs	r3, #12
 8006932:	6033      	str	r3, [r6, #0]
 8006934:	2000      	movs	r0, #0
 8006936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	1b5b      	subs	r3, r3, r5
 800693c:	d419      	bmi.n	8006972 <_malloc_r+0x96>
 800693e:	2b0b      	cmp	r3, #11
 8006940:	d903      	bls.n	800694a <_malloc_r+0x6e>
 8006942:	6023      	str	r3, [r4, #0]
 8006944:	18e4      	adds	r4, r4, r3
 8006946:	6025      	str	r5, [r4, #0]
 8006948:	e003      	b.n	8006952 <_malloc_r+0x76>
 800694a:	6863      	ldr	r3, [r4, #4]
 800694c:	42a2      	cmp	r2, r4
 800694e:	d10e      	bne.n	800696e <_malloc_r+0x92>
 8006950:	600b      	str	r3, [r1, #0]
 8006952:	0030      	movs	r0, r6
 8006954:	f000 f860 	bl	8006a18 <__malloc_unlock>
 8006958:	0020      	movs	r0, r4
 800695a:	2207      	movs	r2, #7
 800695c:	300b      	adds	r0, #11
 800695e:	1d23      	adds	r3, r4, #4
 8006960:	4390      	bics	r0, r2
 8006962:	1ac2      	subs	r2, r0, r3
 8006964:	4298      	cmp	r0, r3
 8006966:	d0e6      	beq.n	8006936 <_malloc_r+0x5a>
 8006968:	1a1b      	subs	r3, r3, r0
 800696a:	50a3      	str	r3, [r4, r2]
 800696c:	e7e3      	b.n	8006936 <_malloc_r+0x5a>
 800696e:	6053      	str	r3, [r2, #4]
 8006970:	e7ef      	b.n	8006952 <_malloc_r+0x76>
 8006972:	0022      	movs	r2, r4
 8006974:	6864      	ldr	r4, [r4, #4]
 8006976:	e7c2      	b.n	80068fe <_malloc_r+0x22>
 8006978:	2303      	movs	r3, #3
 800697a:	1cc4      	adds	r4, r0, #3
 800697c:	439c      	bics	r4, r3
 800697e:	42a0      	cmp	r0, r4
 8006980:	d0e1      	beq.n	8006946 <_malloc_r+0x6a>
 8006982:	1a21      	subs	r1, r4, r0
 8006984:	0030      	movs	r0, r6
 8006986:	f000 f82d 	bl	80069e4 <_sbrk_r>
 800698a:	1c43      	adds	r3, r0, #1
 800698c:	d1db      	bne.n	8006946 <_malloc_r+0x6a>
 800698e:	e7c7      	b.n	8006920 <_malloc_r+0x44>
 8006990:	20000090 	.word	0x20000090
 8006994:	20000094 	.word	0x20000094

08006998 <_realloc_r>:
 8006998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699a:	0007      	movs	r7, r0
 800699c:	000d      	movs	r5, r1
 800699e:	0016      	movs	r6, r2
 80069a0:	2900      	cmp	r1, #0
 80069a2:	d105      	bne.n	80069b0 <_realloc_r+0x18>
 80069a4:	0011      	movs	r1, r2
 80069a6:	f7ff ff99 	bl	80068dc <_malloc_r>
 80069aa:	0004      	movs	r4, r0
 80069ac:	0020      	movs	r0, r4
 80069ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069b0:	2a00      	cmp	r2, #0
 80069b2:	d103      	bne.n	80069bc <_realloc_r+0x24>
 80069b4:	f7ff ff48 	bl	8006848 <_free_r>
 80069b8:	0034      	movs	r4, r6
 80069ba:	e7f7      	b.n	80069ac <_realloc_r+0x14>
 80069bc:	f000 f834 	bl	8006a28 <_malloc_usable_size_r>
 80069c0:	002c      	movs	r4, r5
 80069c2:	42b0      	cmp	r0, r6
 80069c4:	d2f2      	bcs.n	80069ac <_realloc_r+0x14>
 80069c6:	0031      	movs	r1, r6
 80069c8:	0038      	movs	r0, r7
 80069ca:	f7ff ff87 	bl	80068dc <_malloc_r>
 80069ce:	1e04      	subs	r4, r0, #0
 80069d0:	d0ec      	beq.n	80069ac <_realloc_r+0x14>
 80069d2:	0029      	movs	r1, r5
 80069d4:	0032      	movs	r2, r6
 80069d6:	f7ff ff1a 	bl	800680e <memcpy>
 80069da:	0029      	movs	r1, r5
 80069dc:	0038      	movs	r0, r7
 80069de:	f7ff ff33 	bl	8006848 <_free_r>
 80069e2:	e7e3      	b.n	80069ac <_realloc_r+0x14>

080069e4 <_sbrk_r>:
 80069e4:	2300      	movs	r3, #0
 80069e6:	b570      	push	{r4, r5, r6, lr}
 80069e8:	4d06      	ldr	r5, [pc, #24]	; (8006a04 <_sbrk_r+0x20>)
 80069ea:	0004      	movs	r4, r0
 80069ec:	0008      	movs	r0, r1
 80069ee:	602b      	str	r3, [r5, #0]
 80069f0:	f7fc fe96 	bl	8003720 <_sbrk>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	d103      	bne.n	8006a00 <_sbrk_r+0x1c>
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d000      	beq.n	8006a00 <_sbrk_r+0x1c>
 80069fe:	6023      	str	r3, [r4, #0]
 8006a00:	bd70      	pop	{r4, r5, r6, pc}
 8006a02:	46c0      	nop			; (mov r8, r8)
 8006a04:	200001fc 	.word	0x200001fc

08006a08 <__malloc_lock>:
 8006a08:	b510      	push	{r4, lr}
 8006a0a:	4802      	ldr	r0, [pc, #8]	; (8006a14 <__malloc_lock+0xc>)
 8006a0c:	f000 f814 	bl	8006a38 <__retarget_lock_acquire_recursive>
 8006a10:	bd10      	pop	{r4, pc}
 8006a12:	46c0      	nop			; (mov r8, r8)
 8006a14:	20000204 	.word	0x20000204

08006a18 <__malloc_unlock>:
 8006a18:	b510      	push	{r4, lr}
 8006a1a:	4802      	ldr	r0, [pc, #8]	; (8006a24 <__malloc_unlock+0xc>)
 8006a1c:	f000 f80d 	bl	8006a3a <__retarget_lock_release_recursive>
 8006a20:	bd10      	pop	{r4, pc}
 8006a22:	46c0      	nop			; (mov r8, r8)
 8006a24:	20000204 	.word	0x20000204

08006a28 <_malloc_usable_size_r>:
 8006a28:	1f0b      	subs	r3, r1, #4
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	1f18      	subs	r0, r3, #4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	da01      	bge.n	8006a36 <_malloc_usable_size_r+0xe>
 8006a32:	580b      	ldr	r3, [r1, r0]
 8006a34:	18c0      	adds	r0, r0, r3
 8006a36:	4770      	bx	lr

08006a38 <__retarget_lock_acquire_recursive>:
 8006a38:	4770      	bx	lr

08006a3a <__retarget_lock_release_recursive>:
 8006a3a:	4770      	bx	lr

08006a3c <round>:
 8006a3c:	b570      	push	{r4, r5, r6, lr}
 8006a3e:	000d      	movs	r5, r1
 8006a40:	0006      	movs	r6, r0
 8006a42:	0001      	movs	r1, r0
 8006a44:	006a      	lsls	r2, r5, #1
 8006a46:	4820      	ldr	r0, [pc, #128]	; (8006ac8 <round+0x8c>)
 8006a48:	0d52      	lsrs	r2, r2, #21
 8006a4a:	1810      	adds	r0, r2, r0
 8006a4c:	2813      	cmp	r0, #19
 8006a4e:	dc18      	bgt.n	8006a82 <round+0x46>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	da09      	bge.n	8006a68 <round+0x2c>
 8006a54:	0feb      	lsrs	r3, r5, #31
 8006a56:	2200      	movs	r2, #0
 8006a58:	07db      	lsls	r3, r3, #31
 8006a5a:	1c41      	adds	r1, r0, #1
 8006a5c:	d101      	bne.n	8006a62 <round+0x26>
 8006a5e:	491b      	ldr	r1, [pc, #108]	; (8006acc <round+0x90>)
 8006a60:	430b      	orrs	r3, r1
 8006a62:	0019      	movs	r1, r3
 8006a64:	0010      	movs	r0, r2
 8006a66:	e018      	b.n	8006a9a <round+0x5e>
 8006a68:	4c19      	ldr	r4, [pc, #100]	; (8006ad0 <round+0x94>)
 8006a6a:	4104      	asrs	r4, r0
 8006a6c:	0022      	movs	r2, r4
 8006a6e:	402a      	ands	r2, r5
 8006a70:	4311      	orrs	r1, r2
 8006a72:	d014      	beq.n	8006a9e <round+0x62>
 8006a74:	2280      	movs	r2, #128	; 0x80
 8006a76:	0312      	lsls	r2, r2, #12
 8006a78:	4102      	asrs	r2, r0
 8006a7a:	1953      	adds	r3, r2, r5
 8006a7c:	43a3      	bics	r3, r4
 8006a7e:	2200      	movs	r2, #0
 8006a80:	e7ef      	b.n	8006a62 <round+0x26>
 8006a82:	2833      	cmp	r0, #51	; 0x33
 8006a84:	dd0e      	ble.n	8006aa4 <round+0x68>
 8006a86:	2380      	movs	r3, #128	; 0x80
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	4298      	cmp	r0, r3
 8006a8c:	d107      	bne.n	8006a9e <round+0x62>
 8006a8e:	0032      	movs	r2, r6
 8006a90:	002b      	movs	r3, r5
 8006a92:	0030      	movs	r0, r6
 8006a94:	0029      	movs	r1, r5
 8006a96:	f7fa fc1d 	bl	80012d4 <__aeabi_dadd>
 8006a9a:	0006      	movs	r6, r0
 8006a9c:	000d      	movs	r5, r1
 8006a9e:	0030      	movs	r0, r6
 8006aa0:	0029      	movs	r1, r5
 8006aa2:	bd70      	pop	{r4, r5, r6, pc}
 8006aa4:	4c0b      	ldr	r4, [pc, #44]	; (8006ad4 <round+0x98>)
 8006aa6:	1912      	adds	r2, r2, r4
 8006aa8:	2401      	movs	r4, #1
 8006aaa:	4264      	negs	r4, r4
 8006aac:	40d4      	lsrs	r4, r2
 8006aae:	4234      	tst	r4, r6
 8006ab0:	d0f5      	beq.n	8006a9e <round+0x62>
 8006ab2:	2233      	movs	r2, #51	; 0x33
 8006ab4:	1a10      	subs	r0, r2, r0
 8006ab6:	3a32      	subs	r2, #50	; 0x32
 8006ab8:	4082      	lsls	r2, r0
 8006aba:	1992      	adds	r2, r2, r6
 8006abc:	42b2      	cmp	r2, r6
 8006abe:	4189      	sbcs	r1, r1
 8006ac0:	4249      	negs	r1, r1
 8006ac2:	186b      	adds	r3, r5, r1
 8006ac4:	43a2      	bics	r2, r4
 8006ac6:	e7cc      	b.n	8006a62 <round+0x26>
 8006ac8:	fffffc01 	.word	0xfffffc01
 8006acc:	3ff00000 	.word	0x3ff00000
 8006ad0:	000fffff 	.word	0x000fffff
 8006ad4:	fffffbed 	.word	0xfffffbed

08006ad8 <_init>:
 8006ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ada:	46c0      	nop			; (mov r8, r8)
 8006adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ade:	bc08      	pop	{r3}
 8006ae0:	469e      	mov	lr, r3
 8006ae2:	4770      	bx	lr

08006ae4 <_fini>:
 8006ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aea:	bc08      	pop	{r3}
 8006aec:	469e      	mov	lr, r3
 8006aee:	4770      	bx	lr
