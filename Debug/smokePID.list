
smokePID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08005d84  08005d84  00015d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f38  08005f38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005f38  08005f38  00015f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f40  08005f40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f40  08005f40  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f44  08005f44  00015f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000070  08005fb8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08005fb8  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbcf  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ebb  00000000  00000000  0002bc67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002db28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002e578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012ce2  00000000  00000000  0002eed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbaf  00000000  00000000  00041bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f0bc  00000000  00000000  0004d761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bc81d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad4  00000000  00000000  000bc870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005d6c 	.word	0x08005d6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005d6c 	.word	0x08005d6c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cfrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	1c08      	adds	r0, r1, #0
 8000238:	4661      	mov	r1, ip
 800023a:	e7ff      	b.n	800023c <__aeabi_cfcmpeq>

0800023c <__aeabi_cfcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f000 fc7b 	bl	8000b38 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cfcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_fcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fbff 	bl	8000a50 <__eqsf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_fcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fc6d 	bl	8000b38 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_fcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fc63 	bl	8000b38 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_fcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fc0d 	bl	8000aa0 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_fcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 fc03 	bl	8000aa0 <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_fcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_uldivmod>:
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d111      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	d10f      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d100      	bne.n	80002b6 <__aeabi_uldivmod+0xe>
 80002b4:	2800      	cmp	r0, #0
 80002b6:	d002      	beq.n	80002be <__aeabi_uldivmod+0x16>
 80002b8:	2100      	movs	r1, #0
 80002ba:	43c9      	mvns	r1, r1
 80002bc:	1c08      	adds	r0, r1, #0
 80002be:	b407      	push	{r0, r1, r2}
 80002c0:	4802      	ldr	r0, [pc, #8]	; (80002cc <__aeabi_uldivmod+0x24>)
 80002c2:	a102      	add	r1, pc, #8	; (adr r1, 80002cc <__aeabi_uldivmod+0x24>)
 80002c4:	1840      	adds	r0, r0, r1
 80002c6:	9002      	str	r0, [sp, #8]
 80002c8:	bd03      	pop	{r0, r1, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	ffffff65 	.word	0xffffff65
 80002d0:	b403      	push	{r0, r1}
 80002d2:	4668      	mov	r0, sp
 80002d4:	b501      	push	{r0, lr}
 80002d6:	9802      	ldr	r0, [sp, #8]
 80002d8:	f000 f846 	bl	8000368 <__udivmoddi4>
 80002dc:	9b01      	ldr	r3, [sp, #4]
 80002de:	469e      	mov	lr, r3
 80002e0:	b002      	add	sp, #8
 80002e2:	bc0c      	pop	{r2, r3}
 80002e4:	4770      	bx	lr
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_lmul>:
 80002e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ea:	0415      	lsls	r5, r2, #16
 80002ec:	0c2d      	lsrs	r5, r5, #16
 80002ee:	000f      	movs	r7, r1
 80002f0:	0001      	movs	r1, r0
 80002f2:	002e      	movs	r6, r5
 80002f4:	46c6      	mov	lr, r8
 80002f6:	4684      	mov	ip, r0
 80002f8:	0400      	lsls	r0, r0, #16
 80002fa:	0c14      	lsrs	r4, r2, #16
 80002fc:	0c00      	lsrs	r0, r0, #16
 80002fe:	0c09      	lsrs	r1, r1, #16
 8000300:	4346      	muls	r6, r0
 8000302:	434d      	muls	r5, r1
 8000304:	4360      	muls	r0, r4
 8000306:	4361      	muls	r1, r4
 8000308:	1940      	adds	r0, r0, r5
 800030a:	0c34      	lsrs	r4, r6, #16
 800030c:	1824      	adds	r4, r4, r0
 800030e:	b500      	push	{lr}
 8000310:	42a5      	cmp	r5, r4
 8000312:	d903      	bls.n	800031c <__aeabi_lmul+0x34>
 8000314:	2080      	movs	r0, #128	; 0x80
 8000316:	0240      	lsls	r0, r0, #9
 8000318:	4680      	mov	r8, r0
 800031a:	4441      	add	r1, r8
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	186d      	adds	r5, r5, r1
 8000320:	4661      	mov	r1, ip
 8000322:	4359      	muls	r1, r3
 8000324:	437a      	muls	r2, r7
 8000326:	0430      	lsls	r0, r6, #16
 8000328:	1949      	adds	r1, r1, r5
 800032a:	0424      	lsls	r4, r4, #16
 800032c:	0c00      	lsrs	r0, r0, #16
 800032e:	1820      	adds	r0, r4, r0
 8000330:	1889      	adds	r1, r1, r2
 8000332:	bc80      	pop	{r7}
 8000334:	46b8      	mov	r8, r7
 8000336:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000338 <__aeabi_f2uiz>:
 8000338:	219e      	movs	r1, #158	; 0x9e
 800033a:	b510      	push	{r4, lr}
 800033c:	05c9      	lsls	r1, r1, #23
 800033e:	1c04      	adds	r4, r0, #0
 8000340:	f7ff ffa8 	bl	8000294 <__aeabi_fcmpge>
 8000344:	2800      	cmp	r0, #0
 8000346:	d103      	bne.n	8000350 <__aeabi_f2uiz+0x18>
 8000348:	1c20      	adds	r0, r4, #0
 800034a:	f000 ff21 	bl	8001190 <__aeabi_f2iz>
 800034e:	bd10      	pop	{r4, pc}
 8000350:	219e      	movs	r1, #158	; 0x9e
 8000352:	1c20      	adds	r0, r4, #0
 8000354:	05c9      	lsls	r1, r1, #23
 8000356:	f000 fd53 	bl	8000e00 <__aeabi_fsub>
 800035a:	f000 ff19 	bl	8001190 <__aeabi_f2iz>
 800035e:	2380      	movs	r3, #128	; 0x80
 8000360:	061b      	lsls	r3, r3, #24
 8000362:	469c      	mov	ip, r3
 8000364:	4460      	add	r0, ip
 8000366:	e7f2      	b.n	800034e <__aeabi_f2uiz+0x16>

08000368 <__udivmoddi4>:
 8000368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036a:	4657      	mov	r7, sl
 800036c:	464e      	mov	r6, r9
 800036e:	4645      	mov	r5, r8
 8000370:	46de      	mov	lr, fp
 8000372:	b5e0      	push	{r5, r6, r7, lr}
 8000374:	0004      	movs	r4, r0
 8000376:	000d      	movs	r5, r1
 8000378:	4692      	mov	sl, r2
 800037a:	4699      	mov	r9, r3
 800037c:	b083      	sub	sp, #12
 800037e:	428b      	cmp	r3, r1
 8000380:	d830      	bhi.n	80003e4 <__udivmoddi4+0x7c>
 8000382:	d02d      	beq.n	80003e0 <__udivmoddi4+0x78>
 8000384:	4649      	mov	r1, r9
 8000386:	4650      	mov	r0, sl
 8000388:	f001 fdce 	bl	8001f28 <__clzdi2>
 800038c:	0029      	movs	r1, r5
 800038e:	0006      	movs	r6, r0
 8000390:	0020      	movs	r0, r4
 8000392:	f001 fdc9 	bl	8001f28 <__clzdi2>
 8000396:	1a33      	subs	r3, r6, r0
 8000398:	4698      	mov	r8, r3
 800039a:	3b20      	subs	r3, #32
 800039c:	469b      	mov	fp, r3
 800039e:	d433      	bmi.n	8000408 <__udivmoddi4+0xa0>
 80003a0:	465a      	mov	r2, fp
 80003a2:	4653      	mov	r3, sl
 80003a4:	4093      	lsls	r3, r2
 80003a6:	4642      	mov	r2, r8
 80003a8:	001f      	movs	r7, r3
 80003aa:	4653      	mov	r3, sl
 80003ac:	4093      	lsls	r3, r2
 80003ae:	001e      	movs	r6, r3
 80003b0:	42af      	cmp	r7, r5
 80003b2:	d83a      	bhi.n	800042a <__udivmoddi4+0xc2>
 80003b4:	42af      	cmp	r7, r5
 80003b6:	d100      	bne.n	80003ba <__udivmoddi4+0x52>
 80003b8:	e078      	b.n	80004ac <__udivmoddi4+0x144>
 80003ba:	465b      	mov	r3, fp
 80003bc:	1ba4      	subs	r4, r4, r6
 80003be:	41bd      	sbcs	r5, r7
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	da00      	bge.n	80003c6 <__udivmoddi4+0x5e>
 80003c4:	e075      	b.n	80004b2 <__udivmoddi4+0x14a>
 80003c6:	2200      	movs	r2, #0
 80003c8:	2300      	movs	r3, #0
 80003ca:	9200      	str	r2, [sp, #0]
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	2301      	movs	r3, #1
 80003d0:	465a      	mov	r2, fp
 80003d2:	4093      	lsls	r3, r2
 80003d4:	9301      	str	r3, [sp, #4]
 80003d6:	2301      	movs	r3, #1
 80003d8:	4642      	mov	r2, r8
 80003da:	4093      	lsls	r3, r2
 80003dc:	9300      	str	r3, [sp, #0]
 80003de:	e028      	b.n	8000432 <__udivmoddi4+0xca>
 80003e0:	4282      	cmp	r2, r0
 80003e2:	d9cf      	bls.n	8000384 <__udivmoddi4+0x1c>
 80003e4:	2200      	movs	r2, #0
 80003e6:	2300      	movs	r3, #0
 80003e8:	9200      	str	r2, [sp, #0]
 80003ea:	9301      	str	r3, [sp, #4]
 80003ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <__udivmoddi4+0x8e>
 80003f2:	601c      	str	r4, [r3, #0]
 80003f4:	605d      	str	r5, [r3, #4]
 80003f6:	9800      	ldr	r0, [sp, #0]
 80003f8:	9901      	ldr	r1, [sp, #4]
 80003fa:	b003      	add	sp, #12
 80003fc:	bcf0      	pop	{r4, r5, r6, r7}
 80003fe:	46bb      	mov	fp, r7
 8000400:	46b2      	mov	sl, r6
 8000402:	46a9      	mov	r9, r5
 8000404:	46a0      	mov	r8, r4
 8000406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	4652      	mov	r2, sl
 8000410:	40da      	lsrs	r2, r3
 8000412:	4641      	mov	r1, r8
 8000414:	0013      	movs	r3, r2
 8000416:	464a      	mov	r2, r9
 8000418:	408a      	lsls	r2, r1
 800041a:	0017      	movs	r7, r2
 800041c:	4642      	mov	r2, r8
 800041e:	431f      	orrs	r7, r3
 8000420:	4653      	mov	r3, sl
 8000422:	4093      	lsls	r3, r2
 8000424:	001e      	movs	r6, r3
 8000426:	42af      	cmp	r7, r5
 8000428:	d9c4      	bls.n	80003b4 <__udivmoddi4+0x4c>
 800042a:	2200      	movs	r2, #0
 800042c:	2300      	movs	r3, #0
 800042e:	9200      	str	r2, [sp, #0]
 8000430:	9301      	str	r3, [sp, #4]
 8000432:	4643      	mov	r3, r8
 8000434:	2b00      	cmp	r3, #0
 8000436:	d0d9      	beq.n	80003ec <__udivmoddi4+0x84>
 8000438:	07fb      	lsls	r3, r7, #31
 800043a:	0872      	lsrs	r2, r6, #1
 800043c:	431a      	orrs	r2, r3
 800043e:	4646      	mov	r6, r8
 8000440:	087b      	lsrs	r3, r7, #1
 8000442:	e00e      	b.n	8000462 <__udivmoddi4+0xfa>
 8000444:	42ab      	cmp	r3, r5
 8000446:	d101      	bne.n	800044c <__udivmoddi4+0xe4>
 8000448:	42a2      	cmp	r2, r4
 800044a:	d80c      	bhi.n	8000466 <__udivmoddi4+0xfe>
 800044c:	1aa4      	subs	r4, r4, r2
 800044e:	419d      	sbcs	r5, r3
 8000450:	2001      	movs	r0, #1
 8000452:	1924      	adds	r4, r4, r4
 8000454:	416d      	adcs	r5, r5
 8000456:	2100      	movs	r1, #0
 8000458:	3e01      	subs	r6, #1
 800045a:	1824      	adds	r4, r4, r0
 800045c:	414d      	adcs	r5, r1
 800045e:	2e00      	cmp	r6, #0
 8000460:	d006      	beq.n	8000470 <__udivmoddi4+0x108>
 8000462:	42ab      	cmp	r3, r5
 8000464:	d9ee      	bls.n	8000444 <__udivmoddi4+0xdc>
 8000466:	3e01      	subs	r6, #1
 8000468:	1924      	adds	r4, r4, r4
 800046a:	416d      	adcs	r5, r5
 800046c:	2e00      	cmp	r6, #0
 800046e:	d1f8      	bne.n	8000462 <__udivmoddi4+0xfa>
 8000470:	9800      	ldr	r0, [sp, #0]
 8000472:	9901      	ldr	r1, [sp, #4]
 8000474:	465b      	mov	r3, fp
 8000476:	1900      	adds	r0, r0, r4
 8000478:	4169      	adcs	r1, r5
 800047a:	2b00      	cmp	r3, #0
 800047c:	db24      	blt.n	80004c8 <__udivmoddi4+0x160>
 800047e:	002b      	movs	r3, r5
 8000480:	465a      	mov	r2, fp
 8000482:	4644      	mov	r4, r8
 8000484:	40d3      	lsrs	r3, r2
 8000486:	002a      	movs	r2, r5
 8000488:	40e2      	lsrs	r2, r4
 800048a:	001c      	movs	r4, r3
 800048c:	465b      	mov	r3, fp
 800048e:	0015      	movs	r5, r2
 8000490:	2b00      	cmp	r3, #0
 8000492:	db2a      	blt.n	80004ea <__udivmoddi4+0x182>
 8000494:	0026      	movs	r6, r4
 8000496:	409e      	lsls	r6, r3
 8000498:	0033      	movs	r3, r6
 800049a:	0026      	movs	r6, r4
 800049c:	4647      	mov	r7, r8
 800049e:	40be      	lsls	r6, r7
 80004a0:	0032      	movs	r2, r6
 80004a2:	1a80      	subs	r0, r0, r2
 80004a4:	4199      	sbcs	r1, r3
 80004a6:	9000      	str	r0, [sp, #0]
 80004a8:	9101      	str	r1, [sp, #4]
 80004aa:	e79f      	b.n	80003ec <__udivmoddi4+0x84>
 80004ac:	42a3      	cmp	r3, r4
 80004ae:	d8bc      	bhi.n	800042a <__udivmoddi4+0xc2>
 80004b0:	e783      	b.n	80003ba <__udivmoddi4+0x52>
 80004b2:	4642      	mov	r2, r8
 80004b4:	2320      	movs	r3, #32
 80004b6:	2100      	movs	r1, #0
 80004b8:	1a9b      	subs	r3, r3, r2
 80004ba:	2200      	movs	r2, #0
 80004bc:	9100      	str	r1, [sp, #0]
 80004be:	9201      	str	r2, [sp, #4]
 80004c0:	2201      	movs	r2, #1
 80004c2:	40da      	lsrs	r2, r3
 80004c4:	9201      	str	r2, [sp, #4]
 80004c6:	e786      	b.n	80003d6 <__udivmoddi4+0x6e>
 80004c8:	4642      	mov	r2, r8
 80004ca:	2320      	movs	r3, #32
 80004cc:	1a9b      	subs	r3, r3, r2
 80004ce:	002a      	movs	r2, r5
 80004d0:	4646      	mov	r6, r8
 80004d2:	409a      	lsls	r2, r3
 80004d4:	0023      	movs	r3, r4
 80004d6:	40f3      	lsrs	r3, r6
 80004d8:	4644      	mov	r4, r8
 80004da:	4313      	orrs	r3, r2
 80004dc:	002a      	movs	r2, r5
 80004de:	40e2      	lsrs	r2, r4
 80004e0:	001c      	movs	r4, r3
 80004e2:	465b      	mov	r3, fp
 80004e4:	0015      	movs	r5, r2
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	dad4      	bge.n	8000494 <__udivmoddi4+0x12c>
 80004ea:	4642      	mov	r2, r8
 80004ec:	002f      	movs	r7, r5
 80004ee:	2320      	movs	r3, #32
 80004f0:	0026      	movs	r6, r4
 80004f2:	4097      	lsls	r7, r2
 80004f4:	1a9b      	subs	r3, r3, r2
 80004f6:	40de      	lsrs	r6, r3
 80004f8:	003b      	movs	r3, r7
 80004fa:	4333      	orrs	r3, r6
 80004fc:	e7cd      	b.n	800049a <__udivmoddi4+0x132>
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fadd>:
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	4646      	mov	r6, r8
 8000504:	46d6      	mov	lr, sl
 8000506:	464f      	mov	r7, r9
 8000508:	024d      	lsls	r5, r1, #9
 800050a:	0242      	lsls	r2, r0, #9
 800050c:	b5c0      	push	{r6, r7, lr}
 800050e:	0a52      	lsrs	r2, r2, #9
 8000510:	0a6e      	lsrs	r6, r5, #9
 8000512:	0047      	lsls	r7, r0, #1
 8000514:	46b0      	mov	r8, r6
 8000516:	0e3f      	lsrs	r7, r7, #24
 8000518:	004e      	lsls	r6, r1, #1
 800051a:	0fc4      	lsrs	r4, r0, #31
 800051c:	00d0      	lsls	r0, r2, #3
 800051e:	4694      	mov	ip, r2
 8000520:	003b      	movs	r3, r7
 8000522:	4682      	mov	sl, r0
 8000524:	0e36      	lsrs	r6, r6, #24
 8000526:	0fc9      	lsrs	r1, r1, #31
 8000528:	09ad      	lsrs	r5, r5, #6
 800052a:	428c      	cmp	r4, r1
 800052c:	d06d      	beq.n	800060a <__aeabi_fadd+0x10a>
 800052e:	1bb8      	subs	r0, r7, r6
 8000530:	4681      	mov	r9, r0
 8000532:	2800      	cmp	r0, #0
 8000534:	dd4d      	ble.n	80005d2 <__aeabi_fadd+0xd2>
 8000536:	2e00      	cmp	r6, #0
 8000538:	d100      	bne.n	800053c <__aeabi_fadd+0x3c>
 800053a:	e088      	b.n	800064e <__aeabi_fadd+0x14e>
 800053c:	2fff      	cmp	r7, #255	; 0xff
 800053e:	d05a      	beq.n	80005f6 <__aeabi_fadd+0xf6>
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	04db      	lsls	r3, r3, #19
 8000544:	431d      	orrs	r5, r3
 8000546:	464b      	mov	r3, r9
 8000548:	2201      	movs	r2, #1
 800054a:	2b1b      	cmp	r3, #27
 800054c:	dc0a      	bgt.n	8000564 <__aeabi_fadd+0x64>
 800054e:	002b      	movs	r3, r5
 8000550:	464a      	mov	r2, r9
 8000552:	4649      	mov	r1, r9
 8000554:	40d3      	lsrs	r3, r2
 8000556:	2220      	movs	r2, #32
 8000558:	1a52      	subs	r2, r2, r1
 800055a:	4095      	lsls	r5, r2
 800055c:	002a      	movs	r2, r5
 800055e:	1e55      	subs	r5, r2, #1
 8000560:	41aa      	sbcs	r2, r5
 8000562:	431a      	orrs	r2, r3
 8000564:	4653      	mov	r3, sl
 8000566:	1a9a      	subs	r2, r3, r2
 8000568:	0153      	lsls	r3, r2, #5
 800056a:	d400      	bmi.n	800056e <__aeabi_fadd+0x6e>
 800056c:	e0b9      	b.n	80006e2 <__aeabi_fadd+0x1e2>
 800056e:	0192      	lsls	r2, r2, #6
 8000570:	0996      	lsrs	r6, r2, #6
 8000572:	0030      	movs	r0, r6
 8000574:	f001 fcba 	bl	8001eec <__clzsi2>
 8000578:	3805      	subs	r0, #5
 800057a:	4086      	lsls	r6, r0
 800057c:	4287      	cmp	r7, r0
 800057e:	dd00      	ble.n	8000582 <__aeabi_fadd+0x82>
 8000580:	e0d4      	b.n	800072c <__aeabi_fadd+0x22c>
 8000582:	0033      	movs	r3, r6
 8000584:	1bc7      	subs	r7, r0, r7
 8000586:	2020      	movs	r0, #32
 8000588:	3701      	adds	r7, #1
 800058a:	40fb      	lsrs	r3, r7
 800058c:	1bc7      	subs	r7, r0, r7
 800058e:	40be      	lsls	r6, r7
 8000590:	0032      	movs	r2, r6
 8000592:	1e56      	subs	r6, r2, #1
 8000594:	41b2      	sbcs	r2, r6
 8000596:	2700      	movs	r7, #0
 8000598:	431a      	orrs	r2, r3
 800059a:	0753      	lsls	r3, r2, #29
 800059c:	d004      	beq.n	80005a8 <__aeabi_fadd+0xa8>
 800059e:	230f      	movs	r3, #15
 80005a0:	4013      	ands	r3, r2
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	d000      	beq.n	80005a8 <__aeabi_fadd+0xa8>
 80005a6:	3204      	adds	r2, #4
 80005a8:	0153      	lsls	r3, r2, #5
 80005aa:	d400      	bmi.n	80005ae <__aeabi_fadd+0xae>
 80005ac:	e09c      	b.n	80006e8 <__aeabi_fadd+0x1e8>
 80005ae:	1c7b      	adds	r3, r7, #1
 80005b0:	2ffe      	cmp	r7, #254	; 0xfe
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fadd+0xb6>
 80005b4:	e09a      	b.n	80006ec <__aeabi_fadd+0x1ec>
 80005b6:	0192      	lsls	r2, r2, #6
 80005b8:	0a52      	lsrs	r2, r2, #9
 80005ba:	4694      	mov	ip, r2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	05d8      	lsls	r0, r3, #23
 80005c0:	4663      	mov	r3, ip
 80005c2:	07e4      	lsls	r4, r4, #31
 80005c4:	4318      	orrs	r0, r3
 80005c6:	4320      	orrs	r0, r4
 80005c8:	bce0      	pop	{r5, r6, r7}
 80005ca:	46ba      	mov	sl, r7
 80005cc:	46b1      	mov	r9, r6
 80005ce:	46a8      	mov	r8, r5
 80005d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d2:	2800      	cmp	r0, #0
 80005d4:	d049      	beq.n	800066a <__aeabi_fadd+0x16a>
 80005d6:	1bf3      	subs	r3, r6, r7
 80005d8:	2f00      	cmp	r7, #0
 80005da:	d000      	beq.n	80005de <__aeabi_fadd+0xde>
 80005dc:	e0b6      	b.n	800074c <__aeabi_fadd+0x24c>
 80005de:	4652      	mov	r2, sl
 80005e0:	2a00      	cmp	r2, #0
 80005e2:	d060      	beq.n	80006a6 <__aeabi_fadd+0x1a6>
 80005e4:	3b01      	subs	r3, #1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d100      	bne.n	80005ec <__aeabi_fadd+0xec>
 80005ea:	e0fc      	b.n	80007e6 <__aeabi_fadd+0x2e6>
 80005ec:	2eff      	cmp	r6, #255	; 0xff
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fadd+0xf2>
 80005f0:	e0b4      	b.n	800075c <__aeabi_fadd+0x25c>
 80005f2:	000c      	movs	r4, r1
 80005f4:	4642      	mov	r2, r8
 80005f6:	2a00      	cmp	r2, #0
 80005f8:	d078      	beq.n	80006ec <__aeabi_fadd+0x1ec>
 80005fa:	2080      	movs	r0, #128	; 0x80
 80005fc:	03c0      	lsls	r0, r0, #15
 80005fe:	4310      	orrs	r0, r2
 8000600:	0242      	lsls	r2, r0, #9
 8000602:	0a53      	lsrs	r3, r2, #9
 8000604:	469c      	mov	ip, r3
 8000606:	23ff      	movs	r3, #255	; 0xff
 8000608:	e7d9      	b.n	80005be <__aeabi_fadd+0xbe>
 800060a:	1bb9      	subs	r1, r7, r6
 800060c:	2900      	cmp	r1, #0
 800060e:	dd71      	ble.n	80006f4 <__aeabi_fadd+0x1f4>
 8000610:	2e00      	cmp	r6, #0
 8000612:	d03f      	beq.n	8000694 <__aeabi_fadd+0x194>
 8000614:	2fff      	cmp	r7, #255	; 0xff
 8000616:	d0ee      	beq.n	80005f6 <__aeabi_fadd+0xf6>
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	04db      	lsls	r3, r3, #19
 800061c:	431d      	orrs	r5, r3
 800061e:	2201      	movs	r2, #1
 8000620:	291b      	cmp	r1, #27
 8000622:	dc07      	bgt.n	8000634 <__aeabi_fadd+0x134>
 8000624:	002a      	movs	r2, r5
 8000626:	2320      	movs	r3, #32
 8000628:	40ca      	lsrs	r2, r1
 800062a:	1a59      	subs	r1, r3, r1
 800062c:	408d      	lsls	r5, r1
 800062e:	1e6b      	subs	r3, r5, #1
 8000630:	419d      	sbcs	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	4452      	add	r2, sl
 8000636:	0153      	lsls	r3, r2, #5
 8000638:	d553      	bpl.n	80006e2 <__aeabi_fadd+0x1e2>
 800063a:	3701      	adds	r7, #1
 800063c:	2fff      	cmp	r7, #255	; 0xff
 800063e:	d055      	beq.n	80006ec <__aeabi_fadd+0x1ec>
 8000640:	2301      	movs	r3, #1
 8000642:	497b      	ldr	r1, [pc, #492]	; (8000830 <__aeabi_fadd+0x330>)
 8000644:	4013      	ands	r3, r2
 8000646:	0852      	lsrs	r2, r2, #1
 8000648:	400a      	ands	r2, r1
 800064a:	431a      	orrs	r2, r3
 800064c:	e7a5      	b.n	800059a <__aeabi_fadd+0x9a>
 800064e:	2d00      	cmp	r5, #0
 8000650:	d02c      	beq.n	80006ac <__aeabi_fadd+0x1ac>
 8000652:	2301      	movs	r3, #1
 8000654:	425b      	negs	r3, r3
 8000656:	469c      	mov	ip, r3
 8000658:	44e1      	add	r9, ip
 800065a:	464b      	mov	r3, r9
 800065c:	2b00      	cmp	r3, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0x162>
 8000660:	e0ad      	b.n	80007be <__aeabi_fadd+0x2be>
 8000662:	2fff      	cmp	r7, #255	; 0xff
 8000664:	d000      	beq.n	8000668 <__aeabi_fadd+0x168>
 8000666:	e76e      	b.n	8000546 <__aeabi_fadd+0x46>
 8000668:	e7c5      	b.n	80005f6 <__aeabi_fadd+0xf6>
 800066a:	20fe      	movs	r0, #254	; 0xfe
 800066c:	1c7e      	adds	r6, r7, #1
 800066e:	4230      	tst	r0, r6
 8000670:	d160      	bne.n	8000734 <__aeabi_fadd+0x234>
 8000672:	2f00      	cmp	r7, #0
 8000674:	d000      	beq.n	8000678 <__aeabi_fadd+0x178>
 8000676:	e093      	b.n	80007a0 <__aeabi_fadd+0x2a0>
 8000678:	4652      	mov	r2, sl
 800067a:	2a00      	cmp	r2, #0
 800067c:	d100      	bne.n	8000680 <__aeabi_fadd+0x180>
 800067e:	e0b6      	b.n	80007ee <__aeabi_fadd+0x2ee>
 8000680:	2d00      	cmp	r5, #0
 8000682:	d09c      	beq.n	80005be <__aeabi_fadd+0xbe>
 8000684:	1b52      	subs	r2, r2, r5
 8000686:	0150      	lsls	r0, r2, #5
 8000688:	d400      	bmi.n	800068c <__aeabi_fadd+0x18c>
 800068a:	e0c3      	b.n	8000814 <__aeabi_fadd+0x314>
 800068c:	4653      	mov	r3, sl
 800068e:	000c      	movs	r4, r1
 8000690:	1aea      	subs	r2, r5, r3
 8000692:	e782      	b.n	800059a <__aeabi_fadd+0x9a>
 8000694:	2d00      	cmp	r5, #0
 8000696:	d009      	beq.n	80006ac <__aeabi_fadd+0x1ac>
 8000698:	3901      	subs	r1, #1
 800069a:	2900      	cmp	r1, #0
 800069c:	d100      	bne.n	80006a0 <__aeabi_fadd+0x1a0>
 800069e:	e08b      	b.n	80007b8 <__aeabi_fadd+0x2b8>
 80006a0:	2fff      	cmp	r7, #255	; 0xff
 80006a2:	d1bc      	bne.n	800061e <__aeabi_fadd+0x11e>
 80006a4:	e7a7      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80006a6:	000c      	movs	r4, r1
 80006a8:	4642      	mov	r2, r8
 80006aa:	0037      	movs	r7, r6
 80006ac:	2fff      	cmp	r7, #255	; 0xff
 80006ae:	d0a2      	beq.n	80005f6 <__aeabi_fadd+0xf6>
 80006b0:	0252      	lsls	r2, r2, #9
 80006b2:	0a53      	lsrs	r3, r2, #9
 80006b4:	469c      	mov	ip, r3
 80006b6:	b2fb      	uxtb	r3, r7
 80006b8:	e781      	b.n	80005be <__aeabi_fadd+0xbe>
 80006ba:	21fe      	movs	r1, #254	; 0xfe
 80006bc:	3701      	adds	r7, #1
 80006be:	4239      	tst	r1, r7
 80006c0:	d165      	bne.n	800078e <__aeabi_fadd+0x28e>
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d17e      	bne.n	80007c4 <__aeabi_fadd+0x2c4>
 80006c6:	2800      	cmp	r0, #0
 80006c8:	d100      	bne.n	80006cc <__aeabi_fadd+0x1cc>
 80006ca:	e0aa      	b.n	8000822 <__aeabi_fadd+0x322>
 80006cc:	2d00      	cmp	r5, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_fadd+0x1d2>
 80006d0:	e775      	b.n	80005be <__aeabi_fadd+0xbe>
 80006d2:	002a      	movs	r2, r5
 80006d4:	4452      	add	r2, sl
 80006d6:	2700      	movs	r7, #0
 80006d8:	0153      	lsls	r3, r2, #5
 80006da:	d502      	bpl.n	80006e2 <__aeabi_fadd+0x1e2>
 80006dc:	4b55      	ldr	r3, [pc, #340]	; (8000834 <__aeabi_fadd+0x334>)
 80006de:	3701      	adds	r7, #1
 80006e0:	401a      	ands	r2, r3
 80006e2:	0753      	lsls	r3, r2, #29
 80006e4:	d000      	beq.n	80006e8 <__aeabi_fadd+0x1e8>
 80006e6:	e75a      	b.n	800059e <__aeabi_fadd+0x9e>
 80006e8:	08d2      	lsrs	r2, r2, #3
 80006ea:	e7df      	b.n	80006ac <__aeabi_fadd+0x1ac>
 80006ec:	2200      	movs	r2, #0
 80006ee:	23ff      	movs	r3, #255	; 0xff
 80006f0:	4694      	mov	ip, r2
 80006f2:	e764      	b.n	80005be <__aeabi_fadd+0xbe>
 80006f4:	2900      	cmp	r1, #0
 80006f6:	d0e0      	beq.n	80006ba <__aeabi_fadd+0x1ba>
 80006f8:	1bf3      	subs	r3, r6, r7
 80006fa:	2f00      	cmp	r7, #0
 80006fc:	d03e      	beq.n	800077c <__aeabi_fadd+0x27c>
 80006fe:	2eff      	cmp	r6, #255	; 0xff
 8000700:	d100      	bne.n	8000704 <__aeabi_fadd+0x204>
 8000702:	e777      	b.n	80005f4 <__aeabi_fadd+0xf4>
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	0001      	movs	r1, r0
 8000708:	04d2      	lsls	r2, r2, #19
 800070a:	4311      	orrs	r1, r2
 800070c:	468a      	mov	sl, r1
 800070e:	2201      	movs	r2, #1
 8000710:	2b1b      	cmp	r3, #27
 8000712:	dc08      	bgt.n	8000726 <__aeabi_fadd+0x226>
 8000714:	4652      	mov	r2, sl
 8000716:	2120      	movs	r1, #32
 8000718:	4650      	mov	r0, sl
 800071a:	40da      	lsrs	r2, r3
 800071c:	1acb      	subs	r3, r1, r3
 800071e:	4098      	lsls	r0, r3
 8000720:	1e43      	subs	r3, r0, #1
 8000722:	4198      	sbcs	r0, r3
 8000724:	4302      	orrs	r2, r0
 8000726:	0037      	movs	r7, r6
 8000728:	1952      	adds	r2, r2, r5
 800072a:	e784      	b.n	8000636 <__aeabi_fadd+0x136>
 800072c:	4a41      	ldr	r2, [pc, #260]	; (8000834 <__aeabi_fadd+0x334>)
 800072e:	1a3f      	subs	r7, r7, r0
 8000730:	4032      	ands	r2, r6
 8000732:	e732      	b.n	800059a <__aeabi_fadd+0x9a>
 8000734:	4653      	mov	r3, sl
 8000736:	1b5e      	subs	r6, r3, r5
 8000738:	0173      	lsls	r3, r6, #5
 800073a:	d42d      	bmi.n	8000798 <__aeabi_fadd+0x298>
 800073c:	2e00      	cmp	r6, #0
 800073e:	d000      	beq.n	8000742 <__aeabi_fadd+0x242>
 8000740:	e717      	b.n	8000572 <__aeabi_fadd+0x72>
 8000742:	2200      	movs	r2, #0
 8000744:	2400      	movs	r4, #0
 8000746:	2300      	movs	r3, #0
 8000748:	4694      	mov	ip, r2
 800074a:	e738      	b.n	80005be <__aeabi_fadd+0xbe>
 800074c:	2eff      	cmp	r6, #255	; 0xff
 800074e:	d100      	bne.n	8000752 <__aeabi_fadd+0x252>
 8000750:	e74f      	b.n	80005f2 <__aeabi_fadd+0xf2>
 8000752:	2280      	movs	r2, #128	; 0x80
 8000754:	4650      	mov	r0, sl
 8000756:	04d2      	lsls	r2, r2, #19
 8000758:	4310      	orrs	r0, r2
 800075a:	4682      	mov	sl, r0
 800075c:	2201      	movs	r2, #1
 800075e:	2b1b      	cmp	r3, #27
 8000760:	dc08      	bgt.n	8000774 <__aeabi_fadd+0x274>
 8000762:	4652      	mov	r2, sl
 8000764:	2420      	movs	r4, #32
 8000766:	4650      	mov	r0, sl
 8000768:	40da      	lsrs	r2, r3
 800076a:	1ae3      	subs	r3, r4, r3
 800076c:	4098      	lsls	r0, r3
 800076e:	1e43      	subs	r3, r0, #1
 8000770:	4198      	sbcs	r0, r3
 8000772:	4302      	orrs	r2, r0
 8000774:	000c      	movs	r4, r1
 8000776:	0037      	movs	r7, r6
 8000778:	1aaa      	subs	r2, r5, r2
 800077a:	e6f5      	b.n	8000568 <__aeabi_fadd+0x68>
 800077c:	2800      	cmp	r0, #0
 800077e:	d093      	beq.n	80006a8 <__aeabi_fadd+0x1a8>
 8000780:	3b01      	subs	r3, #1
 8000782:	2b00      	cmp	r3, #0
 8000784:	d04f      	beq.n	8000826 <__aeabi_fadd+0x326>
 8000786:	2eff      	cmp	r6, #255	; 0xff
 8000788:	d1c1      	bne.n	800070e <__aeabi_fadd+0x20e>
 800078a:	4642      	mov	r2, r8
 800078c:	e733      	b.n	80005f6 <__aeabi_fadd+0xf6>
 800078e:	2fff      	cmp	r7, #255	; 0xff
 8000790:	d0ac      	beq.n	80006ec <__aeabi_fadd+0x1ec>
 8000792:	4455      	add	r5, sl
 8000794:	086a      	lsrs	r2, r5, #1
 8000796:	e7a4      	b.n	80006e2 <__aeabi_fadd+0x1e2>
 8000798:	4653      	mov	r3, sl
 800079a:	000c      	movs	r4, r1
 800079c:	1aee      	subs	r6, r5, r3
 800079e:	e6e8      	b.n	8000572 <__aeabi_fadd+0x72>
 80007a0:	4653      	mov	r3, sl
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d128      	bne.n	80007f8 <__aeabi_fadd+0x2f8>
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d000      	beq.n	80007ac <__aeabi_fadd+0x2ac>
 80007aa:	e722      	b.n	80005f2 <__aeabi_fadd+0xf2>
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	03db      	lsls	r3, r3, #15
 80007b0:	469c      	mov	ip, r3
 80007b2:	2400      	movs	r4, #0
 80007b4:	23ff      	movs	r3, #255	; 0xff
 80007b6:	e702      	b.n	80005be <__aeabi_fadd+0xbe>
 80007b8:	002a      	movs	r2, r5
 80007ba:	4452      	add	r2, sl
 80007bc:	e73b      	b.n	8000636 <__aeabi_fadd+0x136>
 80007be:	4653      	mov	r3, sl
 80007c0:	1b5a      	subs	r2, r3, r5
 80007c2:	e6d1      	b.n	8000568 <__aeabi_fadd+0x68>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d100      	bne.n	80007ca <__aeabi_fadd+0x2ca>
 80007c8:	e714      	b.n	80005f4 <__aeabi_fadd+0xf4>
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x2d0>
 80007ce:	e712      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	03db      	lsls	r3, r3, #15
 80007d4:	421a      	tst	r2, r3
 80007d6:	d100      	bne.n	80007da <__aeabi_fadd+0x2da>
 80007d8:	e70d      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007da:	4641      	mov	r1, r8
 80007dc:	4219      	tst	r1, r3
 80007de:	d000      	beq.n	80007e2 <__aeabi_fadd+0x2e2>
 80007e0:	e709      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007e2:	4642      	mov	r2, r8
 80007e4:	e707      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007e6:	000c      	movs	r4, r1
 80007e8:	0037      	movs	r7, r6
 80007ea:	1aaa      	subs	r2, r5, r2
 80007ec:	e6bc      	b.n	8000568 <__aeabi_fadd+0x68>
 80007ee:	2d00      	cmp	r5, #0
 80007f0:	d013      	beq.n	800081a <__aeabi_fadd+0x31a>
 80007f2:	000c      	movs	r4, r1
 80007f4:	46c4      	mov	ip, r8
 80007f6:	e6e2      	b.n	80005be <__aeabi_fadd+0xbe>
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0x2fe>
 80007fc:	e6fb      	b.n	80005f6 <__aeabi_fadd+0xf6>
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	03db      	lsls	r3, r3, #15
 8000802:	421a      	tst	r2, r3
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x308>
 8000806:	e6f6      	b.n	80005f6 <__aeabi_fadd+0xf6>
 8000808:	4640      	mov	r0, r8
 800080a:	4218      	tst	r0, r3
 800080c:	d000      	beq.n	8000810 <__aeabi_fadd+0x310>
 800080e:	e6f2      	b.n	80005f6 <__aeabi_fadd+0xf6>
 8000810:	000c      	movs	r4, r1
 8000812:	e6ef      	b.n	80005f4 <__aeabi_fadd+0xf4>
 8000814:	2a00      	cmp	r2, #0
 8000816:	d000      	beq.n	800081a <__aeabi_fadd+0x31a>
 8000818:	e763      	b.n	80006e2 <__aeabi_fadd+0x1e2>
 800081a:	2200      	movs	r2, #0
 800081c:	2400      	movs	r4, #0
 800081e:	4694      	mov	ip, r2
 8000820:	e6cd      	b.n	80005be <__aeabi_fadd+0xbe>
 8000822:	46c4      	mov	ip, r8
 8000824:	e6cb      	b.n	80005be <__aeabi_fadd+0xbe>
 8000826:	002a      	movs	r2, r5
 8000828:	0037      	movs	r7, r6
 800082a:	4452      	add	r2, sl
 800082c:	e703      	b.n	8000636 <__aeabi_fadd+0x136>
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	7dffffff 	.word	0x7dffffff
 8000834:	fbffffff 	.word	0xfbffffff

08000838 <__aeabi_fdiv>:
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	464f      	mov	r7, r9
 800083c:	4646      	mov	r6, r8
 800083e:	46d6      	mov	lr, sl
 8000840:	0245      	lsls	r5, r0, #9
 8000842:	b5c0      	push	{r6, r7, lr}
 8000844:	0047      	lsls	r7, r0, #1
 8000846:	1c0c      	adds	r4, r1, #0
 8000848:	0a6d      	lsrs	r5, r5, #9
 800084a:	0e3f      	lsrs	r7, r7, #24
 800084c:	0fc6      	lsrs	r6, r0, #31
 800084e:	2f00      	cmp	r7, #0
 8000850:	d066      	beq.n	8000920 <__aeabi_fdiv+0xe8>
 8000852:	2fff      	cmp	r7, #255	; 0xff
 8000854:	d06c      	beq.n	8000930 <__aeabi_fdiv+0xf8>
 8000856:	2300      	movs	r3, #0
 8000858:	00ea      	lsls	r2, r5, #3
 800085a:	2580      	movs	r5, #128	; 0x80
 800085c:	4699      	mov	r9, r3
 800085e:	469a      	mov	sl, r3
 8000860:	04ed      	lsls	r5, r5, #19
 8000862:	4315      	orrs	r5, r2
 8000864:	3f7f      	subs	r7, #127	; 0x7f
 8000866:	0260      	lsls	r0, r4, #9
 8000868:	0061      	lsls	r1, r4, #1
 800086a:	0a43      	lsrs	r3, r0, #9
 800086c:	4698      	mov	r8, r3
 800086e:	0e09      	lsrs	r1, r1, #24
 8000870:	0fe4      	lsrs	r4, r4, #31
 8000872:	2900      	cmp	r1, #0
 8000874:	d048      	beq.n	8000908 <__aeabi_fdiv+0xd0>
 8000876:	29ff      	cmp	r1, #255	; 0xff
 8000878:	d010      	beq.n	800089c <__aeabi_fdiv+0x64>
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	00d8      	lsls	r0, r3, #3
 800087e:	04d2      	lsls	r2, r2, #19
 8000880:	4302      	orrs	r2, r0
 8000882:	4690      	mov	r8, r2
 8000884:	2000      	movs	r0, #0
 8000886:	397f      	subs	r1, #127	; 0x7f
 8000888:	464a      	mov	r2, r9
 800088a:	0033      	movs	r3, r6
 800088c:	1a7f      	subs	r7, r7, r1
 800088e:	4302      	orrs	r2, r0
 8000890:	496c      	ldr	r1, [pc, #432]	; (8000a44 <__aeabi_fdiv+0x20c>)
 8000892:	0092      	lsls	r2, r2, #2
 8000894:	588a      	ldr	r2, [r1, r2]
 8000896:	4063      	eors	r3, r4
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4697      	mov	pc, r2
 800089c:	2b00      	cmp	r3, #0
 800089e:	d16d      	bne.n	800097c <__aeabi_fdiv+0x144>
 80008a0:	2002      	movs	r0, #2
 80008a2:	3fff      	subs	r7, #255	; 0xff
 80008a4:	e033      	b.n	800090e <__aeabi_fdiv+0xd6>
 80008a6:	2300      	movs	r3, #0
 80008a8:	4698      	mov	r8, r3
 80008aa:	0026      	movs	r6, r4
 80008ac:	4645      	mov	r5, r8
 80008ae:	4682      	mov	sl, r0
 80008b0:	4653      	mov	r3, sl
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d100      	bne.n	80008b8 <__aeabi_fdiv+0x80>
 80008b6:	e07f      	b.n	80009b8 <__aeabi_fdiv+0x180>
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d100      	bne.n	80008be <__aeabi_fdiv+0x86>
 80008bc:	e094      	b.n	80009e8 <__aeabi_fdiv+0x1b0>
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d017      	beq.n	80008f2 <__aeabi_fdiv+0xba>
 80008c2:	0038      	movs	r0, r7
 80008c4:	307f      	adds	r0, #127	; 0x7f
 80008c6:	2800      	cmp	r0, #0
 80008c8:	dd5f      	ble.n	800098a <__aeabi_fdiv+0x152>
 80008ca:	076b      	lsls	r3, r5, #29
 80008cc:	d004      	beq.n	80008d8 <__aeabi_fdiv+0xa0>
 80008ce:	230f      	movs	r3, #15
 80008d0:	402b      	ands	r3, r5
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	d000      	beq.n	80008d8 <__aeabi_fdiv+0xa0>
 80008d6:	3504      	adds	r5, #4
 80008d8:	012b      	lsls	r3, r5, #4
 80008da:	d503      	bpl.n	80008e4 <__aeabi_fdiv+0xac>
 80008dc:	0038      	movs	r0, r7
 80008de:	4b5a      	ldr	r3, [pc, #360]	; (8000a48 <__aeabi_fdiv+0x210>)
 80008e0:	3080      	adds	r0, #128	; 0x80
 80008e2:	401d      	ands	r5, r3
 80008e4:	28fe      	cmp	r0, #254	; 0xfe
 80008e6:	dc67      	bgt.n	80009b8 <__aeabi_fdiv+0x180>
 80008e8:	01ad      	lsls	r5, r5, #6
 80008ea:	0a6d      	lsrs	r5, r5, #9
 80008ec:	b2c0      	uxtb	r0, r0
 80008ee:	e002      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80008f0:	001e      	movs	r6, r3
 80008f2:	2000      	movs	r0, #0
 80008f4:	2500      	movs	r5, #0
 80008f6:	05c0      	lsls	r0, r0, #23
 80008f8:	4328      	orrs	r0, r5
 80008fa:	07f6      	lsls	r6, r6, #31
 80008fc:	4330      	orrs	r0, r6
 80008fe:	bce0      	pop	{r5, r6, r7}
 8000900:	46ba      	mov	sl, r7
 8000902:	46b1      	mov	r9, r6
 8000904:	46a8      	mov	r8, r5
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000908:	2b00      	cmp	r3, #0
 800090a:	d12b      	bne.n	8000964 <__aeabi_fdiv+0x12c>
 800090c:	2001      	movs	r0, #1
 800090e:	464a      	mov	r2, r9
 8000910:	0033      	movs	r3, r6
 8000912:	494e      	ldr	r1, [pc, #312]	; (8000a4c <__aeabi_fdiv+0x214>)
 8000914:	4302      	orrs	r2, r0
 8000916:	0092      	lsls	r2, r2, #2
 8000918:	588a      	ldr	r2, [r1, r2]
 800091a:	4063      	eors	r3, r4
 800091c:	b2db      	uxtb	r3, r3
 800091e:	4697      	mov	pc, r2
 8000920:	2d00      	cmp	r5, #0
 8000922:	d113      	bne.n	800094c <__aeabi_fdiv+0x114>
 8000924:	2304      	movs	r3, #4
 8000926:	4699      	mov	r9, r3
 8000928:	3b03      	subs	r3, #3
 800092a:	2700      	movs	r7, #0
 800092c:	469a      	mov	sl, r3
 800092e:	e79a      	b.n	8000866 <__aeabi_fdiv+0x2e>
 8000930:	2d00      	cmp	r5, #0
 8000932:	d105      	bne.n	8000940 <__aeabi_fdiv+0x108>
 8000934:	2308      	movs	r3, #8
 8000936:	4699      	mov	r9, r3
 8000938:	3b06      	subs	r3, #6
 800093a:	27ff      	movs	r7, #255	; 0xff
 800093c:	469a      	mov	sl, r3
 800093e:	e792      	b.n	8000866 <__aeabi_fdiv+0x2e>
 8000940:	230c      	movs	r3, #12
 8000942:	4699      	mov	r9, r3
 8000944:	3b09      	subs	r3, #9
 8000946:	27ff      	movs	r7, #255	; 0xff
 8000948:	469a      	mov	sl, r3
 800094a:	e78c      	b.n	8000866 <__aeabi_fdiv+0x2e>
 800094c:	0028      	movs	r0, r5
 800094e:	f001 facd 	bl	8001eec <__clzsi2>
 8000952:	2776      	movs	r7, #118	; 0x76
 8000954:	1f43      	subs	r3, r0, #5
 8000956:	409d      	lsls	r5, r3
 8000958:	2300      	movs	r3, #0
 800095a:	427f      	negs	r7, r7
 800095c:	4699      	mov	r9, r3
 800095e:	469a      	mov	sl, r3
 8000960:	1a3f      	subs	r7, r7, r0
 8000962:	e780      	b.n	8000866 <__aeabi_fdiv+0x2e>
 8000964:	0018      	movs	r0, r3
 8000966:	f001 fac1 	bl	8001eec <__clzsi2>
 800096a:	4642      	mov	r2, r8
 800096c:	1f43      	subs	r3, r0, #5
 800096e:	2176      	movs	r1, #118	; 0x76
 8000970:	409a      	lsls	r2, r3
 8000972:	4249      	negs	r1, r1
 8000974:	1a09      	subs	r1, r1, r0
 8000976:	4690      	mov	r8, r2
 8000978:	2000      	movs	r0, #0
 800097a:	e785      	b.n	8000888 <__aeabi_fdiv+0x50>
 800097c:	21ff      	movs	r1, #255	; 0xff
 800097e:	2003      	movs	r0, #3
 8000980:	e782      	b.n	8000888 <__aeabi_fdiv+0x50>
 8000982:	001e      	movs	r6, r3
 8000984:	20ff      	movs	r0, #255	; 0xff
 8000986:	2500      	movs	r5, #0
 8000988:	e7b5      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 800098a:	2301      	movs	r3, #1
 800098c:	1a1b      	subs	r3, r3, r0
 800098e:	2b1b      	cmp	r3, #27
 8000990:	dcaf      	bgt.n	80008f2 <__aeabi_fdiv+0xba>
 8000992:	379e      	adds	r7, #158	; 0x9e
 8000994:	0029      	movs	r1, r5
 8000996:	40bd      	lsls	r5, r7
 8000998:	40d9      	lsrs	r1, r3
 800099a:	1e6a      	subs	r2, r5, #1
 800099c:	4195      	sbcs	r5, r2
 800099e:	430d      	orrs	r5, r1
 80009a0:	076b      	lsls	r3, r5, #29
 80009a2:	d004      	beq.n	80009ae <__aeabi_fdiv+0x176>
 80009a4:	230f      	movs	r3, #15
 80009a6:	402b      	ands	r3, r5
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d000      	beq.n	80009ae <__aeabi_fdiv+0x176>
 80009ac:	3504      	adds	r5, #4
 80009ae:	016b      	lsls	r3, r5, #5
 80009b0:	d544      	bpl.n	8000a3c <__aeabi_fdiv+0x204>
 80009b2:	2001      	movs	r0, #1
 80009b4:	2500      	movs	r5, #0
 80009b6:	e79e      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009b8:	20ff      	movs	r0, #255	; 0xff
 80009ba:	2500      	movs	r5, #0
 80009bc:	e79b      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009be:	2580      	movs	r5, #128	; 0x80
 80009c0:	2600      	movs	r6, #0
 80009c2:	20ff      	movs	r0, #255	; 0xff
 80009c4:	03ed      	lsls	r5, r5, #15
 80009c6:	e796      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009c8:	2300      	movs	r3, #0
 80009ca:	4698      	mov	r8, r3
 80009cc:	2080      	movs	r0, #128	; 0x80
 80009ce:	03c0      	lsls	r0, r0, #15
 80009d0:	4205      	tst	r5, r0
 80009d2:	d009      	beq.n	80009e8 <__aeabi_fdiv+0x1b0>
 80009d4:	4643      	mov	r3, r8
 80009d6:	4203      	tst	r3, r0
 80009d8:	d106      	bne.n	80009e8 <__aeabi_fdiv+0x1b0>
 80009da:	4645      	mov	r5, r8
 80009dc:	4305      	orrs	r5, r0
 80009de:	026d      	lsls	r5, r5, #9
 80009e0:	0026      	movs	r6, r4
 80009e2:	20ff      	movs	r0, #255	; 0xff
 80009e4:	0a6d      	lsrs	r5, r5, #9
 80009e6:	e786      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009e8:	2080      	movs	r0, #128	; 0x80
 80009ea:	03c0      	lsls	r0, r0, #15
 80009ec:	4305      	orrs	r5, r0
 80009ee:	026d      	lsls	r5, r5, #9
 80009f0:	20ff      	movs	r0, #255	; 0xff
 80009f2:	0a6d      	lsrs	r5, r5, #9
 80009f4:	e77f      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 80009f6:	4641      	mov	r1, r8
 80009f8:	016a      	lsls	r2, r5, #5
 80009fa:	0148      	lsls	r0, r1, #5
 80009fc:	4282      	cmp	r2, r0
 80009fe:	d219      	bcs.n	8000a34 <__aeabi_fdiv+0x1fc>
 8000a00:	211b      	movs	r1, #27
 8000a02:	2500      	movs	r5, #0
 8000a04:	3f01      	subs	r7, #1
 8000a06:	2601      	movs	r6, #1
 8000a08:	0014      	movs	r4, r2
 8000a0a:	006d      	lsls	r5, r5, #1
 8000a0c:	0052      	lsls	r2, r2, #1
 8000a0e:	2c00      	cmp	r4, #0
 8000a10:	db01      	blt.n	8000a16 <__aeabi_fdiv+0x1de>
 8000a12:	4290      	cmp	r0, r2
 8000a14:	d801      	bhi.n	8000a1a <__aeabi_fdiv+0x1e2>
 8000a16:	1a12      	subs	r2, r2, r0
 8000a18:	4335      	orrs	r5, r6
 8000a1a:	3901      	subs	r1, #1
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	d1f3      	bne.n	8000a08 <__aeabi_fdiv+0x1d0>
 8000a20:	1e50      	subs	r0, r2, #1
 8000a22:	4182      	sbcs	r2, r0
 8000a24:	0038      	movs	r0, r7
 8000a26:	307f      	adds	r0, #127	; 0x7f
 8000a28:	001e      	movs	r6, r3
 8000a2a:	4315      	orrs	r5, r2
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	dd00      	ble.n	8000a32 <__aeabi_fdiv+0x1fa>
 8000a30:	e74b      	b.n	80008ca <__aeabi_fdiv+0x92>
 8000a32:	e7aa      	b.n	800098a <__aeabi_fdiv+0x152>
 8000a34:	211a      	movs	r1, #26
 8000a36:	2501      	movs	r5, #1
 8000a38:	1a12      	subs	r2, r2, r0
 8000a3a:	e7e4      	b.n	8000a06 <__aeabi_fdiv+0x1ce>
 8000a3c:	01ad      	lsls	r5, r5, #6
 8000a3e:	2000      	movs	r0, #0
 8000a40:	0a6d      	lsrs	r5, r5, #9
 8000a42:	e758      	b.n	80008f6 <__aeabi_fdiv+0xbe>
 8000a44:	08005dac 	.word	0x08005dac
 8000a48:	f7ffffff 	.word	0xf7ffffff
 8000a4c:	08005dec 	.word	0x08005dec

08000a50 <__eqsf2>:
 8000a50:	b570      	push	{r4, r5, r6, lr}
 8000a52:	0042      	lsls	r2, r0, #1
 8000a54:	024e      	lsls	r6, r1, #9
 8000a56:	004c      	lsls	r4, r1, #1
 8000a58:	0245      	lsls	r5, r0, #9
 8000a5a:	0a6d      	lsrs	r5, r5, #9
 8000a5c:	0e12      	lsrs	r2, r2, #24
 8000a5e:	0fc3      	lsrs	r3, r0, #31
 8000a60:	0a76      	lsrs	r6, r6, #9
 8000a62:	0e24      	lsrs	r4, r4, #24
 8000a64:	0fc9      	lsrs	r1, r1, #31
 8000a66:	2aff      	cmp	r2, #255	; 0xff
 8000a68:	d00f      	beq.n	8000a8a <__eqsf2+0x3a>
 8000a6a:	2cff      	cmp	r4, #255	; 0xff
 8000a6c:	d011      	beq.n	8000a92 <__eqsf2+0x42>
 8000a6e:	2001      	movs	r0, #1
 8000a70:	42a2      	cmp	r2, r4
 8000a72:	d000      	beq.n	8000a76 <__eqsf2+0x26>
 8000a74:	bd70      	pop	{r4, r5, r6, pc}
 8000a76:	42b5      	cmp	r5, r6
 8000a78:	d1fc      	bne.n	8000a74 <__eqsf2+0x24>
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d00d      	beq.n	8000a9a <__eqsf2+0x4a>
 8000a7e:	2a00      	cmp	r2, #0
 8000a80:	d1f8      	bne.n	8000a74 <__eqsf2+0x24>
 8000a82:	0028      	movs	r0, r5
 8000a84:	1e45      	subs	r5, r0, #1
 8000a86:	41a8      	sbcs	r0, r5
 8000a88:	e7f4      	b.n	8000a74 <__eqsf2+0x24>
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	2d00      	cmp	r5, #0
 8000a8e:	d1f1      	bne.n	8000a74 <__eqsf2+0x24>
 8000a90:	e7eb      	b.n	8000a6a <__eqsf2+0x1a>
 8000a92:	2001      	movs	r0, #1
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d1ed      	bne.n	8000a74 <__eqsf2+0x24>
 8000a98:	e7e9      	b.n	8000a6e <__eqsf2+0x1e>
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	e7ea      	b.n	8000a74 <__eqsf2+0x24>
 8000a9e:	46c0      	nop			; (mov r8, r8)

08000aa0 <__gesf2>:
 8000aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa2:	0042      	lsls	r2, r0, #1
 8000aa4:	0246      	lsls	r6, r0, #9
 8000aa6:	024d      	lsls	r5, r1, #9
 8000aa8:	004c      	lsls	r4, r1, #1
 8000aaa:	0fc3      	lsrs	r3, r0, #31
 8000aac:	0a76      	lsrs	r6, r6, #9
 8000aae:	0e12      	lsrs	r2, r2, #24
 8000ab0:	0a6d      	lsrs	r5, r5, #9
 8000ab2:	0e24      	lsrs	r4, r4, #24
 8000ab4:	0fc8      	lsrs	r0, r1, #31
 8000ab6:	2aff      	cmp	r2, #255	; 0xff
 8000ab8:	d01f      	beq.n	8000afa <__gesf2+0x5a>
 8000aba:	2cff      	cmp	r4, #255	; 0xff
 8000abc:	d010      	beq.n	8000ae0 <__gesf2+0x40>
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	d11f      	bne.n	8000b02 <__gesf2+0x62>
 8000ac2:	4271      	negs	r1, r6
 8000ac4:	4171      	adcs	r1, r6
 8000ac6:	2c00      	cmp	r4, #0
 8000ac8:	d101      	bne.n	8000ace <__gesf2+0x2e>
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d01e      	beq.n	8000b0c <__gesf2+0x6c>
 8000ace:	2900      	cmp	r1, #0
 8000ad0:	d10e      	bne.n	8000af0 <__gesf2+0x50>
 8000ad2:	4283      	cmp	r3, r0
 8000ad4:	d01e      	beq.n	8000b14 <__gesf2+0x74>
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	1e58      	subs	r0, r3, #1
 8000ada:	4008      	ands	r0, r1
 8000adc:	3801      	subs	r0, #1
 8000ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae0:	2d00      	cmp	r5, #0
 8000ae2:	d126      	bne.n	8000b32 <__gesf2+0x92>
 8000ae4:	2a00      	cmp	r2, #0
 8000ae6:	d1f4      	bne.n	8000ad2 <__gesf2+0x32>
 8000ae8:	4271      	negs	r1, r6
 8000aea:	4171      	adcs	r1, r6
 8000aec:	2900      	cmp	r1, #0
 8000aee:	d0f0      	beq.n	8000ad2 <__gesf2+0x32>
 8000af0:	2800      	cmp	r0, #0
 8000af2:	d1f4      	bne.n	8000ade <__gesf2+0x3e>
 8000af4:	2001      	movs	r0, #1
 8000af6:	4240      	negs	r0, r0
 8000af8:	e7f1      	b.n	8000ade <__gesf2+0x3e>
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d119      	bne.n	8000b32 <__gesf2+0x92>
 8000afe:	2cff      	cmp	r4, #255	; 0xff
 8000b00:	d0ee      	beq.n	8000ae0 <__gesf2+0x40>
 8000b02:	2c00      	cmp	r4, #0
 8000b04:	d1e5      	bne.n	8000ad2 <__gesf2+0x32>
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	d1e3      	bne.n	8000ad2 <__gesf2+0x32>
 8000b0a:	e7e4      	b.n	8000ad6 <__gesf2+0x36>
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d0e5      	beq.n	8000ade <__gesf2+0x3e>
 8000b12:	e7e0      	b.n	8000ad6 <__gesf2+0x36>
 8000b14:	42a2      	cmp	r2, r4
 8000b16:	dc05      	bgt.n	8000b24 <__gesf2+0x84>
 8000b18:	dbea      	blt.n	8000af0 <__gesf2+0x50>
 8000b1a:	42ae      	cmp	r6, r5
 8000b1c:	d802      	bhi.n	8000b24 <__gesf2+0x84>
 8000b1e:	d3e7      	bcc.n	8000af0 <__gesf2+0x50>
 8000b20:	2000      	movs	r0, #0
 8000b22:	e7dc      	b.n	8000ade <__gesf2+0x3e>
 8000b24:	4241      	negs	r1, r0
 8000b26:	4141      	adcs	r1, r0
 8000b28:	4248      	negs	r0, r1
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	4008      	ands	r0, r1
 8000b2e:	3801      	subs	r0, #1
 8000b30:	e7d5      	b.n	8000ade <__gesf2+0x3e>
 8000b32:	2002      	movs	r0, #2
 8000b34:	4240      	negs	r0, r0
 8000b36:	e7d2      	b.n	8000ade <__gesf2+0x3e>

08000b38 <__lesf2>:
 8000b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3a:	0042      	lsls	r2, r0, #1
 8000b3c:	0246      	lsls	r6, r0, #9
 8000b3e:	024d      	lsls	r5, r1, #9
 8000b40:	004c      	lsls	r4, r1, #1
 8000b42:	0fc3      	lsrs	r3, r0, #31
 8000b44:	0a76      	lsrs	r6, r6, #9
 8000b46:	0e12      	lsrs	r2, r2, #24
 8000b48:	0a6d      	lsrs	r5, r5, #9
 8000b4a:	0e24      	lsrs	r4, r4, #24
 8000b4c:	0fc8      	lsrs	r0, r1, #31
 8000b4e:	2aff      	cmp	r2, #255	; 0xff
 8000b50:	d00d      	beq.n	8000b6e <__lesf2+0x36>
 8000b52:	2cff      	cmp	r4, #255	; 0xff
 8000b54:	d00f      	beq.n	8000b76 <__lesf2+0x3e>
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	d123      	bne.n	8000ba2 <__lesf2+0x6a>
 8000b5a:	4271      	negs	r1, r6
 8000b5c:	4171      	adcs	r1, r6
 8000b5e:	2c00      	cmp	r4, #0
 8000b60:	d10f      	bne.n	8000b82 <__lesf2+0x4a>
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d10d      	bne.n	8000b82 <__lesf2+0x4a>
 8000b66:	2000      	movs	r0, #0
 8000b68:	2e00      	cmp	r6, #0
 8000b6a:	d014      	beq.n	8000b96 <__lesf2+0x5e>
 8000b6c:	e00d      	b.n	8000b8a <__lesf2+0x52>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d110      	bne.n	8000b94 <__lesf2+0x5c>
 8000b72:	2cff      	cmp	r4, #255	; 0xff
 8000b74:	d115      	bne.n	8000ba2 <__lesf2+0x6a>
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	d10c      	bne.n	8000b94 <__lesf2+0x5c>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	d103      	bne.n	8000b86 <__lesf2+0x4e>
 8000b7e:	4271      	negs	r1, r6
 8000b80:	4171      	adcs	r1, r6
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d108      	bne.n	8000b98 <__lesf2+0x60>
 8000b86:	4283      	cmp	r3, r0
 8000b88:	d010      	beq.n	8000bac <__lesf2+0x74>
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	1e58      	subs	r0, r3, #1
 8000b8e:	4008      	ands	r0, r1
 8000b90:	3801      	subs	r0, #1
 8000b92:	e000      	b.n	8000b96 <__lesf2+0x5e>
 8000b94:	2002      	movs	r0, #2
 8000b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b98:	2800      	cmp	r0, #0
 8000b9a:	d1fc      	bne.n	8000b96 <__lesf2+0x5e>
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	4240      	negs	r0, r0
 8000ba0:	e7f9      	b.n	8000b96 <__lesf2+0x5e>
 8000ba2:	2c00      	cmp	r4, #0
 8000ba4:	d1ef      	bne.n	8000b86 <__lesf2+0x4e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d1ed      	bne.n	8000b86 <__lesf2+0x4e>
 8000baa:	e7ee      	b.n	8000b8a <__lesf2+0x52>
 8000bac:	42a2      	cmp	r2, r4
 8000bae:	dc05      	bgt.n	8000bbc <__lesf2+0x84>
 8000bb0:	dbf2      	blt.n	8000b98 <__lesf2+0x60>
 8000bb2:	42ae      	cmp	r6, r5
 8000bb4:	d802      	bhi.n	8000bbc <__lesf2+0x84>
 8000bb6:	d3ef      	bcc.n	8000b98 <__lesf2+0x60>
 8000bb8:	2000      	movs	r0, #0
 8000bba:	e7ec      	b.n	8000b96 <__lesf2+0x5e>
 8000bbc:	4241      	negs	r1, r0
 8000bbe:	4141      	adcs	r1, r0
 8000bc0:	4248      	negs	r0, r1
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	4008      	ands	r0, r1
 8000bc6:	3801      	subs	r0, #1
 8000bc8:	e7e5      	b.n	8000b96 <__lesf2+0x5e>
 8000bca:	46c0      	nop			; (mov r8, r8)

08000bcc <__aeabi_fmul>:
 8000bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bce:	4657      	mov	r7, sl
 8000bd0:	464e      	mov	r6, r9
 8000bd2:	4645      	mov	r5, r8
 8000bd4:	46de      	mov	lr, fp
 8000bd6:	0244      	lsls	r4, r0, #9
 8000bd8:	b5e0      	push	{r5, r6, r7, lr}
 8000bda:	0045      	lsls	r5, r0, #1
 8000bdc:	1c0f      	adds	r7, r1, #0
 8000bde:	0a64      	lsrs	r4, r4, #9
 8000be0:	0e2d      	lsrs	r5, r5, #24
 8000be2:	0fc6      	lsrs	r6, r0, #31
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d047      	beq.n	8000c78 <__aeabi_fmul+0xac>
 8000be8:	2dff      	cmp	r5, #255	; 0xff
 8000bea:	d04d      	beq.n	8000c88 <__aeabi_fmul+0xbc>
 8000bec:	2300      	movs	r3, #0
 8000bee:	2080      	movs	r0, #128	; 0x80
 8000bf0:	469a      	mov	sl, r3
 8000bf2:	469b      	mov	fp, r3
 8000bf4:	00e4      	lsls	r4, r4, #3
 8000bf6:	04c0      	lsls	r0, r0, #19
 8000bf8:	4304      	orrs	r4, r0
 8000bfa:	3d7f      	subs	r5, #127	; 0x7f
 8000bfc:	0278      	lsls	r0, r7, #9
 8000bfe:	0a43      	lsrs	r3, r0, #9
 8000c00:	4699      	mov	r9, r3
 8000c02:	007a      	lsls	r2, r7, #1
 8000c04:	0ffb      	lsrs	r3, r7, #31
 8000c06:	4698      	mov	r8, r3
 8000c08:	0e12      	lsrs	r2, r2, #24
 8000c0a:	464b      	mov	r3, r9
 8000c0c:	d044      	beq.n	8000c98 <__aeabi_fmul+0xcc>
 8000c0e:	2aff      	cmp	r2, #255	; 0xff
 8000c10:	d011      	beq.n	8000c36 <__aeabi_fmul+0x6a>
 8000c12:	00d8      	lsls	r0, r3, #3
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	04db      	lsls	r3, r3, #19
 8000c18:	4303      	orrs	r3, r0
 8000c1a:	4699      	mov	r9, r3
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	18ad      	adds	r5, r5, r2
 8000c22:	4647      	mov	r7, r8
 8000c24:	4653      	mov	r3, sl
 8000c26:	4077      	eors	r7, r6
 8000c28:	1c69      	adds	r1, r5, #1
 8000c2a:	2b0f      	cmp	r3, #15
 8000c2c:	d83f      	bhi.n	8000cae <__aeabi_fmul+0xe2>
 8000c2e:	4a72      	ldr	r2, [pc, #456]	; (8000df8 <__aeabi_fmul+0x22c>)
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	58d3      	ldr	r3, [r2, r3]
 8000c34:	469f      	mov	pc, r3
 8000c36:	35ff      	adds	r5, #255	; 0xff
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fmul+0x72>
 8000c3c:	e079      	b.n	8000d32 <__aeabi_fmul+0x166>
 8000c3e:	4652      	mov	r2, sl
 8000c40:	2302      	movs	r3, #2
 8000c42:	431a      	orrs	r2, r3
 8000c44:	4692      	mov	sl, r2
 8000c46:	2002      	movs	r0, #2
 8000c48:	e7eb      	b.n	8000c22 <__aeabi_fmul+0x56>
 8000c4a:	4647      	mov	r7, r8
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4683      	mov	fp, r0
 8000c50:	465b      	mov	r3, fp
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d028      	beq.n	8000ca8 <__aeabi_fmul+0xdc>
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d100      	bne.n	8000c5c <__aeabi_fmul+0x90>
 8000c5a:	e0c6      	b.n	8000dea <__aeabi_fmul+0x21e>
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d14f      	bne.n	8000d00 <__aeabi_fmul+0x134>
 8000c60:	2000      	movs	r0, #0
 8000c62:	2400      	movs	r4, #0
 8000c64:	05c0      	lsls	r0, r0, #23
 8000c66:	07ff      	lsls	r7, r7, #31
 8000c68:	4320      	orrs	r0, r4
 8000c6a:	4338      	orrs	r0, r7
 8000c6c:	bcf0      	pop	{r4, r5, r6, r7}
 8000c6e:	46bb      	mov	fp, r7
 8000c70:	46b2      	mov	sl, r6
 8000c72:	46a9      	mov	r9, r5
 8000c74:	46a0      	mov	r8, r4
 8000c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d171      	bne.n	8000d60 <__aeabi_fmul+0x194>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	469a      	mov	sl, r3
 8000c80:	3b03      	subs	r3, #3
 8000c82:	2500      	movs	r5, #0
 8000c84:	469b      	mov	fp, r3
 8000c86:	e7b9      	b.n	8000bfc <__aeabi_fmul+0x30>
 8000c88:	2c00      	cmp	r4, #0
 8000c8a:	d163      	bne.n	8000d54 <__aeabi_fmul+0x188>
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	469a      	mov	sl, r3
 8000c90:	3b06      	subs	r3, #6
 8000c92:	25ff      	movs	r5, #255	; 0xff
 8000c94:	469b      	mov	fp, r3
 8000c96:	e7b1      	b.n	8000bfc <__aeabi_fmul+0x30>
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d150      	bne.n	8000d3e <__aeabi_fmul+0x172>
 8000c9c:	4652      	mov	r2, sl
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	4692      	mov	sl, r2
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	e7bc      	b.n	8000c22 <__aeabi_fmul+0x56>
 8000ca8:	20ff      	movs	r0, #255	; 0xff
 8000caa:	2400      	movs	r4, #0
 8000cac:	e7da      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000cae:	4648      	mov	r0, r9
 8000cb0:	0c26      	lsrs	r6, r4, #16
 8000cb2:	0424      	lsls	r4, r4, #16
 8000cb4:	0c22      	lsrs	r2, r4, #16
 8000cb6:	0404      	lsls	r4, r0, #16
 8000cb8:	0c24      	lsrs	r4, r4, #16
 8000cba:	464b      	mov	r3, r9
 8000cbc:	0020      	movs	r0, r4
 8000cbe:	0c1b      	lsrs	r3, r3, #16
 8000cc0:	4350      	muls	r0, r2
 8000cc2:	4374      	muls	r4, r6
 8000cc4:	435a      	muls	r2, r3
 8000cc6:	435e      	muls	r6, r3
 8000cc8:	1912      	adds	r2, r2, r4
 8000cca:	0c03      	lsrs	r3, r0, #16
 8000ccc:	189b      	adds	r3, r3, r2
 8000cce:	429c      	cmp	r4, r3
 8000cd0:	d903      	bls.n	8000cda <__aeabi_fmul+0x10e>
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	0252      	lsls	r2, r2, #9
 8000cd6:	4694      	mov	ip, r2
 8000cd8:	4466      	add	r6, ip
 8000cda:	0400      	lsls	r0, r0, #16
 8000cdc:	041a      	lsls	r2, r3, #16
 8000cde:	0c00      	lsrs	r0, r0, #16
 8000ce0:	1812      	adds	r2, r2, r0
 8000ce2:	0194      	lsls	r4, r2, #6
 8000ce4:	1e60      	subs	r0, r4, #1
 8000ce6:	4184      	sbcs	r4, r0
 8000ce8:	0c1b      	lsrs	r3, r3, #16
 8000cea:	0e92      	lsrs	r2, r2, #26
 8000cec:	199b      	adds	r3, r3, r6
 8000cee:	4314      	orrs	r4, r2
 8000cf0:	019b      	lsls	r3, r3, #6
 8000cf2:	431c      	orrs	r4, r3
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	d572      	bpl.n	8000dde <__aeabi_fmul+0x212>
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	0863      	lsrs	r3, r4, #1
 8000cfc:	4004      	ands	r4, r0
 8000cfe:	431c      	orrs	r4, r3
 8000d00:	0008      	movs	r0, r1
 8000d02:	307f      	adds	r0, #127	; 0x7f
 8000d04:	2800      	cmp	r0, #0
 8000d06:	dd3c      	ble.n	8000d82 <__aeabi_fmul+0x1b6>
 8000d08:	0763      	lsls	r3, r4, #29
 8000d0a:	d004      	beq.n	8000d16 <__aeabi_fmul+0x14a>
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	4023      	ands	r3, r4
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d000      	beq.n	8000d16 <__aeabi_fmul+0x14a>
 8000d14:	3404      	adds	r4, #4
 8000d16:	0123      	lsls	r3, r4, #4
 8000d18:	d503      	bpl.n	8000d22 <__aeabi_fmul+0x156>
 8000d1a:	3180      	adds	r1, #128	; 0x80
 8000d1c:	0008      	movs	r0, r1
 8000d1e:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <__aeabi_fmul+0x230>)
 8000d20:	401c      	ands	r4, r3
 8000d22:	28fe      	cmp	r0, #254	; 0xfe
 8000d24:	dcc0      	bgt.n	8000ca8 <__aeabi_fmul+0xdc>
 8000d26:	01a4      	lsls	r4, r4, #6
 8000d28:	0a64      	lsrs	r4, r4, #9
 8000d2a:	b2c0      	uxtb	r0, r0
 8000d2c:	e79a      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000d2e:	0037      	movs	r7, r6
 8000d30:	e78e      	b.n	8000c50 <__aeabi_fmul+0x84>
 8000d32:	4652      	mov	r2, sl
 8000d34:	2303      	movs	r3, #3
 8000d36:	431a      	orrs	r2, r3
 8000d38:	4692      	mov	sl, r2
 8000d3a:	2003      	movs	r0, #3
 8000d3c:	e771      	b.n	8000c22 <__aeabi_fmul+0x56>
 8000d3e:	4648      	mov	r0, r9
 8000d40:	f001 f8d4 	bl	8001eec <__clzsi2>
 8000d44:	464a      	mov	r2, r9
 8000d46:	1f43      	subs	r3, r0, #5
 8000d48:	409a      	lsls	r2, r3
 8000d4a:	1a2d      	subs	r5, r5, r0
 8000d4c:	4691      	mov	r9, r2
 8000d4e:	2000      	movs	r0, #0
 8000d50:	3d76      	subs	r5, #118	; 0x76
 8000d52:	e766      	b.n	8000c22 <__aeabi_fmul+0x56>
 8000d54:	230c      	movs	r3, #12
 8000d56:	469a      	mov	sl, r3
 8000d58:	3b09      	subs	r3, #9
 8000d5a:	25ff      	movs	r5, #255	; 0xff
 8000d5c:	469b      	mov	fp, r3
 8000d5e:	e74d      	b.n	8000bfc <__aeabi_fmul+0x30>
 8000d60:	0020      	movs	r0, r4
 8000d62:	f001 f8c3 	bl	8001eec <__clzsi2>
 8000d66:	2576      	movs	r5, #118	; 0x76
 8000d68:	1f43      	subs	r3, r0, #5
 8000d6a:	409c      	lsls	r4, r3
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	426d      	negs	r5, r5
 8000d70:	469a      	mov	sl, r3
 8000d72:	469b      	mov	fp, r3
 8000d74:	1a2d      	subs	r5, r5, r0
 8000d76:	e741      	b.n	8000bfc <__aeabi_fmul+0x30>
 8000d78:	2480      	movs	r4, #128	; 0x80
 8000d7a:	2700      	movs	r7, #0
 8000d7c:	20ff      	movs	r0, #255	; 0xff
 8000d7e:	03e4      	lsls	r4, r4, #15
 8000d80:	e770      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000d82:	2301      	movs	r3, #1
 8000d84:	1a1b      	subs	r3, r3, r0
 8000d86:	2b1b      	cmp	r3, #27
 8000d88:	dd00      	ble.n	8000d8c <__aeabi_fmul+0x1c0>
 8000d8a:	e769      	b.n	8000c60 <__aeabi_fmul+0x94>
 8000d8c:	319e      	adds	r1, #158	; 0x9e
 8000d8e:	0020      	movs	r0, r4
 8000d90:	408c      	lsls	r4, r1
 8000d92:	40d8      	lsrs	r0, r3
 8000d94:	1e63      	subs	r3, r4, #1
 8000d96:	419c      	sbcs	r4, r3
 8000d98:	4304      	orrs	r4, r0
 8000d9a:	0763      	lsls	r3, r4, #29
 8000d9c:	d004      	beq.n	8000da8 <__aeabi_fmul+0x1dc>
 8000d9e:	230f      	movs	r3, #15
 8000da0:	4023      	ands	r3, r4
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d000      	beq.n	8000da8 <__aeabi_fmul+0x1dc>
 8000da6:	3404      	adds	r4, #4
 8000da8:	0163      	lsls	r3, r4, #5
 8000daa:	d51a      	bpl.n	8000de2 <__aeabi_fmul+0x216>
 8000dac:	2001      	movs	r0, #1
 8000dae:	2400      	movs	r4, #0
 8000db0:	e758      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000db2:	2080      	movs	r0, #128	; 0x80
 8000db4:	03c0      	lsls	r0, r0, #15
 8000db6:	4204      	tst	r4, r0
 8000db8:	d009      	beq.n	8000dce <__aeabi_fmul+0x202>
 8000dba:	464b      	mov	r3, r9
 8000dbc:	4203      	tst	r3, r0
 8000dbe:	d106      	bne.n	8000dce <__aeabi_fmul+0x202>
 8000dc0:	464c      	mov	r4, r9
 8000dc2:	4304      	orrs	r4, r0
 8000dc4:	0264      	lsls	r4, r4, #9
 8000dc6:	4647      	mov	r7, r8
 8000dc8:	20ff      	movs	r0, #255	; 0xff
 8000dca:	0a64      	lsrs	r4, r4, #9
 8000dcc:	e74a      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000dce:	2080      	movs	r0, #128	; 0x80
 8000dd0:	03c0      	lsls	r0, r0, #15
 8000dd2:	4304      	orrs	r4, r0
 8000dd4:	0264      	lsls	r4, r4, #9
 8000dd6:	0037      	movs	r7, r6
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	0a64      	lsrs	r4, r4, #9
 8000ddc:	e742      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000dde:	0029      	movs	r1, r5
 8000de0:	e78e      	b.n	8000d00 <__aeabi_fmul+0x134>
 8000de2:	01a4      	lsls	r4, r4, #6
 8000de4:	2000      	movs	r0, #0
 8000de6:	0a64      	lsrs	r4, r4, #9
 8000de8:	e73c      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000dea:	2080      	movs	r0, #128	; 0x80
 8000dec:	03c0      	lsls	r0, r0, #15
 8000dee:	4304      	orrs	r4, r0
 8000df0:	0264      	lsls	r4, r4, #9
 8000df2:	20ff      	movs	r0, #255	; 0xff
 8000df4:	0a64      	lsrs	r4, r4, #9
 8000df6:	e735      	b.n	8000c64 <__aeabi_fmul+0x98>
 8000df8:	08005e2c 	.word	0x08005e2c
 8000dfc:	f7ffffff 	.word	0xf7ffffff

08000e00 <__aeabi_fsub>:
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e02:	4646      	mov	r6, r8
 8000e04:	46d6      	mov	lr, sl
 8000e06:	464f      	mov	r7, r9
 8000e08:	0243      	lsls	r3, r0, #9
 8000e0a:	0a5b      	lsrs	r3, r3, #9
 8000e0c:	00da      	lsls	r2, r3, #3
 8000e0e:	4694      	mov	ip, r2
 8000e10:	024a      	lsls	r2, r1, #9
 8000e12:	b5c0      	push	{r6, r7, lr}
 8000e14:	0044      	lsls	r4, r0, #1
 8000e16:	0a56      	lsrs	r6, r2, #9
 8000e18:	1c05      	adds	r5, r0, #0
 8000e1a:	46b0      	mov	r8, r6
 8000e1c:	0e24      	lsrs	r4, r4, #24
 8000e1e:	004e      	lsls	r6, r1, #1
 8000e20:	0992      	lsrs	r2, r2, #6
 8000e22:	001f      	movs	r7, r3
 8000e24:	0020      	movs	r0, r4
 8000e26:	4692      	mov	sl, r2
 8000e28:	0fed      	lsrs	r5, r5, #31
 8000e2a:	0e36      	lsrs	r6, r6, #24
 8000e2c:	0fc9      	lsrs	r1, r1, #31
 8000e2e:	2eff      	cmp	r6, #255	; 0xff
 8000e30:	d100      	bne.n	8000e34 <__aeabi_fsub+0x34>
 8000e32:	e07f      	b.n	8000f34 <__aeabi_fsub+0x134>
 8000e34:	2201      	movs	r2, #1
 8000e36:	4051      	eors	r1, r2
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d051      	beq.n	8000ee0 <__aeabi_fsub+0xe0>
 8000e3c:	1ba2      	subs	r2, r4, r6
 8000e3e:	4691      	mov	r9, r2
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	dc00      	bgt.n	8000e46 <__aeabi_fsub+0x46>
 8000e44:	e07e      	b.n	8000f44 <__aeabi_fsub+0x144>
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	d100      	bne.n	8000e4c <__aeabi_fsub+0x4c>
 8000e4a:	e099      	b.n	8000f80 <__aeabi_fsub+0x180>
 8000e4c:	2cff      	cmp	r4, #255	; 0xff
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_fsub+0x52>
 8000e50:	e08c      	b.n	8000f6c <__aeabi_fsub+0x16c>
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	4652      	mov	r2, sl
 8000e56:	04db      	lsls	r3, r3, #19
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	4692      	mov	sl, r2
 8000e5c:	464a      	mov	r2, r9
 8000e5e:	2301      	movs	r3, #1
 8000e60:	2a1b      	cmp	r2, #27
 8000e62:	dc08      	bgt.n	8000e76 <__aeabi_fsub+0x76>
 8000e64:	4653      	mov	r3, sl
 8000e66:	2120      	movs	r1, #32
 8000e68:	40d3      	lsrs	r3, r2
 8000e6a:	1a89      	subs	r1, r1, r2
 8000e6c:	4652      	mov	r2, sl
 8000e6e:	408a      	lsls	r2, r1
 8000e70:	1e51      	subs	r1, r2, #1
 8000e72:	418a      	sbcs	r2, r1
 8000e74:	4313      	orrs	r3, r2
 8000e76:	4662      	mov	r2, ip
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	015a      	lsls	r2, r3, #5
 8000e7c:	d400      	bmi.n	8000e80 <__aeabi_fsub+0x80>
 8000e7e:	e0f3      	b.n	8001068 <__aeabi_fsub+0x268>
 8000e80:	019b      	lsls	r3, r3, #6
 8000e82:	099e      	lsrs	r6, r3, #6
 8000e84:	0030      	movs	r0, r6
 8000e86:	f001 f831 	bl	8001eec <__clzsi2>
 8000e8a:	3805      	subs	r0, #5
 8000e8c:	4086      	lsls	r6, r0
 8000e8e:	4284      	cmp	r4, r0
 8000e90:	dd00      	ble.n	8000e94 <__aeabi_fsub+0x94>
 8000e92:	e0f7      	b.n	8001084 <__aeabi_fsub+0x284>
 8000e94:	0032      	movs	r2, r6
 8000e96:	1b04      	subs	r4, r0, r4
 8000e98:	2020      	movs	r0, #32
 8000e9a:	3401      	adds	r4, #1
 8000e9c:	40e2      	lsrs	r2, r4
 8000e9e:	1b04      	subs	r4, r0, r4
 8000ea0:	40a6      	lsls	r6, r4
 8000ea2:	0033      	movs	r3, r6
 8000ea4:	1e5e      	subs	r6, r3, #1
 8000ea6:	41b3      	sbcs	r3, r6
 8000ea8:	2400      	movs	r4, #0
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	075a      	lsls	r2, r3, #29
 8000eae:	d004      	beq.n	8000eba <__aeabi_fsub+0xba>
 8000eb0:	220f      	movs	r2, #15
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	2a04      	cmp	r2, #4
 8000eb6:	d000      	beq.n	8000eba <__aeabi_fsub+0xba>
 8000eb8:	3304      	adds	r3, #4
 8000eba:	015a      	lsls	r2, r3, #5
 8000ebc:	d400      	bmi.n	8000ec0 <__aeabi_fsub+0xc0>
 8000ebe:	e0d6      	b.n	800106e <__aeabi_fsub+0x26e>
 8000ec0:	1c62      	adds	r2, r4, #1
 8000ec2:	2cfe      	cmp	r4, #254	; 0xfe
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_fsub+0xc8>
 8000ec6:	e0da      	b.n	800107e <__aeabi_fsub+0x27e>
 8000ec8:	019b      	lsls	r3, r3, #6
 8000eca:	0a5f      	lsrs	r7, r3, #9
 8000ecc:	b2d0      	uxtb	r0, r2
 8000ece:	05c0      	lsls	r0, r0, #23
 8000ed0:	4338      	orrs	r0, r7
 8000ed2:	07ed      	lsls	r5, r5, #31
 8000ed4:	4328      	orrs	r0, r5
 8000ed6:	bce0      	pop	{r5, r6, r7}
 8000ed8:	46ba      	mov	sl, r7
 8000eda:	46b1      	mov	r9, r6
 8000edc:	46a8      	mov	r8, r5
 8000ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee0:	1ba2      	subs	r2, r4, r6
 8000ee2:	4691      	mov	r9, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	dd63      	ble.n	8000fb0 <__aeabi_fsub+0x1b0>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d100      	bne.n	8000eee <__aeabi_fsub+0xee>
 8000eec:	e099      	b.n	8001022 <__aeabi_fsub+0x222>
 8000eee:	2cff      	cmp	r4, #255	; 0xff
 8000ef0:	d03c      	beq.n	8000f6c <__aeabi_fsub+0x16c>
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	4652      	mov	r2, sl
 8000ef6:	04db      	lsls	r3, r3, #19
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	4692      	mov	sl, r2
 8000efc:	464a      	mov	r2, r9
 8000efe:	2301      	movs	r3, #1
 8000f00:	2a1b      	cmp	r2, #27
 8000f02:	dc08      	bgt.n	8000f16 <__aeabi_fsub+0x116>
 8000f04:	4653      	mov	r3, sl
 8000f06:	2120      	movs	r1, #32
 8000f08:	40d3      	lsrs	r3, r2
 8000f0a:	1a89      	subs	r1, r1, r2
 8000f0c:	4652      	mov	r2, sl
 8000f0e:	408a      	lsls	r2, r1
 8000f10:	1e51      	subs	r1, r2, #1
 8000f12:	418a      	sbcs	r2, r1
 8000f14:	4313      	orrs	r3, r2
 8000f16:	4463      	add	r3, ip
 8000f18:	015a      	lsls	r2, r3, #5
 8000f1a:	d400      	bmi.n	8000f1e <__aeabi_fsub+0x11e>
 8000f1c:	e0a4      	b.n	8001068 <__aeabi_fsub+0x268>
 8000f1e:	3401      	adds	r4, #1
 8000f20:	2cff      	cmp	r4, #255	; 0xff
 8000f22:	d100      	bne.n	8000f26 <__aeabi_fsub+0x126>
 8000f24:	e0ab      	b.n	800107e <__aeabi_fsub+0x27e>
 8000f26:	2201      	movs	r2, #1
 8000f28:	4997      	ldr	r1, [pc, #604]	; (8001188 <__aeabi_fsub+0x388>)
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	085b      	lsrs	r3, r3, #1
 8000f2e:	400b      	ands	r3, r1
 8000f30:	4313      	orrs	r3, r2
 8000f32:	e7bb      	b.n	8000eac <__aeabi_fsub+0xac>
 8000f34:	2a00      	cmp	r2, #0
 8000f36:	d032      	beq.n	8000f9e <__aeabi_fsub+0x19e>
 8000f38:	428d      	cmp	r5, r1
 8000f3a:	d035      	beq.n	8000fa8 <__aeabi_fsub+0x1a8>
 8000f3c:	22ff      	movs	r2, #255	; 0xff
 8000f3e:	4252      	negs	r2, r2
 8000f40:	4691      	mov	r9, r2
 8000f42:	44a1      	add	r9, r4
 8000f44:	464a      	mov	r2, r9
 8000f46:	2a00      	cmp	r2, #0
 8000f48:	d051      	beq.n	8000fee <__aeabi_fsub+0x1ee>
 8000f4a:	1b30      	subs	r0, r6, r4
 8000f4c:	2c00      	cmp	r4, #0
 8000f4e:	d000      	beq.n	8000f52 <__aeabi_fsub+0x152>
 8000f50:	e09c      	b.n	800108c <__aeabi_fsub+0x28c>
 8000f52:	4663      	mov	r3, ip
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d100      	bne.n	8000f5a <__aeabi_fsub+0x15a>
 8000f58:	e0df      	b.n	800111a <__aeabi_fsub+0x31a>
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_fsub+0x162>
 8000f60:	e0f7      	b.n	8001152 <__aeabi_fsub+0x352>
 8000f62:	2eff      	cmp	r6, #255	; 0xff
 8000f64:	d000      	beq.n	8000f68 <__aeabi_fsub+0x168>
 8000f66:	e099      	b.n	800109c <__aeabi_fsub+0x29c>
 8000f68:	000d      	movs	r5, r1
 8000f6a:	4643      	mov	r3, r8
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_fsub+0x172>
 8000f70:	e085      	b.n	800107e <__aeabi_fsub+0x27e>
 8000f72:	2780      	movs	r7, #128	; 0x80
 8000f74:	03ff      	lsls	r7, r7, #15
 8000f76:	431f      	orrs	r7, r3
 8000f78:	027f      	lsls	r7, r7, #9
 8000f7a:	20ff      	movs	r0, #255	; 0xff
 8000f7c:	0a7f      	lsrs	r7, r7, #9
 8000f7e:	e7a6      	b.n	8000ece <__aeabi_fsub+0xce>
 8000f80:	4652      	mov	r2, sl
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	d074      	beq.n	8001070 <__aeabi_fsub+0x270>
 8000f86:	2201      	movs	r2, #1
 8000f88:	4252      	negs	r2, r2
 8000f8a:	4690      	mov	r8, r2
 8000f8c:	44c1      	add	r9, r8
 8000f8e:	464a      	mov	r2, r9
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	d100      	bne.n	8000f96 <__aeabi_fsub+0x196>
 8000f94:	e0c8      	b.n	8001128 <__aeabi_fsub+0x328>
 8000f96:	2cff      	cmp	r4, #255	; 0xff
 8000f98:	d000      	beq.n	8000f9c <__aeabi_fsub+0x19c>
 8000f9a:	e75f      	b.n	8000e5c <__aeabi_fsub+0x5c>
 8000f9c:	e7e6      	b.n	8000f6c <__aeabi_fsub+0x16c>
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4051      	eors	r1, r2
 8000fa2:	42a9      	cmp	r1, r5
 8000fa4:	d000      	beq.n	8000fa8 <__aeabi_fsub+0x1a8>
 8000fa6:	e749      	b.n	8000e3c <__aeabi_fsub+0x3c>
 8000fa8:	22ff      	movs	r2, #255	; 0xff
 8000faa:	4252      	negs	r2, r2
 8000fac:	4691      	mov	r9, r2
 8000fae:	44a1      	add	r9, r4
 8000fb0:	464a      	mov	r2, r9
 8000fb2:	2a00      	cmp	r2, #0
 8000fb4:	d043      	beq.n	800103e <__aeabi_fsub+0x23e>
 8000fb6:	1b31      	subs	r1, r6, r4
 8000fb8:	2c00      	cmp	r4, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fsub+0x1be>
 8000fbc:	e08c      	b.n	80010d8 <__aeabi_fsub+0x2d8>
 8000fbe:	2eff      	cmp	r6, #255	; 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0x1c4>
 8000fc2:	e092      	b.n	80010ea <__aeabi_fsub+0x2ea>
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	4662      	mov	r2, ip
 8000fc8:	04db      	lsls	r3, r3, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	4694      	mov	ip, r2
 8000fce:	2301      	movs	r3, #1
 8000fd0:	291b      	cmp	r1, #27
 8000fd2:	dc09      	bgt.n	8000fe8 <__aeabi_fsub+0x1e8>
 8000fd4:	2020      	movs	r0, #32
 8000fd6:	4663      	mov	r3, ip
 8000fd8:	4662      	mov	r2, ip
 8000fda:	40cb      	lsrs	r3, r1
 8000fdc:	1a41      	subs	r1, r0, r1
 8000fde:	408a      	lsls	r2, r1
 8000fe0:	0011      	movs	r1, r2
 8000fe2:	1e48      	subs	r0, r1, #1
 8000fe4:	4181      	sbcs	r1, r0
 8000fe6:	430b      	orrs	r3, r1
 8000fe8:	0034      	movs	r4, r6
 8000fea:	4453      	add	r3, sl
 8000fec:	e794      	b.n	8000f18 <__aeabi_fsub+0x118>
 8000fee:	22fe      	movs	r2, #254	; 0xfe
 8000ff0:	1c66      	adds	r6, r4, #1
 8000ff2:	4232      	tst	r2, r6
 8000ff4:	d164      	bne.n	80010c0 <__aeabi_fsub+0x2c0>
 8000ff6:	2c00      	cmp	r4, #0
 8000ff8:	d000      	beq.n	8000ffc <__aeabi_fsub+0x1fc>
 8000ffa:	e082      	b.n	8001102 <__aeabi_fsub+0x302>
 8000ffc:	4663      	mov	r3, ip
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d100      	bne.n	8001004 <__aeabi_fsub+0x204>
 8001002:	e0ab      	b.n	800115c <__aeabi_fsub+0x35c>
 8001004:	4653      	mov	r3, sl
 8001006:	2b00      	cmp	r3, #0
 8001008:	d100      	bne.n	800100c <__aeabi_fsub+0x20c>
 800100a:	e760      	b.n	8000ece <__aeabi_fsub+0xce>
 800100c:	4663      	mov	r3, ip
 800100e:	4652      	mov	r2, sl
 8001010:	1a9b      	subs	r3, r3, r2
 8001012:	015a      	lsls	r2, r3, #5
 8001014:	d400      	bmi.n	8001018 <__aeabi_fsub+0x218>
 8001016:	e0aa      	b.n	800116e <__aeabi_fsub+0x36e>
 8001018:	4663      	mov	r3, ip
 800101a:	4652      	mov	r2, sl
 800101c:	000d      	movs	r5, r1
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	e744      	b.n	8000eac <__aeabi_fsub+0xac>
 8001022:	4652      	mov	r2, sl
 8001024:	2a00      	cmp	r2, #0
 8001026:	d023      	beq.n	8001070 <__aeabi_fsub+0x270>
 8001028:	2201      	movs	r2, #1
 800102a:	4252      	negs	r2, r2
 800102c:	4690      	mov	r8, r2
 800102e:	44c1      	add	r9, r8
 8001030:	464a      	mov	r2, r9
 8001032:	2a00      	cmp	r2, #0
 8001034:	d075      	beq.n	8001122 <__aeabi_fsub+0x322>
 8001036:	2cff      	cmp	r4, #255	; 0xff
 8001038:	d000      	beq.n	800103c <__aeabi_fsub+0x23c>
 800103a:	e75f      	b.n	8000efc <__aeabi_fsub+0xfc>
 800103c:	e796      	b.n	8000f6c <__aeabi_fsub+0x16c>
 800103e:	26fe      	movs	r6, #254	; 0xfe
 8001040:	3401      	adds	r4, #1
 8001042:	4226      	tst	r6, r4
 8001044:	d153      	bne.n	80010ee <__aeabi_fsub+0x2ee>
 8001046:	2800      	cmp	r0, #0
 8001048:	d172      	bne.n	8001130 <__aeabi_fsub+0x330>
 800104a:	4663      	mov	r3, ip
 800104c:	2b00      	cmp	r3, #0
 800104e:	d100      	bne.n	8001052 <__aeabi_fsub+0x252>
 8001050:	e093      	b.n	800117a <__aeabi_fsub+0x37a>
 8001052:	4653      	mov	r3, sl
 8001054:	2b00      	cmp	r3, #0
 8001056:	d100      	bne.n	800105a <__aeabi_fsub+0x25a>
 8001058:	e739      	b.n	8000ece <__aeabi_fsub+0xce>
 800105a:	4463      	add	r3, ip
 800105c:	2400      	movs	r4, #0
 800105e:	015a      	lsls	r2, r3, #5
 8001060:	d502      	bpl.n	8001068 <__aeabi_fsub+0x268>
 8001062:	4a4a      	ldr	r2, [pc, #296]	; (800118c <__aeabi_fsub+0x38c>)
 8001064:	3401      	adds	r4, #1
 8001066:	4013      	ands	r3, r2
 8001068:	075a      	lsls	r2, r3, #29
 800106a:	d000      	beq.n	800106e <__aeabi_fsub+0x26e>
 800106c:	e720      	b.n	8000eb0 <__aeabi_fsub+0xb0>
 800106e:	08db      	lsrs	r3, r3, #3
 8001070:	2cff      	cmp	r4, #255	; 0xff
 8001072:	d100      	bne.n	8001076 <__aeabi_fsub+0x276>
 8001074:	e77a      	b.n	8000f6c <__aeabi_fsub+0x16c>
 8001076:	025b      	lsls	r3, r3, #9
 8001078:	0a5f      	lsrs	r7, r3, #9
 800107a:	b2e0      	uxtb	r0, r4
 800107c:	e727      	b.n	8000ece <__aeabi_fsub+0xce>
 800107e:	20ff      	movs	r0, #255	; 0xff
 8001080:	2700      	movs	r7, #0
 8001082:	e724      	b.n	8000ece <__aeabi_fsub+0xce>
 8001084:	4b41      	ldr	r3, [pc, #260]	; (800118c <__aeabi_fsub+0x38c>)
 8001086:	1a24      	subs	r4, r4, r0
 8001088:	4033      	ands	r3, r6
 800108a:	e70f      	b.n	8000eac <__aeabi_fsub+0xac>
 800108c:	2eff      	cmp	r6, #255	; 0xff
 800108e:	d100      	bne.n	8001092 <__aeabi_fsub+0x292>
 8001090:	e76a      	b.n	8000f68 <__aeabi_fsub+0x168>
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	4662      	mov	r2, ip
 8001096:	04db      	lsls	r3, r3, #19
 8001098:	431a      	orrs	r2, r3
 800109a:	4694      	mov	ip, r2
 800109c:	2301      	movs	r3, #1
 800109e:	281b      	cmp	r0, #27
 80010a0:	dc09      	bgt.n	80010b6 <__aeabi_fsub+0x2b6>
 80010a2:	2420      	movs	r4, #32
 80010a4:	4663      	mov	r3, ip
 80010a6:	4662      	mov	r2, ip
 80010a8:	40c3      	lsrs	r3, r0
 80010aa:	1a20      	subs	r0, r4, r0
 80010ac:	4082      	lsls	r2, r0
 80010ae:	0010      	movs	r0, r2
 80010b0:	1e44      	subs	r4, r0, #1
 80010b2:	41a0      	sbcs	r0, r4
 80010b4:	4303      	orrs	r3, r0
 80010b6:	4652      	mov	r2, sl
 80010b8:	000d      	movs	r5, r1
 80010ba:	0034      	movs	r4, r6
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	e6dc      	b.n	8000e7a <__aeabi_fsub+0x7a>
 80010c0:	4663      	mov	r3, ip
 80010c2:	4652      	mov	r2, sl
 80010c4:	1a9e      	subs	r6, r3, r2
 80010c6:	0173      	lsls	r3, r6, #5
 80010c8:	d417      	bmi.n	80010fa <__aeabi_fsub+0x2fa>
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	d000      	beq.n	80010d0 <__aeabi_fsub+0x2d0>
 80010ce:	e6d9      	b.n	8000e84 <__aeabi_fsub+0x84>
 80010d0:	2500      	movs	r5, #0
 80010d2:	2000      	movs	r0, #0
 80010d4:	2700      	movs	r7, #0
 80010d6:	e6fa      	b.n	8000ece <__aeabi_fsub+0xce>
 80010d8:	4663      	mov	r3, ip
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d044      	beq.n	8001168 <__aeabi_fsub+0x368>
 80010de:	3901      	subs	r1, #1
 80010e0:	2900      	cmp	r1, #0
 80010e2:	d04c      	beq.n	800117e <__aeabi_fsub+0x37e>
 80010e4:	2eff      	cmp	r6, #255	; 0xff
 80010e6:	d000      	beq.n	80010ea <__aeabi_fsub+0x2ea>
 80010e8:	e771      	b.n	8000fce <__aeabi_fsub+0x1ce>
 80010ea:	4643      	mov	r3, r8
 80010ec:	e73e      	b.n	8000f6c <__aeabi_fsub+0x16c>
 80010ee:	2cff      	cmp	r4, #255	; 0xff
 80010f0:	d0c5      	beq.n	800107e <__aeabi_fsub+0x27e>
 80010f2:	4652      	mov	r2, sl
 80010f4:	4462      	add	r2, ip
 80010f6:	0853      	lsrs	r3, r2, #1
 80010f8:	e7b6      	b.n	8001068 <__aeabi_fsub+0x268>
 80010fa:	4663      	mov	r3, ip
 80010fc:	000d      	movs	r5, r1
 80010fe:	1ad6      	subs	r6, r2, r3
 8001100:	e6c0      	b.n	8000e84 <__aeabi_fsub+0x84>
 8001102:	4662      	mov	r2, ip
 8001104:	2a00      	cmp	r2, #0
 8001106:	d116      	bne.n	8001136 <__aeabi_fsub+0x336>
 8001108:	4653      	mov	r3, sl
 800110a:	2b00      	cmp	r3, #0
 800110c:	d000      	beq.n	8001110 <__aeabi_fsub+0x310>
 800110e:	e72b      	b.n	8000f68 <__aeabi_fsub+0x168>
 8001110:	2780      	movs	r7, #128	; 0x80
 8001112:	2500      	movs	r5, #0
 8001114:	20ff      	movs	r0, #255	; 0xff
 8001116:	03ff      	lsls	r7, r7, #15
 8001118:	e6d9      	b.n	8000ece <__aeabi_fsub+0xce>
 800111a:	000d      	movs	r5, r1
 800111c:	4643      	mov	r3, r8
 800111e:	0034      	movs	r4, r6
 8001120:	e7a6      	b.n	8001070 <__aeabi_fsub+0x270>
 8001122:	4653      	mov	r3, sl
 8001124:	4463      	add	r3, ip
 8001126:	e6f7      	b.n	8000f18 <__aeabi_fsub+0x118>
 8001128:	4663      	mov	r3, ip
 800112a:	4652      	mov	r2, sl
 800112c:	1a9b      	subs	r3, r3, r2
 800112e:	e6a4      	b.n	8000e7a <__aeabi_fsub+0x7a>
 8001130:	4662      	mov	r2, ip
 8001132:	2a00      	cmp	r2, #0
 8001134:	d0d9      	beq.n	80010ea <__aeabi_fsub+0x2ea>
 8001136:	4652      	mov	r2, sl
 8001138:	2a00      	cmp	r2, #0
 800113a:	d100      	bne.n	800113e <__aeabi_fsub+0x33e>
 800113c:	e716      	b.n	8000f6c <__aeabi_fsub+0x16c>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	03d2      	lsls	r2, r2, #15
 8001142:	4213      	tst	r3, r2
 8001144:	d100      	bne.n	8001148 <__aeabi_fsub+0x348>
 8001146:	e711      	b.n	8000f6c <__aeabi_fsub+0x16c>
 8001148:	4640      	mov	r0, r8
 800114a:	4210      	tst	r0, r2
 800114c:	d000      	beq.n	8001150 <__aeabi_fsub+0x350>
 800114e:	e70d      	b.n	8000f6c <__aeabi_fsub+0x16c>
 8001150:	e70a      	b.n	8000f68 <__aeabi_fsub+0x168>
 8001152:	4652      	mov	r2, sl
 8001154:	000d      	movs	r5, r1
 8001156:	0034      	movs	r4, r6
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	e68e      	b.n	8000e7a <__aeabi_fsub+0x7a>
 800115c:	4653      	mov	r3, sl
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <__aeabi_fsub+0x374>
 8001162:	000d      	movs	r5, r1
 8001164:	4647      	mov	r7, r8
 8001166:	e6b2      	b.n	8000ece <__aeabi_fsub+0xce>
 8001168:	4643      	mov	r3, r8
 800116a:	0034      	movs	r4, r6
 800116c:	e780      	b.n	8001070 <__aeabi_fsub+0x270>
 800116e:	2b00      	cmp	r3, #0
 8001170:	d000      	beq.n	8001174 <__aeabi_fsub+0x374>
 8001172:	e779      	b.n	8001068 <__aeabi_fsub+0x268>
 8001174:	2500      	movs	r5, #0
 8001176:	2700      	movs	r7, #0
 8001178:	e6a9      	b.n	8000ece <__aeabi_fsub+0xce>
 800117a:	4647      	mov	r7, r8
 800117c:	e6a7      	b.n	8000ece <__aeabi_fsub+0xce>
 800117e:	4653      	mov	r3, sl
 8001180:	0034      	movs	r4, r6
 8001182:	4463      	add	r3, ip
 8001184:	e6c8      	b.n	8000f18 <__aeabi_fsub+0x118>
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	7dffffff 	.word	0x7dffffff
 800118c:	fbffffff 	.word	0xfbffffff

08001190 <__aeabi_f2iz>:
 8001190:	0241      	lsls	r1, r0, #9
 8001192:	0042      	lsls	r2, r0, #1
 8001194:	0fc3      	lsrs	r3, r0, #31
 8001196:	0a49      	lsrs	r1, r1, #9
 8001198:	2000      	movs	r0, #0
 800119a:	0e12      	lsrs	r2, r2, #24
 800119c:	2a7e      	cmp	r2, #126	; 0x7e
 800119e:	d903      	bls.n	80011a8 <__aeabi_f2iz+0x18>
 80011a0:	2a9d      	cmp	r2, #157	; 0x9d
 80011a2:	d902      	bls.n	80011aa <__aeabi_f2iz+0x1a>
 80011a4:	4a09      	ldr	r2, [pc, #36]	; (80011cc <__aeabi_f2iz+0x3c>)
 80011a6:	1898      	adds	r0, r3, r2
 80011a8:	4770      	bx	lr
 80011aa:	2080      	movs	r0, #128	; 0x80
 80011ac:	0400      	lsls	r0, r0, #16
 80011ae:	4301      	orrs	r1, r0
 80011b0:	2a95      	cmp	r2, #149	; 0x95
 80011b2:	dc07      	bgt.n	80011c4 <__aeabi_f2iz+0x34>
 80011b4:	2096      	movs	r0, #150	; 0x96
 80011b6:	1a82      	subs	r2, r0, r2
 80011b8:	40d1      	lsrs	r1, r2
 80011ba:	4248      	negs	r0, r1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f3      	bne.n	80011a8 <__aeabi_f2iz+0x18>
 80011c0:	0008      	movs	r0, r1
 80011c2:	e7f1      	b.n	80011a8 <__aeabi_f2iz+0x18>
 80011c4:	3a96      	subs	r2, #150	; 0x96
 80011c6:	4091      	lsls	r1, r2
 80011c8:	e7f7      	b.n	80011ba <__aeabi_f2iz+0x2a>
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	7fffffff 	.word	0x7fffffff

080011d0 <__aeabi_i2f>:
 80011d0:	b570      	push	{r4, r5, r6, lr}
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d013      	beq.n	80011fe <__aeabi_i2f+0x2e>
 80011d6:	17c3      	asrs	r3, r0, #31
 80011d8:	18c5      	adds	r5, r0, r3
 80011da:	405d      	eors	r5, r3
 80011dc:	0fc4      	lsrs	r4, r0, #31
 80011de:	0028      	movs	r0, r5
 80011e0:	f000 fe84 	bl	8001eec <__clzsi2>
 80011e4:	239e      	movs	r3, #158	; 0x9e
 80011e6:	0001      	movs	r1, r0
 80011e8:	1a1b      	subs	r3, r3, r0
 80011ea:	2b96      	cmp	r3, #150	; 0x96
 80011ec:	dc0f      	bgt.n	800120e <__aeabi_i2f+0x3e>
 80011ee:	2808      	cmp	r0, #8
 80011f0:	dd01      	ble.n	80011f6 <__aeabi_i2f+0x26>
 80011f2:	3908      	subs	r1, #8
 80011f4:	408d      	lsls	r5, r1
 80011f6:	026d      	lsls	r5, r5, #9
 80011f8:	0a6d      	lsrs	r5, r5, #9
 80011fa:	b2d8      	uxtb	r0, r3
 80011fc:	e002      	b.n	8001204 <__aeabi_i2f+0x34>
 80011fe:	2400      	movs	r4, #0
 8001200:	2000      	movs	r0, #0
 8001202:	2500      	movs	r5, #0
 8001204:	05c0      	lsls	r0, r0, #23
 8001206:	4328      	orrs	r0, r5
 8001208:	07e4      	lsls	r4, r4, #31
 800120a:	4320      	orrs	r0, r4
 800120c:	bd70      	pop	{r4, r5, r6, pc}
 800120e:	2b99      	cmp	r3, #153	; 0x99
 8001210:	dd0b      	ble.n	800122a <__aeabi_i2f+0x5a>
 8001212:	2205      	movs	r2, #5
 8001214:	002e      	movs	r6, r5
 8001216:	1a12      	subs	r2, r2, r0
 8001218:	40d6      	lsrs	r6, r2
 800121a:	0002      	movs	r2, r0
 800121c:	321b      	adds	r2, #27
 800121e:	4095      	lsls	r5, r2
 8001220:	0028      	movs	r0, r5
 8001222:	1e45      	subs	r5, r0, #1
 8001224:	41a8      	sbcs	r0, r5
 8001226:	0035      	movs	r5, r6
 8001228:	4305      	orrs	r5, r0
 800122a:	2905      	cmp	r1, #5
 800122c:	dd01      	ble.n	8001232 <__aeabi_i2f+0x62>
 800122e:	1f4a      	subs	r2, r1, #5
 8001230:	4095      	lsls	r5, r2
 8001232:	002a      	movs	r2, r5
 8001234:	4e08      	ldr	r6, [pc, #32]	; (8001258 <__aeabi_i2f+0x88>)
 8001236:	4032      	ands	r2, r6
 8001238:	0768      	lsls	r0, r5, #29
 800123a:	d009      	beq.n	8001250 <__aeabi_i2f+0x80>
 800123c:	200f      	movs	r0, #15
 800123e:	4028      	ands	r0, r5
 8001240:	2804      	cmp	r0, #4
 8001242:	d005      	beq.n	8001250 <__aeabi_i2f+0x80>
 8001244:	3204      	adds	r2, #4
 8001246:	0150      	lsls	r0, r2, #5
 8001248:	d502      	bpl.n	8001250 <__aeabi_i2f+0x80>
 800124a:	239f      	movs	r3, #159	; 0x9f
 800124c:	4032      	ands	r2, r6
 800124e:	1a5b      	subs	r3, r3, r1
 8001250:	0192      	lsls	r2, r2, #6
 8001252:	0a55      	lsrs	r5, r2, #9
 8001254:	b2d8      	uxtb	r0, r3
 8001256:	e7d5      	b.n	8001204 <__aeabi_i2f+0x34>
 8001258:	fbffffff 	.word	0xfbffffff

0800125c <__aeabi_ui2f>:
 800125c:	b570      	push	{r4, r5, r6, lr}
 800125e:	1e05      	subs	r5, r0, #0
 8001260:	d00e      	beq.n	8001280 <__aeabi_ui2f+0x24>
 8001262:	f000 fe43 	bl	8001eec <__clzsi2>
 8001266:	239e      	movs	r3, #158	; 0x9e
 8001268:	0004      	movs	r4, r0
 800126a:	1a1b      	subs	r3, r3, r0
 800126c:	2b96      	cmp	r3, #150	; 0x96
 800126e:	dc0c      	bgt.n	800128a <__aeabi_ui2f+0x2e>
 8001270:	2808      	cmp	r0, #8
 8001272:	dd01      	ble.n	8001278 <__aeabi_ui2f+0x1c>
 8001274:	3c08      	subs	r4, #8
 8001276:	40a5      	lsls	r5, r4
 8001278:	026d      	lsls	r5, r5, #9
 800127a:	0a6d      	lsrs	r5, r5, #9
 800127c:	b2d8      	uxtb	r0, r3
 800127e:	e001      	b.n	8001284 <__aeabi_ui2f+0x28>
 8001280:	2000      	movs	r0, #0
 8001282:	2500      	movs	r5, #0
 8001284:	05c0      	lsls	r0, r0, #23
 8001286:	4328      	orrs	r0, r5
 8001288:	bd70      	pop	{r4, r5, r6, pc}
 800128a:	2b99      	cmp	r3, #153	; 0x99
 800128c:	dd09      	ble.n	80012a2 <__aeabi_ui2f+0x46>
 800128e:	0002      	movs	r2, r0
 8001290:	0029      	movs	r1, r5
 8001292:	321b      	adds	r2, #27
 8001294:	4091      	lsls	r1, r2
 8001296:	1e4a      	subs	r2, r1, #1
 8001298:	4191      	sbcs	r1, r2
 800129a:	2205      	movs	r2, #5
 800129c:	1a12      	subs	r2, r2, r0
 800129e:	40d5      	lsrs	r5, r2
 80012a0:	430d      	orrs	r5, r1
 80012a2:	2c05      	cmp	r4, #5
 80012a4:	dd01      	ble.n	80012aa <__aeabi_ui2f+0x4e>
 80012a6:	1f62      	subs	r2, r4, #5
 80012a8:	4095      	lsls	r5, r2
 80012aa:	0029      	movs	r1, r5
 80012ac:	4e08      	ldr	r6, [pc, #32]	; (80012d0 <__aeabi_ui2f+0x74>)
 80012ae:	4031      	ands	r1, r6
 80012b0:	076a      	lsls	r2, r5, #29
 80012b2:	d009      	beq.n	80012c8 <__aeabi_ui2f+0x6c>
 80012b4:	200f      	movs	r0, #15
 80012b6:	4028      	ands	r0, r5
 80012b8:	2804      	cmp	r0, #4
 80012ba:	d005      	beq.n	80012c8 <__aeabi_ui2f+0x6c>
 80012bc:	3104      	adds	r1, #4
 80012be:	014a      	lsls	r2, r1, #5
 80012c0:	d502      	bpl.n	80012c8 <__aeabi_ui2f+0x6c>
 80012c2:	239f      	movs	r3, #159	; 0x9f
 80012c4:	4031      	ands	r1, r6
 80012c6:	1b1b      	subs	r3, r3, r4
 80012c8:	0189      	lsls	r1, r1, #6
 80012ca:	0a4d      	lsrs	r5, r1, #9
 80012cc:	b2d8      	uxtb	r0, r3
 80012ce:	e7d9      	b.n	8001284 <__aeabi_ui2f+0x28>
 80012d0:	fbffffff 	.word	0xfbffffff

080012d4 <__aeabi_ddiv>:
 80012d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d6:	4657      	mov	r7, sl
 80012d8:	464e      	mov	r6, r9
 80012da:	4645      	mov	r5, r8
 80012dc:	46de      	mov	lr, fp
 80012de:	b5e0      	push	{r5, r6, r7, lr}
 80012e0:	4681      	mov	r9, r0
 80012e2:	0005      	movs	r5, r0
 80012e4:	030c      	lsls	r4, r1, #12
 80012e6:	0048      	lsls	r0, r1, #1
 80012e8:	4692      	mov	sl, r2
 80012ea:	001f      	movs	r7, r3
 80012ec:	b085      	sub	sp, #20
 80012ee:	0b24      	lsrs	r4, r4, #12
 80012f0:	0d40      	lsrs	r0, r0, #21
 80012f2:	0fce      	lsrs	r6, r1, #31
 80012f4:	2800      	cmp	r0, #0
 80012f6:	d059      	beq.n	80013ac <__aeabi_ddiv+0xd8>
 80012f8:	4b87      	ldr	r3, [pc, #540]	; (8001518 <__aeabi_ddiv+0x244>)
 80012fa:	4298      	cmp	r0, r3
 80012fc:	d100      	bne.n	8001300 <__aeabi_ddiv+0x2c>
 80012fe:	e098      	b.n	8001432 <__aeabi_ddiv+0x15e>
 8001300:	0f6b      	lsrs	r3, r5, #29
 8001302:	00e4      	lsls	r4, r4, #3
 8001304:	431c      	orrs	r4, r3
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	041b      	lsls	r3, r3, #16
 800130a:	4323      	orrs	r3, r4
 800130c:	4698      	mov	r8, r3
 800130e:	4b83      	ldr	r3, [pc, #524]	; (800151c <__aeabi_ddiv+0x248>)
 8001310:	00ed      	lsls	r5, r5, #3
 8001312:	469b      	mov	fp, r3
 8001314:	2300      	movs	r3, #0
 8001316:	4699      	mov	r9, r3
 8001318:	4483      	add	fp, r0
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	033c      	lsls	r4, r7, #12
 800131e:	007b      	lsls	r3, r7, #1
 8001320:	4650      	mov	r0, sl
 8001322:	0b24      	lsrs	r4, r4, #12
 8001324:	0d5b      	lsrs	r3, r3, #21
 8001326:	0fff      	lsrs	r7, r7, #31
 8001328:	2b00      	cmp	r3, #0
 800132a:	d067      	beq.n	80013fc <__aeabi_ddiv+0x128>
 800132c:	4a7a      	ldr	r2, [pc, #488]	; (8001518 <__aeabi_ddiv+0x244>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d018      	beq.n	8001364 <__aeabi_ddiv+0x90>
 8001332:	497a      	ldr	r1, [pc, #488]	; (800151c <__aeabi_ddiv+0x248>)
 8001334:	0f42      	lsrs	r2, r0, #29
 8001336:	468c      	mov	ip, r1
 8001338:	00e4      	lsls	r4, r4, #3
 800133a:	4659      	mov	r1, fp
 800133c:	4314      	orrs	r4, r2
 800133e:	2280      	movs	r2, #128	; 0x80
 8001340:	4463      	add	r3, ip
 8001342:	0412      	lsls	r2, r2, #16
 8001344:	1acb      	subs	r3, r1, r3
 8001346:	4314      	orrs	r4, r2
 8001348:	469b      	mov	fp, r3
 800134a:	00c2      	lsls	r2, r0, #3
 800134c:	2000      	movs	r0, #0
 800134e:	0033      	movs	r3, r6
 8001350:	407b      	eors	r3, r7
 8001352:	469a      	mov	sl, r3
 8001354:	464b      	mov	r3, r9
 8001356:	2b0f      	cmp	r3, #15
 8001358:	d900      	bls.n	800135c <__aeabi_ddiv+0x88>
 800135a:	e0ef      	b.n	800153c <__aeabi_ddiv+0x268>
 800135c:	4970      	ldr	r1, [pc, #448]	; (8001520 <__aeabi_ddiv+0x24c>)
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	58cb      	ldr	r3, [r1, r3]
 8001362:	469f      	mov	pc, r3
 8001364:	4b6f      	ldr	r3, [pc, #444]	; (8001524 <__aeabi_ddiv+0x250>)
 8001366:	4652      	mov	r2, sl
 8001368:	469c      	mov	ip, r3
 800136a:	4322      	orrs	r2, r4
 800136c:	44e3      	add	fp, ip
 800136e:	2a00      	cmp	r2, #0
 8001370:	d000      	beq.n	8001374 <__aeabi_ddiv+0xa0>
 8001372:	e095      	b.n	80014a0 <__aeabi_ddiv+0x1cc>
 8001374:	4649      	mov	r1, r9
 8001376:	2302      	movs	r3, #2
 8001378:	4319      	orrs	r1, r3
 800137a:	4689      	mov	r9, r1
 800137c:	2400      	movs	r4, #0
 800137e:	2002      	movs	r0, #2
 8001380:	e7e5      	b.n	800134e <__aeabi_ddiv+0x7a>
 8001382:	2300      	movs	r3, #0
 8001384:	2400      	movs	r4, #0
 8001386:	2500      	movs	r5, #0
 8001388:	4652      	mov	r2, sl
 800138a:	051b      	lsls	r3, r3, #20
 800138c:	4323      	orrs	r3, r4
 800138e:	07d2      	lsls	r2, r2, #31
 8001390:	4313      	orrs	r3, r2
 8001392:	0028      	movs	r0, r5
 8001394:	0019      	movs	r1, r3
 8001396:	b005      	add	sp, #20
 8001398:	bcf0      	pop	{r4, r5, r6, r7}
 800139a:	46bb      	mov	fp, r7
 800139c:	46b2      	mov	sl, r6
 800139e:	46a9      	mov	r9, r5
 80013a0:	46a0      	mov	r8, r4
 80013a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a4:	2400      	movs	r4, #0
 80013a6:	2500      	movs	r5, #0
 80013a8:	4b5b      	ldr	r3, [pc, #364]	; (8001518 <__aeabi_ddiv+0x244>)
 80013aa:	e7ed      	b.n	8001388 <__aeabi_ddiv+0xb4>
 80013ac:	464b      	mov	r3, r9
 80013ae:	4323      	orrs	r3, r4
 80013b0:	4698      	mov	r8, r3
 80013b2:	d100      	bne.n	80013b6 <__aeabi_ddiv+0xe2>
 80013b4:	e089      	b.n	80014ca <__aeabi_ddiv+0x1f6>
 80013b6:	2c00      	cmp	r4, #0
 80013b8:	d100      	bne.n	80013bc <__aeabi_ddiv+0xe8>
 80013ba:	e1e0      	b.n	800177e <__aeabi_ddiv+0x4aa>
 80013bc:	0020      	movs	r0, r4
 80013be:	f000 fd95 	bl	8001eec <__clzsi2>
 80013c2:	0001      	movs	r1, r0
 80013c4:	0002      	movs	r2, r0
 80013c6:	390b      	subs	r1, #11
 80013c8:	231d      	movs	r3, #29
 80013ca:	1a5b      	subs	r3, r3, r1
 80013cc:	4649      	mov	r1, r9
 80013ce:	0010      	movs	r0, r2
 80013d0:	40d9      	lsrs	r1, r3
 80013d2:	3808      	subs	r0, #8
 80013d4:	4084      	lsls	r4, r0
 80013d6:	000b      	movs	r3, r1
 80013d8:	464d      	mov	r5, r9
 80013da:	4323      	orrs	r3, r4
 80013dc:	4698      	mov	r8, r3
 80013de:	4085      	lsls	r5, r0
 80013e0:	4851      	ldr	r0, [pc, #324]	; (8001528 <__aeabi_ddiv+0x254>)
 80013e2:	033c      	lsls	r4, r7, #12
 80013e4:	1a83      	subs	r3, r0, r2
 80013e6:	469b      	mov	fp, r3
 80013e8:	2300      	movs	r3, #0
 80013ea:	4699      	mov	r9, r3
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	007b      	lsls	r3, r7, #1
 80013f0:	4650      	mov	r0, sl
 80013f2:	0b24      	lsrs	r4, r4, #12
 80013f4:	0d5b      	lsrs	r3, r3, #21
 80013f6:	0fff      	lsrs	r7, r7, #31
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d197      	bne.n	800132c <__aeabi_ddiv+0x58>
 80013fc:	4652      	mov	r2, sl
 80013fe:	4322      	orrs	r2, r4
 8001400:	d055      	beq.n	80014ae <__aeabi_ddiv+0x1da>
 8001402:	2c00      	cmp	r4, #0
 8001404:	d100      	bne.n	8001408 <__aeabi_ddiv+0x134>
 8001406:	e1ca      	b.n	800179e <__aeabi_ddiv+0x4ca>
 8001408:	0020      	movs	r0, r4
 800140a:	f000 fd6f 	bl	8001eec <__clzsi2>
 800140e:	0002      	movs	r2, r0
 8001410:	3a0b      	subs	r2, #11
 8001412:	231d      	movs	r3, #29
 8001414:	0001      	movs	r1, r0
 8001416:	1a9b      	subs	r3, r3, r2
 8001418:	4652      	mov	r2, sl
 800141a:	3908      	subs	r1, #8
 800141c:	40da      	lsrs	r2, r3
 800141e:	408c      	lsls	r4, r1
 8001420:	4314      	orrs	r4, r2
 8001422:	4652      	mov	r2, sl
 8001424:	408a      	lsls	r2, r1
 8001426:	4b41      	ldr	r3, [pc, #260]	; (800152c <__aeabi_ddiv+0x258>)
 8001428:	4458      	add	r0, fp
 800142a:	469b      	mov	fp, r3
 800142c:	4483      	add	fp, r0
 800142e:	2000      	movs	r0, #0
 8001430:	e78d      	b.n	800134e <__aeabi_ddiv+0x7a>
 8001432:	464b      	mov	r3, r9
 8001434:	4323      	orrs	r3, r4
 8001436:	4698      	mov	r8, r3
 8001438:	d140      	bne.n	80014bc <__aeabi_ddiv+0x1e8>
 800143a:	2308      	movs	r3, #8
 800143c:	4699      	mov	r9, r3
 800143e:	3b06      	subs	r3, #6
 8001440:	2500      	movs	r5, #0
 8001442:	4683      	mov	fp, r0
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	e769      	b.n	800131c <__aeabi_ddiv+0x48>
 8001448:	46b2      	mov	sl, r6
 800144a:	9b00      	ldr	r3, [sp, #0]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d0a9      	beq.n	80013a4 <__aeabi_ddiv+0xd0>
 8001450:	2b03      	cmp	r3, #3
 8001452:	d100      	bne.n	8001456 <__aeabi_ddiv+0x182>
 8001454:	e211      	b.n	800187a <__aeabi_ddiv+0x5a6>
 8001456:	2b01      	cmp	r3, #1
 8001458:	d093      	beq.n	8001382 <__aeabi_ddiv+0xae>
 800145a:	4a35      	ldr	r2, [pc, #212]	; (8001530 <__aeabi_ddiv+0x25c>)
 800145c:	445a      	add	r2, fp
 800145e:	2a00      	cmp	r2, #0
 8001460:	dc00      	bgt.n	8001464 <__aeabi_ddiv+0x190>
 8001462:	e13c      	b.n	80016de <__aeabi_ddiv+0x40a>
 8001464:	076b      	lsls	r3, r5, #29
 8001466:	d000      	beq.n	800146a <__aeabi_ddiv+0x196>
 8001468:	e1a7      	b.n	80017ba <__aeabi_ddiv+0x4e6>
 800146a:	08ed      	lsrs	r5, r5, #3
 800146c:	4643      	mov	r3, r8
 800146e:	01db      	lsls	r3, r3, #7
 8001470:	d506      	bpl.n	8001480 <__aeabi_ddiv+0x1ac>
 8001472:	4642      	mov	r2, r8
 8001474:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <__aeabi_ddiv+0x260>)
 8001476:	401a      	ands	r2, r3
 8001478:	4690      	mov	r8, r2
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	00d2      	lsls	r2, r2, #3
 800147e:	445a      	add	r2, fp
 8001480:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <__aeabi_ddiv+0x264>)
 8001482:	429a      	cmp	r2, r3
 8001484:	dc8e      	bgt.n	80013a4 <__aeabi_ddiv+0xd0>
 8001486:	4643      	mov	r3, r8
 8001488:	0552      	lsls	r2, r2, #21
 800148a:	0758      	lsls	r0, r3, #29
 800148c:	025c      	lsls	r4, r3, #9
 800148e:	4305      	orrs	r5, r0
 8001490:	0b24      	lsrs	r4, r4, #12
 8001492:	0d53      	lsrs	r3, r2, #21
 8001494:	e778      	b.n	8001388 <__aeabi_ddiv+0xb4>
 8001496:	46ba      	mov	sl, r7
 8001498:	46a0      	mov	r8, r4
 800149a:	0015      	movs	r5, r2
 800149c:	9000      	str	r0, [sp, #0]
 800149e:	e7d4      	b.n	800144a <__aeabi_ddiv+0x176>
 80014a0:	464a      	mov	r2, r9
 80014a2:	2303      	movs	r3, #3
 80014a4:	431a      	orrs	r2, r3
 80014a6:	4691      	mov	r9, r2
 80014a8:	2003      	movs	r0, #3
 80014aa:	4652      	mov	r2, sl
 80014ac:	e74f      	b.n	800134e <__aeabi_ddiv+0x7a>
 80014ae:	4649      	mov	r1, r9
 80014b0:	2301      	movs	r3, #1
 80014b2:	4319      	orrs	r1, r3
 80014b4:	4689      	mov	r9, r1
 80014b6:	2400      	movs	r4, #0
 80014b8:	2001      	movs	r0, #1
 80014ba:	e748      	b.n	800134e <__aeabi_ddiv+0x7a>
 80014bc:	230c      	movs	r3, #12
 80014be:	4699      	mov	r9, r3
 80014c0:	3b09      	subs	r3, #9
 80014c2:	46a0      	mov	r8, r4
 80014c4:	4683      	mov	fp, r0
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	e728      	b.n	800131c <__aeabi_ddiv+0x48>
 80014ca:	2304      	movs	r3, #4
 80014cc:	4699      	mov	r9, r3
 80014ce:	2300      	movs	r3, #0
 80014d0:	469b      	mov	fp, r3
 80014d2:	3301      	adds	r3, #1
 80014d4:	2500      	movs	r5, #0
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	e720      	b.n	800131c <__aeabi_ddiv+0x48>
 80014da:	2300      	movs	r3, #0
 80014dc:	2480      	movs	r4, #128	; 0x80
 80014de:	469a      	mov	sl, r3
 80014e0:	2500      	movs	r5, #0
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <__aeabi_ddiv+0x244>)
 80014e4:	0324      	lsls	r4, r4, #12
 80014e6:	e74f      	b.n	8001388 <__aeabi_ddiv+0xb4>
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	4641      	mov	r1, r8
 80014ec:	031b      	lsls	r3, r3, #12
 80014ee:	4219      	tst	r1, r3
 80014f0:	d008      	beq.n	8001504 <__aeabi_ddiv+0x230>
 80014f2:	421c      	tst	r4, r3
 80014f4:	d106      	bne.n	8001504 <__aeabi_ddiv+0x230>
 80014f6:	431c      	orrs	r4, r3
 80014f8:	0324      	lsls	r4, r4, #12
 80014fa:	46ba      	mov	sl, r7
 80014fc:	0015      	movs	r5, r2
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <__aeabi_ddiv+0x244>)
 8001500:	0b24      	lsrs	r4, r4, #12
 8001502:	e741      	b.n	8001388 <__aeabi_ddiv+0xb4>
 8001504:	2480      	movs	r4, #128	; 0x80
 8001506:	4643      	mov	r3, r8
 8001508:	0324      	lsls	r4, r4, #12
 800150a:	431c      	orrs	r4, r3
 800150c:	0324      	lsls	r4, r4, #12
 800150e:	46b2      	mov	sl, r6
 8001510:	4b01      	ldr	r3, [pc, #4]	; (8001518 <__aeabi_ddiv+0x244>)
 8001512:	0b24      	lsrs	r4, r4, #12
 8001514:	e738      	b.n	8001388 <__aeabi_ddiv+0xb4>
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	000007ff 	.word	0x000007ff
 800151c:	fffffc01 	.word	0xfffffc01
 8001520:	08005e6c 	.word	0x08005e6c
 8001524:	fffff801 	.word	0xfffff801
 8001528:	fffffc0d 	.word	0xfffffc0d
 800152c:	000003f3 	.word	0x000003f3
 8001530:	000003ff 	.word	0x000003ff
 8001534:	feffffff 	.word	0xfeffffff
 8001538:	000007fe 	.word	0x000007fe
 800153c:	4544      	cmp	r4, r8
 800153e:	d200      	bcs.n	8001542 <__aeabi_ddiv+0x26e>
 8001540:	e116      	b.n	8001770 <__aeabi_ddiv+0x49c>
 8001542:	d100      	bne.n	8001546 <__aeabi_ddiv+0x272>
 8001544:	e111      	b.n	800176a <__aeabi_ddiv+0x496>
 8001546:	2301      	movs	r3, #1
 8001548:	425b      	negs	r3, r3
 800154a:	469c      	mov	ip, r3
 800154c:	002e      	movs	r6, r5
 800154e:	4640      	mov	r0, r8
 8001550:	2500      	movs	r5, #0
 8001552:	44e3      	add	fp, ip
 8001554:	0223      	lsls	r3, r4, #8
 8001556:	0e14      	lsrs	r4, r2, #24
 8001558:	431c      	orrs	r4, r3
 800155a:	0c1b      	lsrs	r3, r3, #16
 800155c:	4699      	mov	r9, r3
 800155e:	0423      	lsls	r3, r4, #16
 8001560:	0c1f      	lsrs	r7, r3, #16
 8001562:	0212      	lsls	r2, r2, #8
 8001564:	4649      	mov	r1, r9
 8001566:	9200      	str	r2, [sp, #0]
 8001568:	9701      	str	r7, [sp, #4]
 800156a:	f7fe fe5d 	bl	8000228 <__aeabi_uidivmod>
 800156e:	0002      	movs	r2, r0
 8001570:	437a      	muls	r2, r7
 8001572:	040b      	lsls	r3, r1, #16
 8001574:	0c31      	lsrs	r1, r6, #16
 8001576:	4680      	mov	r8, r0
 8001578:	4319      	orrs	r1, r3
 800157a:	428a      	cmp	r2, r1
 800157c:	d90b      	bls.n	8001596 <__aeabi_ddiv+0x2c2>
 800157e:	2301      	movs	r3, #1
 8001580:	425b      	negs	r3, r3
 8001582:	469c      	mov	ip, r3
 8001584:	1909      	adds	r1, r1, r4
 8001586:	44e0      	add	r8, ip
 8001588:	428c      	cmp	r4, r1
 800158a:	d804      	bhi.n	8001596 <__aeabi_ddiv+0x2c2>
 800158c:	428a      	cmp	r2, r1
 800158e:	d902      	bls.n	8001596 <__aeabi_ddiv+0x2c2>
 8001590:	1e83      	subs	r3, r0, #2
 8001592:	4698      	mov	r8, r3
 8001594:	1909      	adds	r1, r1, r4
 8001596:	1a88      	subs	r0, r1, r2
 8001598:	4649      	mov	r1, r9
 800159a:	f7fe fe45 	bl	8000228 <__aeabi_uidivmod>
 800159e:	0409      	lsls	r1, r1, #16
 80015a0:	468c      	mov	ip, r1
 80015a2:	0431      	lsls	r1, r6, #16
 80015a4:	4666      	mov	r6, ip
 80015a6:	9a01      	ldr	r2, [sp, #4]
 80015a8:	0c09      	lsrs	r1, r1, #16
 80015aa:	4342      	muls	r2, r0
 80015ac:	0003      	movs	r3, r0
 80015ae:	4331      	orrs	r1, r6
 80015b0:	428a      	cmp	r2, r1
 80015b2:	d904      	bls.n	80015be <__aeabi_ddiv+0x2ea>
 80015b4:	1909      	adds	r1, r1, r4
 80015b6:	3b01      	subs	r3, #1
 80015b8:	428c      	cmp	r4, r1
 80015ba:	d800      	bhi.n	80015be <__aeabi_ddiv+0x2ea>
 80015bc:	e111      	b.n	80017e2 <__aeabi_ddiv+0x50e>
 80015be:	1a89      	subs	r1, r1, r2
 80015c0:	4642      	mov	r2, r8
 80015c2:	9e00      	ldr	r6, [sp, #0]
 80015c4:	0412      	lsls	r2, r2, #16
 80015c6:	431a      	orrs	r2, r3
 80015c8:	0c33      	lsrs	r3, r6, #16
 80015ca:	001f      	movs	r7, r3
 80015cc:	0c10      	lsrs	r0, r2, #16
 80015ce:	4690      	mov	r8, r2
 80015d0:	9302      	str	r3, [sp, #8]
 80015d2:	0413      	lsls	r3, r2, #16
 80015d4:	0432      	lsls	r2, r6, #16
 80015d6:	0c16      	lsrs	r6, r2, #16
 80015d8:	0032      	movs	r2, r6
 80015da:	0c1b      	lsrs	r3, r3, #16
 80015dc:	435a      	muls	r2, r3
 80015de:	9603      	str	r6, [sp, #12]
 80015e0:	437b      	muls	r3, r7
 80015e2:	4346      	muls	r6, r0
 80015e4:	4378      	muls	r0, r7
 80015e6:	0c17      	lsrs	r7, r2, #16
 80015e8:	46bc      	mov	ip, r7
 80015ea:	199b      	adds	r3, r3, r6
 80015ec:	4463      	add	r3, ip
 80015ee:	429e      	cmp	r6, r3
 80015f0:	d903      	bls.n	80015fa <__aeabi_ddiv+0x326>
 80015f2:	2680      	movs	r6, #128	; 0x80
 80015f4:	0276      	lsls	r6, r6, #9
 80015f6:	46b4      	mov	ip, r6
 80015f8:	4460      	add	r0, ip
 80015fa:	0c1e      	lsrs	r6, r3, #16
 80015fc:	1830      	adds	r0, r6, r0
 80015fe:	0416      	lsls	r6, r2, #16
 8001600:	041b      	lsls	r3, r3, #16
 8001602:	0c36      	lsrs	r6, r6, #16
 8001604:	199e      	adds	r6, r3, r6
 8001606:	4281      	cmp	r1, r0
 8001608:	d200      	bcs.n	800160c <__aeabi_ddiv+0x338>
 800160a:	e09c      	b.n	8001746 <__aeabi_ddiv+0x472>
 800160c:	d100      	bne.n	8001610 <__aeabi_ddiv+0x33c>
 800160e:	e097      	b.n	8001740 <__aeabi_ddiv+0x46c>
 8001610:	1bae      	subs	r6, r5, r6
 8001612:	1a09      	subs	r1, r1, r0
 8001614:	42b5      	cmp	r5, r6
 8001616:	4180      	sbcs	r0, r0
 8001618:	4240      	negs	r0, r0
 800161a:	1a08      	subs	r0, r1, r0
 800161c:	4284      	cmp	r4, r0
 800161e:	d100      	bne.n	8001622 <__aeabi_ddiv+0x34e>
 8001620:	e111      	b.n	8001846 <__aeabi_ddiv+0x572>
 8001622:	4649      	mov	r1, r9
 8001624:	f7fe fe00 	bl	8000228 <__aeabi_uidivmod>
 8001628:	9a01      	ldr	r2, [sp, #4]
 800162a:	040b      	lsls	r3, r1, #16
 800162c:	4342      	muls	r2, r0
 800162e:	0c31      	lsrs	r1, r6, #16
 8001630:	0005      	movs	r5, r0
 8001632:	4319      	orrs	r1, r3
 8001634:	428a      	cmp	r2, r1
 8001636:	d907      	bls.n	8001648 <__aeabi_ddiv+0x374>
 8001638:	1909      	adds	r1, r1, r4
 800163a:	3d01      	subs	r5, #1
 800163c:	428c      	cmp	r4, r1
 800163e:	d803      	bhi.n	8001648 <__aeabi_ddiv+0x374>
 8001640:	428a      	cmp	r2, r1
 8001642:	d901      	bls.n	8001648 <__aeabi_ddiv+0x374>
 8001644:	1e85      	subs	r5, r0, #2
 8001646:	1909      	adds	r1, r1, r4
 8001648:	1a88      	subs	r0, r1, r2
 800164a:	4649      	mov	r1, r9
 800164c:	f7fe fdec 	bl	8000228 <__aeabi_uidivmod>
 8001650:	0409      	lsls	r1, r1, #16
 8001652:	468c      	mov	ip, r1
 8001654:	0431      	lsls	r1, r6, #16
 8001656:	4666      	mov	r6, ip
 8001658:	9a01      	ldr	r2, [sp, #4]
 800165a:	0c09      	lsrs	r1, r1, #16
 800165c:	4342      	muls	r2, r0
 800165e:	0003      	movs	r3, r0
 8001660:	4331      	orrs	r1, r6
 8001662:	428a      	cmp	r2, r1
 8001664:	d907      	bls.n	8001676 <__aeabi_ddiv+0x3a2>
 8001666:	1909      	adds	r1, r1, r4
 8001668:	3b01      	subs	r3, #1
 800166a:	428c      	cmp	r4, r1
 800166c:	d803      	bhi.n	8001676 <__aeabi_ddiv+0x3a2>
 800166e:	428a      	cmp	r2, r1
 8001670:	d901      	bls.n	8001676 <__aeabi_ddiv+0x3a2>
 8001672:	1e83      	subs	r3, r0, #2
 8001674:	1909      	adds	r1, r1, r4
 8001676:	9e03      	ldr	r6, [sp, #12]
 8001678:	1a89      	subs	r1, r1, r2
 800167a:	0032      	movs	r2, r6
 800167c:	042d      	lsls	r5, r5, #16
 800167e:	431d      	orrs	r5, r3
 8001680:	9f02      	ldr	r7, [sp, #8]
 8001682:	042b      	lsls	r3, r5, #16
 8001684:	0c1b      	lsrs	r3, r3, #16
 8001686:	435a      	muls	r2, r3
 8001688:	437b      	muls	r3, r7
 800168a:	469c      	mov	ip, r3
 800168c:	0c28      	lsrs	r0, r5, #16
 800168e:	4346      	muls	r6, r0
 8001690:	0c13      	lsrs	r3, r2, #16
 8001692:	44b4      	add	ip, r6
 8001694:	4463      	add	r3, ip
 8001696:	4378      	muls	r0, r7
 8001698:	429e      	cmp	r6, r3
 800169a:	d903      	bls.n	80016a4 <__aeabi_ddiv+0x3d0>
 800169c:	2680      	movs	r6, #128	; 0x80
 800169e:	0276      	lsls	r6, r6, #9
 80016a0:	46b4      	mov	ip, r6
 80016a2:	4460      	add	r0, ip
 80016a4:	0c1e      	lsrs	r6, r3, #16
 80016a6:	0412      	lsls	r2, r2, #16
 80016a8:	041b      	lsls	r3, r3, #16
 80016aa:	0c12      	lsrs	r2, r2, #16
 80016ac:	1830      	adds	r0, r6, r0
 80016ae:	189b      	adds	r3, r3, r2
 80016b0:	4281      	cmp	r1, r0
 80016b2:	d306      	bcc.n	80016c2 <__aeabi_ddiv+0x3ee>
 80016b4:	d002      	beq.n	80016bc <__aeabi_ddiv+0x3e8>
 80016b6:	2301      	movs	r3, #1
 80016b8:	431d      	orrs	r5, r3
 80016ba:	e6ce      	b.n	800145a <__aeabi_ddiv+0x186>
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d100      	bne.n	80016c2 <__aeabi_ddiv+0x3ee>
 80016c0:	e6cb      	b.n	800145a <__aeabi_ddiv+0x186>
 80016c2:	1861      	adds	r1, r4, r1
 80016c4:	1e6e      	subs	r6, r5, #1
 80016c6:	42a1      	cmp	r1, r4
 80016c8:	d200      	bcs.n	80016cc <__aeabi_ddiv+0x3f8>
 80016ca:	e0a4      	b.n	8001816 <__aeabi_ddiv+0x542>
 80016cc:	4281      	cmp	r1, r0
 80016ce:	d200      	bcs.n	80016d2 <__aeabi_ddiv+0x3fe>
 80016d0:	e0c9      	b.n	8001866 <__aeabi_ddiv+0x592>
 80016d2:	d100      	bne.n	80016d6 <__aeabi_ddiv+0x402>
 80016d4:	e0d9      	b.n	800188a <__aeabi_ddiv+0x5b6>
 80016d6:	0035      	movs	r5, r6
 80016d8:	e7ed      	b.n	80016b6 <__aeabi_ddiv+0x3e2>
 80016da:	2501      	movs	r5, #1
 80016dc:	426d      	negs	r5, r5
 80016de:	2101      	movs	r1, #1
 80016e0:	1a89      	subs	r1, r1, r2
 80016e2:	2938      	cmp	r1, #56	; 0x38
 80016e4:	dd00      	ble.n	80016e8 <__aeabi_ddiv+0x414>
 80016e6:	e64c      	b.n	8001382 <__aeabi_ddiv+0xae>
 80016e8:	291f      	cmp	r1, #31
 80016ea:	dc00      	bgt.n	80016ee <__aeabi_ddiv+0x41a>
 80016ec:	e07f      	b.n	80017ee <__aeabi_ddiv+0x51a>
 80016ee:	231f      	movs	r3, #31
 80016f0:	425b      	negs	r3, r3
 80016f2:	1a9a      	subs	r2, r3, r2
 80016f4:	4643      	mov	r3, r8
 80016f6:	40d3      	lsrs	r3, r2
 80016f8:	2920      	cmp	r1, #32
 80016fa:	d004      	beq.n	8001706 <__aeabi_ddiv+0x432>
 80016fc:	4644      	mov	r4, r8
 80016fe:	4a65      	ldr	r2, [pc, #404]	; (8001894 <__aeabi_ddiv+0x5c0>)
 8001700:	445a      	add	r2, fp
 8001702:	4094      	lsls	r4, r2
 8001704:	4325      	orrs	r5, r4
 8001706:	1e6a      	subs	r2, r5, #1
 8001708:	4195      	sbcs	r5, r2
 800170a:	2207      	movs	r2, #7
 800170c:	432b      	orrs	r3, r5
 800170e:	0015      	movs	r5, r2
 8001710:	2400      	movs	r4, #0
 8001712:	401d      	ands	r5, r3
 8001714:	421a      	tst	r2, r3
 8001716:	d100      	bne.n	800171a <__aeabi_ddiv+0x446>
 8001718:	e0a1      	b.n	800185e <__aeabi_ddiv+0x58a>
 800171a:	220f      	movs	r2, #15
 800171c:	2400      	movs	r4, #0
 800171e:	401a      	ands	r2, r3
 8001720:	2a04      	cmp	r2, #4
 8001722:	d100      	bne.n	8001726 <__aeabi_ddiv+0x452>
 8001724:	e098      	b.n	8001858 <__aeabi_ddiv+0x584>
 8001726:	1d1a      	adds	r2, r3, #4
 8001728:	429a      	cmp	r2, r3
 800172a:	419b      	sbcs	r3, r3
 800172c:	425b      	negs	r3, r3
 800172e:	18e4      	adds	r4, r4, r3
 8001730:	0013      	movs	r3, r2
 8001732:	0222      	lsls	r2, r4, #8
 8001734:	d400      	bmi.n	8001738 <__aeabi_ddiv+0x464>
 8001736:	e08f      	b.n	8001858 <__aeabi_ddiv+0x584>
 8001738:	2301      	movs	r3, #1
 800173a:	2400      	movs	r4, #0
 800173c:	2500      	movs	r5, #0
 800173e:	e623      	b.n	8001388 <__aeabi_ddiv+0xb4>
 8001740:	42b5      	cmp	r5, r6
 8001742:	d300      	bcc.n	8001746 <__aeabi_ddiv+0x472>
 8001744:	e764      	b.n	8001610 <__aeabi_ddiv+0x33c>
 8001746:	4643      	mov	r3, r8
 8001748:	1e5a      	subs	r2, r3, #1
 800174a:	9b00      	ldr	r3, [sp, #0]
 800174c:	469c      	mov	ip, r3
 800174e:	4465      	add	r5, ip
 8001750:	001f      	movs	r7, r3
 8001752:	429d      	cmp	r5, r3
 8001754:	419b      	sbcs	r3, r3
 8001756:	425b      	negs	r3, r3
 8001758:	191b      	adds	r3, r3, r4
 800175a:	18c9      	adds	r1, r1, r3
 800175c:	428c      	cmp	r4, r1
 800175e:	d23a      	bcs.n	80017d6 <__aeabi_ddiv+0x502>
 8001760:	4288      	cmp	r0, r1
 8001762:	d863      	bhi.n	800182c <__aeabi_ddiv+0x558>
 8001764:	d060      	beq.n	8001828 <__aeabi_ddiv+0x554>
 8001766:	4690      	mov	r8, r2
 8001768:	e752      	b.n	8001610 <__aeabi_ddiv+0x33c>
 800176a:	42aa      	cmp	r2, r5
 800176c:	d900      	bls.n	8001770 <__aeabi_ddiv+0x49c>
 800176e:	e6ea      	b.n	8001546 <__aeabi_ddiv+0x272>
 8001770:	4643      	mov	r3, r8
 8001772:	07de      	lsls	r6, r3, #31
 8001774:	0858      	lsrs	r0, r3, #1
 8001776:	086b      	lsrs	r3, r5, #1
 8001778:	431e      	orrs	r6, r3
 800177a:	07ed      	lsls	r5, r5, #31
 800177c:	e6ea      	b.n	8001554 <__aeabi_ddiv+0x280>
 800177e:	4648      	mov	r0, r9
 8001780:	f000 fbb4 	bl	8001eec <__clzsi2>
 8001784:	0001      	movs	r1, r0
 8001786:	0002      	movs	r2, r0
 8001788:	3115      	adds	r1, #21
 800178a:	3220      	adds	r2, #32
 800178c:	291c      	cmp	r1, #28
 800178e:	dc00      	bgt.n	8001792 <__aeabi_ddiv+0x4be>
 8001790:	e61a      	b.n	80013c8 <__aeabi_ddiv+0xf4>
 8001792:	464b      	mov	r3, r9
 8001794:	3808      	subs	r0, #8
 8001796:	4083      	lsls	r3, r0
 8001798:	2500      	movs	r5, #0
 800179a:	4698      	mov	r8, r3
 800179c:	e620      	b.n	80013e0 <__aeabi_ddiv+0x10c>
 800179e:	f000 fba5 	bl	8001eec <__clzsi2>
 80017a2:	0003      	movs	r3, r0
 80017a4:	001a      	movs	r2, r3
 80017a6:	3215      	adds	r2, #21
 80017a8:	3020      	adds	r0, #32
 80017aa:	2a1c      	cmp	r2, #28
 80017ac:	dc00      	bgt.n	80017b0 <__aeabi_ddiv+0x4dc>
 80017ae:	e630      	b.n	8001412 <__aeabi_ddiv+0x13e>
 80017b0:	4654      	mov	r4, sl
 80017b2:	3b08      	subs	r3, #8
 80017b4:	2200      	movs	r2, #0
 80017b6:	409c      	lsls	r4, r3
 80017b8:	e635      	b.n	8001426 <__aeabi_ddiv+0x152>
 80017ba:	230f      	movs	r3, #15
 80017bc:	402b      	ands	r3, r5
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d100      	bne.n	80017c4 <__aeabi_ddiv+0x4f0>
 80017c2:	e652      	b.n	800146a <__aeabi_ddiv+0x196>
 80017c4:	2305      	movs	r3, #5
 80017c6:	425b      	negs	r3, r3
 80017c8:	42ab      	cmp	r3, r5
 80017ca:	419b      	sbcs	r3, r3
 80017cc:	3504      	adds	r5, #4
 80017ce:	425b      	negs	r3, r3
 80017d0:	08ed      	lsrs	r5, r5, #3
 80017d2:	4498      	add	r8, r3
 80017d4:	e64a      	b.n	800146c <__aeabi_ddiv+0x198>
 80017d6:	428c      	cmp	r4, r1
 80017d8:	d1c5      	bne.n	8001766 <__aeabi_ddiv+0x492>
 80017da:	42af      	cmp	r7, r5
 80017dc:	d9c0      	bls.n	8001760 <__aeabi_ddiv+0x48c>
 80017de:	4690      	mov	r8, r2
 80017e0:	e716      	b.n	8001610 <__aeabi_ddiv+0x33c>
 80017e2:	428a      	cmp	r2, r1
 80017e4:	d800      	bhi.n	80017e8 <__aeabi_ddiv+0x514>
 80017e6:	e6ea      	b.n	80015be <__aeabi_ddiv+0x2ea>
 80017e8:	1e83      	subs	r3, r0, #2
 80017ea:	1909      	adds	r1, r1, r4
 80017ec:	e6e7      	b.n	80015be <__aeabi_ddiv+0x2ea>
 80017ee:	4a2a      	ldr	r2, [pc, #168]	; (8001898 <__aeabi_ddiv+0x5c4>)
 80017f0:	0028      	movs	r0, r5
 80017f2:	445a      	add	r2, fp
 80017f4:	4643      	mov	r3, r8
 80017f6:	4095      	lsls	r5, r2
 80017f8:	4093      	lsls	r3, r2
 80017fa:	40c8      	lsrs	r0, r1
 80017fc:	1e6a      	subs	r2, r5, #1
 80017fe:	4195      	sbcs	r5, r2
 8001800:	4644      	mov	r4, r8
 8001802:	4303      	orrs	r3, r0
 8001804:	432b      	orrs	r3, r5
 8001806:	40cc      	lsrs	r4, r1
 8001808:	075a      	lsls	r2, r3, #29
 800180a:	d092      	beq.n	8001732 <__aeabi_ddiv+0x45e>
 800180c:	220f      	movs	r2, #15
 800180e:	401a      	ands	r2, r3
 8001810:	2a04      	cmp	r2, #4
 8001812:	d188      	bne.n	8001726 <__aeabi_ddiv+0x452>
 8001814:	e78d      	b.n	8001732 <__aeabi_ddiv+0x45e>
 8001816:	0035      	movs	r5, r6
 8001818:	4281      	cmp	r1, r0
 800181a:	d000      	beq.n	800181e <__aeabi_ddiv+0x54a>
 800181c:	e74b      	b.n	80016b6 <__aeabi_ddiv+0x3e2>
 800181e:	9a00      	ldr	r2, [sp, #0]
 8001820:	4293      	cmp	r3, r2
 8001822:	d000      	beq.n	8001826 <__aeabi_ddiv+0x552>
 8001824:	e747      	b.n	80016b6 <__aeabi_ddiv+0x3e2>
 8001826:	e618      	b.n	800145a <__aeabi_ddiv+0x186>
 8001828:	42ae      	cmp	r6, r5
 800182a:	d99c      	bls.n	8001766 <__aeabi_ddiv+0x492>
 800182c:	2302      	movs	r3, #2
 800182e:	425b      	negs	r3, r3
 8001830:	469c      	mov	ip, r3
 8001832:	9b00      	ldr	r3, [sp, #0]
 8001834:	44e0      	add	r8, ip
 8001836:	469c      	mov	ip, r3
 8001838:	4465      	add	r5, ip
 800183a:	429d      	cmp	r5, r3
 800183c:	419b      	sbcs	r3, r3
 800183e:	425b      	negs	r3, r3
 8001840:	191b      	adds	r3, r3, r4
 8001842:	18c9      	adds	r1, r1, r3
 8001844:	e6e4      	b.n	8001610 <__aeabi_ddiv+0x33c>
 8001846:	4a15      	ldr	r2, [pc, #84]	; (800189c <__aeabi_ddiv+0x5c8>)
 8001848:	445a      	add	r2, fp
 800184a:	2a00      	cmp	r2, #0
 800184c:	dc00      	bgt.n	8001850 <__aeabi_ddiv+0x57c>
 800184e:	e744      	b.n	80016da <__aeabi_ddiv+0x406>
 8001850:	2301      	movs	r3, #1
 8001852:	2500      	movs	r5, #0
 8001854:	4498      	add	r8, r3
 8001856:	e609      	b.n	800146c <__aeabi_ddiv+0x198>
 8001858:	0765      	lsls	r5, r4, #29
 800185a:	0264      	lsls	r4, r4, #9
 800185c:	0b24      	lsrs	r4, r4, #12
 800185e:	08db      	lsrs	r3, r3, #3
 8001860:	431d      	orrs	r5, r3
 8001862:	2300      	movs	r3, #0
 8001864:	e590      	b.n	8001388 <__aeabi_ddiv+0xb4>
 8001866:	9e00      	ldr	r6, [sp, #0]
 8001868:	3d02      	subs	r5, #2
 800186a:	0072      	lsls	r2, r6, #1
 800186c:	42b2      	cmp	r2, r6
 800186e:	41bf      	sbcs	r7, r7
 8001870:	427f      	negs	r7, r7
 8001872:	193c      	adds	r4, r7, r4
 8001874:	1909      	adds	r1, r1, r4
 8001876:	9200      	str	r2, [sp, #0]
 8001878:	e7ce      	b.n	8001818 <__aeabi_ddiv+0x544>
 800187a:	2480      	movs	r4, #128	; 0x80
 800187c:	4643      	mov	r3, r8
 800187e:	0324      	lsls	r4, r4, #12
 8001880:	431c      	orrs	r4, r3
 8001882:	0324      	lsls	r4, r4, #12
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <__aeabi_ddiv+0x5cc>)
 8001886:	0b24      	lsrs	r4, r4, #12
 8001888:	e57e      	b.n	8001388 <__aeabi_ddiv+0xb4>
 800188a:	9a00      	ldr	r2, [sp, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d3ea      	bcc.n	8001866 <__aeabi_ddiv+0x592>
 8001890:	0035      	movs	r5, r6
 8001892:	e7c4      	b.n	800181e <__aeabi_ddiv+0x54a>
 8001894:	0000043e 	.word	0x0000043e
 8001898:	0000041e 	.word	0x0000041e
 800189c:	000003ff 	.word	0x000003ff
 80018a0:	000007ff 	.word	0x000007ff

080018a4 <__aeabi_dmul>:
 80018a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a6:	4657      	mov	r7, sl
 80018a8:	464e      	mov	r6, r9
 80018aa:	4645      	mov	r5, r8
 80018ac:	46de      	mov	lr, fp
 80018ae:	b5e0      	push	{r5, r6, r7, lr}
 80018b0:	4698      	mov	r8, r3
 80018b2:	030c      	lsls	r4, r1, #12
 80018b4:	004b      	lsls	r3, r1, #1
 80018b6:	0006      	movs	r6, r0
 80018b8:	4692      	mov	sl, r2
 80018ba:	b087      	sub	sp, #28
 80018bc:	0b24      	lsrs	r4, r4, #12
 80018be:	0d5b      	lsrs	r3, r3, #21
 80018c0:	0fcf      	lsrs	r7, r1, #31
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d06c      	beq.n	80019a0 <__aeabi_dmul+0xfc>
 80018c6:	4add      	ldr	r2, [pc, #884]	; (8001c3c <__aeabi_dmul+0x398>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d100      	bne.n	80018ce <__aeabi_dmul+0x2a>
 80018cc:	e086      	b.n	80019dc <__aeabi_dmul+0x138>
 80018ce:	0f42      	lsrs	r2, r0, #29
 80018d0:	00e4      	lsls	r4, r4, #3
 80018d2:	4314      	orrs	r4, r2
 80018d4:	2280      	movs	r2, #128	; 0x80
 80018d6:	0412      	lsls	r2, r2, #16
 80018d8:	4314      	orrs	r4, r2
 80018da:	4ad9      	ldr	r2, [pc, #868]	; (8001c40 <__aeabi_dmul+0x39c>)
 80018dc:	00c5      	lsls	r5, r0, #3
 80018de:	4694      	mov	ip, r2
 80018e0:	4463      	add	r3, ip
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	4699      	mov	r9, r3
 80018e8:	469b      	mov	fp, r3
 80018ea:	4643      	mov	r3, r8
 80018ec:	4642      	mov	r2, r8
 80018ee:	031e      	lsls	r6, r3, #12
 80018f0:	0fd2      	lsrs	r2, r2, #31
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4650      	mov	r0, sl
 80018f6:	4690      	mov	r8, r2
 80018f8:	0b36      	lsrs	r6, r6, #12
 80018fa:	0d5b      	lsrs	r3, r3, #21
 80018fc:	d100      	bne.n	8001900 <__aeabi_dmul+0x5c>
 80018fe:	e078      	b.n	80019f2 <__aeabi_dmul+0x14e>
 8001900:	4ace      	ldr	r2, [pc, #824]	; (8001c3c <__aeabi_dmul+0x398>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d01d      	beq.n	8001942 <__aeabi_dmul+0x9e>
 8001906:	49ce      	ldr	r1, [pc, #824]	; (8001c40 <__aeabi_dmul+0x39c>)
 8001908:	0f42      	lsrs	r2, r0, #29
 800190a:	468c      	mov	ip, r1
 800190c:	9900      	ldr	r1, [sp, #0]
 800190e:	4463      	add	r3, ip
 8001910:	00f6      	lsls	r6, r6, #3
 8001912:	468c      	mov	ip, r1
 8001914:	4316      	orrs	r6, r2
 8001916:	2280      	movs	r2, #128	; 0x80
 8001918:	449c      	add	ip, r3
 800191a:	0412      	lsls	r2, r2, #16
 800191c:	4663      	mov	r3, ip
 800191e:	4316      	orrs	r6, r2
 8001920:	00c2      	lsls	r2, r0, #3
 8001922:	2000      	movs	r0, #0
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	9900      	ldr	r1, [sp, #0]
 8001928:	4643      	mov	r3, r8
 800192a:	3101      	adds	r1, #1
 800192c:	468c      	mov	ip, r1
 800192e:	4649      	mov	r1, r9
 8001930:	407b      	eors	r3, r7
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	290f      	cmp	r1, #15
 8001936:	d900      	bls.n	800193a <__aeabi_dmul+0x96>
 8001938:	e07e      	b.n	8001a38 <__aeabi_dmul+0x194>
 800193a:	4bc2      	ldr	r3, [pc, #776]	; (8001c44 <__aeabi_dmul+0x3a0>)
 800193c:	0089      	lsls	r1, r1, #2
 800193e:	5859      	ldr	r1, [r3, r1]
 8001940:	468f      	mov	pc, r1
 8001942:	4652      	mov	r2, sl
 8001944:	9b00      	ldr	r3, [sp, #0]
 8001946:	4332      	orrs	r2, r6
 8001948:	d000      	beq.n	800194c <__aeabi_dmul+0xa8>
 800194a:	e156      	b.n	8001bfa <__aeabi_dmul+0x356>
 800194c:	49bb      	ldr	r1, [pc, #748]	; (8001c3c <__aeabi_dmul+0x398>)
 800194e:	2600      	movs	r6, #0
 8001950:	468c      	mov	ip, r1
 8001952:	4463      	add	r3, ip
 8001954:	4649      	mov	r1, r9
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2302      	movs	r3, #2
 800195a:	4319      	orrs	r1, r3
 800195c:	4689      	mov	r9, r1
 800195e:	2002      	movs	r0, #2
 8001960:	e7e1      	b.n	8001926 <__aeabi_dmul+0x82>
 8001962:	4643      	mov	r3, r8
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	0034      	movs	r4, r6
 8001968:	0015      	movs	r5, r2
 800196a:	4683      	mov	fp, r0
 800196c:	465b      	mov	r3, fp
 800196e:	2b02      	cmp	r3, #2
 8001970:	d05e      	beq.n	8001a30 <__aeabi_dmul+0x18c>
 8001972:	2b03      	cmp	r3, #3
 8001974:	d100      	bne.n	8001978 <__aeabi_dmul+0xd4>
 8001976:	e1f3      	b.n	8001d60 <__aeabi_dmul+0x4bc>
 8001978:	2b01      	cmp	r3, #1
 800197a:	d000      	beq.n	800197e <__aeabi_dmul+0xda>
 800197c:	e118      	b.n	8001bb0 <__aeabi_dmul+0x30c>
 800197e:	2200      	movs	r2, #0
 8001980:	2400      	movs	r4, #0
 8001982:	2500      	movs	r5, #0
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	0512      	lsls	r2, r2, #20
 8001988:	4322      	orrs	r2, r4
 800198a:	07db      	lsls	r3, r3, #31
 800198c:	431a      	orrs	r2, r3
 800198e:	0028      	movs	r0, r5
 8001990:	0011      	movs	r1, r2
 8001992:	b007      	add	sp, #28
 8001994:	bcf0      	pop	{r4, r5, r6, r7}
 8001996:	46bb      	mov	fp, r7
 8001998:	46b2      	mov	sl, r6
 800199a:	46a9      	mov	r9, r5
 800199c:	46a0      	mov	r8, r4
 800199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a0:	0025      	movs	r5, r4
 80019a2:	4305      	orrs	r5, r0
 80019a4:	d100      	bne.n	80019a8 <__aeabi_dmul+0x104>
 80019a6:	e141      	b.n	8001c2c <__aeabi_dmul+0x388>
 80019a8:	2c00      	cmp	r4, #0
 80019aa:	d100      	bne.n	80019ae <__aeabi_dmul+0x10a>
 80019ac:	e1ad      	b.n	8001d0a <__aeabi_dmul+0x466>
 80019ae:	0020      	movs	r0, r4
 80019b0:	f000 fa9c 	bl	8001eec <__clzsi2>
 80019b4:	0001      	movs	r1, r0
 80019b6:	0002      	movs	r2, r0
 80019b8:	390b      	subs	r1, #11
 80019ba:	231d      	movs	r3, #29
 80019bc:	0010      	movs	r0, r2
 80019be:	1a5b      	subs	r3, r3, r1
 80019c0:	0031      	movs	r1, r6
 80019c2:	0035      	movs	r5, r6
 80019c4:	3808      	subs	r0, #8
 80019c6:	4084      	lsls	r4, r0
 80019c8:	40d9      	lsrs	r1, r3
 80019ca:	4085      	lsls	r5, r0
 80019cc:	430c      	orrs	r4, r1
 80019ce:	489e      	ldr	r0, [pc, #632]	; (8001c48 <__aeabi_dmul+0x3a4>)
 80019d0:	1a83      	subs	r3, r0, r2
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2300      	movs	r3, #0
 80019d6:	4699      	mov	r9, r3
 80019d8:	469b      	mov	fp, r3
 80019da:	e786      	b.n	80018ea <__aeabi_dmul+0x46>
 80019dc:	0005      	movs	r5, r0
 80019de:	4325      	orrs	r5, r4
 80019e0:	d000      	beq.n	80019e4 <__aeabi_dmul+0x140>
 80019e2:	e11c      	b.n	8001c1e <__aeabi_dmul+0x37a>
 80019e4:	2208      	movs	r2, #8
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2302      	movs	r3, #2
 80019ea:	2400      	movs	r4, #0
 80019ec:	4691      	mov	r9, r2
 80019ee:	469b      	mov	fp, r3
 80019f0:	e77b      	b.n	80018ea <__aeabi_dmul+0x46>
 80019f2:	4652      	mov	r2, sl
 80019f4:	4332      	orrs	r2, r6
 80019f6:	d100      	bne.n	80019fa <__aeabi_dmul+0x156>
 80019f8:	e10a      	b.n	8001c10 <__aeabi_dmul+0x36c>
 80019fa:	2e00      	cmp	r6, #0
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dmul+0x15c>
 80019fe:	e176      	b.n	8001cee <__aeabi_dmul+0x44a>
 8001a00:	0030      	movs	r0, r6
 8001a02:	f000 fa73 	bl	8001eec <__clzsi2>
 8001a06:	0002      	movs	r2, r0
 8001a08:	3a0b      	subs	r2, #11
 8001a0a:	231d      	movs	r3, #29
 8001a0c:	0001      	movs	r1, r0
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	4652      	mov	r2, sl
 8001a12:	3908      	subs	r1, #8
 8001a14:	40da      	lsrs	r2, r3
 8001a16:	408e      	lsls	r6, r1
 8001a18:	4316      	orrs	r6, r2
 8001a1a:	4652      	mov	r2, sl
 8001a1c:	408a      	lsls	r2, r1
 8001a1e:	9b00      	ldr	r3, [sp, #0]
 8001a20:	4989      	ldr	r1, [pc, #548]	; (8001c48 <__aeabi_dmul+0x3a4>)
 8001a22:	1a18      	subs	r0, r3, r0
 8001a24:	0003      	movs	r3, r0
 8001a26:	468c      	mov	ip, r1
 8001a28:	4463      	add	r3, ip
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	e77a      	b.n	8001926 <__aeabi_dmul+0x82>
 8001a30:	2400      	movs	r4, #0
 8001a32:	2500      	movs	r5, #0
 8001a34:	4a81      	ldr	r2, [pc, #516]	; (8001c3c <__aeabi_dmul+0x398>)
 8001a36:	e7a5      	b.n	8001984 <__aeabi_dmul+0xe0>
 8001a38:	0c2f      	lsrs	r7, r5, #16
 8001a3a:	042d      	lsls	r5, r5, #16
 8001a3c:	0c2d      	lsrs	r5, r5, #16
 8001a3e:	002b      	movs	r3, r5
 8001a40:	0c11      	lsrs	r1, r2, #16
 8001a42:	0412      	lsls	r2, r2, #16
 8001a44:	0c12      	lsrs	r2, r2, #16
 8001a46:	4353      	muls	r3, r2
 8001a48:	4698      	mov	r8, r3
 8001a4a:	0013      	movs	r3, r2
 8001a4c:	0028      	movs	r0, r5
 8001a4e:	437b      	muls	r3, r7
 8001a50:	4699      	mov	r9, r3
 8001a52:	4348      	muls	r0, r1
 8001a54:	4448      	add	r0, r9
 8001a56:	4683      	mov	fp, r0
 8001a58:	4640      	mov	r0, r8
 8001a5a:	000b      	movs	r3, r1
 8001a5c:	0c00      	lsrs	r0, r0, #16
 8001a5e:	4682      	mov	sl, r0
 8001a60:	4658      	mov	r0, fp
 8001a62:	437b      	muls	r3, r7
 8001a64:	4450      	add	r0, sl
 8001a66:	9302      	str	r3, [sp, #8]
 8001a68:	4581      	cmp	r9, r0
 8001a6a:	d906      	bls.n	8001a7a <__aeabi_dmul+0x1d6>
 8001a6c:	469a      	mov	sl, r3
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	025b      	lsls	r3, r3, #9
 8001a72:	4699      	mov	r9, r3
 8001a74:	44ca      	add	sl, r9
 8001a76:	4653      	mov	r3, sl
 8001a78:	9302      	str	r3, [sp, #8]
 8001a7a:	0c03      	lsrs	r3, r0, #16
 8001a7c:	469b      	mov	fp, r3
 8001a7e:	4643      	mov	r3, r8
 8001a80:	041b      	lsls	r3, r3, #16
 8001a82:	0400      	lsls	r0, r0, #16
 8001a84:	0c1b      	lsrs	r3, r3, #16
 8001a86:	4698      	mov	r8, r3
 8001a88:	0003      	movs	r3, r0
 8001a8a:	4443      	add	r3, r8
 8001a8c:	9304      	str	r3, [sp, #16]
 8001a8e:	0c33      	lsrs	r3, r6, #16
 8001a90:	4699      	mov	r9, r3
 8001a92:	002b      	movs	r3, r5
 8001a94:	0436      	lsls	r6, r6, #16
 8001a96:	0c36      	lsrs	r6, r6, #16
 8001a98:	4373      	muls	r3, r6
 8001a9a:	4698      	mov	r8, r3
 8001a9c:	0033      	movs	r3, r6
 8001a9e:	437b      	muls	r3, r7
 8001aa0:	469a      	mov	sl, r3
 8001aa2:	464b      	mov	r3, r9
 8001aa4:	435d      	muls	r5, r3
 8001aa6:	435f      	muls	r7, r3
 8001aa8:	4643      	mov	r3, r8
 8001aaa:	4455      	add	r5, sl
 8001aac:	0c18      	lsrs	r0, r3, #16
 8001aae:	1940      	adds	r0, r0, r5
 8001ab0:	4582      	cmp	sl, r0
 8001ab2:	d903      	bls.n	8001abc <__aeabi_dmul+0x218>
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	025b      	lsls	r3, r3, #9
 8001ab8:	469a      	mov	sl, r3
 8001aba:	4457      	add	r7, sl
 8001abc:	0c05      	lsrs	r5, r0, #16
 8001abe:	19eb      	adds	r3, r5, r7
 8001ac0:	9305      	str	r3, [sp, #20]
 8001ac2:	4643      	mov	r3, r8
 8001ac4:	041d      	lsls	r5, r3, #16
 8001ac6:	0c2d      	lsrs	r5, r5, #16
 8001ac8:	0400      	lsls	r0, r0, #16
 8001aca:	1940      	adds	r0, r0, r5
 8001acc:	0c25      	lsrs	r5, r4, #16
 8001ace:	0424      	lsls	r4, r4, #16
 8001ad0:	0c24      	lsrs	r4, r4, #16
 8001ad2:	0027      	movs	r7, r4
 8001ad4:	4357      	muls	r7, r2
 8001ad6:	436a      	muls	r2, r5
 8001ad8:	4690      	mov	r8, r2
 8001ada:	002a      	movs	r2, r5
 8001adc:	0c3b      	lsrs	r3, r7, #16
 8001ade:	469a      	mov	sl, r3
 8001ae0:	434a      	muls	r2, r1
 8001ae2:	4361      	muls	r1, r4
 8001ae4:	4441      	add	r1, r8
 8001ae6:	4451      	add	r1, sl
 8001ae8:	4483      	add	fp, r0
 8001aea:	4588      	cmp	r8, r1
 8001aec:	d903      	bls.n	8001af6 <__aeabi_dmul+0x252>
 8001aee:	2380      	movs	r3, #128	; 0x80
 8001af0:	025b      	lsls	r3, r3, #9
 8001af2:	4698      	mov	r8, r3
 8001af4:	4442      	add	r2, r8
 8001af6:	043f      	lsls	r7, r7, #16
 8001af8:	0c0b      	lsrs	r3, r1, #16
 8001afa:	0c3f      	lsrs	r7, r7, #16
 8001afc:	0409      	lsls	r1, r1, #16
 8001afe:	19c9      	adds	r1, r1, r7
 8001b00:	0027      	movs	r7, r4
 8001b02:	4698      	mov	r8, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	4377      	muls	r7, r6
 8001b08:	435c      	muls	r4, r3
 8001b0a:	436e      	muls	r6, r5
 8001b0c:	435d      	muls	r5, r3
 8001b0e:	0c3b      	lsrs	r3, r7, #16
 8001b10:	4699      	mov	r9, r3
 8001b12:	19a4      	adds	r4, r4, r6
 8001b14:	444c      	add	r4, r9
 8001b16:	4442      	add	r2, r8
 8001b18:	9503      	str	r5, [sp, #12]
 8001b1a:	42a6      	cmp	r6, r4
 8001b1c:	d904      	bls.n	8001b28 <__aeabi_dmul+0x284>
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	025b      	lsls	r3, r3, #9
 8001b22:	4698      	mov	r8, r3
 8001b24:	4445      	add	r5, r8
 8001b26:	9503      	str	r5, [sp, #12]
 8001b28:	9b02      	ldr	r3, [sp, #8]
 8001b2a:	043f      	lsls	r7, r7, #16
 8001b2c:	445b      	add	r3, fp
 8001b2e:	001e      	movs	r6, r3
 8001b30:	4283      	cmp	r3, r0
 8001b32:	4180      	sbcs	r0, r0
 8001b34:	0423      	lsls	r3, r4, #16
 8001b36:	4698      	mov	r8, r3
 8001b38:	9b05      	ldr	r3, [sp, #20]
 8001b3a:	0c3f      	lsrs	r7, r7, #16
 8001b3c:	4447      	add	r7, r8
 8001b3e:	4698      	mov	r8, r3
 8001b40:	1876      	adds	r6, r6, r1
 8001b42:	428e      	cmp	r6, r1
 8001b44:	4189      	sbcs	r1, r1
 8001b46:	4447      	add	r7, r8
 8001b48:	4240      	negs	r0, r0
 8001b4a:	183d      	adds	r5, r7, r0
 8001b4c:	46a8      	mov	r8, r5
 8001b4e:	4693      	mov	fp, r2
 8001b50:	4249      	negs	r1, r1
 8001b52:	468a      	mov	sl, r1
 8001b54:	44c3      	add	fp, r8
 8001b56:	429f      	cmp	r7, r3
 8001b58:	41bf      	sbcs	r7, r7
 8001b5a:	4580      	cmp	r8, r0
 8001b5c:	4180      	sbcs	r0, r0
 8001b5e:	9b03      	ldr	r3, [sp, #12]
 8001b60:	44da      	add	sl, fp
 8001b62:	4698      	mov	r8, r3
 8001b64:	4653      	mov	r3, sl
 8001b66:	4240      	negs	r0, r0
 8001b68:	427f      	negs	r7, r7
 8001b6a:	4307      	orrs	r7, r0
 8001b6c:	0c24      	lsrs	r4, r4, #16
 8001b6e:	4593      	cmp	fp, r2
 8001b70:	4192      	sbcs	r2, r2
 8001b72:	458a      	cmp	sl, r1
 8001b74:	4189      	sbcs	r1, r1
 8001b76:	193f      	adds	r7, r7, r4
 8001b78:	0ddc      	lsrs	r4, r3, #23
 8001b7a:	9b04      	ldr	r3, [sp, #16]
 8001b7c:	0275      	lsls	r5, r6, #9
 8001b7e:	431d      	orrs	r5, r3
 8001b80:	1e68      	subs	r0, r5, #1
 8001b82:	4185      	sbcs	r5, r0
 8001b84:	4653      	mov	r3, sl
 8001b86:	4252      	negs	r2, r2
 8001b88:	4249      	negs	r1, r1
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	18bf      	adds	r7, r7, r2
 8001b8e:	4447      	add	r7, r8
 8001b90:	0df6      	lsrs	r6, r6, #23
 8001b92:	027f      	lsls	r7, r7, #9
 8001b94:	4335      	orrs	r5, r6
 8001b96:	025a      	lsls	r2, r3, #9
 8001b98:	433c      	orrs	r4, r7
 8001b9a:	4315      	orrs	r5, r2
 8001b9c:	01fb      	lsls	r3, r7, #7
 8001b9e:	d400      	bmi.n	8001ba2 <__aeabi_dmul+0x2fe>
 8001ba0:	e0c1      	b.n	8001d26 <__aeabi_dmul+0x482>
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	086a      	lsrs	r2, r5, #1
 8001ba6:	400d      	ands	r5, r1
 8001ba8:	4315      	orrs	r5, r2
 8001baa:	07e2      	lsls	r2, r4, #31
 8001bac:	4315      	orrs	r5, r2
 8001bae:	0864      	lsrs	r4, r4, #1
 8001bb0:	4926      	ldr	r1, [pc, #152]	; (8001c4c <__aeabi_dmul+0x3a8>)
 8001bb2:	4461      	add	r1, ip
 8001bb4:	2900      	cmp	r1, #0
 8001bb6:	dd56      	ble.n	8001c66 <__aeabi_dmul+0x3c2>
 8001bb8:	076b      	lsls	r3, r5, #29
 8001bba:	d009      	beq.n	8001bd0 <__aeabi_dmul+0x32c>
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	402a      	ands	r2, r5
 8001bc0:	2a04      	cmp	r2, #4
 8001bc2:	d005      	beq.n	8001bd0 <__aeabi_dmul+0x32c>
 8001bc4:	1d2a      	adds	r2, r5, #4
 8001bc6:	42aa      	cmp	r2, r5
 8001bc8:	41ad      	sbcs	r5, r5
 8001bca:	426d      	negs	r5, r5
 8001bcc:	1964      	adds	r4, r4, r5
 8001bce:	0015      	movs	r5, r2
 8001bd0:	01e3      	lsls	r3, r4, #7
 8001bd2:	d504      	bpl.n	8001bde <__aeabi_dmul+0x33a>
 8001bd4:	2180      	movs	r1, #128	; 0x80
 8001bd6:	4a1e      	ldr	r2, [pc, #120]	; (8001c50 <__aeabi_dmul+0x3ac>)
 8001bd8:	00c9      	lsls	r1, r1, #3
 8001bda:	4014      	ands	r4, r2
 8001bdc:	4461      	add	r1, ip
 8001bde:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <__aeabi_dmul+0x3b0>)
 8001be0:	4291      	cmp	r1, r2
 8001be2:	dd00      	ble.n	8001be6 <__aeabi_dmul+0x342>
 8001be4:	e724      	b.n	8001a30 <__aeabi_dmul+0x18c>
 8001be6:	0762      	lsls	r2, r4, #29
 8001be8:	08ed      	lsrs	r5, r5, #3
 8001bea:	0264      	lsls	r4, r4, #9
 8001bec:	0549      	lsls	r1, r1, #21
 8001bee:	4315      	orrs	r5, r2
 8001bf0:	0b24      	lsrs	r4, r4, #12
 8001bf2:	0d4a      	lsrs	r2, r1, #21
 8001bf4:	e6c6      	b.n	8001984 <__aeabi_dmul+0xe0>
 8001bf6:	9701      	str	r7, [sp, #4]
 8001bf8:	e6b8      	b.n	800196c <__aeabi_dmul+0xc8>
 8001bfa:	4a10      	ldr	r2, [pc, #64]	; (8001c3c <__aeabi_dmul+0x398>)
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	4694      	mov	ip, r2
 8001c00:	4463      	add	r3, ip
 8001c02:	464a      	mov	r2, r9
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2303      	movs	r3, #3
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	4691      	mov	r9, r2
 8001c0c:	4652      	mov	r2, sl
 8001c0e:	e68a      	b.n	8001926 <__aeabi_dmul+0x82>
 8001c10:	4649      	mov	r1, r9
 8001c12:	2301      	movs	r3, #1
 8001c14:	4319      	orrs	r1, r3
 8001c16:	4689      	mov	r9, r1
 8001c18:	2600      	movs	r6, #0
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	e683      	b.n	8001926 <__aeabi_dmul+0x82>
 8001c1e:	220c      	movs	r2, #12
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2303      	movs	r3, #3
 8001c24:	0005      	movs	r5, r0
 8001c26:	4691      	mov	r9, r2
 8001c28:	469b      	mov	fp, r3
 8001c2a:	e65e      	b.n	80018ea <__aeabi_dmul+0x46>
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	4699      	mov	r9, r3
 8001c30:	2300      	movs	r3, #0
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	2400      	movs	r4, #0
 8001c38:	469b      	mov	fp, r3
 8001c3a:	e656      	b.n	80018ea <__aeabi_dmul+0x46>
 8001c3c:	000007ff 	.word	0x000007ff
 8001c40:	fffffc01 	.word	0xfffffc01
 8001c44:	08005eac 	.word	0x08005eac
 8001c48:	fffffc0d 	.word	0xfffffc0d
 8001c4c:	000003ff 	.word	0x000003ff
 8001c50:	feffffff 	.word	0xfeffffff
 8001c54:	000007fe 	.word	0x000007fe
 8001c58:	2300      	movs	r3, #0
 8001c5a:	2480      	movs	r4, #128	; 0x80
 8001c5c:	2500      	movs	r5, #0
 8001c5e:	4a44      	ldr	r2, [pc, #272]	; (8001d70 <__aeabi_dmul+0x4cc>)
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	0324      	lsls	r4, r4, #12
 8001c64:	e68e      	b.n	8001984 <__aeabi_dmul+0xe0>
 8001c66:	2001      	movs	r0, #1
 8001c68:	1a40      	subs	r0, r0, r1
 8001c6a:	2838      	cmp	r0, #56	; 0x38
 8001c6c:	dd00      	ble.n	8001c70 <__aeabi_dmul+0x3cc>
 8001c6e:	e686      	b.n	800197e <__aeabi_dmul+0xda>
 8001c70:	281f      	cmp	r0, #31
 8001c72:	dd5b      	ble.n	8001d2c <__aeabi_dmul+0x488>
 8001c74:	221f      	movs	r2, #31
 8001c76:	0023      	movs	r3, r4
 8001c78:	4252      	negs	r2, r2
 8001c7a:	1a51      	subs	r1, r2, r1
 8001c7c:	40cb      	lsrs	r3, r1
 8001c7e:	0019      	movs	r1, r3
 8001c80:	2820      	cmp	r0, #32
 8001c82:	d003      	beq.n	8001c8c <__aeabi_dmul+0x3e8>
 8001c84:	4a3b      	ldr	r2, [pc, #236]	; (8001d74 <__aeabi_dmul+0x4d0>)
 8001c86:	4462      	add	r2, ip
 8001c88:	4094      	lsls	r4, r2
 8001c8a:	4325      	orrs	r5, r4
 8001c8c:	1e6a      	subs	r2, r5, #1
 8001c8e:	4195      	sbcs	r5, r2
 8001c90:	002a      	movs	r2, r5
 8001c92:	430a      	orrs	r2, r1
 8001c94:	2107      	movs	r1, #7
 8001c96:	000d      	movs	r5, r1
 8001c98:	2400      	movs	r4, #0
 8001c9a:	4015      	ands	r5, r2
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d05b      	beq.n	8001d58 <__aeabi_dmul+0x4b4>
 8001ca0:	210f      	movs	r1, #15
 8001ca2:	2400      	movs	r4, #0
 8001ca4:	4011      	ands	r1, r2
 8001ca6:	2904      	cmp	r1, #4
 8001ca8:	d053      	beq.n	8001d52 <__aeabi_dmul+0x4ae>
 8001caa:	1d11      	adds	r1, r2, #4
 8001cac:	4291      	cmp	r1, r2
 8001cae:	4192      	sbcs	r2, r2
 8001cb0:	4252      	negs	r2, r2
 8001cb2:	18a4      	adds	r4, r4, r2
 8001cb4:	000a      	movs	r2, r1
 8001cb6:	0223      	lsls	r3, r4, #8
 8001cb8:	d54b      	bpl.n	8001d52 <__aeabi_dmul+0x4ae>
 8001cba:	2201      	movs	r2, #1
 8001cbc:	2400      	movs	r4, #0
 8001cbe:	2500      	movs	r5, #0
 8001cc0:	e660      	b.n	8001984 <__aeabi_dmul+0xe0>
 8001cc2:	2380      	movs	r3, #128	; 0x80
 8001cc4:	031b      	lsls	r3, r3, #12
 8001cc6:	421c      	tst	r4, r3
 8001cc8:	d009      	beq.n	8001cde <__aeabi_dmul+0x43a>
 8001cca:	421e      	tst	r6, r3
 8001ccc:	d107      	bne.n	8001cde <__aeabi_dmul+0x43a>
 8001cce:	4333      	orrs	r3, r6
 8001cd0:	031c      	lsls	r4, r3, #12
 8001cd2:	4643      	mov	r3, r8
 8001cd4:	0015      	movs	r5, r2
 8001cd6:	0b24      	lsrs	r4, r4, #12
 8001cd8:	4a25      	ldr	r2, [pc, #148]	; (8001d70 <__aeabi_dmul+0x4cc>)
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	e652      	b.n	8001984 <__aeabi_dmul+0xe0>
 8001cde:	2280      	movs	r2, #128	; 0x80
 8001ce0:	0312      	lsls	r2, r2, #12
 8001ce2:	4314      	orrs	r4, r2
 8001ce4:	0324      	lsls	r4, r4, #12
 8001ce6:	4a22      	ldr	r2, [pc, #136]	; (8001d70 <__aeabi_dmul+0x4cc>)
 8001ce8:	0b24      	lsrs	r4, r4, #12
 8001cea:	9701      	str	r7, [sp, #4]
 8001cec:	e64a      	b.n	8001984 <__aeabi_dmul+0xe0>
 8001cee:	f000 f8fd 	bl	8001eec <__clzsi2>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	001a      	movs	r2, r3
 8001cf6:	3215      	adds	r2, #21
 8001cf8:	3020      	adds	r0, #32
 8001cfa:	2a1c      	cmp	r2, #28
 8001cfc:	dc00      	bgt.n	8001d00 <__aeabi_dmul+0x45c>
 8001cfe:	e684      	b.n	8001a0a <__aeabi_dmul+0x166>
 8001d00:	4656      	mov	r6, sl
 8001d02:	3b08      	subs	r3, #8
 8001d04:	2200      	movs	r2, #0
 8001d06:	409e      	lsls	r6, r3
 8001d08:	e689      	b.n	8001a1e <__aeabi_dmul+0x17a>
 8001d0a:	f000 f8ef 	bl	8001eec <__clzsi2>
 8001d0e:	0001      	movs	r1, r0
 8001d10:	0002      	movs	r2, r0
 8001d12:	3115      	adds	r1, #21
 8001d14:	3220      	adds	r2, #32
 8001d16:	291c      	cmp	r1, #28
 8001d18:	dc00      	bgt.n	8001d1c <__aeabi_dmul+0x478>
 8001d1a:	e64e      	b.n	80019ba <__aeabi_dmul+0x116>
 8001d1c:	0034      	movs	r4, r6
 8001d1e:	3808      	subs	r0, #8
 8001d20:	2500      	movs	r5, #0
 8001d22:	4084      	lsls	r4, r0
 8001d24:	e653      	b.n	80019ce <__aeabi_dmul+0x12a>
 8001d26:	9b00      	ldr	r3, [sp, #0]
 8001d28:	469c      	mov	ip, r3
 8001d2a:	e741      	b.n	8001bb0 <__aeabi_dmul+0x30c>
 8001d2c:	4912      	ldr	r1, [pc, #72]	; (8001d78 <__aeabi_dmul+0x4d4>)
 8001d2e:	0022      	movs	r2, r4
 8001d30:	4461      	add	r1, ip
 8001d32:	002e      	movs	r6, r5
 8001d34:	408d      	lsls	r5, r1
 8001d36:	408a      	lsls	r2, r1
 8001d38:	40c6      	lsrs	r6, r0
 8001d3a:	1e69      	subs	r1, r5, #1
 8001d3c:	418d      	sbcs	r5, r1
 8001d3e:	4332      	orrs	r2, r6
 8001d40:	432a      	orrs	r2, r5
 8001d42:	40c4      	lsrs	r4, r0
 8001d44:	0753      	lsls	r3, r2, #29
 8001d46:	d0b6      	beq.n	8001cb6 <__aeabi_dmul+0x412>
 8001d48:	210f      	movs	r1, #15
 8001d4a:	4011      	ands	r1, r2
 8001d4c:	2904      	cmp	r1, #4
 8001d4e:	d1ac      	bne.n	8001caa <__aeabi_dmul+0x406>
 8001d50:	e7b1      	b.n	8001cb6 <__aeabi_dmul+0x412>
 8001d52:	0765      	lsls	r5, r4, #29
 8001d54:	0264      	lsls	r4, r4, #9
 8001d56:	0b24      	lsrs	r4, r4, #12
 8001d58:	08d2      	lsrs	r2, r2, #3
 8001d5a:	4315      	orrs	r5, r2
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	e611      	b.n	8001984 <__aeabi_dmul+0xe0>
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	0312      	lsls	r2, r2, #12
 8001d64:	4314      	orrs	r4, r2
 8001d66:	0324      	lsls	r4, r4, #12
 8001d68:	4a01      	ldr	r2, [pc, #4]	; (8001d70 <__aeabi_dmul+0x4cc>)
 8001d6a:	0b24      	lsrs	r4, r4, #12
 8001d6c:	e60a      	b.n	8001984 <__aeabi_dmul+0xe0>
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	000007ff 	.word	0x000007ff
 8001d74:	0000043e 	.word	0x0000043e
 8001d78:	0000041e 	.word	0x0000041e

08001d7c <__aeabi_i2d>:
 8001d7c:	b570      	push	{r4, r5, r6, lr}
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	d016      	beq.n	8001db0 <__aeabi_i2d+0x34>
 8001d82:	17c3      	asrs	r3, r0, #31
 8001d84:	18c5      	adds	r5, r0, r3
 8001d86:	405d      	eors	r5, r3
 8001d88:	0fc4      	lsrs	r4, r0, #31
 8001d8a:	0028      	movs	r0, r5
 8001d8c:	f000 f8ae 	bl	8001eec <__clzsi2>
 8001d90:	4a11      	ldr	r2, [pc, #68]	; (8001dd8 <__aeabi_i2d+0x5c>)
 8001d92:	1a12      	subs	r2, r2, r0
 8001d94:	280a      	cmp	r0, #10
 8001d96:	dc16      	bgt.n	8001dc6 <__aeabi_i2d+0x4a>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	002e      	movs	r6, r5
 8001d9c:	3315      	adds	r3, #21
 8001d9e:	409e      	lsls	r6, r3
 8001da0:	230b      	movs	r3, #11
 8001da2:	1a18      	subs	r0, r3, r0
 8001da4:	40c5      	lsrs	r5, r0
 8001da6:	0553      	lsls	r3, r2, #21
 8001da8:	032d      	lsls	r5, r5, #12
 8001daa:	0b2d      	lsrs	r5, r5, #12
 8001dac:	0d5b      	lsrs	r3, r3, #21
 8001dae:	e003      	b.n	8001db8 <__aeabi_i2d+0x3c>
 8001db0:	2400      	movs	r4, #0
 8001db2:	2300      	movs	r3, #0
 8001db4:	2500      	movs	r5, #0
 8001db6:	2600      	movs	r6, #0
 8001db8:	051b      	lsls	r3, r3, #20
 8001dba:	432b      	orrs	r3, r5
 8001dbc:	07e4      	lsls	r4, r4, #31
 8001dbe:	4323      	orrs	r3, r4
 8001dc0:	0030      	movs	r0, r6
 8001dc2:	0019      	movs	r1, r3
 8001dc4:	bd70      	pop	{r4, r5, r6, pc}
 8001dc6:	380b      	subs	r0, #11
 8001dc8:	4085      	lsls	r5, r0
 8001dca:	0553      	lsls	r3, r2, #21
 8001dcc:	032d      	lsls	r5, r5, #12
 8001dce:	2600      	movs	r6, #0
 8001dd0:	0b2d      	lsrs	r5, r5, #12
 8001dd2:	0d5b      	lsrs	r3, r3, #21
 8001dd4:	e7f0      	b.n	8001db8 <__aeabi_i2d+0x3c>
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	0000041e 	.word	0x0000041e

08001ddc <__aeabi_d2f>:
 8001ddc:	0002      	movs	r2, r0
 8001dde:	004b      	lsls	r3, r1, #1
 8001de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de2:	0308      	lsls	r0, r1, #12
 8001de4:	0d5b      	lsrs	r3, r3, #21
 8001de6:	4e3d      	ldr	r6, [pc, #244]	; (8001edc <__aeabi_d2f+0x100>)
 8001de8:	0fcc      	lsrs	r4, r1, #31
 8001dea:	0a40      	lsrs	r0, r0, #9
 8001dec:	0f51      	lsrs	r1, r2, #29
 8001dee:	1c5f      	adds	r7, r3, #1
 8001df0:	4308      	orrs	r0, r1
 8001df2:	00d5      	lsls	r5, r2, #3
 8001df4:	4237      	tst	r7, r6
 8001df6:	d00a      	beq.n	8001e0e <__aeabi_d2f+0x32>
 8001df8:	4939      	ldr	r1, [pc, #228]	; (8001ee0 <__aeabi_d2f+0x104>)
 8001dfa:	185e      	adds	r6, r3, r1
 8001dfc:	2efe      	cmp	r6, #254	; 0xfe
 8001dfe:	dd16      	ble.n	8001e2e <__aeabi_d2f+0x52>
 8001e00:	23ff      	movs	r3, #255	; 0xff
 8001e02:	2100      	movs	r1, #0
 8001e04:	05db      	lsls	r3, r3, #23
 8001e06:	430b      	orrs	r3, r1
 8001e08:	07e0      	lsls	r0, r4, #31
 8001e0a:	4318      	orrs	r0, r3
 8001e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <__aeabi_d2f+0x44>
 8001e12:	4328      	orrs	r0, r5
 8001e14:	d027      	beq.n	8001e66 <__aeabi_d2f+0x8a>
 8001e16:	2105      	movs	r1, #5
 8001e18:	0189      	lsls	r1, r1, #6
 8001e1a:	0a49      	lsrs	r1, r1, #9
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	e7f1      	b.n	8001e04 <__aeabi_d2f+0x28>
 8001e20:	4305      	orrs	r5, r0
 8001e22:	d0ed      	beq.n	8001e00 <__aeabi_d2f+0x24>
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	03c9      	lsls	r1, r1, #15
 8001e28:	23ff      	movs	r3, #255	; 0xff
 8001e2a:	4301      	orrs	r1, r0
 8001e2c:	e7ea      	b.n	8001e04 <__aeabi_d2f+0x28>
 8001e2e:	2e00      	cmp	r6, #0
 8001e30:	dd1c      	ble.n	8001e6c <__aeabi_d2f+0x90>
 8001e32:	0192      	lsls	r2, r2, #6
 8001e34:	0011      	movs	r1, r2
 8001e36:	1e4a      	subs	r2, r1, #1
 8001e38:	4191      	sbcs	r1, r2
 8001e3a:	00c0      	lsls	r0, r0, #3
 8001e3c:	0f6d      	lsrs	r5, r5, #29
 8001e3e:	4301      	orrs	r1, r0
 8001e40:	4329      	orrs	r1, r5
 8001e42:	074b      	lsls	r3, r1, #29
 8001e44:	d048      	beq.n	8001ed8 <__aeabi_d2f+0xfc>
 8001e46:	230f      	movs	r3, #15
 8001e48:	400b      	ands	r3, r1
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d000      	beq.n	8001e50 <__aeabi_d2f+0x74>
 8001e4e:	3104      	adds	r1, #4
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	04db      	lsls	r3, r3, #19
 8001e54:	400b      	ands	r3, r1
 8001e56:	d03f      	beq.n	8001ed8 <__aeabi_d2f+0xfc>
 8001e58:	1c72      	adds	r2, r6, #1
 8001e5a:	2efe      	cmp	r6, #254	; 0xfe
 8001e5c:	d0d0      	beq.n	8001e00 <__aeabi_d2f+0x24>
 8001e5e:	0189      	lsls	r1, r1, #6
 8001e60:	0a49      	lsrs	r1, r1, #9
 8001e62:	b2d3      	uxtb	r3, r2
 8001e64:	e7ce      	b.n	8001e04 <__aeabi_d2f+0x28>
 8001e66:	2300      	movs	r3, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	e7cb      	b.n	8001e04 <__aeabi_d2f+0x28>
 8001e6c:	0032      	movs	r2, r6
 8001e6e:	3217      	adds	r2, #23
 8001e70:	db22      	blt.n	8001eb8 <__aeabi_d2f+0xdc>
 8001e72:	2180      	movs	r1, #128	; 0x80
 8001e74:	221e      	movs	r2, #30
 8001e76:	0409      	lsls	r1, r1, #16
 8001e78:	4308      	orrs	r0, r1
 8001e7a:	1b92      	subs	r2, r2, r6
 8001e7c:	2a1f      	cmp	r2, #31
 8001e7e:	dd1d      	ble.n	8001ebc <__aeabi_d2f+0xe0>
 8001e80:	2102      	movs	r1, #2
 8001e82:	4249      	negs	r1, r1
 8001e84:	1b8e      	subs	r6, r1, r6
 8001e86:	0001      	movs	r1, r0
 8001e88:	40f1      	lsrs	r1, r6
 8001e8a:	000e      	movs	r6, r1
 8001e8c:	2a20      	cmp	r2, #32
 8001e8e:	d004      	beq.n	8001e9a <__aeabi_d2f+0xbe>
 8001e90:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <__aeabi_d2f+0x108>)
 8001e92:	4694      	mov	ip, r2
 8001e94:	4463      	add	r3, ip
 8001e96:	4098      	lsls	r0, r3
 8001e98:	4305      	orrs	r5, r0
 8001e9a:	0029      	movs	r1, r5
 8001e9c:	1e4d      	subs	r5, r1, #1
 8001e9e:	41a9      	sbcs	r1, r5
 8001ea0:	4331      	orrs	r1, r6
 8001ea2:	2600      	movs	r6, #0
 8001ea4:	074b      	lsls	r3, r1, #29
 8001ea6:	d1ce      	bne.n	8001e46 <__aeabi_d2f+0x6a>
 8001ea8:	2080      	movs	r0, #128	; 0x80
 8001eaa:	000b      	movs	r3, r1
 8001eac:	04c0      	lsls	r0, r0, #19
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4003      	ands	r3, r0
 8001eb2:	4201      	tst	r1, r0
 8001eb4:	d1d3      	bne.n	8001e5e <__aeabi_d2f+0x82>
 8001eb6:	e7af      	b.n	8001e18 <__aeabi_d2f+0x3c>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e7ac      	b.n	8001e16 <__aeabi_d2f+0x3a>
 8001ebc:	490a      	ldr	r1, [pc, #40]	; (8001ee8 <__aeabi_d2f+0x10c>)
 8001ebe:	468c      	mov	ip, r1
 8001ec0:	0029      	movs	r1, r5
 8001ec2:	4463      	add	r3, ip
 8001ec4:	40d1      	lsrs	r1, r2
 8001ec6:	409d      	lsls	r5, r3
 8001ec8:	000a      	movs	r2, r1
 8001eca:	0029      	movs	r1, r5
 8001ecc:	4098      	lsls	r0, r3
 8001ece:	1e4d      	subs	r5, r1, #1
 8001ed0:	41a9      	sbcs	r1, r5
 8001ed2:	4301      	orrs	r1, r0
 8001ed4:	4311      	orrs	r1, r2
 8001ed6:	e7e4      	b.n	8001ea2 <__aeabi_d2f+0xc6>
 8001ed8:	0033      	movs	r3, r6
 8001eda:	e79d      	b.n	8001e18 <__aeabi_d2f+0x3c>
 8001edc:	000007fe 	.word	0x000007fe
 8001ee0:	fffffc80 	.word	0xfffffc80
 8001ee4:	fffffca2 	.word	0xfffffca2
 8001ee8:	fffffc82 	.word	0xfffffc82

08001eec <__clzsi2>:
 8001eec:	211c      	movs	r1, #28
 8001eee:	2301      	movs	r3, #1
 8001ef0:	041b      	lsls	r3, r3, #16
 8001ef2:	4298      	cmp	r0, r3
 8001ef4:	d301      	bcc.n	8001efa <__clzsi2+0xe>
 8001ef6:	0c00      	lsrs	r0, r0, #16
 8001ef8:	3910      	subs	r1, #16
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	4298      	cmp	r0, r3
 8001efe:	d301      	bcc.n	8001f04 <__clzsi2+0x18>
 8001f00:	0a00      	lsrs	r0, r0, #8
 8001f02:	3908      	subs	r1, #8
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	4298      	cmp	r0, r3
 8001f08:	d301      	bcc.n	8001f0e <__clzsi2+0x22>
 8001f0a:	0900      	lsrs	r0, r0, #4
 8001f0c:	3904      	subs	r1, #4
 8001f0e:	a202      	add	r2, pc, #8	; (adr r2, 8001f18 <__clzsi2+0x2c>)
 8001f10:	5c10      	ldrb	r0, [r2, r0]
 8001f12:	1840      	adds	r0, r0, r1
 8001f14:	4770      	bx	lr
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	02020304 	.word	0x02020304
 8001f1c:	01010101 	.word	0x01010101
	...

08001f28 <__clzdi2>:
 8001f28:	b510      	push	{r4, lr}
 8001f2a:	2900      	cmp	r1, #0
 8001f2c:	d103      	bne.n	8001f36 <__clzdi2+0xe>
 8001f2e:	f7ff ffdd 	bl	8001eec <__clzsi2>
 8001f32:	3020      	adds	r0, #32
 8001f34:	e002      	b.n	8001f3c <__clzdi2+0x14>
 8001f36:	1c08      	adds	r0, r1, #0
 8001f38:	f7ff ffd8 	bl	8001eec <__clzsi2>
 8001f3c:	bd10      	pop	{r4, pc}
 8001f3e:	46c0      	nop			; (mov r8, r8)

08001f40 <lcdSendHalf>:
 *      Author: Bartosz Pracz
 */

#include "../Display/an_disp.h"

void lcdSendHalf(uint8_t data) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	0002      	movs	r2, r0
 8001f48:	1dfb      	adds	r3, r7, #7
 8001f4a:	701a      	strb	r2, [r3, #0]
	LCD_E_HIGH;
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	481e      	ldr	r0, [pc, #120]	; (8001fcc <lcdSendHalf+0x8c>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	0019      	movs	r1, r3
 8001f56:	f002 f80d 	bl	8003f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN, (data & 0x01));
 8001f5a:	1dfb      	adds	r3, r7, #7
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	4013      	ands	r3, r2
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	00d9      	lsls	r1, r3, #3
 8001f68:	23a0      	movs	r3, #160	; 0xa0
 8001f6a:	05db      	lsls	r3, r3, #23
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f002 f801 	bl	8003f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_PORT, LCD_D5_PIN, (data & 0x02));
 8001f72:	1dfb      	adds	r3, r7, #7
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2202      	movs	r2, #2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	0099      	lsls	r1, r3, #2
 8001f80:	23a0      	movs	r3, #160	; 0xa0
 8001f82:	05db      	lsls	r3, r3, #23
 8001f84:	0018      	movs	r0, r3
 8001f86:	f001 fff5 	bl	8003f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_PORT, LCD_D6_PIN, (data & 0x04));
 8001f8a:	1dfb      	adds	r3, r7, #7
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2204      	movs	r2, #4
 8001f90:	4013      	ands	r3, r2
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	480e      	ldr	r0, [pc, #56]	; (8001fd0 <lcdSendHalf+0x90>)
 8001f96:	001a      	movs	r2, r3
 8001f98:	2102      	movs	r1, #2
 8001f9a:	f001 ffeb 	bl	8003f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_PORT, LCD_D7_PIN, (data & 0x08));
 8001f9e:	1dfb      	adds	r3, r7, #7
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2208      	movs	r2, #8
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	23a0      	movs	r3, #160	; 0xa0
 8001faa:	05db      	lsls	r3, r3, #23
 8001fac:	2180      	movs	r1, #128	; 0x80
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f001 ffe0 	bl	8003f74 <HAL_GPIO_WritePin>
	LCD_E_LOW;
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	4804      	ldr	r0, [pc, #16]	; (8001fcc <lcdSendHalf+0x8c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	f001 ffd9 	bl	8003f74 <HAL_GPIO_WritePin>
}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b002      	add	sp, #8
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	50000800 	.word	0x50000800
 8001fd0:	50000400 	.word	0x50000400

08001fd4 <lcdWriteByte>:

void lcdWriteByte(uint8_t data) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	0002      	movs	r2, r0
 8001fdc:	1dfb      	adds	r3, r7, #7
 8001fde:	701a      	strb	r2, [r3, #0]
	lcdSendHalf(data >> 4);
 8001fe0:	1dfb      	adds	r3, r7, #7
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f7ff ffa9 	bl	8001f40 <lcdSendHalf>
	lcdSendHalf(data);
 8001fee:	1dfb      	adds	r3, r7, #7
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7ff ffa4 	bl	8001f40 <lcdSendHalf>
	HAL_Delay(1);
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	f000 ff53 	bl	8002ea4 <HAL_Delay>
}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	46bd      	mov	sp, r7
 8002002:	b002      	add	sp, #8
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <lcdWriteCmd>:

void lcdWriteCmd(uint8_t cmd) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	0002      	movs	r2, r0
 8002010:	1dfb      	adds	r3, r7, #7
 8002012:	701a      	strb	r2, [r3, #0]
	LCD_RS_LOW;
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	01db      	lsls	r3, r3, #7
 8002018:	4806      	ldr	r0, [pc, #24]	; (8002034 <lcdWriteCmd+0x2c>)
 800201a:	2200      	movs	r2, #0
 800201c:	0019      	movs	r1, r3
 800201e:	f001 ffa9 	bl	8003f74 <HAL_GPIO_WritePin>
	lcdWriteByte(cmd);
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	0018      	movs	r0, r3
 8002028:	f7ff ffd4 	bl	8001fd4 <lcdWriteByte>
}
 800202c:	46c0      	nop			; (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	b002      	add	sp, #8
 8002032:	bd80      	pop	{r7, pc}
 8002034:	50000800 	.word	0x50000800

08002038 <lcdChar>:

void lcdChar(char data) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	0002      	movs	r2, r0
 8002040:	1dfb      	adds	r3, r7, #7
 8002042:	701a      	strb	r2, [r3, #0]
	LCD_RS_HIGH;
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	01db      	lsls	r3, r3, #7
 8002048:	4806      	ldr	r0, [pc, #24]	; (8002064 <lcdChar+0x2c>)
 800204a:	2201      	movs	r2, #1
 800204c:	0019      	movs	r1, r3
 800204e:	f001 ff91 	bl	8003f74 <HAL_GPIO_WritePin>
	lcdWriteByte(data);
 8002052:	1dfb      	adds	r3, r7, #7
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	0018      	movs	r0, r3
 8002058:	f7ff ffbc 	bl	8001fd4 <lcdWriteByte>
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b002      	add	sp, #8
 8002062:	bd80      	pop	{r7, pc}
 8002064:	50000800 	.word	0x50000800

08002068 <lcdInit>:

void lcdInit(void) {
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
	HAL_Delay(15);
 800206c:	200f      	movs	r0, #15
 800206e:	f000 ff19 	bl	8002ea4 <HAL_Delay>

	LCD_E_LOW;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	481f      	ldr	r0, [pc, #124]	; (80020f4 <lcdInit+0x8c>)
 8002078:	2200      	movs	r2, #0
 800207a:	0019      	movs	r1, r3
 800207c:	f001 ff7a 	bl	8003f74 <HAL_GPIO_WritePin>
	LCD_RS_LOW;
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	01db      	lsls	r3, r3, #7
 8002084:	481b      	ldr	r0, [pc, #108]	; (80020f4 <lcdInit+0x8c>)
 8002086:	2200      	movs	r2, #0
 8002088:	0019      	movs	r1, r3
 800208a:	f001 ff73 	bl	8003f74 <HAL_GPIO_WritePin>

	lcdSendHalf(0x03);
 800208e:	2003      	movs	r0, #3
 8002090:	f7ff ff56 	bl	8001f40 <lcdSendHalf>
	HAL_Delay(5);
 8002094:	2005      	movs	r0, #5
 8002096:	f000 ff05 	bl	8002ea4 <HAL_Delay>
	lcdSendHalf(0x03);
 800209a:	2003      	movs	r0, #3
 800209c:	f7ff ff50 	bl	8001f40 <lcdSendHalf>
	HAL_Delay(5);
 80020a0:	2005      	movs	r0, #5
 80020a2:	f000 feff 	bl	8002ea4 <HAL_Delay>
	lcdSendHalf(0x03);
 80020a6:	2003      	movs	r0, #3
 80020a8:	f7ff ff4a 	bl	8001f40 <lcdSendHalf>
	HAL_Delay(5);
 80020ac:	2005      	movs	r0, #5
 80020ae:	f000 fef9 	bl	8002ea4 <HAL_Delay>
	lcdSendHalf(0x02);
 80020b2:	2002      	movs	r0, #2
 80020b4:	f7ff ff44 	bl	8001f40 <lcdSendHalf>
	HAL_Delay(5);
 80020b8:	2005      	movs	r0, #5
 80020ba:	f000 fef3 	bl	8002ea4 <HAL_Delay>

	lcdWriteCmd( LCD_FUNC | LCD_4_BIT | LCDC_TWO_LINE | LCDC_FONT_5x7);
 80020be:	2028      	movs	r0, #40	; 0x28
 80020c0:	f7ff ffa2 	bl	8002008 <lcdWriteCmd>
	HAL_Delay(5);
 80020c4:	2005      	movs	r0, #5
 80020c6:	f000 feed 	bl	8002ea4 <HAL_Delay>
	lcdWriteCmd( LCD_ONOFF | LCD_DISP_ON);
 80020ca:	200c      	movs	r0, #12
 80020cc:	f7ff ff9c 	bl	8002008 <lcdWriteCmd>
	HAL_Delay(5);
 80020d0:	2005      	movs	r0, #5
 80020d2:	f000 fee7 	bl	8002ea4 <HAL_Delay>
	lcdWriteCmd( LCD_CLEAR);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f7ff ff96 	bl	8002008 <lcdWriteCmd>
	HAL_Delay(5);
 80020dc:	2005      	movs	r0, #5
 80020de:	f000 fee1 	bl	8002ea4 <HAL_Delay>
	lcdWriteCmd( LCDC_ENTRY_MODE | LCD_EM_SHIFT_CURSOR | LCD_EM_RIGHT);
 80020e2:	2006      	movs	r0, #6
 80020e4:	f7ff ff90 	bl	8002008 <lcdWriteCmd>
	HAL_Delay(5);
 80020e8:	2005      	movs	r0, #5
 80020ea:	f000 fedb 	bl	8002ea4 <HAL_Delay>
}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	50000800 	.word	0x50000800

080020f8 <lcdClear>:

void lcdClear(void){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	lcdWriteCmd(LCD_CLEAR);
 80020fc:	2001      	movs	r0, #1
 80020fe:	f7ff ff83 	bl	8002008 <lcdWriteCmd>
}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <lcdLocate>:

void lcdLocate(uint8_t x, uint8_t y) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	0002      	movs	r2, r0
 8002110:	1dfb      	adds	r3, r7, #7
 8002112:	701a      	strb	r2, [r3, #0]
 8002114:	1dbb      	adds	r3, r7, #6
 8002116:	1c0a      	adds	r2, r1, #0
 8002118:	701a      	strb	r2, [r3, #0]

	switch (y) {
 800211a:	1dbb      	adds	r3, r7, #6
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d02e      	beq.n	8002180 <lcdLocate+0x78>
 8002122:	dc3b      	bgt.n	800219c <lcdLocate+0x94>
 8002124:	2b02      	cmp	r3, #2
 8002126:	d01d      	beq.n	8002164 <lcdLocate+0x5c>
 8002128:	dc38      	bgt.n	800219c <lcdLocate+0x94>
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <lcdLocate+0x2c>
 800212e:	2b01      	cmp	r3, #1
 8002130:	d00a      	beq.n	8002148 <lcdLocate+0x40>
	case 3:
		lcdWriteCmd( LCDC_SET_DDRAM | (LCD_LINE4 + (x - 12)));
		break;
	}

}
 8002132:	e033      	b.n	800219c <lcdLocate+0x94>
		lcdWriteCmd( LCDC_SET_DDRAM | (LCD_LINE1 + x));
 8002134:	1dfb      	adds	r3, r7, #7
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	4252      	negs	r2, r2
 800213c:	4313      	orrs	r3, r2
 800213e:	b2db      	uxtb	r3, r3
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff ff61 	bl	8002008 <lcdWriteCmd>
		break;
 8002146:	e029      	b.n	800219c <lcdLocate+0x94>
		lcdWriteCmd( LCDC_SET_DDRAM | (LCD_LINE2 + x));
 8002148:	1dfb      	adds	r3, r7, #7
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	3340      	adds	r3, #64	; 0x40
 800214e:	b2db      	uxtb	r3, r3
 8002150:	b25b      	sxtb	r3, r3
 8002152:	2280      	movs	r2, #128	; 0x80
 8002154:	4252      	negs	r2, r2
 8002156:	4313      	orrs	r3, r2
 8002158:	b25b      	sxtb	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	0018      	movs	r0, r3
 800215e:	f7ff ff53 	bl	8002008 <lcdWriteCmd>
		break;
 8002162:	e01b      	b.n	800219c <lcdLocate+0x94>
		lcdWriteCmd( LCDC_SET_DDRAM | (LCD_LINE3 + (x - 12)));
 8002164:	1dfb      	adds	r3, r7, #7
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	3314      	adds	r3, #20
 800216a:	b2db      	uxtb	r3, r3
 800216c:	b25b      	sxtb	r3, r3
 800216e:	2280      	movs	r2, #128	; 0x80
 8002170:	4252      	negs	r2, r2
 8002172:	4313      	orrs	r3, r2
 8002174:	b25b      	sxtb	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	0018      	movs	r0, r3
 800217a:	f7ff ff45 	bl	8002008 <lcdWriteCmd>
		break;
 800217e:	e00d      	b.n	800219c <lcdLocate+0x94>
		lcdWriteCmd( LCDC_SET_DDRAM | (LCD_LINE4 + (x - 12)));
 8002180:	1dfb      	adds	r3, r7, #7
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	3354      	adds	r3, #84	; 0x54
 8002186:	b2db      	uxtb	r3, r3
 8002188:	b25b      	sxtb	r3, r3
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	4252      	negs	r2, r2
 800218e:	4313      	orrs	r3, r2
 8002190:	b25b      	sxtb	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	0018      	movs	r0, r3
 8002196:	f7ff ff37 	bl	8002008 <lcdWriteCmd>
		break;
 800219a:	46c0      	nop			; (mov r8, r8)
}
 800219c:	46c0      	nop			; (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <lcdStr>:

void lcdStr(char *text) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	while (*text)
 80021ac:	e006      	b.n	80021bc <lcdStr+0x18>
		lcdChar(*text++);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	0018      	movs	r0, r3
 80021b8:	f7ff ff3e 	bl	8002038 <lcdChar>
	while (*text)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f4      	bne.n	80021ae <lcdStr+0xa>
}
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b002      	add	sp, #8
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <lcdInt>:

void lcdInt(int data){
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

	char buffer[20];

	sprintf(buffer, "%d", data);
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4907      	ldr	r1, [pc, #28]	; (80021f8 <lcdInt+0x28>)
 80021dc:	240c      	movs	r4, #12
 80021de:	193b      	adds	r3, r7, r4
 80021e0:	0018      	movs	r0, r3
 80021e2:	f003 f99d 	bl	8005520 <siprintf>

	lcdStr(buffer);
 80021e6:	193b      	adds	r3, r7, r4
 80021e8:	0018      	movs	r0, r3
 80021ea:	f7ff ffdb 	bl	80021a4 <lcdStr>

}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b009      	add	sp, #36	; 0x24
 80021f4:	bd90      	pop	{r4, r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	08005d84 	.word	0x08005d84

080021fc <floatToInts>:

void floatToInts(float data, uint32_t denominator, int32_t *ones, uint32_t *decimals){
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
	int32_t integer = (uint32_t)data;
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f7fe f894 	bl	8000338 <__aeabi_f2uiz>
 8002210:	0003      	movs	r3, r0
 8002212:	61fb      	str	r3, [r7, #28]
	float afterComma = (data-(float)integer)*denominator;
 8002214:	69f8      	ldr	r0, [r7, #28]
 8002216:	f7fe ffdb 	bl	80011d0 <__aeabi_i2f>
 800221a:	1c03      	adds	r3, r0, #0
 800221c:	1c19      	adds	r1, r3, #0
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f7fe fdee 	bl	8000e00 <__aeabi_fsub>
 8002224:	1c03      	adds	r3, r0, #0
 8002226:	1c1c      	adds	r4, r3, #0
 8002228:	68b8      	ldr	r0, [r7, #8]
 800222a:	f7ff f817 	bl	800125c <__aeabi_ui2f>
 800222e:	1c03      	adds	r3, r0, #0
 8002230:	1c19      	adds	r1, r3, #0
 8002232:	1c20      	adds	r0, r4, #0
 8002234:	f7fe fcca 	bl	8000bcc <__aeabi_fmul>
 8002238:	1c03      	adds	r3, r0, #0
 800223a:	61bb      	str	r3, [r7, #24]
	int32_t afterComma2 = (int32_t)afterComma;
 800223c:	69b8      	ldr	r0, [r7, #24]
 800223e:	f7fe ffa7 	bl	8001190 <__aeabi_f2iz>
 8002242:	0003      	movs	r3, r0
 8002244:	617b      	str	r3, [r7, #20]
	*ones = integer;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	601a      	str	r2, [r3, #0]
	*decimals = abs(afterComma2);
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	17da      	asrs	r2, r3, #31
 8002250:	189b      	adds	r3, r3, r2
 8002252:	4053      	eors	r3, r2
 8002254:	001a      	movs	r2, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	601a      	str	r2, [r3, #0]

}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	46bd      	mov	sp, r7
 800225e:	b009      	add	sp, #36	; 0x24
 8002260:	bd90      	pop	{r4, r7, pc}
	...

08002264 <lcdFloat>:

void lcdFloat(float data, uint32_t denominator){
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]

	int32_t beforeComma;
	uint32_t afterComma;

	floatToInts(data, denominator, &beforeComma, &afterComma);
 800226e:	230c      	movs	r3, #12
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	2210      	movs	r2, #16
 8002274:	18ba      	adds	r2, r7, r2
 8002276:	6839      	ldr	r1, [r7, #0]
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ffbf 	bl	80021fc <floatToInts>

	lcdInt(beforeComma);
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	0018      	movs	r0, r3
 8002282:	f7ff ffa5 	bl	80021d0 <lcdInt>
	lcdChar('.');
 8002286:	202e      	movs	r0, #46	; 0x2e
 8002288:	f7ff fed6 	bl	8002038 <lcdChar>
	float e = 10^1;
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <lcdFloat+0x6c>)
 800228e:	617b      	str	r3, [r7, #20]

	if(afterComma < denominator / e) lcdInt(0);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	0018      	movs	r0, r3
 8002294:	f7fe ffe2 	bl	800125c <__aeabi_ui2f>
 8002298:	1c04      	adds	r4, r0, #0
 800229a:	6838      	ldr	r0, [r7, #0]
 800229c:	f7fe ffde 	bl	800125c <__aeabi_ui2f>
 80022a0:	1c03      	adds	r3, r0, #0
 80022a2:	6979      	ldr	r1, [r7, #20]
 80022a4:	1c18      	adds	r0, r3, #0
 80022a6:	f7fe fac7 	bl	8000838 <__aeabi_fdiv>
 80022aa:	1c03      	adds	r3, r0, #0
 80022ac:	1c19      	adds	r1, r3, #0
 80022ae:	1c20      	adds	r0, r4, #0
 80022b0:	f7fd ffd2 	bl	8000258 <__aeabi_fcmplt>
 80022b4:	1e03      	subs	r3, r0, #0
 80022b6:	d002      	beq.n	80022be <lcdFloat+0x5a>
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7ff ff89 	bl	80021d0 <lcdInt>

	lcdInt(afterComma);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	0018      	movs	r0, r3
 80022c2:	f7ff ff85 	bl	80021d0 <lcdInt>

}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b007      	add	sp, #28
 80022cc:	bd90      	pop	{r4, r7, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	41300000 	.word	0x41300000

080022d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80022d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80022da:	f000 fd73 	bl	8002dc4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80022de:	f000 f8f3 	bl	80024c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80022e2:	f000 fa89 	bl	80027f8 <MX_GPIO_Init>
	MX_DMA_Init();
 80022e6:	f000 fa69 	bl	80027bc <MX_DMA_Init>
	MX_ADC_Init();
 80022ea:	f000 f947 	bl	800257c <MX_ADC_Init>
	MX_TIM2_Init();
 80022ee:	f000 f9e5 	bl	80026bc <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	//kalibracja ADC
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80022f2:	4b65      	ldr	r3, [pc, #404]	; (8002488 <main+0x1b4>)
 80022f4:	2100      	movs	r1, #0
 80022f6:	0018      	movs	r0, r3
 80022f8:	f001 f998 	bl	800362c <HAL_ADCEx_Calibration_Start>

	//uruchomienie przetwornika
	HAL_ADC_Start_DMA(&hadc, adcReadings, 5);
 80022fc:	4963      	ldr	r1, [pc, #396]	; (800248c <main+0x1b8>)
 80022fe:	4b62      	ldr	r3, [pc, #392]	; (8002488 <main+0x1b4>)
 8002300:	2205      	movs	r2, #5
 8002302:	0018      	movs	r0, r3
 8002304:	f000 ff66 	bl	80031d4 <HAL_ADC_Start_DMA>

	//uruchomienie PWM
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002308:	4b61      	ldr	r3, [pc, #388]	; (8002490 <main+0x1bc>)
 800230a:	2100      	movs	r1, #0
 800230c:	0018      	movs	r0, r3
 800230e:	f002 fc41 	bl	8004b94 <HAL_TIM_PWM_Start>

	//ustawienie serwa na 0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
 8002312:	4b5f      	ldr	r3, [pc, #380]	; (8002490 <main+0x1bc>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2264      	movs	r2, #100	; 0x64
 8002318:	635a      	str	r2, [r3, #52]	; 0x34

	//inicjalizacja wyświetlacza
	lcdInit();
 800231a:	f7ff fea5 	bl	8002068 <lcdInit>
	lcdLocate(4, 0);
 800231e:	2100      	movs	r1, #0
 8002320:	2004      	movs	r0, #4
 8002322:	f7ff fef1 	bl	8002108 <lcdLocate>
	lcdStr("smokePID");
 8002326:	4b5b      	ldr	r3, [pc, #364]	; (8002494 <main+0x1c0>)
 8002328:	0018      	movs	r0, r3
 800232a:	f7ff ff3b 	bl	80021a4 <lcdStr>
	lcdLocate(12, 1);
 800232e:	2101      	movs	r1, #1
 8002330:	200c      	movs	r0, #12
 8002332:	f7ff fee9 	bl	8002108 <lcdLocate>
	lcdStr("v1.0");
 8002336:	4b58      	ldr	r3, [pc, #352]	; (8002498 <main+0x1c4>)
 8002338:	0018      	movs	r0, r3
 800233a:	f7ff ff33 	bl	80021a4 <lcdStr>
	HAL_Delay(500);
 800233e:	23fa      	movs	r3, #250	; 0xfa
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	0018      	movs	r0, r3
 8002344:	f000 fdae 	bl	8002ea4 <HAL_Delay>
	lcdClear();
 8002348:	f7ff fed6 	bl	80020f8 <lcdClear>

		//odczyt temperatury

//		if(conversionToTemperature(adcReadings[4])>temperature) temperature = temperature + 0.1;
//		else if(conversionToTemperature(adcReadings[4])<temperature) temperature = temperature - 0.1;
		temperature = conversionToTemperature(adcReadings[4]);
 800234c:	4b4f      	ldr	r3, [pc, #316]	; (800248c <main+0x1b8>)
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	b29b      	uxth	r3, r3
 8002352:	0018      	movs	r0, r3
 8002354:	f000 fb22 	bl	800299c <conversionToTemperature>
 8002358:	1c02      	adds	r2, r0, #0
 800235a:	4b50      	ldr	r3, [pc, #320]	; (800249c <main+0x1c8>)
 800235c:	601a      	str	r2, [r3, #0]

		//odczyt zadanej temperatury
		setPoint = adcReadings[0] / 28;
 800235e:	4b4b      	ldr	r3, [pc, #300]	; (800248c <main+0x1b8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	211c      	movs	r1, #28
 8002364:	0018      	movs	r0, r3
 8002366:	f7fd fed9 	bl	800011c <__udivsi3>
 800236a:	0003      	movs	r3, r0
 800236c:	001a      	movs	r2, r3
 800236e:	4b4c      	ldr	r3, [pc, #304]	; (80024a0 <main+0x1cc>)
 8002370:	601a      	str	r2, [r3, #0]

		//odczyt wzmocnień
		amplificationP = conversionToMultiplier(adcReadings[1], 5);
 8002372:	4b46      	ldr	r3, [pc, #280]	; (800248c <main+0x1b8>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	b29b      	uxth	r3, r3
 8002378:	2105      	movs	r1, #5
 800237a:	0018      	movs	r0, r3
 800237c:	f000 fac6 	bl	800290c <conversionToMultiplier>
 8002380:	1c02      	adds	r2, r0, #0
 8002382:	4b48      	ldr	r3, [pc, #288]	; (80024a4 <main+0x1d0>)
 8002384:	601a      	str	r2, [r3, #0]
		amplificationI = conversionToMultiplier(adcReadings[2], 2);
 8002386:	4b41      	ldr	r3, [pc, #260]	; (800248c <main+0x1b8>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	b29b      	uxth	r3, r3
 800238c:	2102      	movs	r1, #2
 800238e:	0018      	movs	r0, r3
 8002390:	f000 fabc 	bl	800290c <conversionToMultiplier>
 8002394:	1c02      	adds	r2, r0, #0
 8002396:	4b44      	ldr	r3, [pc, #272]	; (80024a8 <main+0x1d4>)
 8002398:	601a      	str	r2, [r3, #0]
		amplificationD = conversionToMultiplier(adcReadings[3], 8);
 800239a:	4b3c      	ldr	r3, [pc, #240]	; (800248c <main+0x1b8>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2108      	movs	r1, #8
 80023a2:	0018      	movs	r0, r3
 80023a4:	f000 fab2 	bl	800290c <conversionToMultiplier>
 80023a8:	1c02      	adds	r2, r0, #0
 80023aa:	4b40      	ldr	r3, [pc, #256]	; (80024ac <main+0x1d8>)
 80023ac:	601a      	str	r2, [r3, #0]

		throttle = PID(setPoint, temperature, &integralSum, &lastError, amplificationP, amplificationI, amplificationD)+100;
 80023ae:	4b3c      	ldr	r3, [pc, #240]	; (80024a0 <main+0x1cc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0018      	movs	r0, r3
 80023b4:	f7fe ff52 	bl	800125c <__aeabi_ui2f>
 80023b8:	1c06      	adds	r6, r0, #0
 80023ba:	4b38      	ldr	r3, [pc, #224]	; (800249c <main+0x1c8>)
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <main+0x1d0>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <main+0x1d4>)
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	4b39      	ldr	r3, [pc, #228]	; (80024ac <main+0x1d8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4d39      	ldr	r5, [pc, #228]	; (80024b0 <main+0x1dc>)
 80023cc:	4c39      	ldr	r4, [pc, #228]	; (80024b4 <main+0x1e0>)
 80023ce:	9302      	str	r3, [sp, #8]
 80023d0:	9101      	str	r1, [sp, #4]
 80023d2:	9200      	str	r2, [sp, #0]
 80023d4:	002b      	movs	r3, r5
 80023d6:	0022      	movs	r2, r4
 80023d8:	1c01      	adds	r1, r0, #0
 80023da:	1c30      	adds	r0, r6, #0
 80023dc:	f000 fb12 	bl	8002a04 <PID>
 80023e0:	0003      	movs	r3, r0
 80023e2:	3364      	adds	r3, #100	; 0x64
 80023e4:	001a      	movs	r2, r3
 80023e6:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <main+0x1e4>)
 80023e8:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, throttle);
 80023ea:	4b29      	ldr	r3, [pc, #164]	; (8002490 <main+0x1bc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a32      	ldr	r2, [pc, #200]	; (80024b8 <main+0x1e4>)
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	635a      	str	r2, [r3, #52]	; 0x34
//		lcdFloat(integralSum);



		//pokaż zadaną temperaturę
		lcdLocate(0, 0);
 80023f4:	2100      	movs	r1, #0
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7ff fe86 	bl	8002108 <lcdLocate>
		lcdInt(setPoint);
 80023fc:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <main+0x1cc>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0018      	movs	r0, r3
 8002402:	f7ff fee5 	bl	80021d0 <lcdInt>
		lcdStr("stC  ");
 8002406:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <main+0x1e8>)
 8002408:	0018      	movs	r0, r3
 800240a:	f7ff fecb 	bl	80021a4 <lcdStr>

		//pokaż rzeczywistą temperaturę
		lcdLocate(11, 0);
 800240e:	2100      	movs	r1, #0
 8002410:	200b      	movs	r0, #11
 8002412:	f7ff fe79 	bl	8002108 <lcdLocate>
		lcdInt((uint32_t) temperature);
 8002416:	4b21      	ldr	r3, [pc, #132]	; (800249c <main+0x1c8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	1c18      	adds	r0, r3, #0
 800241c:	f7fd ff8c 	bl	8000338 <__aeabi_f2uiz>
 8002420:	0003      	movs	r3, r0
 8002422:	0018      	movs	r0, r3
 8002424:	f7ff fed4 	bl	80021d0 <lcdInt>
		lcdStr("stC");
 8002428:	4b25      	ldr	r3, [pc, #148]	; (80024c0 <main+0x1ec>)
 800242a:	0018      	movs	r0, r3
 800242c:	f7ff feba 	bl	80021a4 <lcdStr>

		//pokaż wzmocnienia regulatorów
		lcdLocate(0, 1);
 8002430:	2101      	movs	r1, #1
 8002432:	2000      	movs	r0, #0
 8002434:	f7ff fe68 	bl	8002108 <lcdLocate>
		lcdFloat(amplificationP, 100);
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <main+0x1d0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2164      	movs	r1, #100	; 0x64
 800243e:	1c18      	adds	r0, r3, #0
 8002440:	f7ff ff10 	bl	8002264 <lcdFloat>
		lcdStr(" ");
 8002444:	4b1f      	ldr	r3, [pc, #124]	; (80024c4 <main+0x1f0>)
 8002446:	0018      	movs	r0, r3
 8002448:	f7ff feac 	bl	80021a4 <lcdStr>

		lcdLocate(6, 1);
 800244c:	2101      	movs	r1, #1
 800244e:	2006      	movs	r0, #6
 8002450:	f7ff fe5a 	bl	8002108 <lcdLocate>
		lcdFloat(amplificationI, 100);
 8002454:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <main+0x1d4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2164      	movs	r1, #100	; 0x64
 800245a:	1c18      	adds	r0, r3, #0
 800245c:	f7ff ff02 	bl	8002264 <lcdFloat>
		lcdStr(" ");
 8002460:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <main+0x1f0>)
 8002462:	0018      	movs	r0, r3
 8002464:	f7ff fe9e 	bl	80021a4 <lcdStr>

		lcdLocate(12, 1);
 8002468:	2101      	movs	r1, #1
 800246a:	200c      	movs	r0, #12
 800246c:	f7ff fe4c 	bl	8002108 <lcdLocate>
		lcdFloat(amplificationD, 100);
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <main+0x1d8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2164      	movs	r1, #100	; 0x64
 8002476:	1c18      	adds	r0, r3, #0
 8002478:	f7ff fef4 	bl	8002264 <lcdFloat>
		lcdStr(" ");
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <main+0x1f0>)
 800247e:	0018      	movs	r0, r3
 8002480:	f7ff fe90 	bl	80021a4 <lcdStr>
		temperature = conversionToTemperature(adcReadings[4]);
 8002484:	e762      	b.n	800234c <main+0x78>
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	20000154 	.word	0x20000154
 800248c:	200000a0 	.word	0x200000a0
 8002490:	200000c8 	.word	0x200000c8
 8002494:	08005d88 	.word	0x08005d88
 8002498:	08005d94 	.word	0x08005d94
 800249c:	200000b4 	.word	0x200000b4
 80024a0:	20000108 	.word	0x20000108
 80024a4:	200000c4 	.word	0x200000c4
 80024a8:	2000009c 	.word	0x2000009c
 80024ac:	200000bc 	.word	0x200000bc
 80024b0:	200000c0 	.word	0x200000c0
 80024b4:	20000098 	.word	0x20000098
 80024b8:	200000b8 	.word	0x200000b8
 80024bc:	08005d9c 	.word	0x08005d9c
 80024c0:	08005da4 	.word	0x08005da4
 80024c4:	08005da8 	.word	0x08005da8

080024c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b093      	sub	sp, #76	; 0x4c
 80024cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80024ce:	2414      	movs	r4, #20
 80024d0:	193b      	adds	r3, r7, r4
 80024d2:	0018      	movs	r0, r3
 80024d4:	2334      	movs	r3, #52	; 0x34
 80024d6:	001a      	movs	r2, r3
 80024d8:	2100      	movs	r1, #0
 80024da:	f003 f819 	bl	8005510 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80024de:	003b      	movs	r3, r7
 80024e0:	0018      	movs	r0, r3
 80024e2:	2314      	movs	r3, #20
 80024e4:	001a      	movs	r2, r3
 80024e6:	2100      	movs	r1, #0
 80024e8:	f003 f812 	bl	8005510 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024ec:	4b21      	ldr	r3, [pc, #132]	; (8002574 <SystemClock_Config+0xac>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a21      	ldr	r2, [pc, #132]	; (8002578 <SystemClock_Config+0xb0>)
 80024f2:	401a      	ands	r2, r3
 80024f4:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <SystemClock_Config+0xac>)
 80024f6:	2180      	movs	r1, #128	; 0x80
 80024f8:	0109      	lsls	r1, r1, #4
 80024fa:	430a      	orrs	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024fe:	0021      	movs	r1, r4
 8002500:	187b      	adds	r3, r7, r1
 8002502:	2202      	movs	r2, #2
 8002504:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002506:	187b      	adds	r3, r7, r1
 8002508:	2201      	movs	r2, #1
 800250a:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800250c:	187b      	adds	r3, r7, r1
 800250e:	2210      	movs	r2, #16
 8002510:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002512:	187b      	adds	r3, r7, r1
 8002514:	2202      	movs	r2, #2
 8002516:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002518:	187b      	adds	r3, r7, r1
 800251a:	2200      	movs	r2, #0
 800251c:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800251e:	187b      	adds	r3, r7, r1
 8002520:	2200      	movs	r2, #0
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002524:	187b      	adds	r3, r7, r1
 8002526:	2280      	movs	r2, #128	; 0x80
 8002528:	03d2      	lsls	r2, r2, #15
 800252a:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800252c:	187b      	adds	r3, r7, r1
 800252e:	0018      	movs	r0, r3
 8002530:	f001 fd3e 	bl	8003fb0 <HAL_RCC_OscConfig>
 8002534:	1e03      	subs	r3, r0, #0
 8002536:	d001      	beq.n	800253c <SystemClock_Config+0x74>
		Error_Handler();
 8002538:	f000 fae2 	bl	8002b00 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800253c:	003b      	movs	r3, r7
 800253e:	220f      	movs	r2, #15
 8002540:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002542:	003b      	movs	r3, r7
 8002544:	2203      	movs	r2, #3
 8002546:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002548:	003b      	movs	r3, r7
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800254e:	003b      	movs	r3, r7
 8002550:	2200      	movs	r2, #0
 8002552:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002554:	003b      	movs	r3, r7
 8002556:	2200      	movs	r2, #0
 8002558:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800255a:	003b      	movs	r3, r7
 800255c:	2101      	movs	r1, #1
 800255e:	0018      	movs	r0, r3
 8002560:	f002 f8a2 	bl	80046a8 <HAL_RCC_ClockConfig>
 8002564:	1e03      	subs	r3, r0, #0
 8002566:	d001      	beq.n	800256c <SystemClock_Config+0xa4>
		Error_Handler();
 8002568:	f000 faca 	bl	8002b00 <Error_Handler>
	}
}
 800256c:	46c0      	nop			; (mov r8, r8)
 800256e:	46bd      	mov	sp, r7
 8002570:	b013      	add	sp, #76	; 0x4c
 8002572:	bd90      	pop	{r4, r7, pc}
 8002574:	40007000 	.word	0x40007000
 8002578:	ffffe7ff 	.word	0xffffe7ff

0800257c <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002582:	003b      	movs	r3, r7
 8002584:	0018      	movs	r0, r3
 8002586:	2308      	movs	r3, #8
 8002588:	001a      	movs	r2, r3
 800258a:	2100      	movs	r1, #0
 800258c:	f002 ffc0 	bl	8005510 <memset>
	/* USER CODE BEGIN ADC_Init 1 */

	/* USER CODE END ADC_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8002590:	4b44      	ldr	r3, [pc, #272]	; (80026a4 <MX_ADC_Init+0x128>)
 8002592:	4a45      	ldr	r2, [pc, #276]	; (80026a8 <MX_ADC_Init+0x12c>)
 8002594:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 8002596:	4b43      	ldr	r3, [pc, #268]	; (80026a4 <MX_ADC_Init+0x128>)
 8002598:	2200      	movs	r2, #0
 800259a:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800259c:	4b41      	ldr	r3, [pc, #260]	; (80026a4 <MX_ADC_Init+0x128>)
 800259e:	2280      	movs	r2, #128	; 0x80
 80025a0:	05d2      	lsls	r2, r2, #23
 80025a2:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80025a4:	4b3f      	ldr	r3, [pc, #252]	; (80026a4 <MX_ADC_Init+0x128>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 80025aa:	4b3e      	ldr	r3, [pc, #248]	; (80026a4 <MX_ADC_Init+0x128>)
 80025ac:	2206      	movs	r2, #6
 80025ae:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80025b0:	4b3c      	ldr	r3, [pc, #240]	; (80026a4 <MX_ADC_Init+0x128>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025b6:	4b3b      	ldr	r3, [pc, #236]	; (80026a4 <MX_ADC_Init+0x128>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = ENABLE;
 80025bc:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <MX_ADC_Init+0x128>)
 80025be:	2220      	movs	r2, #32
 80025c0:	2101      	movs	r1, #1
 80025c2:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80025c4:	4b37      	ldr	r3, [pc, #220]	; (80026a4 <MX_ADC_Init+0x128>)
 80025c6:	2221      	movs	r2, #33	; 0x21
 80025c8:	2100      	movs	r1, #0
 80025ca:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025cc:	4b35      	ldr	r3, [pc, #212]	; (80026a4 <MX_ADC_Init+0x128>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025d2:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <MX_ADC_Init+0x128>)
 80025d4:	22c2      	movs	r2, #194	; 0xc2
 80025d6:	32ff      	adds	r2, #255	; 0xff
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = ENABLE;
 80025da:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <MX_ADC_Init+0x128>)
 80025dc:	222c      	movs	r2, #44	; 0x2c
 80025de:	2101      	movs	r1, #1
 80025e0:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025e2:	4b30      	ldr	r3, [pc, #192]	; (80026a4 <MX_ADC_Init+0x128>)
 80025e4:	2204      	movs	r2, #4
 80025e6:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80025e8:	4b2e      	ldr	r3, [pc, #184]	; (80026a4 <MX_ADC_Init+0x128>)
 80025ea:	2280      	movs	r2, #128	; 0x80
 80025ec:	0152      	lsls	r2, r2, #5
 80025ee:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 80025f0:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <MX_ADC_Init+0x128>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 80025f6:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <MX_ADC_Init+0x128>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80025fc:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <MX_ADC_Init+0x128>)
 80025fe:	2200      	movs	r2, #0
 8002600:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8002602:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <MX_ADC_Init+0x128>)
 8002604:	0018      	movs	r0, r3
 8002606:	f000 fc71 	bl	8002eec <HAL_ADC_Init>
 800260a:	1e03      	subs	r3, r0, #0
 800260c:	d001      	beq.n	8002612 <MX_ADC_Init+0x96>
		Error_Handler();
 800260e:	f000 fa77 	bl	8002b00 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8002612:	003b      	movs	r3, r7
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002618:	003b      	movs	r3, r7
 800261a:	2280      	movs	r2, #128	; 0x80
 800261c:	0152      	lsls	r2, r2, #5
 800261e:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8002620:	003a      	movs	r2, r7
 8002622:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <MX_ADC_Init+0x128>)
 8002624:	0011      	movs	r1, r2
 8002626:	0018      	movs	r0, r3
 8002628:	f000 fe6e 	bl	8003308 <HAL_ADC_ConfigChannel>
 800262c:	1e03      	subs	r3, r0, #0
 800262e:	d001      	beq.n	8002634 <MX_ADC_Init+0xb8>
		Error_Handler();
 8002630:	f000 fa66 	bl	8002b00 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8002634:	003b      	movs	r3, r7
 8002636:	4a1d      	ldr	r2, [pc, #116]	; (80026ac <MX_ADC_Init+0x130>)
 8002638:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800263a:	003a      	movs	r2, r7
 800263c:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <MX_ADC_Init+0x128>)
 800263e:	0011      	movs	r1, r2
 8002640:	0018      	movs	r0, r3
 8002642:	f000 fe61 	bl	8003308 <HAL_ADC_ConfigChannel>
 8002646:	1e03      	subs	r3, r0, #0
 8002648:	d001      	beq.n	800264e <MX_ADC_Init+0xd2>
		Error_Handler();
 800264a:	f000 fa59 	bl	8002b00 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 800264e:	003b      	movs	r3, r7
 8002650:	4a17      	ldr	r2, [pc, #92]	; (80026b0 <MX_ADC_Init+0x134>)
 8002652:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8002654:	003a      	movs	r2, r7
 8002656:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <MX_ADC_Init+0x128>)
 8002658:	0011      	movs	r1, r2
 800265a:	0018      	movs	r0, r3
 800265c:	f000 fe54 	bl	8003308 <HAL_ADC_ConfigChannel>
 8002660:	1e03      	subs	r3, r0, #0
 8002662:	d001      	beq.n	8002668 <MX_ADC_Init+0xec>
		Error_Handler();
 8002664:	f000 fa4c 	bl	8002b00 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8002668:	003b      	movs	r3, r7
 800266a:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <MX_ADC_Init+0x138>)
 800266c:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800266e:	003a      	movs	r2, r7
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <MX_ADC_Init+0x128>)
 8002672:	0011      	movs	r1, r2
 8002674:	0018      	movs	r0, r3
 8002676:	f000 fe47 	bl	8003308 <HAL_ADC_ConfigChannel>
 800267a:	1e03      	subs	r3, r0, #0
 800267c:	d001      	beq.n	8002682 <MX_ADC_Init+0x106>
		Error_Handler();
 800267e:	f000 fa3f 	bl	8002b00 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8002682:	003b      	movs	r3, r7
 8002684:	4a0c      	ldr	r2, [pc, #48]	; (80026b8 <MX_ADC_Init+0x13c>)
 8002686:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8002688:	003a      	movs	r2, r7
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <MX_ADC_Init+0x128>)
 800268c:	0011      	movs	r1, r2
 800268e:	0018      	movs	r0, r3
 8002690:	f000 fe3a 	bl	8003308 <HAL_ADC_ConfigChannel>
 8002694:	1e03      	subs	r3, r0, #0
 8002696:	d001      	beq.n	800269c <MX_ADC_Init+0x120>
		Error_Handler();
 8002698:	f000 fa32 	bl	8002b00 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000154 	.word	0x20000154
 80026a8:	40012400 	.word	0x40012400
 80026ac:	04000002 	.word	0x04000002
 80026b0:	08000004 	.word	0x08000004
 80026b4:	0c000008 	.word	0x0c000008
 80026b8:	10000010 	.word	0x10000010

080026bc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08a      	sub	sp, #40	; 0x28
 80026c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80026c2:	2318      	movs	r3, #24
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	0018      	movs	r0, r3
 80026c8:	2310      	movs	r3, #16
 80026ca:	001a      	movs	r2, r3
 80026cc:	2100      	movs	r1, #0
 80026ce:	f002 ff1f 	bl	8005510 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80026d2:	2310      	movs	r3, #16
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	0018      	movs	r0, r3
 80026d8:	2308      	movs	r3, #8
 80026da:	001a      	movs	r2, r3
 80026dc:	2100      	movs	r1, #0
 80026de:	f002 ff17 	bl	8005510 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80026e2:	003b      	movs	r3, r7
 80026e4:	0018      	movs	r0, r3
 80026e6:	2310      	movs	r3, #16
 80026e8:	001a      	movs	r2, r3
 80026ea:	2100      	movs	r1, #0
 80026ec:	f002 ff10 	bl	8005510 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80026f0:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <MX_TIM2_Init+0xf8>)
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	05d2      	lsls	r2, r2, #23
 80026f6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 239;
 80026f8:	4b2e      	ldr	r3, [pc, #184]	; (80027b4 <MX_TIM2_Init+0xf8>)
 80026fa:	22ef      	movs	r2, #239	; 0xef
 80026fc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fe:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <MX_TIM2_Init+0xf8>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1999;
 8002704:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <MX_TIM2_Init+0xf8>)
 8002706:	4a2c      	ldr	r2, [pc, #176]	; (80027b8 <MX_TIM2_Init+0xfc>)
 8002708:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800270a:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <MX_TIM2_Init+0xf8>)
 800270c:	2200      	movs	r2, #0
 800270e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002710:	4b28      	ldr	r3, [pc, #160]	; (80027b4 <MX_TIM2_Init+0xf8>)
 8002712:	2200      	movs	r2, #0
 8002714:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002716:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <MX_TIM2_Init+0xf8>)
 8002718:	0018      	movs	r0, r3
 800271a:	f002 f9b3 	bl	8004a84 <HAL_TIM_Base_Init>
 800271e:	1e03      	subs	r3, r0, #0
 8002720:	d001      	beq.n	8002726 <MX_TIM2_Init+0x6a>
		Error_Handler();
 8002722:	f000 f9ed 	bl	8002b00 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002726:	2118      	movs	r1, #24
 8002728:	187b      	adds	r3, r7, r1
 800272a:	2280      	movs	r2, #128	; 0x80
 800272c:	0152      	lsls	r2, r2, #5
 800272e:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002730:	187a      	adds	r2, r7, r1
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <MX_TIM2_Init+0xf8>)
 8002734:	0011      	movs	r1, r2
 8002736:	0018      	movs	r0, r3
 8002738:	f002 fb7e 	bl	8004e38 <HAL_TIM_ConfigClockSource>
 800273c:	1e03      	subs	r3, r0, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM2_Init+0x88>
		Error_Handler();
 8002740:	f000 f9de 	bl	8002b00 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <MX_TIM2_Init+0xf8>)
 8002746:	0018      	movs	r0, r3
 8002748:	f002 f9dc 	bl	8004b04 <HAL_TIM_PWM_Init>
 800274c:	1e03      	subs	r3, r0, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM2_Init+0x98>
		Error_Handler();
 8002750:	f000 f9d6 	bl	8002b00 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002754:	2110      	movs	r1, #16
 8002756:	187b      	adds	r3, r7, r1
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800275c:	187b      	adds	r3, r7, r1
 800275e:	2200      	movs	r2, #0
 8002760:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002762:	187a      	adds	r2, r7, r1
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <MX_TIM2_Init+0xf8>)
 8002766:	0011      	movs	r1, r2
 8002768:	0018      	movs	r0, r3
 800276a:	f002 fe4f 	bl	800540c <HAL_TIMEx_MasterConfigSynchronization>
 800276e:	1e03      	subs	r3, r0, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM2_Init+0xba>
			!= HAL_OK) {
		Error_Handler();
 8002772:	f000 f9c5 	bl	8002b00 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002776:	003b      	movs	r3, r7
 8002778:	2260      	movs	r2, #96	; 0x60
 800277a:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 800277c:	003b      	movs	r3, r7
 800277e:	2200      	movs	r2, #0
 8002780:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002782:	003b      	movs	r3, r7
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002788:	003b      	movs	r3, r7
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800278e:	0039      	movs	r1, r7
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <MX_TIM2_Init+0xf8>)
 8002792:	2200      	movs	r2, #0
 8002794:	0018      	movs	r0, r3
 8002796:	f002 fa89 	bl	8004cac <HAL_TIM_PWM_ConfigChannel>
 800279a:	1e03      	subs	r3, r0, #0
 800279c:	d001      	beq.n	80027a2 <MX_TIM2_Init+0xe6>
			!= HAL_OK) {
		Error_Handler();
 800279e:	f000 f9af 	bl	8002b00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80027a2:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <MX_TIM2_Init+0xf8>)
 80027a4:	0018      	movs	r0, r3
 80027a6:	f000 fa47 	bl	8002c38 <HAL_TIM_MspPostInit>

}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b00a      	add	sp, #40	; 0x28
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	200000c8 	.word	0x200000c8
 80027b8:	000007cf 	.word	0x000007cf

080027bc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <MX_DMA_Init+0x38>)
 80027c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027c6:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <MX_DMA_Init+0x38>)
 80027c8:	2101      	movs	r1, #1
 80027ca:	430a      	orrs	r2, r1
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <MX_DMA_Init+0x38>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	2201      	movs	r2, #1
 80027d4:	4013      	ands	r3, r2
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2100      	movs	r1, #0
 80027de:	2009      	movs	r0, #9
 80027e0:	f001 f86e 	bl	80038c0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80027e4:	2009      	movs	r0, #9
 80027e6:	f001 f880 	bl	80038ea <HAL_NVIC_EnableIRQ>

}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	46bd      	mov	sp, r7
 80027ee:	b002      	add	sp, #8
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	40021000 	.word	0x40021000

080027f8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80027fe:	240c      	movs	r4, #12
 8002800:	193b      	adds	r3, r7, r4
 8002802:	0018      	movs	r0, r3
 8002804:	2314      	movs	r3, #20
 8002806:	001a      	movs	r2, r3
 8002808:	2100      	movs	r1, #0
 800280a:	f002 fe81 	bl	8005510 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800280e:	4b3c      	ldr	r3, [pc, #240]	; (8002900 <MX_GPIO_Init+0x108>)
 8002810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <MX_GPIO_Init+0x108>)
 8002814:	2104      	movs	r1, #4
 8002816:	430a      	orrs	r2, r1
 8002818:	62da      	str	r2, [r3, #44]	; 0x2c
 800281a:	4b39      	ldr	r3, [pc, #228]	; (8002900 <MX_GPIO_Init+0x108>)
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	2204      	movs	r2, #4
 8002820:	4013      	ands	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002826:	4b36      	ldr	r3, [pc, #216]	; (8002900 <MX_GPIO_Init+0x108>)
 8002828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282a:	4b35      	ldr	r3, [pc, #212]	; (8002900 <MX_GPIO_Init+0x108>)
 800282c:	2101      	movs	r1, #1
 800282e:	430a      	orrs	r2, r1
 8002830:	62da      	str	r2, [r3, #44]	; 0x2c
 8002832:	4b33      	ldr	r3, [pc, #204]	; (8002900 <MX_GPIO_Init+0x108>)
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	2201      	movs	r2, #1
 8002838:	4013      	ands	r3, r2
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800283e:	4b30      	ldr	r3, [pc, #192]	; (8002900 <MX_GPIO_Init+0x108>)
 8002840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002842:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <MX_GPIO_Init+0x108>)
 8002844:	2102      	movs	r1, #2
 8002846:	430a      	orrs	r2, r1
 8002848:	62da      	str	r2, [r3, #44]	; 0x2c
 800284a:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <MX_GPIO_Init+0x108>)
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	2202      	movs	r2, #2
 8002850:	4013      	ands	r3, r2
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, DISP_RS_Pin | DISP_E_Pin, GPIO_PIN_RESET);
 8002856:	23c0      	movs	r3, #192	; 0xc0
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	482a      	ldr	r0, [pc, #168]	; (8002904 <MX_GPIO_Init+0x10c>)
 800285c:	2200      	movs	r2, #0
 800285e:	0019      	movs	r1, r3
 8002860:	f001 fb88 	bl	8003f74 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8002864:	23d8      	movs	r3, #216	; 0xd8
 8002866:	00d9      	lsls	r1, r3, #3
 8002868:	23a0      	movs	r3, #160	; 0xa0
 800286a:	05db      	lsls	r3, r3, #23
 800286c:	2200      	movs	r2, #0
 800286e:	0018      	movs	r0, r3
 8002870:	f001 fb80 	bl	8003f74 <HAL_GPIO_WritePin>
	LED_STATUS_Pin | DISP_D7_Pin | DISP_D5_Pin | DISP_D4_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DISP_D6_GPIO_Port, DISP_D6_Pin, GPIO_PIN_RESET);
 8002874:	4b24      	ldr	r3, [pc, #144]	; (8002908 <MX_GPIO_Init+0x110>)
 8002876:	2200      	movs	r2, #0
 8002878:	2102      	movs	r1, #2
 800287a:	0018      	movs	r0, r3
 800287c:	f001 fb7a 	bl	8003f74 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : DISP_RS_Pin DISP_E_Pin */
	GPIO_InitStruct.Pin = DISP_RS_Pin | DISP_E_Pin;
 8002880:	193b      	adds	r3, r7, r4
 8002882:	22c0      	movs	r2, #192	; 0xc0
 8002884:	0212      	lsls	r2, r2, #8
 8002886:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002888:	193b      	adds	r3, r7, r4
 800288a:	2201      	movs	r2, #1
 800288c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	193b      	adds	r3, r7, r4
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002894:	193b      	adds	r3, r7, r4
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800289a:	193b      	adds	r3, r7, r4
 800289c:	4a19      	ldr	r2, [pc, #100]	; (8002904 <MX_GPIO_Init+0x10c>)
 800289e:	0019      	movs	r1, r3
 80028a0:	0010      	movs	r0, r2
 80028a2:	f001 f9f9 	bl	8003c98 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_STATUS_Pin DISP_D7_Pin DISP_D5_Pin DISP_D4_Pin */
	GPIO_InitStruct.Pin = LED_STATUS_Pin | DISP_D7_Pin | DISP_D5_Pin
 80028a6:	0021      	movs	r1, r4
 80028a8:	187b      	adds	r3, r7, r1
 80028aa:	22d8      	movs	r2, #216	; 0xd8
 80028ac:	00d2      	lsls	r2, r2, #3
 80028ae:	601a      	str	r2, [r3, #0]
			| DISP_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b0:	000c      	movs	r4, r1
 80028b2:	193b      	adds	r3, r7, r4
 80028b4:	2201      	movs	r2, #1
 80028b6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	193b      	adds	r3, r7, r4
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028be:	193b      	adds	r3, r7, r4
 80028c0:	2200      	movs	r2, #0
 80028c2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c4:	193a      	adds	r2, r7, r4
 80028c6:	23a0      	movs	r3, #160	; 0xa0
 80028c8:	05db      	lsls	r3, r3, #23
 80028ca:	0011      	movs	r1, r2
 80028cc:	0018      	movs	r0, r3
 80028ce:	f001 f9e3 	bl	8003c98 <HAL_GPIO_Init>

	/*Configure GPIO pin : DISP_D6_Pin */
	GPIO_InitStruct.Pin = DISP_D6_Pin;
 80028d2:	0021      	movs	r1, r4
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	2202      	movs	r2, #2
 80028d8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028da:	187b      	adds	r3, r7, r1
 80028dc:	2201      	movs	r2, #1
 80028de:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	187b      	adds	r3, r7, r1
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	187b      	adds	r3, r7, r1
 80028e8:	2200      	movs	r2, #0
 80028ea:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(DISP_D6_GPIO_Port, &GPIO_InitStruct);
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	4a06      	ldr	r2, [pc, #24]	; (8002908 <MX_GPIO_Init+0x110>)
 80028f0:	0019      	movs	r1, r3
 80028f2:	0010      	movs	r0, r2
 80028f4:	f001 f9d0 	bl	8003c98 <HAL_GPIO_Init>

}
 80028f8:	46c0      	nop			; (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b009      	add	sp, #36	; 0x24
 80028fe:	bd90      	pop	{r4, r7, pc}
 8002900:	40021000 	.word	0x40021000
 8002904:	50000800 	.word	0x50000800
 8002908:	50000400 	.word	0x50000400

0800290c <conversionToMultiplier>:

/* USER CODE BEGIN 4 */

float conversionToMultiplier(uint16_t conversion, uint16_t maxMultiplier) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	0002      	movs	r2, r0
 8002914:	1dbb      	adds	r3, r7, #6
 8002916:	801a      	strh	r2, [r3, #0]
 8002918:	1d3b      	adds	r3, r7, #4
 800291a:	1c0a      	adds	r2, r1, #0
 800291c:	801a      	strh	r2, [r3, #0]
	/*przelicz odczyt z potencjometru na mnożnik. Poniżej połowy- mnoznik ułamkowy.
	 Powyżej połowy- mnożnik całkowity o maksymalnej wartości maxMultiplier*/

	float reg;

	if (conversion < 2048) {
 800291e:	1dbb      	adds	r3, r7, #6
 8002920:	881a      	ldrh	r2, [r3, #0]
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	429a      	cmp	r2, r3
 8002928:	d20c      	bcs.n	8002944 <conversionToMultiplier+0x38>
		reg = ((float) conversion * 1) / 2047;
 800292a:	1dbb      	adds	r3, r7, #6
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	0018      	movs	r0, r3
 8002930:	f7fe fc94 	bl	800125c <__aeabi_ui2f>
 8002934:	1c03      	adds	r3, r0, #0
 8002936:	4918      	ldr	r1, [pc, #96]	; (8002998 <conversionToMultiplier+0x8c>)
 8002938:	1c18      	adds	r0, r3, #0
 800293a:	f7fd ff7d 	bl	8000838 <__aeabi_fdiv>
 800293e:	1c03      	adds	r3, r0, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	e023      	b.n	800298c <conversionToMultiplier+0x80>

	} else if (conversion >= 2048) {
 8002944:	1dbb      	adds	r3, r7, #6
 8002946:	881a      	ldrh	r2, [r3, #0]
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	429a      	cmp	r2, r3
 800294e:	d31d      	bcc.n	800298c <conversionToMultiplier+0x80>
		float conversion2 = (float) conversion - 2048;
 8002950:	1dbb      	adds	r3, r7, #6
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	0018      	movs	r0, r3
 8002956:	f7fe fc81 	bl	800125c <__aeabi_ui2f>
 800295a:	1c03      	adds	r3, r0, #0
 800295c:	218a      	movs	r1, #138	; 0x8a
 800295e:	05c9      	lsls	r1, r1, #23
 8002960:	1c18      	adds	r0, r3, #0
 8002962:	f7fe fa4d 	bl	8000e00 <__aeabi_fsub>
 8002966:	1c03      	adds	r3, r0, #0
 8002968:	60bb      	str	r3, [r7, #8]
		reg = (maxMultiplier * conversion2 / 2047);
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	0018      	movs	r0, r3
 8002970:	f7fe fc2e 	bl	80011d0 <__aeabi_i2f>
 8002974:	1c03      	adds	r3, r0, #0
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	1c18      	adds	r0, r3, #0
 800297a:	f7fe f927 	bl	8000bcc <__aeabi_fmul>
 800297e:	1c03      	adds	r3, r0, #0
 8002980:	4905      	ldr	r1, [pc, #20]	; (8002998 <conversionToMultiplier+0x8c>)
 8002982:	1c18      	adds	r0, r3, #0
 8002984:	f7fd ff58 	bl	8000838 <__aeabi_fdiv>
 8002988:	1c03      	adds	r3, r0, #0
 800298a:	60fb      	str	r3, [r7, #12]
	}
	return reg;
 800298c:	68fb      	ldr	r3, [r7, #12]
}
 800298e:	1c18      	adds	r0, r3, #0
 8002990:	46bd      	mov	sp, r7
 8002992:	b004      	add	sp, #16
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	44ffe000 	.word	0x44ffe000

0800299c <conversionToTemperature>:

float conversionToTemperature(uint16_t conversion) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	0002      	movs	r2, r0
 80029a4:	1dbb      	adds	r3, r7, #6
 80029a6:	801a      	strh	r2, [r3, #0]
	/*przelicz odczyt z termometru na temperaturę wg klucza 10mV/stC*/

	float temperature = (conversion * 3.3 / 4095) * 100;
 80029a8:	1dbb      	adds	r3, r7, #6
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f7ff f9e5 	bl	8001d7c <__aeabi_i2d>
 80029b2:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <conversionToTemperature+0x58>)
 80029b4:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <conversionToTemperature+0x5c>)
 80029b6:	f7fe ff75 	bl	80018a4 <__aeabi_dmul>
 80029ba:	0002      	movs	r2, r0
 80029bc:	000b      	movs	r3, r1
 80029be:	0010      	movs	r0, r2
 80029c0:	0019      	movs	r1, r3
 80029c2:	2200      	movs	r2, #0
 80029c4:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <conversionToTemperature+0x60>)
 80029c6:	f7fe fc85 	bl	80012d4 <__aeabi_ddiv>
 80029ca:	0002      	movs	r2, r0
 80029cc:	000b      	movs	r3, r1
 80029ce:	0010      	movs	r0, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	2200      	movs	r2, #0
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <conversionToTemperature+0x64>)
 80029d6:	f7fe ff65 	bl	80018a4 <__aeabi_dmul>
 80029da:	0002      	movs	r2, r0
 80029dc:	000b      	movs	r3, r1
 80029de:	0010      	movs	r0, r2
 80029e0:	0019      	movs	r1, r3
 80029e2:	f7ff f9fb 	bl	8001ddc <__aeabi_d2f>
 80029e6:	1c03      	adds	r3, r0, #0
 80029e8:	60fb      	str	r3, [r7, #12]
	return temperature;
 80029ea:	68fb      	ldr	r3, [r7, #12]
}
 80029ec:	1c18      	adds	r0, r3, #0
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b004      	add	sp, #16
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	66666666 	.word	0x66666666
 80029f8:	400a6666 	.word	0x400a6666
 80029fc:	40affe00 	.word	0x40affe00
 8002a00:	40590000 	.word	0x40590000

08002a04 <PID>:
	return ((reading * 100) / 4095) + 100;
}

int32_t PID(float targetValue, float currentValue, float *integralSum,
		float *lastError, float Pmultiplier, float Imultiplier,
		float Dmultiplier) {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	; 0x28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]

	//obliczenie uchybu
	float currentError = targetValue - currentValue;
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7fe f9f3 	bl	8000e00 <__aeabi_fsub>
 8002a1a:	1c03      	adds	r3, r0, #0
 8002a1c:	623b      	str	r3, [r7, #32]

	//człon proporcjonalny
	float xP = currentError * Pmultiplier; //3
 8002a1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a20:	6a38      	ldr	r0, [r7, #32]
 8002a22:	f7fe f8d3 	bl	8000bcc <__aeabi_fmul>
 8002a26:	1c03      	adds	r3, r0, #0
 8002a28:	61fb      	str	r3, [r7, #28]

	//człon całkujący
	*integralSum = *integralSum + currentError; //4
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6a39      	ldr	r1, [r7, #32]
 8002a30:	1c18      	adds	r0, r3, #0
 8002a32:	f7fd fd65 	bl	8000500 <__aeabi_fadd>
 8002a36:	1c03      	adds	r3, r0, #0
 8002a38:	1c1a      	adds	r2, r3, #0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	601a      	str	r2, [r3, #0]
	float xI = *integralSum * Imultiplier; //4
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	1c19      	adds	r1, r3, #0
 8002a44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a46:	f7fe f8c1 	bl	8000bcc <__aeabi_fmul>
 8002a4a:	1c03      	adds	r3, r0, #0
 8002a4c:	61bb      	str	r3, [r7, #24]

	//anty Wind-Up(blokada pętli całkowania)
	if(*integralSum>=100 && currentError > 0) *integralSum = 100;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4929      	ldr	r1, [pc, #164]	; (8002af8 <PID+0xf4>)
 8002a54:	1c18      	adds	r0, r3, #0
 8002a56:	f7fd fc1d 	bl	8000294 <__aeabi_fcmpge>
 8002a5a:	1e03      	subs	r3, r0, #0
 8002a5c:	d009      	beq.n	8002a72 <PID+0x6e>
 8002a5e:	2100      	movs	r1, #0
 8002a60:	6a38      	ldr	r0, [r7, #32]
 8002a62:	f7fd fc0d 	bl	8000280 <__aeabi_fcmpgt>
 8002a66:	1e03      	subs	r3, r0, #0
 8002a68:	d003      	beq.n	8002a72 <PID+0x6e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a22      	ldr	r2, [pc, #136]	; (8002af8 <PID+0xf4>)
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	e010      	b.n	8002a94 <PID+0x90>
	else if(*integralSum<=-100 && currentError<0) *integralSum = -100;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4921      	ldr	r1, [pc, #132]	; (8002afc <PID+0xf8>)
 8002a78:	1c18      	adds	r0, r3, #0
 8002a7a:	f7fd fbf7 	bl	800026c <__aeabi_fcmple>
 8002a7e:	1e03      	subs	r3, r0, #0
 8002a80:	d008      	beq.n	8002a94 <PID+0x90>
 8002a82:	2100      	movs	r1, #0
 8002a84:	6a38      	ldr	r0, [r7, #32]
 8002a86:	f7fd fbe7 	bl	8000258 <__aeabi_fcmplt>
 8002a8a:	1e03      	subs	r3, r0, #0
 8002a8c:	d002      	beq.n	8002a94 <PID+0x90>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a1a      	ldr	r2, [pc, #104]	; (8002afc <PID+0xf8>)
 8002a92:	601a      	str	r2, [r3, #0]

	//człon różniczkujący
	float xD = (currentError - *lastError) * Dmultiplier; //-1
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	1c19      	adds	r1, r3, #0
 8002a9a:	6a38      	ldr	r0, [r7, #32]
 8002a9c:	f7fe f9b0 	bl	8000e00 <__aeabi_fsub>
 8002aa0:	1c03      	adds	r3, r0, #0
 8002aa2:	1c19      	adds	r1, r3, #0
 8002aa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002aa6:	f7fe f891 	bl	8000bcc <__aeabi_fmul>
 8002aaa:	1c03      	adds	r3, r0, #0
 8002aac:	617b      	str	r3, [r7, #20]
	*lastError = currentError;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6a3a      	ldr	r2, [r7, #32]
 8002ab2:	601a      	str	r2, [r3, #0]

	//sumowanie korekt
	int32_t throttle = xP + xI + xD;
 8002ab4:	69b9      	ldr	r1, [r7, #24]
 8002ab6:	69f8      	ldr	r0, [r7, #28]
 8002ab8:	f7fd fd22 	bl	8000500 <__aeabi_fadd>
 8002abc:	1c03      	adds	r3, r0, #0
 8002abe:	6979      	ldr	r1, [r7, #20]
 8002ac0:	1c18      	adds	r0, r3, #0
 8002ac2:	f7fd fd1d 	bl	8000500 <__aeabi_fadd>
 8002ac6:	1c03      	adds	r3, r0, #0
 8002ac8:	1c18      	adds	r0, r3, #0
 8002aca:	f7fe fb61 	bl	8001190 <__aeabi_f2iz>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t maxThrottle = 100;
 8002ad2:	2364      	movs	r3, #100	; 0x64
 8002ad4:	613b      	str	r3, [r7, #16]
	if (throttle > maxThrottle)
 8002ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	dd02      	ble.n	8002ae4 <PID+0xe0>
		throttle = maxThrottle;
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae2:	e004      	b.n	8002aee <PID+0xea>
	else if (throttle < 0)
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	da01      	bge.n	8002aee <PID+0xea>
		throttle = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24




	return throttle;
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b00a      	add	sp, #40	; 0x28
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	42c80000 	.word	0x42c80000
 8002afc:	c2c80000 	.word	0xc2c80000

08002b00 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b04:	b672      	cpsid	i
}
 8002b06:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b08:	e7fe      	b.n	8002b08 <Error_Handler+0x8>
	...

08002b0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b10:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <HAL_MspInit+0x24>)
 8002b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_MspInit+0x24>)
 8002b16:	2101      	movs	r1, #1
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <HAL_MspInit+0x24>)
 8002b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_MspInit+0x24>)
 8002b22:	2180      	movs	r1, #128	; 0x80
 8002b24:	0549      	lsls	r1, r1, #21
 8002b26:	430a      	orrs	r2, r1
 8002b28:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000

08002b34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b34:	b590      	push	{r4, r7, lr}
 8002b36:	b089      	sub	sp, #36	; 0x24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3c:	240c      	movs	r4, #12
 8002b3e:	193b      	adds	r3, r7, r4
 8002b40:	0018      	movs	r0, r3
 8002b42:	2314      	movs	r3, #20
 8002b44:	001a      	movs	r2, r3
 8002b46:	2100      	movs	r1, #0
 8002b48:	f002 fce2 	bl	8005510 <memset>
  if(hadc->Instance==ADC1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a2a      	ldr	r2, [pc, #168]	; (8002bfc <HAL_ADC_MspInit+0xc8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d14d      	bne.n	8002bf2 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b56:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <HAL_ADC_MspInit+0xcc>)
 8002b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b5a:	4b29      	ldr	r3, [pc, #164]	; (8002c00 <HAL_ADC_MspInit+0xcc>)
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	0089      	lsls	r1, r1, #2
 8002b60:	430a      	orrs	r2, r1
 8002b62:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b64:	4b26      	ldr	r3, [pc, #152]	; (8002c00 <HAL_ADC_MspInit+0xcc>)
 8002b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <HAL_ADC_MspInit+0xcc>)
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b70:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <HAL_ADC_MspInit+0xcc>)
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	2201      	movs	r2, #1
 8002b76:	4013      	ands	r3, r2
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = SET_Pin|REG_P_Pin|REG_I_Pin|REG_D_Pin
 8002b7c:	193b      	adds	r3, r7, r4
 8002b7e:	221f      	movs	r2, #31
 8002b80:	601a      	str	r2, [r3, #0]
                          |TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b82:	193b      	adds	r3, r7, r4
 8002b84:	2203      	movs	r2, #3
 8002b86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	193b      	adds	r3, r7, r4
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8e:	193a      	adds	r2, r7, r4
 8002b90:	23a0      	movs	r3, #160	; 0xa0
 8002b92:	05db      	lsls	r3, r3, #23
 8002b94:	0011      	movs	r1, r2
 8002b96:	0018      	movs	r0, r3
 8002b98:	f001 f87e 	bl	8003c98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002b9c:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <HAL_ADC_MspInit+0xd0>)
 8002b9e:	4a1a      	ldr	r2, [pc, #104]	; (8002c08 <HAL_ADC_MspInit+0xd4>)
 8002ba0:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_ADC_MspInit+0xd0>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ba8:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <HAL_ADC_MspInit+0xd0>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <HAL_ADC_MspInit+0xd0>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002bb4:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <HAL_ADC_MspInit+0xd0>)
 8002bb6:	2280      	movs	r2, #128	; 0x80
 8002bb8:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002bba:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <HAL_ADC_MspInit+0xd0>)
 8002bbc:	2280      	movs	r2, #128	; 0x80
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <HAL_ADC_MspInit+0xd0>)
 8002bc4:	2280      	movs	r2, #128	; 0x80
 8002bc6:	0112      	lsls	r2, r2, #4
 8002bc8:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <HAL_ADC_MspInit+0xd0>)
 8002bcc:	2220      	movs	r2, #32
 8002bce:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <HAL_ADC_MspInit+0xd0>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_ADC_MspInit+0xd0>)
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f000 fea3 	bl	8003924 <HAL_DMA_Init>
 8002bde:	1e03      	subs	r3, r0, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8002be2:	f7ff ff8d 	bl	8002b00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a06      	ldr	r2, [pc, #24]	; (8002c04 <HAL_ADC_MspInit+0xd0>)
 8002bea:	64da      	str	r2, [r3, #76]	; 0x4c
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_ADC_MspInit+0xd0>)
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b009      	add	sp, #36	; 0x24
 8002bf8:	bd90      	pop	{r4, r7, pc}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	40012400 	.word	0x40012400
 8002c00:	40021000 	.word	0x40021000
 8002c04:	2000010c 	.word	0x2000010c
 8002c08:	40020008 	.word	0x40020008

08002c0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	2380      	movs	r3, #128	; 0x80
 8002c1a:	05db      	lsls	r3, r3, #23
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d105      	bne.n	8002c2c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <HAL_TIM_Base_MspInit+0x28>)
 8002c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_TIM_Base_MspInit+0x28>)
 8002c26:	2101      	movs	r1, #1
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c2c:	46c0      	nop			; (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b002      	add	sp, #8
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000

08002c38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c38:	b590      	push	{r4, r7, lr}
 8002c3a:	b089      	sub	sp, #36	; 0x24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	240c      	movs	r4, #12
 8002c42:	193b      	adds	r3, r7, r4
 8002c44:	0018      	movs	r0, r3
 8002c46:	2314      	movs	r3, #20
 8002c48:	001a      	movs	r2, r3
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	f002 fc60 	bl	8005510 <memset>
  if(htim->Instance==TIM2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	05db      	lsls	r3, r3, #23
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d122      	bne.n	8002ca2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5c:	4b13      	ldr	r3, [pc, #76]	; (8002cac <HAL_TIM_MspPostInit+0x74>)
 8002c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c60:	4b12      	ldr	r3, [pc, #72]	; (8002cac <HAL_TIM_MspPostInit+0x74>)
 8002c62:	2101      	movs	r1, #1
 8002c64:	430a      	orrs	r2, r1
 8002c66:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c68:	4b10      	ldr	r3, [pc, #64]	; (8002cac <HAL_TIM_MspPostInit+0x74>)
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	4013      	ands	r3, r2
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
 8002c74:	0021      	movs	r1, r4
 8002c76:	187b      	adds	r3, r7, r1
 8002c78:	2220      	movs	r2, #32
 8002c7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	187b      	adds	r3, r7, r1
 8002c7e:	2202      	movs	r2, #2
 8002c80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	187b      	adds	r3, r7, r1
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	187b      	adds	r3, r7, r1
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8002c8e:	187b      	adds	r3, r7, r1
 8002c90:	2205      	movs	r2, #5
 8002c92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8002c94:	187a      	adds	r2, r7, r1
 8002c96:	23a0      	movs	r3, #160	; 0xa0
 8002c98:	05db      	lsls	r3, r3, #23
 8002c9a:	0011      	movs	r1, r2
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f000 fffb 	bl	8003c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b009      	add	sp, #36	; 0x24
 8002ca8:	bd90      	pop	{r4, r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	40021000 	.word	0x40021000

08002cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cb4:	e7fe      	b.n	8002cb4 <NMI_Handler+0x4>

08002cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cba:	e7fe      	b.n	8002cba <HardFault_Handler+0x4>

08002cbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002cc0:	46c0      	nop			; (mov r8, r8)
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd4:	f000 f8ca 	bl	8002e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cd8:	46c0      	nop			; (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <DMA1_Channel1_IRQHandler+0x14>)
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 fefa 	bl	8003ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002cec:	46c0      	nop			; (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	2000010c 	.word	0x2000010c

08002cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d00:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <_sbrk+0x5c>)
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <_sbrk+0x60>)
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d0c:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <_sbrk+0x64>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d102      	bne.n	8002d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d14:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <_sbrk+0x64>)
 8002d16:	4a12      	ldr	r2, [pc, #72]	; (8002d60 <_sbrk+0x68>)
 8002d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d1a:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <_sbrk+0x64>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	18d3      	adds	r3, r2, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d207      	bcs.n	8002d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d28:	f002 fbc8 	bl	80054bc <__errno>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	220c      	movs	r2, #12
 8002d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d32:	2301      	movs	r3, #1
 8002d34:	425b      	negs	r3, r3
 8002d36:	e009      	b.n	8002d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d38:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <_sbrk+0x64>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d3e:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <_sbrk+0x64>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	18d2      	adds	r2, r2, r3
 8002d46:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <_sbrk+0x64>)
 8002d48:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
}
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b006      	add	sp, #24
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20002000 	.word	0x20002000
 8002d58:	00000400 	.word	0x00000400
 8002d5c:	2000008c 	.word	0x2000008c
 8002d60:	200001c8 	.word	0x200001c8

08002d64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002d70:	480d      	ldr	r0, [pc, #52]	; (8002da8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002d72:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d74:	480d      	ldr	r0, [pc, #52]	; (8002dac <LoopForever+0x6>)
  ldr r1, =_edata
 8002d76:	490e      	ldr	r1, [pc, #56]	; (8002db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d78:	4a0e      	ldr	r2, [pc, #56]	; (8002db4 <LoopForever+0xe>)
  movs r3, #0
 8002d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d7c:	e002      	b.n	8002d84 <LoopCopyDataInit>

08002d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d82:	3304      	adds	r3, #4

08002d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d88:	d3f9      	bcc.n	8002d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d8a:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d8c:	4c0b      	ldr	r4, [pc, #44]	; (8002dbc <LoopForever+0x16>)
  movs r3, #0
 8002d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d90:	e001      	b.n	8002d96 <LoopFillZerobss>

08002d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d94:	3204      	adds	r2, #4

08002d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d98:	d3fb      	bcc.n	8002d92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d9a:	f7ff ffe3 	bl	8002d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d9e:	f002 fb93 	bl	80054c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002da2:	f7ff fa97 	bl	80022d4 <main>

08002da6 <LoopForever>:

LoopForever:
    b LoopForever
 8002da6:	e7fe      	b.n	8002da6 <LoopForever>
   ldr   r0, =_estack
 8002da8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002db4:	08005f48 	.word	0x08005f48
  ldr r2, =_sbss
 8002db8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002dbc:	200001c4 	.word	0x200001c4

08002dc0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dc0:	e7fe      	b.n	8002dc0 <ADC1_COMP_IRQHandler>
	...

08002dc4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dca:	1dfb      	adds	r3, r7, #7
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_Init+0x3c>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_Init+0x3c>)
 8002dd6:	2140      	movs	r1, #64	; 0x40
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f000 f811 	bl	8002e04 <HAL_InitTick>
 8002de2:	1e03      	subs	r3, r0, #0
 8002de4:	d003      	beq.n	8002dee <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002de6:	1dfb      	adds	r3, r7, #7
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	e001      	b.n	8002df2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002dee:	f7ff fe8d 	bl	8002b0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002df2:	1dfb      	adds	r3, r7, #7
 8002df4:	781b      	ldrb	r3, [r3, #0]
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b002      	add	sp, #8
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	40022000 	.word	0x40022000

08002e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e0c:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <HAL_InitTick+0x5c>)
 8002e0e:	681c      	ldr	r4, [r3, #0]
 8002e10:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <HAL_InitTick+0x60>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	0019      	movs	r1, r3
 8002e16:	23fa      	movs	r3, #250	; 0xfa
 8002e18:	0098      	lsls	r0, r3, #2
 8002e1a:	f7fd f97f 	bl	800011c <__udivsi3>
 8002e1e:	0003      	movs	r3, r0
 8002e20:	0019      	movs	r1, r3
 8002e22:	0020      	movs	r0, r4
 8002e24:	f7fd f97a 	bl	800011c <__udivsi3>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f000 fd6d 	bl	800390a <HAL_SYSTICK_Config>
 8002e30:	1e03      	subs	r3, r0, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e00f      	b.n	8002e58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d80b      	bhi.n	8002e56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	2301      	movs	r3, #1
 8002e42:	425b      	negs	r3, r3
 8002e44:	2200      	movs	r2, #0
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 fd3a 	bl	80038c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_InitTick+0x64>)
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e000      	b.n	8002e58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
}
 8002e58:	0018      	movs	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b003      	add	sp, #12
 8002e5e:	bd90      	pop	{r4, r7, pc}
 8002e60:	20000000 	.word	0x20000000
 8002e64:	20000008 	.word	0x20000008
 8002e68:	20000004 	.word	0x20000004

08002e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e70:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_IncTick+0x1c>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	001a      	movs	r2, r3
 8002e76:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <HAL_IncTick+0x20>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	18d2      	adds	r2, r2, r3
 8002e7c:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <HAL_IncTick+0x20>)
 8002e7e:	601a      	str	r2, [r3, #0]
}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	20000008 	.word	0x20000008
 8002e8c:	200001b0 	.word	0x200001b0

08002e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  return uwTick;
 8002e94:	4b02      	ldr	r3, [pc, #8]	; (8002ea0 <HAL_GetTick+0x10>)
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	200001b0 	.word	0x200001b0

08002ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eac:	f7ff fff0 	bl	8002e90 <HAL_GetTick>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	d005      	beq.n	8002eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <HAL_Delay+0x44>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	189b      	adds	r3, r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	f7ff ffe0 	bl	8002e90 <HAL_GetTick>
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d8f7      	bhi.n	8002ecc <HAL_Delay+0x28>
  {
  }
}
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b004      	add	sp, #16
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	20000008 	.word	0x20000008

08002eec <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e159      	b.n	80031b2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2250      	movs	r2, #80	; 0x50
 8002f10:	2100      	movs	r1, #0
 8002f12:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	0018      	movs	r0, r3
 8002f18:	f7ff fe0c 	bl	8002b34 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	2210      	movs	r2, #16
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b10      	cmp	r3, #16
 8002f26:	d005      	beq.n	8002f34 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2204      	movs	r2, #4
 8002f30:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002f32:	d00b      	beq.n	8002f4c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f38:	2210      	movs	r2, #16
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2250      	movs	r2, #80	; 0x50
 8002f44:	2100      	movs	r1, #0
 8002f46:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e132      	b.n	80031b2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	4a9a      	ldr	r2, [pc, #616]	; (80031bc <HAL_ADC_Init+0x2d0>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	2202      	movs	r2, #2
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2203      	movs	r2, #3
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d108      	bne.n	8002f7c <HAL_ADC_Init+0x90>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2201      	movs	r2, #1
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_ADC_Init+0x90>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <HAL_ADC_Init+0x92>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d149      	bne.n	8003016 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	23c0      	movs	r3, #192	; 0xc0
 8002f88:	061b      	lsls	r3, r3, #24
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_ADC_Init+0xba>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	05db      	lsls	r3, r3, #23
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d005      	beq.n	8002fa6 <HAL_ADC_Init+0xba>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	061b      	lsls	r3, r3, #24
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d111      	bne.n	8002fca <HAL_ADC_Init+0xde>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	0092      	lsls	r2, r2, #2
 8002fb2:	0892      	lsrs	r2, r2, #2
 8002fb4:	611a      	str	r2, [r3, #16]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6919      	ldr	r1, [r3, #16]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	611a      	str	r2, [r3, #16]
 8002fc8:	e014      	b.n	8002ff4 <HAL_ADC_Init+0x108>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	0092      	lsls	r2, r2, #2
 8002fd6:	0892      	lsrs	r2, r2, #2
 8002fd8:	611a      	str	r2, [r3, #16]
 8002fda:	4b79      	ldr	r3, [pc, #484]	; (80031c0 <HAL_ADC_Init+0x2d4>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4b78      	ldr	r3, [pc, #480]	; (80031c0 <HAL_ADC_Init+0x2d4>)
 8002fe0:	4978      	ldr	r1, [pc, #480]	; (80031c4 <HAL_ADC_Init+0x2d8>)
 8002fe2:	400a      	ands	r2, r1
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	4b76      	ldr	r3, [pc, #472]	; (80031c0 <HAL_ADC_Init+0x2d4>)
 8002fe8:	6819      	ldr	r1, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	4b74      	ldr	r3, [pc, #464]	; (80031c0 <HAL_ADC_Init+0x2d4>)
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2118      	movs	r1, #24
 8003000:	438a      	bics	r2, r1
 8003002:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68d9      	ldr	r1, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003016:	4b6a      	ldr	r3, [pc, #424]	; (80031c0 <HAL_ADC_Init+0x2d4>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4b69      	ldr	r3, [pc, #420]	; (80031c0 <HAL_ADC_Init+0x2d4>)
 800301c:	496a      	ldr	r1, [pc, #424]	; (80031c8 <HAL_ADC_Init+0x2dc>)
 800301e:	400a      	ands	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8003022:	4b67      	ldr	r3, [pc, #412]	; (80031c0 <HAL_ADC_Init+0x2d4>)
 8003024:	6819      	ldr	r1, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302a:	065a      	lsls	r2, r3, #25
 800302c:	4b64      	ldr	r3, [pc, #400]	; (80031c0 <HAL_ADC_Init+0x2d4>)
 800302e:	430a      	orrs	r2, r1
 8003030:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	055b      	lsls	r3, r3, #21
 800303c:	4013      	ands	r3, r2
 800303e:	d108      	bne.n	8003052 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2180      	movs	r1, #128	; 0x80
 800304c:	0549      	lsls	r1, r1, #21
 800304e:	430a      	orrs	r2, r1
 8003050:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	495b      	ldr	r1, [pc, #364]	; (80031cc <HAL_ADC_Init+0x2e0>)
 800305e:	400a      	ands	r2, r1
 8003060:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68d9      	ldr	r1, [r3, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d101      	bne.n	8003078 <HAL_ADC_Init+0x18c>
 8003074:	2304      	movs	r3, #4
 8003076:	e000      	b.n	800307a <HAL_ADC_Init+0x18e>
 8003078:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800307a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2020      	movs	r0, #32
 8003080:	5c1b      	ldrb	r3, [r3, r0]
 8003082:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003084:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	202c      	movs	r0, #44	; 0x2c
 800308a:	5c1b      	ldrb	r3, [r3, r0]
 800308c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800308e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003094:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800309c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80030a4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030b2:	23c2      	movs	r3, #194	; 0xc2
 80030b4:	33ff      	adds	r3, #255	; 0xff
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d00b      	beq.n	80030d2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68d9      	ldr	r1, [r3, #12]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2221      	movs	r2, #33	; 0x21
 80030d6:	5c9b      	ldrb	r3, [r3, r2]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d11a      	bne.n	8003112 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	5c9b      	ldrb	r3, [r3, r2]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2180      	movs	r1, #128	; 0x80
 80030f2:	0249      	lsls	r1, r1, #9
 80030f4:	430a      	orrs	r2, r1
 80030f6:	60da      	str	r2, [r3, #12]
 80030f8:	e00b      	b.n	8003112 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	2220      	movs	r2, #32
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	2201      	movs	r2, #1
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003116:	2b01      	cmp	r3, #1
 8003118:	d11f      	bne.n	800315a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	492a      	ldr	r1, [pc, #168]	; (80031d0 <HAL_ADC_Init+0x2e4>)
 8003126:	400a      	ands	r2, r1
 8003128:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6919      	ldr	r1, [r3, #16]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003138:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800313e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2101      	movs	r1, #1
 8003154:	430a      	orrs	r2, r1
 8003156:	611a      	str	r2, [r3, #16]
 8003158:	e00e      	b.n	8003178 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	2201      	movs	r2, #1
 8003162:	4013      	ands	r3, r2
 8003164:	2b01      	cmp	r3, #1
 8003166:	d107      	bne.n	8003178 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2101      	movs	r1, #1
 8003174:	438a      	bics	r2, r1
 8003176:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2107      	movs	r1, #7
 8003184:	438a      	bics	r2, r1
 8003186:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6959      	ldr	r1, [r3, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a4:	2203      	movs	r2, #3
 80031a6:	4393      	bics	r3, r2
 80031a8:	2201      	movs	r2, #1
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	0018      	movs	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b002      	add	sp, #8
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	fffffefd 	.word	0xfffffefd
 80031c0:	40012708 	.word	0x40012708
 80031c4:	ffc3ffff 	.word	0xffc3ffff
 80031c8:	fdffffff 	.word	0xfdffffff
 80031cc:	fffe0219 	.word	0xfffe0219
 80031d0:	fffffc03 	.word	0xfffffc03

080031d4 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e0:	2317      	movs	r3, #23
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2204      	movs	r2, #4
 80031f0:	4013      	ands	r3, r2
 80031f2:	d15e      	bne.n	80032b2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2250      	movs	r2, #80	; 0x50
 80031f8:	5c9b      	ldrb	r3, [r3, r2]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_Start_DMA+0x2e>
 80031fe:	2302      	movs	r3, #2
 8003200:	e05e      	b.n	80032c0 <HAL_ADC_Start_DMA+0xec>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2250      	movs	r2, #80	; 0x50
 8003206:	2101      	movs	r1, #1
 8003208:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2101      	movs	r1, #1
 8003216:	430a      	orrs	r2, r1
 8003218:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d007      	beq.n	8003232 <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003222:	2317      	movs	r3, #23
 8003224:	18fc      	adds	r4, r7, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	0018      	movs	r0, r3
 800322a:	f000 f8f3 	bl	8003414 <ADC_Enable>
 800322e:	0003      	movs	r3, r0
 8003230:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003232:	2317      	movs	r3, #23
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d13e      	bne.n	80032ba <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	4a21      	ldr	r2, [pc, #132]	; (80032c8 <HAL_ADC_Start_DMA+0xf4>)
 8003242:	4013      	ands	r3, r2
 8003244:	2280      	movs	r2, #128	; 0x80
 8003246:	0052      	lsls	r2, r2, #1
 8003248:	431a      	orrs	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2250      	movs	r2, #80	; 0x50
 8003258:	2100      	movs	r1, #0
 800325a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003260:	4a1a      	ldr	r2, [pc, #104]	; (80032cc <HAL_ADC_Start_DMA+0xf8>)
 8003262:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003268:	4a19      	ldr	r2, [pc, #100]	; (80032d0 <HAL_ADC_Start_DMA+0xfc>)
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003270:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <HAL_ADC_Start_DMA+0x100>)
 8003272:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	221c      	movs	r2, #28
 800327a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2110      	movs	r1, #16
 8003288:	430a      	orrs	r2, r1
 800328a:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3340      	adds	r3, #64	; 0x40
 8003296:	0019      	movs	r1, r3
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f000 fbba 	bl	8003a14 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2104      	movs	r1, #4
 80032ac:	430a      	orrs	r2, r1
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	e003      	b.n	80032ba <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032b2:	2317      	movs	r3, #23
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	2202      	movs	r2, #2
 80032b8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032ba:	2317      	movs	r3, #23
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	781b      	ldrb	r3, [r3, #0]
}
 80032c0:	0018      	movs	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b007      	add	sp, #28
 80032c6:	bd90      	pop	{r4, r7, pc}
 80032c8:	fffff0fe 	.word	0xfffff0fe
 80032cc:	080034e5 	.word	0x080034e5
 80032d0:	08003599 	.word	0x08003599
 80032d4:	080035b7 	.word	0x080035b7

080032d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80032e0:	46c0      	nop			; (mov r8, r8)
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b002      	add	sp, #8
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b002      	add	sp, #8
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2250      	movs	r2, #80	; 0x50
 8003316:	5c9b      	ldrb	r3, [r3, r2]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x18>
 800331c:	2302      	movs	r3, #2
 800331e:	e06c      	b.n	80033fa <HAL_ADC_ConfigChannel+0xf2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2250      	movs	r2, #80	; 0x50
 8003324:	2101      	movs	r1, #1
 8003326:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2204      	movs	r2, #4
 8003330:	4013      	ands	r3, r2
 8003332:	d00b      	beq.n	800334c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003338:	2220      	movs	r2, #32
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2250      	movs	r2, #80	; 0x50
 8003344:	2100      	movs	r1, #0
 8003346:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e056      	b.n	80033fa <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4a2c      	ldr	r2, [pc, #176]	; (8003404 <HAL_ADC_ConfigChannel+0xfc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d028      	beq.n	80033a8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	035b      	lsls	r3, r3, #13
 8003362:	0b5a      	lsrs	r2, r3, #13
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	02db      	lsls	r3, r3, #11
 8003374:	4013      	ands	r3, r2
 8003376:	d009      	beq.n	800338c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8003378:	4b23      	ldr	r3, [pc, #140]	; (8003408 <HAL_ADC_ConfigChannel+0x100>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	4b22      	ldr	r3, [pc, #136]	; (8003408 <HAL_ADC_ConfigChannel+0x100>)
 800337e:	2180      	movs	r1, #128	; 0x80
 8003380:	0409      	lsls	r1, r1, #16
 8003382:	430a      	orrs	r2, r1
 8003384:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003386:	200a      	movs	r0, #10
 8003388:	f000 f930 	bl	80035ec <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	029b      	lsls	r3, r3, #10
 8003394:	4013      	ands	r3, r2
 8003396:	d02b      	beq.n	80033f0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003398:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <HAL_ADC_ConfigChannel+0x100>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <HAL_ADC_ConfigChannel+0x100>)
 800339e:	2180      	movs	r1, #128	; 0x80
 80033a0:	03c9      	lsls	r1, r1, #15
 80033a2:	430a      	orrs	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e023      	b.n	80033f0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	035b      	lsls	r3, r3, #13
 80033b4:	0b5b      	lsrs	r3, r3, #13
 80033b6:	43d9      	mvns	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	400a      	ands	r2, r1
 80033be:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	02db      	lsls	r3, r3, #11
 80033c8:	4013      	ands	r3, r2
 80033ca:	d005      	beq.n	80033d8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80033cc:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <HAL_ADC_ConfigChannel+0x100>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <HAL_ADC_ConfigChannel+0x100>)
 80033d2:	490e      	ldr	r1, [pc, #56]	; (800340c <HAL_ADC_ConfigChannel+0x104>)
 80033d4:	400a      	ands	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	029b      	lsls	r3, r3, #10
 80033e0:	4013      	ands	r3, r2
 80033e2:	d005      	beq.n	80033f0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <HAL_ADC_ConfigChannel+0x100>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b07      	ldr	r3, [pc, #28]	; (8003408 <HAL_ADC_ConfigChannel+0x100>)
 80033ea:	4909      	ldr	r1, [pc, #36]	; (8003410 <HAL_ADC_ConfigChannel+0x108>)
 80033ec:	400a      	ands	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2250      	movs	r2, #80	; 0x50
 80033f4:	2100      	movs	r1, #0
 80033f6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	0018      	movs	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b002      	add	sp, #8
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	00001001 	.word	0x00001001
 8003408:	40012708 	.word	0x40012708
 800340c:	ff7fffff 	.word	0xff7fffff
 8003410:	ffbfffff 	.word	0xffbfffff

08003414 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2203      	movs	r2, #3
 8003428:	4013      	ands	r3, r2
 800342a:	2b01      	cmp	r3, #1
 800342c:	d108      	bne.n	8003440 <ADC_Enable+0x2c>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2201      	movs	r2, #1
 8003436:	4013      	ands	r3, r2
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <ADC_Enable+0x2c>
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <ADC_Enable+0x2e>
 8003440:	2300      	movs	r3, #0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d146      	bne.n	80034d4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4a24      	ldr	r2, [pc, #144]	; (80034e0 <ADC_Enable+0xcc>)
 800344e:	4013      	ands	r3, r2
 8003450:	d00d      	beq.n	800346e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	2210      	movs	r2, #16
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003462:	2201      	movs	r2, #1
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e033      	b.n	80034d6 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2101      	movs	r1, #1
 800347a:	430a      	orrs	r2, r1
 800347c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800347e:	2001      	movs	r0, #1
 8003480:	f000 f8b4 	bl	80035ec <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003484:	f7ff fd04 	bl	8002e90 <HAL_GetTick>
 8003488:	0003      	movs	r3, r0
 800348a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800348c:	e01b      	b.n	80034c6 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800348e:	f7ff fcff 	bl	8002e90 <HAL_GetTick>
 8003492:	0002      	movs	r2, r0
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b0a      	cmp	r3, #10
 800349a:	d914      	bls.n	80034c6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2201      	movs	r2, #1
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d00d      	beq.n	80034c6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	2210      	movs	r2, #16
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ba:	2201      	movs	r2, #1
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e007      	b.n	80034d6 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2201      	movs	r2, #1
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d1dc      	bne.n	800348e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	0018      	movs	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	b004      	add	sp, #16
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	80000017 	.word	0x80000017

080034e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f6:	2250      	movs	r2, #80	; 0x50
 80034f8:	4013      	ands	r3, r2
 80034fa:	d141      	bne.n	8003580 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003500:	2280      	movs	r2, #128	; 0x80
 8003502:	0092      	lsls	r2, r2, #2
 8003504:	431a      	orrs	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	23c0      	movs	r3, #192	; 0xc0
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	4013      	ands	r3, r2
 8003516:	d12e      	bne.n	8003576 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800351e:	2b00      	cmp	r3, #0
 8003520:	d129      	bne.n	8003576 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2208      	movs	r2, #8
 800352a:	4013      	ands	r3, r2
 800352c:	2b08      	cmp	r3, #8
 800352e:	d122      	bne.n	8003576 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2204      	movs	r2, #4
 8003538:	4013      	ands	r3, r2
 800353a:	d110      	bne.n	800355e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	210c      	movs	r1, #12
 8003548:	438a      	bics	r2, r1
 800354a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003550:	4a10      	ldr	r2, [pc, #64]	; (8003594 <ADC_DMAConvCplt+0xb0>)
 8003552:	4013      	ands	r3, r2
 8003554:	2201      	movs	r2, #1
 8003556:	431a      	orrs	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	655a      	str	r2, [r3, #84]	; 0x54
 800355c:	e00b      	b.n	8003576 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003562:	2220      	movs	r2, #32
 8003564:	431a      	orrs	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	2201      	movs	r2, #1
 8003570:	431a      	orrs	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	0018      	movs	r0, r3
 800357a:	f7ff fead 	bl	80032d8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800357e:	e005      	b.n	800358c <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	0010      	movs	r0, r2
 800358a:	4798      	blx	r3
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	46bd      	mov	sp, r7
 8003590:	b004      	add	sp, #16
 8003592:	bd80      	pop	{r7, pc}
 8003594:	fffffefe 	.word	0xfffffefe

08003598 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	0018      	movs	r0, r3
 80035aa:	f7ff fe9d 	bl	80032e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b004      	add	sp, #16
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	2240      	movs	r2, #64	; 0x40
 80035ca:	431a      	orrs	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	2204      	movs	r2, #4
 80035d6:	431a      	orrs	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	0018      	movs	r0, r3
 80035e0:	f7ff fe8a 	bl	80032f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b004      	add	sp, #16
 80035ea:	bd80      	pop	{r7, pc}

080035ec <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <ADC_DelayMicroSecond+0x38>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	490b      	ldr	r1, [pc, #44]	; (8003628 <ADC_DelayMicroSecond+0x3c>)
 80035fa:	0018      	movs	r0, r3
 80035fc:	f7fc fd8e 	bl	800011c <__udivsi3>
 8003600:	0003      	movs	r3, r0
 8003602:	001a      	movs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4353      	muls	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800360a:	e002      	b.n	8003612 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	3b01      	subs	r3, #1
 8003610:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f9      	bne.n	800360c <ADC_DelayMicroSecond+0x20>
  } 
}
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	46bd      	mov	sp, r7
 800361e:	b004      	add	sp, #16
 8003620:	bd80      	pop	{r7, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	20000000 	.word	0x20000000
 8003628:	000f4240 	.word	0x000f4240

0800362c <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003636:	2317      	movs	r3, #23
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	2200      	movs	r2, #0
 800363c:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2250      	movs	r2, #80	; 0x50
 800364a:	5c9b      	ldrb	r3, [r3, r2]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_ADCEx_Calibration_Start+0x28>
 8003650:	2302      	movs	r3, #2
 8003652:	e083      	b.n	800375c <HAL_ADCEx_Calibration_Start+0x130>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2250      	movs	r2, #80	; 0x50
 8003658:	2101      	movs	r1, #1
 800365a:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2203      	movs	r2, #3
 8003664:	4013      	ands	r3, r2
 8003666:	2b01      	cmp	r3, #1
 8003668:	d108      	bne.n	800367c <HAL_ADCEx_Calibration_Start+0x50>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2201      	movs	r2, #1
 8003672:	4013      	ands	r3, r2
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_ADCEx_Calibration_Start+0x50>
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_ADCEx_Calibration_Start+0x52>
 800367c:	2300      	movs	r3, #0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d15b      	bne.n	800373a <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003686:	4a37      	ldr	r2, [pc, #220]	; (8003764 <HAL_ADCEx_Calibration_Start+0x138>)
 8003688:	4013      	ands	r3, r2
 800368a:	2202      	movs	r2, #2
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2203      	movs	r2, #3
 800369a:	4013      	ands	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2103      	movs	r1, #3
 80036aa:	438a      	bics	r2, r1
 80036ac:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2180      	movs	r1, #128	; 0x80
 80036ba:	0609      	lsls	r1, r1, #24
 80036bc:	430a      	orrs	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80036c0:	f7ff fbe6 	bl	8002e90 <HAL_GetTick>
 80036c4:	0003      	movs	r3, r0
 80036c6:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80036c8:	e01d      	b.n	8003706 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80036ca:	f7ff fbe1 	bl	8002e90 <HAL_GetTick>
 80036ce:	0002      	movs	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b0a      	cmp	r3, #10
 80036d6:	d916      	bls.n	8003706 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	0fdb      	lsrs	r3, r3, #31
 80036e0:	07da      	lsls	r2, r3, #31
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	061b      	lsls	r3, r3, #24
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d10d      	bne.n	8003706 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	2212      	movs	r2, #18
 80036f0:	4393      	bics	r3, r2
 80036f2:	2210      	movs	r2, #16
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2250      	movs	r2, #80	; 0x50
 80036fe:	2100      	movs	r1, #0
 8003700:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e02a      	b.n	800375c <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	0fdb      	lsrs	r3, r3, #31
 800370e:	07da      	lsls	r2, r3, #31
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	061b      	lsls	r3, r3, #24
 8003714:	429a      	cmp	r2, r3
 8003716:	d0d8      	beq.n	80036ca <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68d9      	ldr	r1, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	430a      	orrs	r2, r1
 8003726:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	2203      	movs	r2, #3
 800372e:	4393      	bics	r3, r2
 8003730:	2201      	movs	r2, #1
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
 8003738:	e009      	b.n	800374e <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373e:	2220      	movs	r2, #32
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8003746:	2317      	movs	r3, #23
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	2201      	movs	r2, #1
 800374c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2250      	movs	r2, #80	; 0x50
 8003752:	2100      	movs	r1, #0
 8003754:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003756:	2317      	movs	r3, #23
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	781b      	ldrb	r3, [r3, #0]
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b006      	add	sp, #24
 8003762:	bd80      	pop	{r7, pc}
 8003764:	fffffefd 	.word	0xfffffefd

08003768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	0002      	movs	r2, r0
 8003770:	1dfb      	adds	r3, r7, #7
 8003772:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b7f      	cmp	r3, #127	; 0x7f
 800377a:	d809      	bhi.n	8003790 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800377c:	1dfb      	adds	r3, r7, #7
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	001a      	movs	r2, r3
 8003782:	231f      	movs	r3, #31
 8003784:	401a      	ands	r2, r3
 8003786:	4b04      	ldr	r3, [pc, #16]	; (8003798 <__NVIC_EnableIRQ+0x30>)
 8003788:	2101      	movs	r1, #1
 800378a:	4091      	lsls	r1, r2
 800378c:	000a      	movs	r2, r1
 800378e:	601a      	str	r2, [r3, #0]
  }
}
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	b002      	add	sp, #8
 8003796:	bd80      	pop	{r7, pc}
 8003798:	e000e100 	.word	0xe000e100

0800379c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	0002      	movs	r2, r0
 80037a4:	6039      	str	r1, [r7, #0]
 80037a6:	1dfb      	adds	r3, r7, #7
 80037a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80037aa:	1dfb      	adds	r3, r7, #7
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b7f      	cmp	r3, #127	; 0x7f
 80037b0:	d828      	bhi.n	8003804 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037b2:	4a2f      	ldr	r2, [pc, #188]	; (8003870 <__NVIC_SetPriority+0xd4>)
 80037b4:	1dfb      	adds	r3, r7, #7
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	b25b      	sxtb	r3, r3
 80037ba:	089b      	lsrs	r3, r3, #2
 80037bc:	33c0      	adds	r3, #192	; 0xc0
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	589b      	ldr	r3, [r3, r2]
 80037c2:	1dfa      	adds	r2, r7, #7
 80037c4:	7812      	ldrb	r2, [r2, #0]
 80037c6:	0011      	movs	r1, r2
 80037c8:	2203      	movs	r2, #3
 80037ca:	400a      	ands	r2, r1
 80037cc:	00d2      	lsls	r2, r2, #3
 80037ce:	21ff      	movs	r1, #255	; 0xff
 80037d0:	4091      	lsls	r1, r2
 80037d2:	000a      	movs	r2, r1
 80037d4:	43d2      	mvns	r2, r2
 80037d6:	401a      	ands	r2, r3
 80037d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	019b      	lsls	r3, r3, #6
 80037de:	22ff      	movs	r2, #255	; 0xff
 80037e0:	401a      	ands	r2, r3
 80037e2:	1dfb      	adds	r3, r7, #7
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	0018      	movs	r0, r3
 80037e8:	2303      	movs	r3, #3
 80037ea:	4003      	ands	r3, r0
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037f0:	481f      	ldr	r0, [pc, #124]	; (8003870 <__NVIC_SetPriority+0xd4>)
 80037f2:	1dfb      	adds	r3, r7, #7
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	b25b      	sxtb	r3, r3
 80037f8:	089b      	lsrs	r3, r3, #2
 80037fa:	430a      	orrs	r2, r1
 80037fc:	33c0      	adds	r3, #192	; 0xc0
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003802:	e031      	b.n	8003868 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003804:	4a1b      	ldr	r2, [pc, #108]	; (8003874 <__NVIC_SetPriority+0xd8>)
 8003806:	1dfb      	adds	r3, r7, #7
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	0019      	movs	r1, r3
 800380c:	230f      	movs	r3, #15
 800380e:	400b      	ands	r3, r1
 8003810:	3b08      	subs	r3, #8
 8003812:	089b      	lsrs	r3, r3, #2
 8003814:	3306      	adds	r3, #6
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	18d3      	adds	r3, r2, r3
 800381a:	3304      	adds	r3, #4
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	1dfa      	adds	r2, r7, #7
 8003820:	7812      	ldrb	r2, [r2, #0]
 8003822:	0011      	movs	r1, r2
 8003824:	2203      	movs	r2, #3
 8003826:	400a      	ands	r2, r1
 8003828:	00d2      	lsls	r2, r2, #3
 800382a:	21ff      	movs	r1, #255	; 0xff
 800382c:	4091      	lsls	r1, r2
 800382e:	000a      	movs	r2, r1
 8003830:	43d2      	mvns	r2, r2
 8003832:	401a      	ands	r2, r3
 8003834:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	019b      	lsls	r3, r3, #6
 800383a:	22ff      	movs	r2, #255	; 0xff
 800383c:	401a      	ands	r2, r3
 800383e:	1dfb      	adds	r3, r7, #7
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	0018      	movs	r0, r3
 8003844:	2303      	movs	r3, #3
 8003846:	4003      	ands	r3, r0
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800384c:	4809      	ldr	r0, [pc, #36]	; (8003874 <__NVIC_SetPriority+0xd8>)
 800384e:	1dfb      	adds	r3, r7, #7
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	001c      	movs	r4, r3
 8003854:	230f      	movs	r3, #15
 8003856:	4023      	ands	r3, r4
 8003858:	3b08      	subs	r3, #8
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	430a      	orrs	r2, r1
 800385e:	3306      	adds	r3, #6
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	18c3      	adds	r3, r0, r3
 8003864:	3304      	adds	r3, #4
 8003866:	601a      	str	r2, [r3, #0]
}
 8003868:	46c0      	nop			; (mov r8, r8)
 800386a:	46bd      	mov	sp, r7
 800386c:	b003      	add	sp, #12
 800386e:	bd90      	pop	{r4, r7, pc}
 8003870:	e000e100 	.word	0xe000e100
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	1e5a      	subs	r2, r3, #1
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	045b      	lsls	r3, r3, #17
 8003888:	429a      	cmp	r2, r3
 800388a:	d301      	bcc.n	8003890 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800388c:	2301      	movs	r3, #1
 800388e:	e010      	b.n	80038b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <SysTick_Config+0x44>)
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	3a01      	subs	r2, #1
 8003896:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003898:	2301      	movs	r3, #1
 800389a:	425b      	negs	r3, r3
 800389c:	2103      	movs	r1, #3
 800389e:	0018      	movs	r0, r3
 80038a0:	f7ff ff7c 	bl	800379c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <SysTick_Config+0x44>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038aa:	4b04      	ldr	r3, [pc, #16]	; (80038bc <SysTick_Config+0x44>)
 80038ac:	2207      	movs	r2, #7
 80038ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	0018      	movs	r0, r3
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b002      	add	sp, #8
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	e000e010 	.word	0xe000e010

080038c0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	210f      	movs	r1, #15
 80038cc:	187b      	adds	r3, r7, r1
 80038ce:	1c02      	adds	r2, r0, #0
 80038d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	b25b      	sxtb	r3, r3
 80038da:	0011      	movs	r1, r2
 80038dc:	0018      	movs	r0, r3
 80038de:	f7ff ff5d 	bl	800379c <__NVIC_SetPriority>
}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b004      	add	sp, #16
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	0002      	movs	r2, r0
 80038f2:	1dfb      	adds	r3, r7, #7
 80038f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038f6:	1dfb      	adds	r3, r7, #7
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	b25b      	sxtb	r3, r3
 80038fc:	0018      	movs	r0, r3
 80038fe:	f7ff ff33 	bl	8003768 <__NVIC_EnableIRQ>
}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	46bd      	mov	sp, r7
 8003906:	b002      	add	sp, #8
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	0018      	movs	r0, r3
 8003916:	f7ff ffaf 	bl	8003878 <SysTick_Config>
 800391a:	0003      	movs	r3, r0
}
 800391c:	0018      	movs	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	b002      	add	sp, #8
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e061      	b.n	80039fa <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a32      	ldr	r2, [pc, #200]	; (8003a04 <HAL_DMA_Init+0xe0>)
 800393c:	4694      	mov	ip, r2
 800393e:	4463      	add	r3, ip
 8003940:	2114      	movs	r1, #20
 8003942:	0018      	movs	r0, r3
 8003944:	f7fc fbea 	bl	800011c <__udivsi3>
 8003948:	0003      	movs	r3, r0
 800394a:	009a      	lsls	r2, r3, #2
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a2d      	ldr	r2, [pc, #180]	; (8003a08 <HAL_DMA_Init+0xe4>)
 8003954:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2225      	movs	r2, #37	; 0x25
 800395a:	2102      	movs	r1, #2
 800395c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a28      	ldr	r2, [pc, #160]	; (8003a0c <HAL_DMA_Init+0xe8>)
 800396a:	4013      	ands	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003976:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003982:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800398e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	01db      	lsls	r3, r3, #7
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d018      	beq.n	80039e2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80039b0:	4b17      	ldr	r3, [pc, #92]	; (8003a10 <HAL_DMA_Init+0xec>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b8:	211c      	movs	r1, #28
 80039ba:	400b      	ands	r3, r1
 80039bc:	210f      	movs	r1, #15
 80039be:	4099      	lsls	r1, r3
 80039c0:	000b      	movs	r3, r1
 80039c2:	43d9      	mvns	r1, r3
 80039c4:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <HAL_DMA_Init+0xec>)
 80039c6:	400a      	ands	r2, r1
 80039c8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80039ca:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <HAL_DMA_Init+0xec>)
 80039cc:	6819      	ldr	r1, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d6:	201c      	movs	r0, #28
 80039d8:	4003      	ands	r3, r0
 80039da:	409a      	lsls	r2, r3
 80039dc:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <HAL_DMA_Init+0xec>)
 80039de:	430a      	orrs	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2225      	movs	r2, #37	; 0x25
 80039ec:	2101      	movs	r1, #1
 80039ee:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2224      	movs	r2, #36	; 0x24
 80039f4:	2100      	movs	r1, #0
 80039f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	0018      	movs	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b004      	add	sp, #16
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	bffdfff8 	.word	0xbffdfff8
 8003a08:	40020000 	.word	0x40020000
 8003a0c:	ffff800f 	.word	0xffff800f
 8003a10:	400200a8 	.word	0x400200a8

08003a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a22:	2317      	movs	r3, #23
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2224      	movs	r2, #36	; 0x24
 8003a2e:	5c9b      	ldrb	r3, [r3, r2]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_DMA_Start_IT+0x24>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e04f      	b.n	8003ad8 <HAL_DMA_Start_IT+0xc4>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2224      	movs	r2, #36	; 0x24
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2225      	movs	r2, #37	; 0x25
 8003a44:	5c9b      	ldrb	r3, [r3, r2]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d13a      	bne.n	8003ac2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2225      	movs	r2, #37	; 0x25
 8003a50:	2102      	movs	r1, #2
 8003a52:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2101      	movs	r1, #1
 8003a66:	438a      	bics	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	68b9      	ldr	r1, [r7, #8]
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f8e3 	bl	8003c3c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d008      	beq.n	8003a90 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	210e      	movs	r1, #14
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	e00f      	b.n	8003ab0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2104      	movs	r1, #4
 8003a9c:	438a      	bics	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	210a      	movs	r1, #10
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2101      	movs	r1, #1
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	e007      	b.n	8003ad2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2224      	movs	r2, #36	; 0x24
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003aca:	2317      	movs	r3, #23
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	2202      	movs	r2, #2
 8003ad0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8003ad2:	2317      	movs	r3, #23
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	781b      	ldrb	r3, [r3, #0]
}
 8003ad8:	0018      	movs	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b006      	add	sp, #24
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afc:	221c      	movs	r2, #28
 8003afe:	4013      	ands	r3, r2
 8003b00:	2204      	movs	r2, #4
 8003b02:	409a      	lsls	r2, r3
 8003b04:	0013      	movs	r3, r2
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d026      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x7a>
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2204      	movs	r2, #4
 8003b10:	4013      	ands	r3, r2
 8003b12:	d022      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d107      	bne.n	8003b30 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2104      	movs	r1, #4
 8003b2c:	438a      	bics	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b34:	221c      	movs	r2, #28
 8003b36:	401a      	ands	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	2104      	movs	r1, #4
 8003b3e:	4091      	lsls	r1, r2
 8003b40:	000a      	movs	r2, r1
 8003b42:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d100      	bne.n	8003b4e <HAL_DMA_IRQHandler+0x6e>
 8003b4c:	e071      	b.n	8003c32 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	0010      	movs	r0, r2
 8003b56:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8003b58:	e06b      	b.n	8003c32 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	221c      	movs	r2, #28
 8003b60:	4013      	ands	r3, r2
 8003b62:	2202      	movs	r2, #2
 8003b64:	409a      	lsls	r2, r3
 8003b66:	0013      	movs	r3, r2
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d02d      	beq.n	8003bca <HAL_DMA_IRQHandler+0xea>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2202      	movs	r2, #2
 8003b72:	4013      	ands	r3, r2
 8003b74:	d029      	beq.n	8003bca <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d10b      	bne.n	8003b9a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	210a      	movs	r1, #10
 8003b8e:	438a      	bics	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2225      	movs	r2, #37	; 0x25
 8003b96:	2101      	movs	r1, #1
 8003b98:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	221c      	movs	r2, #28
 8003ba0:	401a      	ands	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	4091      	lsls	r1, r2
 8003baa:	000a      	movs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2224      	movs	r2, #36	; 0x24
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d039      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	0010      	movs	r0, r2
 8003bc6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003bc8:	e033      	b.n	8003c32 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	221c      	movs	r2, #28
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	0013      	movs	r3, r2
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d02a      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x154>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2208      	movs	r2, #8
 8003be2:	4013      	ands	r3, r2
 8003be4:	d026      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	210e      	movs	r1, #14
 8003bf2:	438a      	bics	r2, r1
 8003bf4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	221c      	movs	r2, #28
 8003bfc:	401a      	ands	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2101      	movs	r1, #1
 8003c04:	4091      	lsls	r1, r2
 8003c06:	000a      	movs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2225      	movs	r2, #37	; 0x25
 8003c14:	2101      	movs	r1, #1
 8003c16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	; 0x24
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	0010      	movs	r0, r2
 8003c30:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	46c0      	nop			; (mov r8, r8)
}
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b004      	add	sp, #16
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	221c      	movs	r2, #28
 8003c50:	401a      	ands	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2101      	movs	r1, #1
 8003c58:	4091      	lsls	r1, r2
 8003c5a:	000a      	movs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b10      	cmp	r3, #16
 8003c6c:	d108      	bne.n	8003c80 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c7e:	e007      	b.n	8003c90 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	60da      	str	r2, [r3, #12]
}
 8003c90:	46c0      	nop			; (mov r8, r8)
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b004      	add	sp, #16
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003cae:	e149      	b.n	8003f44 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4091      	lsls	r1, r2
 8003cba:	000a      	movs	r2, r1
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d100      	bne.n	8003cc8 <HAL_GPIO_Init+0x30>
 8003cc6:	e13a      	b.n	8003f3e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2203      	movs	r2, #3
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d005      	beq.n	8003ce0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2203      	movs	r2, #3
 8003cda:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d130      	bne.n	8003d42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	2203      	movs	r2, #3
 8003cec:	409a      	lsls	r2, r3
 8003cee:	0013      	movs	r3, r2
 8003cf0:	43da      	mvns	r2, r3
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	409a      	lsls	r2, r3
 8003d02:	0013      	movs	r3, r2
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d16:	2201      	movs	r2, #1
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	0013      	movs	r3, r2
 8003d1e:	43da      	mvns	r2, r3
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4013      	ands	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	401a      	ands	r2, r3
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	409a      	lsls	r2, r3
 8003d34:	0013      	movs	r3, r2
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2203      	movs	r2, #3
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d017      	beq.n	8003d7e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	2203      	movs	r2, #3
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	0013      	movs	r3, r2
 8003d5e:	43da      	mvns	r2, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4013      	ands	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	0013      	movs	r3, r2
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2203      	movs	r2, #3
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d123      	bne.n	8003dd2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	08da      	lsrs	r2, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	3208      	adds	r2, #8
 8003d92:	0092      	lsls	r2, r2, #2
 8003d94:	58d3      	ldr	r3, [r2, r3]
 8003d96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2207      	movs	r2, #7
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	220f      	movs	r2, #15
 8003da2:	409a      	lsls	r2, r3
 8003da4:	0013      	movs	r3, r2
 8003da6:	43da      	mvns	r2, r3
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4013      	ands	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2107      	movs	r1, #7
 8003db6:	400b      	ands	r3, r1
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	0013      	movs	r3, r2
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	08da      	lsrs	r2, r3, #3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3208      	adds	r2, #8
 8003dcc:	0092      	lsls	r2, r2, #2
 8003dce:	6939      	ldr	r1, [r7, #16]
 8003dd0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	2203      	movs	r2, #3
 8003dde:	409a      	lsls	r2, r3
 8003de0:	0013      	movs	r3, r2
 8003de2:	43da      	mvns	r2, r3
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4013      	ands	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2203      	movs	r2, #3
 8003df0:	401a      	ands	r2, r3
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	409a      	lsls	r2, r3
 8003df8:	0013      	movs	r3, r2
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	23c0      	movs	r3, #192	; 0xc0
 8003e0c:	029b      	lsls	r3, r3, #10
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d100      	bne.n	8003e14 <HAL_GPIO_Init+0x17c>
 8003e12:	e094      	b.n	8003f3e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e14:	4b51      	ldr	r3, [pc, #324]	; (8003f5c <HAL_GPIO_Init+0x2c4>)
 8003e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e18:	4b50      	ldr	r3, [pc, #320]	; (8003f5c <HAL_GPIO_Init+0x2c4>)
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e20:	4a4f      	ldr	r2, [pc, #316]	; (8003f60 <HAL_GPIO_Init+0x2c8>)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	089b      	lsrs	r3, r3, #2
 8003e26:	3302      	adds	r3, #2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	589b      	ldr	r3, [r3, r2]
 8003e2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2203      	movs	r2, #3
 8003e32:	4013      	ands	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	220f      	movs	r2, #15
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	0013      	movs	r3, r2
 8003e3c:	43da      	mvns	r2, r3
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	23a0      	movs	r3, #160	; 0xa0
 8003e48:	05db      	lsls	r3, r3, #23
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d013      	beq.n	8003e76 <HAL_GPIO_Init+0x1de>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a44      	ldr	r2, [pc, #272]	; (8003f64 <HAL_GPIO_Init+0x2cc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00d      	beq.n	8003e72 <HAL_GPIO_Init+0x1da>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a43      	ldr	r2, [pc, #268]	; (8003f68 <HAL_GPIO_Init+0x2d0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d007      	beq.n	8003e6e <HAL_GPIO_Init+0x1d6>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a42      	ldr	r2, [pc, #264]	; (8003f6c <HAL_GPIO_Init+0x2d4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d101      	bne.n	8003e6a <HAL_GPIO_Init+0x1d2>
 8003e66:	2305      	movs	r3, #5
 8003e68:	e006      	b.n	8003e78 <HAL_GPIO_Init+0x1e0>
 8003e6a:	2306      	movs	r3, #6
 8003e6c:	e004      	b.n	8003e78 <HAL_GPIO_Init+0x1e0>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e002      	b.n	8003e78 <HAL_GPIO_Init+0x1e0>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_GPIO_Init+0x1e0>
 8003e76:	2300      	movs	r3, #0
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	2103      	movs	r1, #3
 8003e7c:	400a      	ands	r2, r1
 8003e7e:	0092      	lsls	r2, r2, #2
 8003e80:	4093      	lsls	r3, r2
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e88:	4935      	ldr	r1, [pc, #212]	; (8003f60 <HAL_GPIO_Init+0x2c8>)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	089b      	lsrs	r3, r3, #2
 8003e8e:	3302      	adds	r3, #2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e96:	4b36      	ldr	r3, [pc, #216]	; (8003f70 <HAL_GPIO_Init+0x2d8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	2380      	movs	r3, #128	; 0x80
 8003eac:	025b      	lsls	r3, r3, #9
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d003      	beq.n	8003eba <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003eba:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <HAL_GPIO_Init+0x2d8>)
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003ec0:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <HAL_GPIO_Init+0x2d8>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	43da      	mvns	r2, r3
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	2380      	movs	r3, #128	; 0x80
 8003ed6:	029b      	lsls	r3, r3, #10
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d003      	beq.n	8003ee4 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ee4:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <HAL_GPIO_Init+0x2d8>)
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eea:	4b21      	ldr	r3, [pc, #132]	; (8003f70 <HAL_GPIO_Init+0x2d8>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	43da      	mvns	r2, r3
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	2380      	movs	r3, #128	; 0x80
 8003f00:	035b      	lsls	r3, r3, #13
 8003f02:	4013      	ands	r3, r2
 8003f04:	d003      	beq.n	8003f0e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f0e:	4b18      	ldr	r3, [pc, #96]	; (8003f70 <HAL_GPIO_Init+0x2d8>)
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003f14:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <HAL_GPIO_Init+0x2d8>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	43da      	mvns	r2, r3
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4013      	ands	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	2380      	movs	r3, #128	; 0x80
 8003f2a:	039b      	lsls	r3, r3, #14
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f38:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <HAL_GPIO_Init+0x2d8>)
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	3301      	adds	r3, #1
 8003f42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	40da      	lsrs	r2, r3
 8003f4c:	1e13      	subs	r3, r2, #0
 8003f4e:	d000      	beq.n	8003f52 <HAL_GPIO_Init+0x2ba>
 8003f50:	e6ae      	b.n	8003cb0 <HAL_GPIO_Init+0x18>
  }
}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	46c0      	nop			; (mov r8, r8)
 8003f56:	46bd      	mov	sp, r7
 8003f58:	b006      	add	sp, #24
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	40010000 	.word	0x40010000
 8003f64:	50000400 	.word	0x50000400
 8003f68:	50000800 	.word	0x50000800
 8003f6c:	50001c00 	.word	0x50001c00
 8003f70:	40010400 	.word	0x40010400

08003f74 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	0008      	movs	r0, r1
 8003f7e:	0011      	movs	r1, r2
 8003f80:	1cbb      	adds	r3, r7, #2
 8003f82:	1c02      	adds	r2, r0, #0
 8003f84:	801a      	strh	r2, [r3, #0]
 8003f86:	1c7b      	adds	r3, r7, #1
 8003f88:	1c0a      	adds	r2, r1, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f8c:	1c7b      	adds	r3, r7, #1
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d004      	beq.n	8003f9e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f94:	1cbb      	adds	r3, r7, #2
 8003f96:	881a      	ldrh	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003f9c:	e003      	b.n	8003fa6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003f9e:	1cbb      	adds	r3, r7, #2
 8003fa0:	881a      	ldrh	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b002      	add	sp, #8
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb0:	b5b0      	push	{r4, r5, r7, lr}
 8003fb2:	b08a      	sub	sp, #40	; 0x28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d102      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f000 fb6c 	bl	800469c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fc4:	4bc8      	ldr	r3, [pc, #800]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	220c      	movs	r2, #12
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fce:	4bc6      	ldr	r3, [pc, #792]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	2380      	movs	r3, #128	; 0x80
 8003fd4:	025b      	lsls	r3, r3, #9
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d100      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x36>
 8003fe4:	e07d      	b.n	80040e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d007      	beq.n	8003ffc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b0c      	cmp	r3, #12
 8003ff0:	d112      	bne.n	8004018 <HAL_RCC_OscConfig+0x68>
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	2380      	movs	r3, #128	; 0x80
 8003ff6:	025b      	lsls	r3, r3, #9
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d10d      	bne.n	8004018 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffc:	4bba      	ldr	r3, [pc, #744]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	2380      	movs	r3, #128	; 0x80
 8004002:	029b      	lsls	r3, r3, #10
 8004004:	4013      	ands	r3, r2
 8004006:	d100      	bne.n	800400a <HAL_RCC_OscConfig+0x5a>
 8004008:	e06a      	b.n	80040e0 <HAL_RCC_OscConfig+0x130>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d166      	bne.n	80040e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	f000 fb42 	bl	800469c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	025b      	lsls	r3, r3, #9
 8004020:	429a      	cmp	r2, r3
 8004022:	d107      	bne.n	8004034 <HAL_RCC_OscConfig+0x84>
 8004024:	4bb0      	ldr	r3, [pc, #704]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4baf      	ldr	r3, [pc, #700]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 800402a:	2180      	movs	r1, #128	; 0x80
 800402c:	0249      	lsls	r1, r1, #9
 800402e:	430a      	orrs	r2, r1
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e027      	b.n	8004084 <HAL_RCC_OscConfig+0xd4>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	23a0      	movs	r3, #160	; 0xa0
 800403a:	02db      	lsls	r3, r3, #11
 800403c:	429a      	cmp	r2, r3
 800403e:	d10e      	bne.n	800405e <HAL_RCC_OscConfig+0xae>
 8004040:	4ba9      	ldr	r3, [pc, #676]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4ba8      	ldr	r3, [pc, #672]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8004046:	2180      	movs	r1, #128	; 0x80
 8004048:	02c9      	lsls	r1, r1, #11
 800404a:	430a      	orrs	r2, r1
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	4ba6      	ldr	r3, [pc, #664]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4ba5      	ldr	r3, [pc, #660]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8004054:	2180      	movs	r1, #128	; 0x80
 8004056:	0249      	lsls	r1, r1, #9
 8004058:	430a      	orrs	r2, r1
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	e012      	b.n	8004084 <HAL_RCC_OscConfig+0xd4>
 800405e:	4ba2      	ldr	r3, [pc, #648]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	4ba1      	ldr	r3, [pc, #644]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8004064:	49a1      	ldr	r1, [pc, #644]	; (80042ec <HAL_RCC_OscConfig+0x33c>)
 8004066:	400a      	ands	r2, r1
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	4b9f      	ldr	r3, [pc, #636]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	2380      	movs	r3, #128	; 0x80
 8004070:	025b      	lsls	r3, r3, #9
 8004072:	4013      	ands	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4b9b      	ldr	r3, [pc, #620]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	4b9a      	ldr	r3, [pc, #616]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 800407e:	499c      	ldr	r1, [pc, #624]	; (80042f0 <HAL_RCC_OscConfig+0x340>)
 8004080:	400a      	ands	r2, r1
 8004082:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d014      	beq.n	80040b6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408c:	f7fe ff00 	bl	8002e90 <HAL_GetTick>
 8004090:	0003      	movs	r3, r0
 8004092:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004096:	f7fe fefb 	bl	8002e90 <HAL_GetTick>
 800409a:	0002      	movs	r2, r0
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b64      	cmp	r3, #100	; 0x64
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e2f9      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040a8:	4b8f      	ldr	r3, [pc, #572]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	2380      	movs	r3, #128	; 0x80
 80040ae:	029b      	lsls	r3, r3, #10
 80040b0:	4013      	ands	r3, r2
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCC_OscConfig+0xe6>
 80040b4:	e015      	b.n	80040e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b6:	f7fe feeb 	bl	8002e90 <HAL_GetTick>
 80040ba:	0003      	movs	r3, r0
 80040bc:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040c0:	f7fe fee6 	bl	8002e90 <HAL_GetTick>
 80040c4:	0002      	movs	r2, r0
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	; 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e2e4      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040d2:	4b85      	ldr	r3, [pc, #532]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	2380      	movs	r3, #128	; 0x80
 80040d8:	029b      	lsls	r3, r3, #10
 80040da:	4013      	ands	r3, r2
 80040dc:	d1f0      	bne.n	80040c0 <HAL_RCC_OscConfig+0x110>
 80040de:	e000      	b.n	80040e2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2202      	movs	r2, #2
 80040e8:	4013      	ands	r3, r2
 80040ea:	d100      	bne.n	80040ee <HAL_RCC_OscConfig+0x13e>
 80040ec:	e099      	b.n	8004222 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	2220      	movs	r2, #32
 80040f8:	4013      	ands	r3, r2
 80040fa:	d009      	beq.n	8004110 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80040fc:	4b7a      	ldr	r3, [pc, #488]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	4b79      	ldr	r3, [pc, #484]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8004102:	2120      	movs	r1, #32
 8004104:	430a      	orrs	r2, r1
 8004106:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	2220      	movs	r2, #32
 800410c:	4393      	bics	r3, r2
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b04      	cmp	r3, #4
 8004114:	d005      	beq.n	8004122 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	2b0c      	cmp	r3, #12
 800411a:	d13e      	bne.n	800419a <HAL_RCC_OscConfig+0x1ea>
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d13b      	bne.n	800419a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004122:	4b71      	ldr	r3, [pc, #452]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2204      	movs	r2, #4
 8004128:	4013      	ands	r3, r2
 800412a:	d004      	beq.n	8004136 <HAL_RCC_OscConfig+0x186>
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e2b2      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004136:	4b6c      	ldr	r3, [pc, #432]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	4a6e      	ldr	r2, [pc, #440]	; (80042f4 <HAL_RCC_OscConfig+0x344>)
 800413c:	4013      	ands	r3, r2
 800413e:	0019      	movs	r1, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	021a      	lsls	r2, r3, #8
 8004146:	4b68      	ldr	r3, [pc, #416]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8004148:	430a      	orrs	r2, r1
 800414a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800414c:	4b66      	ldr	r3, [pc, #408]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2209      	movs	r2, #9
 8004152:	4393      	bics	r3, r2
 8004154:	0019      	movs	r1, r3
 8004156:	4b64      	ldr	r3, [pc, #400]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8004158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415a:	430a      	orrs	r2, r1
 800415c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800415e:	f000 fbeb 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 8004162:	0001      	movs	r1, r0
 8004164:	4b60      	ldr	r3, [pc, #384]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	091b      	lsrs	r3, r3, #4
 800416a:	220f      	movs	r2, #15
 800416c:	4013      	ands	r3, r2
 800416e:	4a62      	ldr	r2, [pc, #392]	; (80042f8 <HAL_RCC_OscConfig+0x348>)
 8004170:	5cd3      	ldrb	r3, [r2, r3]
 8004172:	000a      	movs	r2, r1
 8004174:	40da      	lsrs	r2, r3
 8004176:	4b61      	ldr	r3, [pc, #388]	; (80042fc <HAL_RCC_OscConfig+0x34c>)
 8004178:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800417a:	4b61      	ldr	r3, [pc, #388]	; (8004300 <HAL_RCC_OscConfig+0x350>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2513      	movs	r5, #19
 8004180:	197c      	adds	r4, r7, r5
 8004182:	0018      	movs	r0, r3
 8004184:	f7fe fe3e 	bl	8002e04 <HAL_InitTick>
 8004188:	0003      	movs	r3, r0
 800418a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800418c:	197b      	adds	r3, r7, r5
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d046      	beq.n	8004222 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004194:	197b      	adds	r3, r7, r5
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	e280      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	2b00      	cmp	r3, #0
 800419e:	d027      	beq.n	80041f0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80041a0:	4b51      	ldr	r3, [pc, #324]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2209      	movs	r2, #9
 80041a6:	4393      	bics	r3, r2
 80041a8:	0019      	movs	r1, r3
 80041aa:	4b4f      	ldr	r3, [pc, #316]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 80041ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ae:	430a      	orrs	r2, r1
 80041b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b2:	f7fe fe6d 	bl	8002e90 <HAL_GetTick>
 80041b6:	0003      	movs	r3, r0
 80041b8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041bc:	f7fe fe68 	bl	8002e90 <HAL_GetTick>
 80041c0:	0002      	movs	r2, r0
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e266      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041ce:	4b46      	ldr	r3, [pc, #280]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2204      	movs	r2, #4
 80041d4:	4013      	ands	r3, r2
 80041d6:	d0f1      	beq.n	80041bc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d8:	4b43      	ldr	r3, [pc, #268]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	4a45      	ldr	r2, [pc, #276]	; (80042f4 <HAL_RCC_OscConfig+0x344>)
 80041de:	4013      	ands	r3, r2
 80041e0:	0019      	movs	r1, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	021a      	lsls	r2, r3, #8
 80041e8:	4b3f      	ldr	r3, [pc, #252]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	e018      	b.n	8004222 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041f0:	4b3d      	ldr	r3, [pc, #244]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	4b3c      	ldr	r3, [pc, #240]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 80041f6:	2101      	movs	r1, #1
 80041f8:	438a      	bics	r2, r1
 80041fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fc:	f7fe fe48 	bl	8002e90 <HAL_GetTick>
 8004200:	0003      	movs	r3, r0
 8004202:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004206:	f7fe fe43 	bl	8002e90 <HAL_GetTick>
 800420a:	0002      	movs	r2, r0
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e241      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004218:	4b33      	ldr	r3, [pc, #204]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2204      	movs	r2, #4
 800421e:	4013      	ands	r3, r2
 8004220:	d1f1      	bne.n	8004206 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2210      	movs	r2, #16
 8004228:	4013      	ands	r3, r2
 800422a:	d100      	bne.n	800422e <HAL_RCC_OscConfig+0x27e>
 800422c:	e0a1      	b.n	8004372 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d140      	bne.n	80042b6 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004234:	4b2c      	ldr	r3, [pc, #176]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	2380      	movs	r3, #128	; 0x80
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4013      	ands	r3, r2
 800423e:	d005      	beq.n	800424c <HAL_RCC_OscConfig+0x29c>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e227      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800424c:	4b26      	ldr	r3, [pc, #152]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	4a2c      	ldr	r2, [pc, #176]	; (8004304 <HAL_RCC_OscConfig+0x354>)
 8004252:	4013      	ands	r3, r2
 8004254:	0019      	movs	r1, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1a      	ldr	r2, [r3, #32]
 800425a:	4b23      	ldr	r3, [pc, #140]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 800425c:	430a      	orrs	r2, r1
 800425e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004260:	4b21      	ldr	r3, [pc, #132]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	0a19      	lsrs	r1, r3, #8
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	061a      	lsls	r2, r3, #24
 800426e:	4b1e      	ldr	r3, [pc, #120]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8004270:	430a      	orrs	r2, r1
 8004272:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	0b5b      	lsrs	r3, r3, #13
 800427a:	3301      	adds	r3, #1
 800427c:	2280      	movs	r2, #128	; 0x80
 800427e:	0212      	lsls	r2, r2, #8
 8004280:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004282:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	091b      	lsrs	r3, r3, #4
 8004288:	210f      	movs	r1, #15
 800428a:	400b      	ands	r3, r1
 800428c:	491a      	ldr	r1, [pc, #104]	; (80042f8 <HAL_RCC_OscConfig+0x348>)
 800428e:	5ccb      	ldrb	r3, [r1, r3]
 8004290:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004292:	4b1a      	ldr	r3, [pc, #104]	; (80042fc <HAL_RCC_OscConfig+0x34c>)
 8004294:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004296:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <HAL_RCC_OscConfig+0x350>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2513      	movs	r5, #19
 800429c:	197c      	adds	r4, r7, r5
 800429e:	0018      	movs	r0, r3
 80042a0:	f7fe fdb0 	bl	8002e04 <HAL_InitTick>
 80042a4:	0003      	movs	r3, r0
 80042a6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80042a8:	197b      	adds	r3, r7, r5
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d060      	beq.n	8004372 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80042b0:	197b      	adds	r3, r7, r5
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	e1f2      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d03f      	beq.n	800433e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042be:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <HAL_RCC_OscConfig+0x338>)
 80042c4:	2180      	movs	r1, #128	; 0x80
 80042c6:	0049      	lsls	r1, r1, #1
 80042c8:	430a      	orrs	r2, r1
 80042ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042cc:	f7fe fde0 	bl	8002e90 <HAL_GetTick>
 80042d0:	0003      	movs	r3, r0
 80042d2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80042d4:	e018      	b.n	8004308 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042d6:	f7fe fddb 	bl	8002e90 <HAL_GetTick>
 80042da:	0002      	movs	r2, r0
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d911      	bls.n	8004308 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e1d9      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
 80042e8:	40021000 	.word	0x40021000
 80042ec:	fffeffff 	.word	0xfffeffff
 80042f0:	fffbffff 	.word	0xfffbffff
 80042f4:	ffffe0ff 	.word	0xffffe0ff
 80042f8:	08005eec 	.word	0x08005eec
 80042fc:	20000000 	.word	0x20000000
 8004300:	20000004 	.word	0x20000004
 8004304:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004308:	4bc9      	ldr	r3, [pc, #804]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4013      	ands	r3, r2
 8004312:	d0e0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004314:	4bc6      	ldr	r3, [pc, #792]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	4ac6      	ldr	r2, [pc, #792]	; (8004634 <HAL_RCC_OscConfig+0x684>)
 800431a:	4013      	ands	r3, r2
 800431c:	0019      	movs	r1, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1a      	ldr	r2, [r3, #32]
 8004322:	4bc3      	ldr	r3, [pc, #780]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004328:	4bc1      	ldr	r3, [pc, #772]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	0a19      	lsrs	r1, r3, #8
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	061a      	lsls	r2, r3, #24
 8004336:	4bbe      	ldr	r3, [pc, #760]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004338:	430a      	orrs	r2, r1
 800433a:	605a      	str	r2, [r3, #4]
 800433c:	e019      	b.n	8004372 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800433e:	4bbc      	ldr	r3, [pc, #752]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	4bbb      	ldr	r3, [pc, #748]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004344:	49bc      	ldr	r1, [pc, #752]	; (8004638 <HAL_RCC_OscConfig+0x688>)
 8004346:	400a      	ands	r2, r1
 8004348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434a:	f7fe fda1 	bl	8002e90 <HAL_GetTick>
 800434e:	0003      	movs	r3, r0
 8004350:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004354:	f7fe fd9c 	bl	8002e90 <HAL_GetTick>
 8004358:	0002      	movs	r2, r0
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e19a      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004366:	4bb2      	ldr	r3, [pc, #712]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4013      	ands	r3, r2
 8004370:	d1f0      	bne.n	8004354 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2208      	movs	r2, #8
 8004378:	4013      	ands	r3, r2
 800437a:	d036      	beq.n	80043ea <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d019      	beq.n	80043b8 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004384:	4baa      	ldr	r3, [pc, #680]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004386:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004388:	4ba9      	ldr	r3, [pc, #676]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 800438a:	2101      	movs	r1, #1
 800438c:	430a      	orrs	r2, r1
 800438e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004390:	f7fe fd7e 	bl	8002e90 <HAL_GetTick>
 8004394:	0003      	movs	r3, r0
 8004396:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800439a:	f7fe fd79 	bl	8002e90 <HAL_GetTick>
 800439e:	0002      	movs	r2, r0
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e177      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043ac:	4ba0      	ldr	r3, [pc, #640]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 80043ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b0:	2202      	movs	r2, #2
 80043b2:	4013      	ands	r3, r2
 80043b4:	d0f1      	beq.n	800439a <HAL_RCC_OscConfig+0x3ea>
 80043b6:	e018      	b.n	80043ea <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043b8:	4b9d      	ldr	r3, [pc, #628]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 80043ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043bc:	4b9c      	ldr	r3, [pc, #624]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 80043be:	2101      	movs	r1, #1
 80043c0:	438a      	bics	r2, r1
 80043c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c4:	f7fe fd64 	bl	8002e90 <HAL_GetTick>
 80043c8:	0003      	movs	r3, r0
 80043ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ce:	f7fe fd5f 	bl	8002e90 <HAL_GetTick>
 80043d2:	0002      	movs	r2, r0
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e15d      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043e0:	4b93      	ldr	r3, [pc, #588]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 80043e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e4:	2202      	movs	r2, #2
 80043e6:	4013      	ands	r3, r2
 80043e8:	d1f1      	bne.n	80043ce <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2204      	movs	r2, #4
 80043f0:	4013      	ands	r3, r2
 80043f2:	d100      	bne.n	80043f6 <HAL_RCC_OscConfig+0x446>
 80043f4:	e0ae      	b.n	8004554 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043f6:	2023      	movs	r0, #35	; 0x23
 80043f8:	183b      	adds	r3, r7, r0
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fe:	4b8c      	ldr	r3, [pc, #560]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004402:	2380      	movs	r3, #128	; 0x80
 8004404:	055b      	lsls	r3, r3, #21
 8004406:	4013      	ands	r3, r2
 8004408:	d109      	bne.n	800441e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800440a:	4b89      	ldr	r3, [pc, #548]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 800440c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800440e:	4b88      	ldr	r3, [pc, #544]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004410:	2180      	movs	r1, #128	; 0x80
 8004412:	0549      	lsls	r1, r1, #21
 8004414:	430a      	orrs	r2, r1
 8004416:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004418:	183b      	adds	r3, r7, r0
 800441a:	2201      	movs	r2, #1
 800441c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441e:	4b87      	ldr	r3, [pc, #540]	; (800463c <HAL_RCC_OscConfig+0x68c>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	2380      	movs	r3, #128	; 0x80
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	4013      	ands	r3, r2
 8004428:	d11a      	bne.n	8004460 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800442a:	4b84      	ldr	r3, [pc, #528]	; (800463c <HAL_RCC_OscConfig+0x68c>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4b83      	ldr	r3, [pc, #524]	; (800463c <HAL_RCC_OscConfig+0x68c>)
 8004430:	2180      	movs	r1, #128	; 0x80
 8004432:	0049      	lsls	r1, r1, #1
 8004434:	430a      	orrs	r2, r1
 8004436:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004438:	f7fe fd2a 	bl	8002e90 <HAL_GetTick>
 800443c:	0003      	movs	r3, r0
 800443e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004442:	f7fe fd25 	bl	8002e90 <HAL_GetTick>
 8004446:	0002      	movs	r2, r0
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b64      	cmp	r3, #100	; 0x64
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e123      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004454:	4b79      	ldr	r3, [pc, #484]	; (800463c <HAL_RCC_OscConfig+0x68c>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	4013      	ands	r3, r2
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	429a      	cmp	r2, r3
 800446a:	d107      	bne.n	800447c <HAL_RCC_OscConfig+0x4cc>
 800446c:	4b70      	ldr	r3, [pc, #448]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 800446e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004470:	4b6f      	ldr	r3, [pc, #444]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004472:	2180      	movs	r1, #128	; 0x80
 8004474:	0049      	lsls	r1, r1, #1
 8004476:	430a      	orrs	r2, r1
 8004478:	651a      	str	r2, [r3, #80]	; 0x50
 800447a:	e031      	b.n	80044e0 <HAL_RCC_OscConfig+0x530>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10c      	bne.n	800449e <HAL_RCC_OscConfig+0x4ee>
 8004484:	4b6a      	ldr	r3, [pc, #424]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004486:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004488:	4b69      	ldr	r3, [pc, #420]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 800448a:	496b      	ldr	r1, [pc, #428]	; (8004638 <HAL_RCC_OscConfig+0x688>)
 800448c:	400a      	ands	r2, r1
 800448e:	651a      	str	r2, [r3, #80]	; 0x50
 8004490:	4b67      	ldr	r3, [pc, #412]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004492:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004494:	4b66      	ldr	r3, [pc, #408]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004496:	496a      	ldr	r1, [pc, #424]	; (8004640 <HAL_RCC_OscConfig+0x690>)
 8004498:	400a      	ands	r2, r1
 800449a:	651a      	str	r2, [r3, #80]	; 0x50
 800449c:	e020      	b.n	80044e0 <HAL_RCC_OscConfig+0x530>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	23a0      	movs	r3, #160	; 0xa0
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d10e      	bne.n	80044c8 <HAL_RCC_OscConfig+0x518>
 80044aa:	4b61      	ldr	r3, [pc, #388]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 80044ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044ae:	4b60      	ldr	r3, [pc, #384]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 80044b0:	2180      	movs	r1, #128	; 0x80
 80044b2:	00c9      	lsls	r1, r1, #3
 80044b4:	430a      	orrs	r2, r1
 80044b6:	651a      	str	r2, [r3, #80]	; 0x50
 80044b8:	4b5d      	ldr	r3, [pc, #372]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 80044ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044bc:	4b5c      	ldr	r3, [pc, #368]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 80044be:	2180      	movs	r1, #128	; 0x80
 80044c0:	0049      	lsls	r1, r1, #1
 80044c2:	430a      	orrs	r2, r1
 80044c4:	651a      	str	r2, [r3, #80]	; 0x50
 80044c6:	e00b      	b.n	80044e0 <HAL_RCC_OscConfig+0x530>
 80044c8:	4b59      	ldr	r3, [pc, #356]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 80044ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044cc:	4b58      	ldr	r3, [pc, #352]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 80044ce:	495a      	ldr	r1, [pc, #360]	; (8004638 <HAL_RCC_OscConfig+0x688>)
 80044d0:	400a      	ands	r2, r1
 80044d2:	651a      	str	r2, [r3, #80]	; 0x50
 80044d4:	4b56      	ldr	r3, [pc, #344]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 80044d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044d8:	4b55      	ldr	r3, [pc, #340]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 80044da:	4959      	ldr	r1, [pc, #356]	; (8004640 <HAL_RCC_OscConfig+0x690>)
 80044dc:	400a      	ands	r2, r1
 80044de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d015      	beq.n	8004514 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e8:	f7fe fcd2 	bl	8002e90 <HAL_GetTick>
 80044ec:	0003      	movs	r3, r0
 80044ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044f0:	e009      	b.n	8004506 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f2:	f7fe fccd 	bl	8002e90 <HAL_GetTick>
 80044f6:	0002      	movs	r2, r0
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	4a51      	ldr	r2, [pc, #324]	; (8004644 <HAL_RCC_OscConfig+0x694>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e0ca      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004506:	4b4a      	ldr	r3, [pc, #296]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004508:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800450a:	2380      	movs	r3, #128	; 0x80
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4013      	ands	r3, r2
 8004510:	d0ef      	beq.n	80044f2 <HAL_RCC_OscConfig+0x542>
 8004512:	e014      	b.n	800453e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004514:	f7fe fcbc 	bl	8002e90 <HAL_GetTick>
 8004518:	0003      	movs	r3, r0
 800451a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800451c:	e009      	b.n	8004532 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800451e:	f7fe fcb7 	bl	8002e90 <HAL_GetTick>
 8004522:	0002      	movs	r2, r0
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	4a46      	ldr	r2, [pc, #280]	; (8004644 <HAL_RCC_OscConfig+0x694>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e0b4      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004532:	4b3f      	ldr	r3, [pc, #252]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004534:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4013      	ands	r3, r2
 800453c:	d1ef      	bne.n	800451e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800453e:	2323      	movs	r3, #35	; 0x23
 8004540:	18fb      	adds	r3, r7, r3
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d105      	bne.n	8004554 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004548:	4b39      	ldr	r3, [pc, #228]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 800454a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800454c:	4b38      	ldr	r3, [pc, #224]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 800454e:	493e      	ldr	r1, [pc, #248]	; (8004648 <HAL_RCC_OscConfig+0x698>)
 8004550:	400a      	ands	r2, r1
 8004552:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	2b00      	cmp	r3, #0
 800455a:	d100      	bne.n	800455e <HAL_RCC_OscConfig+0x5ae>
 800455c:	e09d      	b.n	800469a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	2b0c      	cmp	r3, #12
 8004562:	d100      	bne.n	8004566 <HAL_RCC_OscConfig+0x5b6>
 8004564:	e076      	b.n	8004654 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	2b02      	cmp	r3, #2
 800456c:	d145      	bne.n	80045fa <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800456e:	4b30      	ldr	r3, [pc, #192]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4b2f      	ldr	r3, [pc, #188]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004574:	4935      	ldr	r1, [pc, #212]	; (800464c <HAL_RCC_OscConfig+0x69c>)
 8004576:	400a      	ands	r2, r1
 8004578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457a:	f7fe fc89 	bl	8002e90 <HAL_GetTick>
 800457e:	0003      	movs	r3, r0
 8004580:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004584:	f7fe fc84 	bl	8002e90 <HAL_GetTick>
 8004588:	0002      	movs	r2, r0
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e082      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004596:	4b26      	ldr	r3, [pc, #152]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	049b      	lsls	r3, r3, #18
 800459e:	4013      	ands	r3, r2
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045a2:	4b23      	ldr	r3, [pc, #140]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	4a2a      	ldr	r2, [pc, #168]	; (8004650 <HAL_RCC_OscConfig+0x6a0>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	0019      	movs	r1, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	431a      	orrs	r2, r3
 80045bc:	4b1c      	ldr	r3, [pc, #112]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 80045be:	430a      	orrs	r2, r1
 80045c0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045c2:	4b1b      	ldr	r3, [pc, #108]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 80045c8:	2180      	movs	r1, #128	; 0x80
 80045ca:	0449      	lsls	r1, r1, #17
 80045cc:	430a      	orrs	r2, r1
 80045ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fe fc5e 	bl	8002e90 <HAL_GetTick>
 80045d4:	0003      	movs	r3, r0
 80045d6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045da:	f7fe fc59 	bl	8002e90 <HAL_GetTick>
 80045de:	0002      	movs	r2, r0
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e057      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80045ec:	4b10      	ldr	r3, [pc, #64]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	2380      	movs	r3, #128	; 0x80
 80045f2:	049b      	lsls	r3, r3, #18
 80045f4:	4013      	ands	r3, r2
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x62a>
 80045f8:	e04f      	b.n	800469a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fa:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004600:	4912      	ldr	r1, [pc, #72]	; (800464c <HAL_RCC_OscConfig+0x69c>)
 8004602:	400a      	ands	r2, r1
 8004604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004606:	f7fe fc43 	bl	8002e90 <HAL_GetTick>
 800460a:	0003      	movs	r3, r0
 800460c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004610:	f7fe fc3e 	bl	8002e90 <HAL_GetTick>
 8004614:	0002      	movs	r2, r0
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e03c      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004622:	4b03      	ldr	r3, [pc, #12]	; (8004630 <HAL_RCC_OscConfig+0x680>)
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	2380      	movs	r3, #128	; 0x80
 8004628:	049b      	lsls	r3, r3, #18
 800462a:	4013      	ands	r3, r2
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x660>
 800462e:	e034      	b.n	800469a <HAL_RCC_OscConfig+0x6ea>
 8004630:	40021000 	.word	0x40021000
 8004634:	ffff1fff 	.word	0xffff1fff
 8004638:	fffffeff 	.word	0xfffffeff
 800463c:	40007000 	.word	0x40007000
 8004640:	fffffbff 	.word	0xfffffbff
 8004644:	00001388 	.word	0x00001388
 8004648:	efffffff 	.word	0xefffffff
 800464c:	feffffff 	.word	0xfeffffff
 8004650:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e01d      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004660:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <HAL_RCC_OscConfig+0x6f4>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	025b      	lsls	r3, r3, #9
 800466c:	401a      	ands	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	429a      	cmp	r2, r3
 8004674:	d10f      	bne.n	8004696 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	23f0      	movs	r3, #240	; 0xf0
 800467a:	039b      	lsls	r3, r3, #14
 800467c:	401a      	ands	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d107      	bne.n	8004696 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	23c0      	movs	r3, #192	; 0xc0
 800468a:	041b      	lsls	r3, r3, #16
 800468c:	401a      	ands	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004692:	429a      	cmp	r2, r3
 8004694:	d001      	beq.n	800469a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	0018      	movs	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	b00a      	add	sp, #40	; 0x28
 80046a2:	bdb0      	pop	{r4, r5, r7, pc}
 80046a4:	40021000 	.word	0x40021000

080046a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a8:	b5b0      	push	{r4, r5, r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e128      	b.n	800490e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046bc:	4b96      	ldr	r3, [pc, #600]	; (8004918 <HAL_RCC_ClockConfig+0x270>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2201      	movs	r2, #1
 80046c2:	4013      	ands	r3, r2
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d91e      	bls.n	8004708 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ca:	4b93      	ldr	r3, [pc, #588]	; (8004918 <HAL_RCC_ClockConfig+0x270>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2201      	movs	r2, #1
 80046d0:	4393      	bics	r3, r2
 80046d2:	0019      	movs	r1, r3
 80046d4:	4b90      	ldr	r3, [pc, #576]	; (8004918 <HAL_RCC_ClockConfig+0x270>)
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046dc:	f7fe fbd8 	bl	8002e90 <HAL_GetTick>
 80046e0:	0003      	movs	r3, r0
 80046e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e4:	e009      	b.n	80046fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e6:	f7fe fbd3 	bl	8002e90 <HAL_GetTick>
 80046ea:	0002      	movs	r2, r0
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	4a8a      	ldr	r2, [pc, #552]	; (800491c <HAL_RCC_ClockConfig+0x274>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e109      	b.n	800490e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fa:	4b87      	ldr	r3, [pc, #540]	; (8004918 <HAL_RCC_ClockConfig+0x270>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2201      	movs	r2, #1
 8004700:	4013      	ands	r3, r2
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d1ee      	bne.n	80046e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2202      	movs	r2, #2
 800470e:	4013      	ands	r3, r2
 8004710:	d009      	beq.n	8004726 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004712:	4b83      	ldr	r3, [pc, #524]	; (8004920 <HAL_RCC_ClockConfig+0x278>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	22f0      	movs	r2, #240	; 0xf0
 8004718:	4393      	bics	r3, r2
 800471a:	0019      	movs	r1, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	4b7f      	ldr	r3, [pc, #508]	; (8004920 <HAL_RCC_ClockConfig+0x278>)
 8004722:	430a      	orrs	r2, r1
 8004724:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2201      	movs	r2, #1
 800472c:	4013      	ands	r3, r2
 800472e:	d100      	bne.n	8004732 <HAL_RCC_ClockConfig+0x8a>
 8004730:	e089      	b.n	8004846 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d107      	bne.n	800474a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800473a:	4b79      	ldr	r3, [pc, #484]	; (8004920 <HAL_RCC_ClockConfig+0x278>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	2380      	movs	r3, #128	; 0x80
 8004740:	029b      	lsls	r3, r3, #10
 8004742:	4013      	ands	r3, r2
 8004744:	d120      	bne.n	8004788 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e0e1      	b.n	800490e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b03      	cmp	r3, #3
 8004750:	d107      	bne.n	8004762 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004752:	4b73      	ldr	r3, [pc, #460]	; (8004920 <HAL_RCC_ClockConfig+0x278>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	049b      	lsls	r3, r3, #18
 800475a:	4013      	ands	r3, r2
 800475c:	d114      	bne.n	8004788 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e0d5      	b.n	800490e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d106      	bne.n	8004778 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800476a:	4b6d      	ldr	r3, [pc, #436]	; (8004920 <HAL_RCC_ClockConfig+0x278>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2204      	movs	r2, #4
 8004770:	4013      	ands	r3, r2
 8004772:	d109      	bne.n	8004788 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0ca      	b.n	800490e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004778:	4b69      	ldr	r3, [pc, #420]	; (8004920 <HAL_RCC_ClockConfig+0x278>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	2380      	movs	r3, #128	; 0x80
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4013      	ands	r3, r2
 8004782:	d101      	bne.n	8004788 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0c2      	b.n	800490e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004788:	4b65      	ldr	r3, [pc, #404]	; (8004920 <HAL_RCC_ClockConfig+0x278>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	2203      	movs	r2, #3
 800478e:	4393      	bics	r3, r2
 8004790:	0019      	movs	r1, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	4b62      	ldr	r3, [pc, #392]	; (8004920 <HAL_RCC_ClockConfig+0x278>)
 8004798:	430a      	orrs	r2, r1
 800479a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800479c:	f7fe fb78 	bl	8002e90 <HAL_GetTick>
 80047a0:	0003      	movs	r3, r0
 80047a2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d111      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047ac:	e009      	b.n	80047c2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ae:	f7fe fb6f 	bl	8002e90 <HAL_GetTick>
 80047b2:	0002      	movs	r2, r0
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	4a58      	ldr	r2, [pc, #352]	; (800491c <HAL_RCC_ClockConfig+0x274>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e0a5      	b.n	800490e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047c2:	4b57      	ldr	r3, [pc, #348]	; (8004920 <HAL_RCC_ClockConfig+0x278>)
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	220c      	movs	r2, #12
 80047c8:	4013      	ands	r3, r2
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d1ef      	bne.n	80047ae <HAL_RCC_ClockConfig+0x106>
 80047ce:	e03a      	b.n	8004846 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d111      	bne.n	80047fc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047d8:	e009      	b.n	80047ee <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047da:	f7fe fb59 	bl	8002e90 <HAL_GetTick>
 80047de:	0002      	movs	r2, r0
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	4a4d      	ldr	r2, [pc, #308]	; (800491c <HAL_RCC_ClockConfig+0x274>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e08f      	b.n	800490e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047ee:	4b4c      	ldr	r3, [pc, #304]	; (8004920 <HAL_RCC_ClockConfig+0x278>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	220c      	movs	r2, #12
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b0c      	cmp	r3, #12
 80047f8:	d1ef      	bne.n	80047da <HAL_RCC_ClockConfig+0x132>
 80047fa:	e024      	b.n	8004846 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d11b      	bne.n	800483c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004804:	e009      	b.n	800481a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004806:	f7fe fb43 	bl	8002e90 <HAL_GetTick>
 800480a:	0002      	movs	r2, r0
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	4a42      	ldr	r2, [pc, #264]	; (800491c <HAL_RCC_ClockConfig+0x274>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d901      	bls.n	800481a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e079      	b.n	800490e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800481a:	4b41      	ldr	r3, [pc, #260]	; (8004920 <HAL_RCC_ClockConfig+0x278>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	220c      	movs	r2, #12
 8004820:	4013      	ands	r3, r2
 8004822:	2b04      	cmp	r3, #4
 8004824:	d1ef      	bne.n	8004806 <HAL_RCC_ClockConfig+0x15e>
 8004826:	e00e      	b.n	8004846 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004828:	f7fe fb32 	bl	8002e90 <HAL_GetTick>
 800482c:	0002      	movs	r2, r0
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	4a3a      	ldr	r2, [pc, #232]	; (800491c <HAL_RCC_ClockConfig+0x274>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d901      	bls.n	800483c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e068      	b.n	800490e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800483c:	4b38      	ldr	r3, [pc, #224]	; (8004920 <HAL_RCC_ClockConfig+0x278>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	220c      	movs	r2, #12
 8004842:	4013      	ands	r3, r2
 8004844:	d1f0      	bne.n	8004828 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004846:	4b34      	ldr	r3, [pc, #208]	; (8004918 <HAL_RCC_ClockConfig+0x270>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2201      	movs	r2, #1
 800484c:	4013      	ands	r3, r2
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d21e      	bcs.n	8004892 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004854:	4b30      	ldr	r3, [pc, #192]	; (8004918 <HAL_RCC_ClockConfig+0x270>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2201      	movs	r2, #1
 800485a:	4393      	bics	r3, r2
 800485c:	0019      	movs	r1, r3
 800485e:	4b2e      	ldr	r3, [pc, #184]	; (8004918 <HAL_RCC_ClockConfig+0x270>)
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004866:	f7fe fb13 	bl	8002e90 <HAL_GetTick>
 800486a:	0003      	movs	r3, r0
 800486c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	e009      	b.n	8004884 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004870:	f7fe fb0e 	bl	8002e90 <HAL_GetTick>
 8004874:	0002      	movs	r2, r0
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	4a28      	ldr	r2, [pc, #160]	; (800491c <HAL_RCC_ClockConfig+0x274>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e044      	b.n	800490e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004884:	4b24      	ldr	r3, [pc, #144]	; (8004918 <HAL_RCC_ClockConfig+0x270>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2201      	movs	r2, #1
 800488a:	4013      	ands	r3, r2
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d1ee      	bne.n	8004870 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2204      	movs	r2, #4
 8004898:	4013      	ands	r3, r2
 800489a:	d009      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800489c:	4b20      	ldr	r3, [pc, #128]	; (8004920 <HAL_RCC_ClockConfig+0x278>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4a20      	ldr	r2, [pc, #128]	; (8004924 <HAL_RCC_ClockConfig+0x27c>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	0019      	movs	r1, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	4b1d      	ldr	r3, [pc, #116]	; (8004920 <HAL_RCC_ClockConfig+0x278>)
 80048ac:	430a      	orrs	r2, r1
 80048ae:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2208      	movs	r2, #8
 80048b6:	4013      	ands	r3, r2
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048ba:	4b19      	ldr	r3, [pc, #100]	; (8004920 <HAL_RCC_ClockConfig+0x278>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	4a1a      	ldr	r2, [pc, #104]	; (8004928 <HAL_RCC_ClockConfig+0x280>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	0019      	movs	r1, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	00da      	lsls	r2, r3, #3
 80048ca:	4b15      	ldr	r3, [pc, #84]	; (8004920 <HAL_RCC_ClockConfig+0x278>)
 80048cc:	430a      	orrs	r2, r1
 80048ce:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048d0:	f000 f832 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 80048d4:	0001      	movs	r1, r0
 80048d6:	4b12      	ldr	r3, [pc, #72]	; (8004920 <HAL_RCC_ClockConfig+0x278>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	091b      	lsrs	r3, r3, #4
 80048dc:	220f      	movs	r2, #15
 80048de:	4013      	ands	r3, r2
 80048e0:	4a12      	ldr	r2, [pc, #72]	; (800492c <HAL_RCC_ClockConfig+0x284>)
 80048e2:	5cd3      	ldrb	r3, [r2, r3]
 80048e4:	000a      	movs	r2, r1
 80048e6:	40da      	lsrs	r2, r3
 80048e8:	4b11      	ldr	r3, [pc, #68]	; (8004930 <HAL_RCC_ClockConfig+0x288>)
 80048ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048ec:	4b11      	ldr	r3, [pc, #68]	; (8004934 <HAL_RCC_ClockConfig+0x28c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	250b      	movs	r5, #11
 80048f2:	197c      	adds	r4, r7, r5
 80048f4:	0018      	movs	r0, r3
 80048f6:	f7fe fa85 	bl	8002e04 <HAL_InitTick>
 80048fa:	0003      	movs	r3, r0
 80048fc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80048fe:	197b      	adds	r3, r7, r5
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004906:	197b      	adds	r3, r7, r5
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	e000      	b.n	800490e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	0018      	movs	r0, r3
 8004910:	46bd      	mov	sp, r7
 8004912:	b004      	add	sp, #16
 8004914:	bdb0      	pop	{r4, r5, r7, pc}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	40022000 	.word	0x40022000
 800491c:	00001388 	.word	0x00001388
 8004920:	40021000 	.word	0x40021000
 8004924:	fffff8ff 	.word	0xfffff8ff
 8004928:	ffffc7ff 	.word	0xffffc7ff
 800492c:	08005eec 	.word	0x08005eec
 8004930:	20000000 	.word	0x20000000
 8004934:	20000004 	.word	0x20000004

08004938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004938:	b5b0      	push	{r4, r5, r7, lr}
 800493a:	b08e      	sub	sp, #56	; 0x38
 800493c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800493e:	4b4c      	ldr	r3, [pc, #304]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x138>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004946:	230c      	movs	r3, #12
 8004948:	4013      	ands	r3, r2
 800494a:	2b0c      	cmp	r3, #12
 800494c:	d014      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0x40>
 800494e:	d900      	bls.n	8004952 <HAL_RCC_GetSysClockFreq+0x1a>
 8004950:	e07b      	b.n	8004a4a <HAL_RCC_GetSysClockFreq+0x112>
 8004952:	2b04      	cmp	r3, #4
 8004954:	d002      	beq.n	800495c <HAL_RCC_GetSysClockFreq+0x24>
 8004956:	2b08      	cmp	r3, #8
 8004958:	d00b      	beq.n	8004972 <HAL_RCC_GetSysClockFreq+0x3a>
 800495a:	e076      	b.n	8004a4a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800495c:	4b44      	ldr	r3, [pc, #272]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x138>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2210      	movs	r2, #16
 8004962:	4013      	ands	r3, r2
 8004964:	d002      	beq.n	800496c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004966:	4b43      	ldr	r3, [pc, #268]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004968:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800496a:	e07c      	b.n	8004a66 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800496c:	4b42      	ldr	r3, [pc, #264]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x140>)
 800496e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004970:	e079      	b.n	8004a66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004972:	4b42      	ldr	r3, [pc, #264]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x144>)
 8004974:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004976:	e076      	b.n	8004a66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	0c9a      	lsrs	r2, r3, #18
 800497c:	230f      	movs	r3, #15
 800497e:	401a      	ands	r2, r3
 8004980:	4b3f      	ldr	r3, [pc, #252]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x148>)
 8004982:	5c9b      	ldrb	r3, [r3, r2]
 8004984:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	0d9a      	lsrs	r2, r3, #22
 800498a:	2303      	movs	r3, #3
 800498c:	4013      	ands	r3, r2
 800498e:	3301      	adds	r3, #1
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004992:	4b37      	ldr	r3, [pc, #220]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x138>)
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	2380      	movs	r3, #128	; 0x80
 8004998:	025b      	lsls	r3, r3, #9
 800499a:	4013      	ands	r3, r2
 800499c:	d01a      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	61bb      	str	r3, [r7, #24]
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
 80049a6:	4a35      	ldr	r2, [pc, #212]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x144>)
 80049a8:	2300      	movs	r3, #0
 80049aa:	69b8      	ldr	r0, [r7, #24]
 80049ac:	69f9      	ldr	r1, [r7, #28]
 80049ae:	f7fb fc9b 	bl	80002e8 <__aeabi_lmul>
 80049b2:	0002      	movs	r2, r0
 80049b4:	000b      	movs	r3, r1
 80049b6:	0010      	movs	r0, r2
 80049b8:	0019      	movs	r1, r3
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f7fb fc6f 	bl	80002a8 <__aeabi_uldivmod>
 80049ca:	0002      	movs	r2, r0
 80049cc:	000b      	movs	r3, r1
 80049ce:	0013      	movs	r3, r2
 80049d0:	637b      	str	r3, [r7, #52]	; 0x34
 80049d2:	e037      	b.n	8004a44 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80049d4:	4b26      	ldr	r3, [pc, #152]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x138>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2210      	movs	r2, #16
 80049da:	4013      	ands	r3, r2
 80049dc:	d01a      	beq.n	8004a14 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	4a23      	ldr	r2, [pc, #140]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x13c>)
 80049e8:	2300      	movs	r3, #0
 80049ea:	68b8      	ldr	r0, [r7, #8]
 80049ec:	68f9      	ldr	r1, [r7, #12]
 80049ee:	f7fb fc7b 	bl	80002e8 <__aeabi_lmul>
 80049f2:	0002      	movs	r2, r0
 80049f4:	000b      	movs	r3, r1
 80049f6:	0010      	movs	r0, r2
 80049f8:	0019      	movs	r1, r3
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	603b      	str	r3, [r7, #0]
 80049fe:	2300      	movs	r3, #0
 8004a00:	607b      	str	r3, [r7, #4]
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f7fb fc4f 	bl	80002a8 <__aeabi_uldivmod>
 8004a0a:	0002      	movs	r2, r0
 8004a0c:	000b      	movs	r3, r1
 8004a0e:	0013      	movs	r3, r2
 8004a10:	637b      	str	r3, [r7, #52]	; 0x34
 8004a12:	e017      	b.n	8004a44 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	0018      	movs	r0, r3
 8004a18:	2300      	movs	r3, #0
 8004a1a:	0019      	movs	r1, r3
 8004a1c:	4a16      	ldr	r2, [pc, #88]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x140>)
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f7fb fc62 	bl	80002e8 <__aeabi_lmul>
 8004a24:	0002      	movs	r2, r0
 8004a26:	000b      	movs	r3, r1
 8004a28:	0010      	movs	r0, r2
 8004a2a:	0019      	movs	r1, r3
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	001c      	movs	r4, r3
 8004a30:	2300      	movs	r3, #0
 8004a32:	001d      	movs	r5, r3
 8004a34:	0022      	movs	r2, r4
 8004a36:	002b      	movs	r3, r5
 8004a38:	f7fb fc36 	bl	80002a8 <__aeabi_uldivmod>
 8004a3c:	0002      	movs	r2, r0
 8004a3e:	000b      	movs	r3, r1
 8004a40:	0013      	movs	r3, r2
 8004a42:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a48:	e00d      	b.n	8004a66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004a4a:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	0b5b      	lsrs	r3, r3, #13
 8004a50:	2207      	movs	r2, #7
 8004a52:	4013      	ands	r3, r2
 8004a54:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	2280      	movs	r2, #128	; 0x80
 8004a5c:	0212      	lsls	r2, r2, #8
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	0013      	movs	r3, r2
 8004a62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a64:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004a68:	0018      	movs	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	b00e      	add	sp, #56	; 0x38
 8004a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8004a70:	40021000 	.word	0x40021000
 8004a74:	003d0900 	.word	0x003d0900
 8004a78:	00f42400 	.word	0x00f42400
 8004a7c:	007a1200 	.word	0x007a1200
 8004a80:	08005efc 	.word	0x08005efc

08004a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e032      	b.n	8004afc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2239      	movs	r2, #57	; 0x39
 8004a9a:	5c9b      	ldrb	r3, [r3, r2]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d107      	bne.n	8004ab2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2238      	movs	r2, #56	; 0x38
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	0018      	movs	r0, r3
 8004aae:	f7fe f8ad 	bl	8002c0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2239      	movs	r2, #57	; 0x39
 8004ab6:	2102      	movs	r1, #2
 8004ab8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	0019      	movs	r1, r3
 8004ac4:	0010      	movs	r0, r2
 8004ac6:	f000 fa8b 	bl	8004fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	223e      	movs	r2, #62	; 0x3e
 8004ace:	2101      	movs	r1, #1
 8004ad0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	223a      	movs	r2, #58	; 0x3a
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	5499      	strb	r1, [r3, r2]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	223b      	movs	r2, #59	; 0x3b
 8004ade:	2101      	movs	r1, #1
 8004ae0:	5499      	strb	r1, [r3, r2]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	223c      	movs	r2, #60	; 0x3c
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	5499      	strb	r1, [r3, r2]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	223d      	movs	r2, #61	; 0x3d
 8004aee:	2101      	movs	r1, #1
 8004af0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2239      	movs	r2, #57	; 0x39
 8004af6:	2101      	movs	r1, #1
 8004af8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	0018      	movs	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	b002      	add	sp, #8
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e032      	b.n	8004b7c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2239      	movs	r2, #57	; 0x39
 8004b1a:	5c9b      	ldrb	r3, [r3, r2]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d107      	bne.n	8004b32 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2238      	movs	r2, #56	; 0x38
 8004b26:	2100      	movs	r1, #0
 8004b28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f000 f829 	bl	8004b84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2239      	movs	r2, #57	; 0x39
 8004b36:	2102      	movs	r1, #2
 8004b38:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3304      	adds	r3, #4
 8004b42:	0019      	movs	r1, r3
 8004b44:	0010      	movs	r0, r2
 8004b46:	f000 fa4b 	bl	8004fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	223e      	movs	r2, #62	; 0x3e
 8004b4e:	2101      	movs	r1, #1
 8004b50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	223a      	movs	r2, #58	; 0x3a
 8004b56:	2101      	movs	r1, #1
 8004b58:	5499      	strb	r1, [r3, r2]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	223b      	movs	r2, #59	; 0x3b
 8004b5e:	2101      	movs	r1, #1
 8004b60:	5499      	strb	r1, [r3, r2]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	223c      	movs	r2, #60	; 0x3c
 8004b66:	2101      	movs	r1, #1
 8004b68:	5499      	strb	r1, [r3, r2]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	223d      	movs	r2, #61	; 0x3d
 8004b6e:	2101      	movs	r1, #1
 8004b70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2239      	movs	r2, #57	; 0x39
 8004b76:	2101      	movs	r1, #1
 8004b78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	b002      	add	sp, #8
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b8c:	46c0      	nop			; (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b002      	add	sp, #8
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d108      	bne.n	8004bb6 <HAL_TIM_PWM_Start+0x22>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	223a      	movs	r2, #58	; 0x3a
 8004ba8:	5c9b      	ldrb	r3, [r3, r2]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	3b01      	subs	r3, #1
 8004bae:	1e5a      	subs	r2, r3, #1
 8004bb0:	4193      	sbcs	r3, r2
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	e01f      	b.n	8004bf6 <HAL_TIM_PWM_Start+0x62>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d108      	bne.n	8004bce <HAL_TIM_PWM_Start+0x3a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	223b      	movs	r2, #59	; 0x3b
 8004bc0:	5c9b      	ldrb	r3, [r3, r2]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	1e5a      	subs	r2, r3, #1
 8004bc8:	4193      	sbcs	r3, r2
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	e013      	b.n	8004bf6 <HAL_TIM_PWM_Start+0x62>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d108      	bne.n	8004be6 <HAL_TIM_PWM_Start+0x52>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	223c      	movs	r2, #60	; 0x3c
 8004bd8:	5c9b      	ldrb	r3, [r3, r2]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	1e5a      	subs	r2, r3, #1
 8004be0:	4193      	sbcs	r3, r2
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	e007      	b.n	8004bf6 <HAL_TIM_PWM_Start+0x62>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	223d      	movs	r2, #61	; 0x3d
 8004bea:	5c9b      	ldrb	r3, [r3, r2]
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	1e5a      	subs	r2, r3, #1
 8004bf2:	4193      	sbcs	r3, r2
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e04d      	b.n	8004c9a <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d104      	bne.n	8004c0e <HAL_TIM_PWM_Start+0x7a>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	223a      	movs	r2, #58	; 0x3a
 8004c08:	2102      	movs	r1, #2
 8004c0a:	5499      	strb	r1, [r3, r2]
 8004c0c:	e013      	b.n	8004c36 <HAL_TIM_PWM_Start+0xa2>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_PWM_Start+0x8a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	223b      	movs	r2, #59	; 0x3b
 8004c18:	2102      	movs	r1, #2
 8004c1a:	5499      	strb	r1, [r3, r2]
 8004c1c:	e00b      	b.n	8004c36 <HAL_TIM_PWM_Start+0xa2>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d104      	bne.n	8004c2e <HAL_TIM_PWM_Start+0x9a>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	223c      	movs	r2, #60	; 0x3c
 8004c28:	2102      	movs	r1, #2
 8004c2a:	5499      	strb	r1, [r3, r2]
 8004c2c:	e003      	b.n	8004c36 <HAL_TIM_PWM_Start+0xa2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	223d      	movs	r2, #61	; 0x3d
 8004c32:	2102      	movs	r1, #2
 8004c34:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6839      	ldr	r1, [r7, #0]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f000 fbc0 	bl	80053c4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	05db      	lsls	r3, r3, #23
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d009      	beq.n	8004c64 <HAL_TIM_PWM_Start+0xd0>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a13      	ldr	r2, [pc, #76]	; (8004ca4 <HAL_TIM_PWM_Start+0x110>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d004      	beq.n	8004c64 <HAL_TIM_PWM_Start+0xd0>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a12      	ldr	r2, [pc, #72]	; (8004ca8 <HAL_TIM_PWM_Start+0x114>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d111      	bne.n	8004c88 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2207      	movs	r2, #7
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b06      	cmp	r3, #6
 8004c74:	d010      	beq.n	8004c98 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2101      	movs	r1, #1
 8004c82:	430a      	orrs	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c86:	e007      	b.n	8004c98 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2101      	movs	r1, #1
 8004c94:	430a      	orrs	r2, r1
 8004c96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	b004      	add	sp, #16
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	40010800 	.word	0x40010800
 8004ca8:	40011400 	.word	0x40011400

08004cac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb8:	2317      	movs	r3, #23
 8004cba:	18fb      	adds	r3, r7, r3
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2238      	movs	r2, #56	; 0x38
 8004cc4:	5c9b      	ldrb	r3, [r3, r2]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <HAL_TIM_PWM_ConfigChannel+0x22>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e0ad      	b.n	8004e2a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2238      	movs	r2, #56	; 0x38
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b0c      	cmp	r3, #12
 8004cda:	d100      	bne.n	8004cde <HAL_TIM_PWM_ConfigChannel+0x32>
 8004cdc:	e076      	b.n	8004dcc <HAL_TIM_PWM_ConfigChannel+0x120>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b0c      	cmp	r3, #12
 8004ce2:	d900      	bls.n	8004ce6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004ce4:	e095      	b.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d04e      	beq.n	8004d8a <HAL_TIM_PWM_ConfigChannel+0xde>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d900      	bls.n	8004cf4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004cf2:	e08e      	b.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_TIM_PWM_ConfigChannel+0x56>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d021      	beq.n	8004d44 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004d00:	e087      	b.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	0011      	movs	r1, r2
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f000 f9bc 	bl	8005088 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2108      	movs	r1, #8
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2104      	movs	r1, #4
 8004d2c:	438a      	bics	r2, r1
 8004d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6999      	ldr	r1, [r3, #24]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	619a      	str	r2, [r3, #24]
      break;
 8004d42:	e06b      	b.n	8004e1c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	0011      	movs	r1, r2
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f000 f9d7 	bl	8005100 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699a      	ldr	r2, [r3, #24]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2180      	movs	r1, #128	; 0x80
 8004d5e:	0109      	lsls	r1, r1, #4
 8004d60:	430a      	orrs	r2, r1
 8004d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699a      	ldr	r2, [r3, #24]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4931      	ldr	r1, [pc, #196]	; (8004e34 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004d70:	400a      	ands	r2, r1
 8004d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6999      	ldr	r1, [r3, #24]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	021a      	lsls	r2, r3, #8
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	619a      	str	r2, [r3, #24]
      break;
 8004d88:	e048      	b.n	8004e1c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	0011      	movs	r1, r2
 8004d92:	0018      	movs	r0, r3
 8004d94:	f000 f9f6 	bl	8005184 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69da      	ldr	r2, [r3, #28]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2108      	movs	r1, #8
 8004da4:	430a      	orrs	r2, r1
 8004da6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	69da      	ldr	r2, [r3, #28]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2104      	movs	r1, #4
 8004db4:	438a      	bics	r2, r1
 8004db6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	69d9      	ldr	r1, [r3, #28]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	61da      	str	r2, [r3, #28]
      break;
 8004dca:	e027      	b.n	8004e1c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	0011      	movs	r1, r2
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f000 fa15 	bl	8005204 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2180      	movs	r1, #128	; 0x80
 8004de6:	0109      	lsls	r1, r1, #4
 8004de8:	430a      	orrs	r2, r1
 8004dea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69da      	ldr	r2, [r3, #28]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	490f      	ldr	r1, [pc, #60]	; (8004e34 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004df8:	400a      	ands	r2, r1
 8004dfa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69d9      	ldr	r1, [r3, #28]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	021a      	lsls	r2, r3, #8
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	61da      	str	r2, [r3, #28]
      break;
 8004e10:	e004      	b.n	8004e1c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004e12:	2317      	movs	r3, #23
 8004e14:	18fb      	adds	r3, r7, r3
 8004e16:	2201      	movs	r2, #1
 8004e18:	701a      	strb	r2, [r3, #0]
      break;
 8004e1a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2238      	movs	r2, #56	; 0x38
 8004e20:	2100      	movs	r1, #0
 8004e22:	5499      	strb	r1, [r3, r2]

  return status;
 8004e24:	2317      	movs	r3, #23
 8004e26:	18fb      	adds	r3, r7, r3
 8004e28:	781b      	ldrb	r3, [r3, #0]
}
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	b006      	add	sp, #24
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	fffffbff 	.word	0xfffffbff

08004e38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e42:	230f      	movs	r3, #15
 8004e44:	18fb      	adds	r3, r7, r3
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2238      	movs	r2, #56	; 0x38
 8004e4e:	5c9b      	ldrb	r3, [r3, r2]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_TIM_ConfigClockSource+0x20>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e0bc      	b.n	8004fd2 <HAL_TIM_ConfigClockSource+0x19a>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2238      	movs	r2, #56	; 0x38
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2239      	movs	r2, #57	; 0x39
 8004e64:	2102      	movs	r1, #2
 8004e66:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2277      	movs	r2, #119	; 0x77
 8004e74:	4393      	bics	r3, r2
 8004e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4a58      	ldr	r2, [pc, #352]	; (8004fdc <HAL_TIM_ConfigClockSource+0x1a4>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2280      	movs	r2, #128	; 0x80
 8004e8e:	0192      	lsls	r2, r2, #6
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d040      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0xde>
 8004e94:	2280      	movs	r2, #128	; 0x80
 8004e96:	0192      	lsls	r2, r2, #6
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d900      	bls.n	8004e9e <HAL_TIM_ConfigClockSource+0x66>
 8004e9c:	e088      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x178>
 8004e9e:	2280      	movs	r2, #128	; 0x80
 8004ea0:	0152      	lsls	r2, r2, #5
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d100      	bne.n	8004ea8 <HAL_TIM_ConfigClockSource+0x70>
 8004ea6:	e088      	b.n	8004fba <HAL_TIM_ConfigClockSource+0x182>
 8004ea8:	2280      	movs	r2, #128	; 0x80
 8004eaa:	0152      	lsls	r2, r2, #5
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d900      	bls.n	8004eb2 <HAL_TIM_ConfigClockSource+0x7a>
 8004eb0:	e07e      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x178>
 8004eb2:	2b70      	cmp	r3, #112	; 0x70
 8004eb4:	d018      	beq.n	8004ee8 <HAL_TIM_ConfigClockSource+0xb0>
 8004eb6:	d900      	bls.n	8004eba <HAL_TIM_ConfigClockSource+0x82>
 8004eb8:	e07a      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x178>
 8004eba:	2b60      	cmp	r3, #96	; 0x60
 8004ebc:	d04f      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x126>
 8004ebe:	d900      	bls.n	8004ec2 <HAL_TIM_ConfigClockSource+0x8a>
 8004ec0:	e076      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x178>
 8004ec2:	2b50      	cmp	r3, #80	; 0x50
 8004ec4:	d03b      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x106>
 8004ec6:	d900      	bls.n	8004eca <HAL_TIM_ConfigClockSource+0x92>
 8004ec8:	e072      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x178>
 8004eca:	2b40      	cmp	r3, #64	; 0x40
 8004ecc:	d057      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x146>
 8004ece:	d900      	bls.n	8004ed2 <HAL_TIM_ConfigClockSource+0x9a>
 8004ed0:	e06e      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x178>
 8004ed2:	2b30      	cmp	r3, #48	; 0x30
 8004ed4:	d063      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0x166>
 8004ed6:	d86b      	bhi.n	8004fb0 <HAL_TIM_ConfigClockSource+0x178>
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	d060      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0x166>
 8004edc:	d868      	bhi.n	8004fb0 <HAL_TIM_ConfigClockSource+0x178>
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d05d      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0x166>
 8004ee2:	2b10      	cmp	r3, #16
 8004ee4:	d05b      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0x166>
 8004ee6:	e063      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	6899      	ldr	r1, [r3, #8]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f000 fa44 	bl	8005384 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2277      	movs	r2, #119	; 0x77
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	609a      	str	r2, [r3, #8]
      break;
 8004f14:	e052      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6899      	ldr	r1, [r3, #8]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f000 fa2d 	bl	8005384 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2180      	movs	r1, #128	; 0x80
 8004f36:	01c9      	lsls	r1, r1, #7
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	609a      	str	r2, [r3, #8]
      break;
 8004f3c:	e03e      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6859      	ldr	r1, [r3, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	001a      	movs	r2, r3
 8004f4c:	f000 f9a0 	bl	8005290 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2150      	movs	r1, #80	; 0x50
 8004f56:	0018      	movs	r0, r3
 8004f58:	f000 f9fa 	bl	8005350 <TIM_ITRx_SetConfig>
      break;
 8004f5c:	e02e      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	6859      	ldr	r1, [r3, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	001a      	movs	r2, r3
 8004f6c:	f000 f9be 	bl	80052ec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2160      	movs	r1, #96	; 0x60
 8004f76:	0018      	movs	r0, r3
 8004f78:	f000 f9ea 	bl	8005350 <TIM_ITRx_SetConfig>
      break;
 8004f7c:	e01e      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6859      	ldr	r1, [r3, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	001a      	movs	r2, r3
 8004f8c:	f000 f980 	bl	8005290 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2140      	movs	r1, #64	; 0x40
 8004f96:	0018      	movs	r0, r3
 8004f98:	f000 f9da 	bl	8005350 <TIM_ITRx_SetConfig>
      break;
 8004f9c:	e00e      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	0019      	movs	r1, r3
 8004fa8:	0010      	movs	r0, r2
 8004faa:	f000 f9d1 	bl	8005350 <TIM_ITRx_SetConfig>
      break;
 8004fae:	e005      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004fb0:	230f      	movs	r3, #15
 8004fb2:	18fb      	adds	r3, r7, r3
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	701a      	strb	r2, [r3, #0]
      break;
 8004fb8:	e000      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004fba:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2239      	movs	r2, #57	; 0x39
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2238      	movs	r2, #56	; 0x38
 8004fc8:	2100      	movs	r1, #0
 8004fca:	5499      	strb	r1, [r3, r2]

  return status;
 8004fcc:	230f      	movs	r3, #15
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	781b      	ldrb	r3, [r3, #0]
}
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	b004      	add	sp, #16
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	ffff00ff 	.word	0xffff00ff

08004fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	2380      	movs	r3, #128	; 0x80
 8004ff4:	05db      	lsls	r3, r3, #23
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d007      	beq.n	800500a <TIM_Base_SetConfig+0x2a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a1f      	ldr	r2, [pc, #124]	; (800507c <TIM_Base_SetConfig+0x9c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d003      	beq.n	800500a <TIM_Base_SetConfig+0x2a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a1e      	ldr	r2, [pc, #120]	; (8005080 <TIM_Base_SetConfig+0xa0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d108      	bne.n	800501c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2270      	movs	r2, #112	; 0x70
 800500e:	4393      	bics	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	2380      	movs	r3, #128	; 0x80
 8005020:	05db      	lsls	r3, r3, #23
 8005022:	429a      	cmp	r2, r3
 8005024:	d007      	beq.n	8005036 <TIM_Base_SetConfig+0x56>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a14      	ldr	r2, [pc, #80]	; (800507c <TIM_Base_SetConfig+0x9c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d003      	beq.n	8005036 <TIM_Base_SetConfig+0x56>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a13      	ldr	r2, [pc, #76]	; (8005080 <TIM_Base_SetConfig+0xa0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d108      	bne.n	8005048 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4a12      	ldr	r2, [pc, #72]	; (8005084 <TIM_Base_SetConfig+0xa4>)
 800503a:	4013      	ands	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2280      	movs	r2, #128	; 0x80
 800504c:	4393      	bics	r3, r2
 800504e:	001a      	movs	r2, r3
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	615a      	str	r2, [r3, #20]
}
 8005074:	46c0      	nop			; (mov r8, r8)
 8005076:	46bd      	mov	sp, r7
 8005078:	b004      	add	sp, #16
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40010800 	.word	0x40010800
 8005080:	40011400 	.word	0x40011400
 8005084:	fffffcff 	.word	0xfffffcff

08005088 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	2201      	movs	r2, #1
 8005098:	4393      	bics	r3, r2
 800509a:	001a      	movs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2270      	movs	r2, #112	; 0x70
 80050b6:	4393      	bics	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2203      	movs	r2, #3
 80050be:	4393      	bics	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2202      	movs	r2, #2
 80050d0:	4393      	bics	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	621a      	str	r2, [r3, #32]
}
 80050f8:	46c0      	nop			; (mov r8, r8)
 80050fa:	46bd      	mov	sp, r7
 80050fc:	b006      	add	sp, #24
 80050fe:	bd80      	pop	{r7, pc}

08005100 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	2210      	movs	r2, #16
 8005110:	4393      	bics	r3, r2
 8005112:	001a      	movs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4a13      	ldr	r2, [pc, #76]	; (800517c <TIM_OC2_SetConfig+0x7c>)
 800512e:	4013      	ands	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4a12      	ldr	r2, [pc, #72]	; (8005180 <TIM_OC2_SetConfig+0x80>)
 8005136:	4013      	ands	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	021b      	lsls	r3, r3, #8
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2220      	movs	r2, #32
 800514a:	4393      	bics	r3, r2
 800514c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	621a      	str	r2, [r3, #32]
}
 8005174:	46c0      	nop			; (mov r8, r8)
 8005176:	46bd      	mov	sp, r7
 8005178:	b006      	add	sp, #24
 800517a:	bd80      	pop	{r7, pc}
 800517c:	ffff8fff 	.word	0xffff8fff
 8005180:	fffffcff 	.word	0xfffffcff

08005184 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	4a1a      	ldr	r2, [pc, #104]	; (80051fc <TIM_OC3_SetConfig+0x78>)
 8005194:	401a      	ands	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2270      	movs	r2, #112	; 0x70
 80051b0:	4393      	bics	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2203      	movs	r2, #3
 80051b8:	4393      	bics	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	4a0d      	ldr	r2, [pc, #52]	; (8005200 <TIM_OC3_SetConfig+0x7c>)
 80051ca:	4013      	ands	r3, r2
 80051cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	621a      	str	r2, [r3, #32]
}
 80051f4:	46c0      	nop			; (mov r8, r8)
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b006      	add	sp, #24
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	fffffeff 	.word	0xfffffeff
 8005200:	fffffdff 	.word	0xfffffdff

08005204 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	4a1b      	ldr	r2, [pc, #108]	; (8005280 <TIM_OC4_SetConfig+0x7c>)
 8005214:	401a      	ands	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4a15      	ldr	r2, [pc, #84]	; (8005284 <TIM_OC4_SetConfig+0x80>)
 8005230:	4013      	ands	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4a14      	ldr	r2, [pc, #80]	; (8005288 <TIM_OC4_SetConfig+0x84>)
 8005238:	4013      	ands	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4313      	orrs	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	4a10      	ldr	r2, [pc, #64]	; (800528c <TIM_OC4_SetConfig+0x88>)
 800524c:	4013      	ands	r3, r2
 800524e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	031b      	lsls	r3, r3, #12
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	46c0      	nop			; (mov r8, r8)
 8005278:	46bd      	mov	sp, r7
 800527a:	b006      	add	sp, #24
 800527c:	bd80      	pop	{r7, pc}
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	ffffefff 	.word	0xffffefff
 8005284:	ffff8fff 	.word	0xffff8fff
 8005288:	fffffcff 	.word	0xfffffcff
 800528c:	ffffdfff 	.word	0xffffdfff

08005290 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	2201      	movs	r2, #1
 80052a8:	4393      	bics	r3, r2
 80052aa:	001a      	movs	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	22f0      	movs	r2, #240	; 0xf0
 80052ba:	4393      	bics	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	220a      	movs	r2, #10
 80052cc:	4393      	bics	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	621a      	str	r2, [r3, #32]
}
 80052e4:	46c0      	nop			; (mov r8, r8)
 80052e6:	46bd      	mov	sp, r7
 80052e8:	b006      	add	sp, #24
 80052ea:	bd80      	pop	{r7, pc}

080052ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	2210      	movs	r2, #16
 80052fe:	4393      	bics	r3, r2
 8005300:	001a      	movs	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	4a0d      	ldr	r2, [pc, #52]	; (800534c <TIM_TI2_ConfigInputStage+0x60>)
 8005316:	4013      	ands	r3, r2
 8005318:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	031b      	lsls	r3, r3, #12
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	22a0      	movs	r2, #160	; 0xa0
 8005328:	4393      	bics	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	621a      	str	r2, [r3, #32]
}
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	46bd      	mov	sp, r7
 8005346:	b006      	add	sp, #24
 8005348:	bd80      	pop	{r7, pc}
 800534a:	46c0      	nop			; (mov r8, r8)
 800534c:	ffff0fff 	.word	0xffff0fff

08005350 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2270      	movs	r2, #112	; 0x70
 8005364:	4393      	bics	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	2207      	movs	r2, #7
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	609a      	str	r2, [r3, #8]
}
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	46bd      	mov	sp, r7
 800537e:	b004      	add	sp, #16
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <TIM_ETR_SetConfig+0x3c>)
 800539c:	4013      	ands	r3, r2
 800539e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	021a      	lsls	r2, r3, #8
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	609a      	str	r2, [r3, #8]
}
 80053b8:	46c0      	nop			; (mov r8, r8)
 80053ba:	46bd      	mov	sp, r7
 80053bc:	b006      	add	sp, #24
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	ffff00ff 	.word	0xffff00ff

080053c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	221f      	movs	r2, #31
 80053d4:	4013      	ands	r3, r2
 80053d6:	2201      	movs	r2, #1
 80053d8:	409a      	lsls	r2, r3
 80053da:	0013      	movs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	43d2      	mvns	r2, r2
 80053e6:	401a      	ands	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a1a      	ldr	r2, [r3, #32]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	211f      	movs	r1, #31
 80053f4:	400b      	ands	r3, r1
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	4099      	lsls	r1, r3
 80053fa:	000b      	movs	r3, r1
 80053fc:	431a      	orrs	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	621a      	str	r2, [r3, #32]
}
 8005402:	46c0      	nop			; (mov r8, r8)
 8005404:	46bd      	mov	sp, r7
 8005406:	b006      	add	sp, #24
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2238      	movs	r2, #56	; 0x38
 800541a:	5c9b      	ldrb	r3, [r3, r2]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005420:	2302      	movs	r3, #2
 8005422:	e042      	b.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2238      	movs	r2, #56	; 0x38
 8005428:	2101      	movs	r1, #1
 800542a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2239      	movs	r2, #57	; 0x39
 8005430:	2102      	movs	r1, #2
 8005432:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2270      	movs	r2, #112	; 0x70
 8005448:	4393      	bics	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	2380      	movs	r3, #128	; 0x80
 8005464:	05db      	lsls	r3, r3, #23
 8005466:	429a      	cmp	r2, r3
 8005468:	d009      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a11      	ldr	r2, [pc, #68]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d004      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a0f      	ldr	r2, [pc, #60]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d10c      	bne.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2280      	movs	r2, #128	; 0x80
 8005482:	4393      	bics	r3, r2
 8005484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	4313      	orrs	r3, r2
 800548e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2239      	movs	r2, #57	; 0x39
 800549c:	2101      	movs	r1, #1
 800549e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2238      	movs	r2, #56	; 0x38
 80054a4:	2100      	movs	r1, #0
 80054a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	0018      	movs	r0, r3
 80054ac:	46bd      	mov	sp, r7
 80054ae:	b004      	add	sp, #16
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	40010800 	.word	0x40010800
 80054b8:	40011400 	.word	0x40011400

080054bc <__errno>:
 80054bc:	4b01      	ldr	r3, [pc, #4]	; (80054c4 <__errno+0x8>)
 80054be:	6818      	ldr	r0, [r3, #0]
 80054c0:	4770      	bx	lr
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	2000000c 	.word	0x2000000c

080054c8 <__libc_init_array>:
 80054c8:	b570      	push	{r4, r5, r6, lr}
 80054ca:	2600      	movs	r6, #0
 80054cc:	4d0c      	ldr	r5, [pc, #48]	; (8005500 <__libc_init_array+0x38>)
 80054ce:	4c0d      	ldr	r4, [pc, #52]	; (8005504 <__libc_init_array+0x3c>)
 80054d0:	1b64      	subs	r4, r4, r5
 80054d2:	10a4      	asrs	r4, r4, #2
 80054d4:	42a6      	cmp	r6, r4
 80054d6:	d109      	bne.n	80054ec <__libc_init_array+0x24>
 80054d8:	2600      	movs	r6, #0
 80054da:	f000 fc47 	bl	8005d6c <_init>
 80054de:	4d0a      	ldr	r5, [pc, #40]	; (8005508 <__libc_init_array+0x40>)
 80054e0:	4c0a      	ldr	r4, [pc, #40]	; (800550c <__libc_init_array+0x44>)
 80054e2:	1b64      	subs	r4, r4, r5
 80054e4:	10a4      	asrs	r4, r4, #2
 80054e6:	42a6      	cmp	r6, r4
 80054e8:	d105      	bne.n	80054f6 <__libc_init_array+0x2e>
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
 80054ec:	00b3      	lsls	r3, r6, #2
 80054ee:	58eb      	ldr	r3, [r5, r3]
 80054f0:	4798      	blx	r3
 80054f2:	3601      	adds	r6, #1
 80054f4:	e7ee      	b.n	80054d4 <__libc_init_array+0xc>
 80054f6:	00b3      	lsls	r3, r6, #2
 80054f8:	58eb      	ldr	r3, [r5, r3]
 80054fa:	4798      	blx	r3
 80054fc:	3601      	adds	r6, #1
 80054fe:	e7f2      	b.n	80054e6 <__libc_init_array+0x1e>
 8005500:	08005f40 	.word	0x08005f40
 8005504:	08005f40 	.word	0x08005f40
 8005508:	08005f40 	.word	0x08005f40
 800550c:	08005f44 	.word	0x08005f44

08005510 <memset>:
 8005510:	0003      	movs	r3, r0
 8005512:	1882      	adds	r2, r0, r2
 8005514:	4293      	cmp	r3, r2
 8005516:	d100      	bne.n	800551a <memset+0xa>
 8005518:	4770      	bx	lr
 800551a:	7019      	strb	r1, [r3, #0]
 800551c:	3301      	adds	r3, #1
 800551e:	e7f9      	b.n	8005514 <memset+0x4>

08005520 <siprintf>:
 8005520:	b40e      	push	{r1, r2, r3}
 8005522:	b500      	push	{lr}
 8005524:	490b      	ldr	r1, [pc, #44]	; (8005554 <siprintf+0x34>)
 8005526:	b09c      	sub	sp, #112	; 0x70
 8005528:	ab1d      	add	r3, sp, #116	; 0x74
 800552a:	9002      	str	r0, [sp, #8]
 800552c:	9006      	str	r0, [sp, #24]
 800552e:	9107      	str	r1, [sp, #28]
 8005530:	9104      	str	r1, [sp, #16]
 8005532:	4809      	ldr	r0, [pc, #36]	; (8005558 <siprintf+0x38>)
 8005534:	4909      	ldr	r1, [pc, #36]	; (800555c <siprintf+0x3c>)
 8005536:	cb04      	ldmia	r3!, {r2}
 8005538:	9105      	str	r1, [sp, #20]
 800553a:	6800      	ldr	r0, [r0, #0]
 800553c:	a902      	add	r1, sp, #8
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	f000 f870 	bl	8005624 <_svfiprintf_r>
 8005544:	2300      	movs	r3, #0
 8005546:	9a02      	ldr	r2, [sp, #8]
 8005548:	7013      	strb	r3, [r2, #0]
 800554a:	b01c      	add	sp, #112	; 0x70
 800554c:	bc08      	pop	{r3}
 800554e:	b003      	add	sp, #12
 8005550:	4718      	bx	r3
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	7fffffff 	.word	0x7fffffff
 8005558:	2000000c 	.word	0x2000000c
 800555c:	ffff0208 	.word	0xffff0208

08005560 <__ssputs_r>:
 8005560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005562:	688e      	ldr	r6, [r1, #8]
 8005564:	b085      	sub	sp, #20
 8005566:	0007      	movs	r7, r0
 8005568:	000c      	movs	r4, r1
 800556a:	9203      	str	r2, [sp, #12]
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	429e      	cmp	r6, r3
 8005570:	d83c      	bhi.n	80055ec <__ssputs_r+0x8c>
 8005572:	2390      	movs	r3, #144	; 0x90
 8005574:	898a      	ldrh	r2, [r1, #12]
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	421a      	tst	r2, r3
 800557a:	d034      	beq.n	80055e6 <__ssputs_r+0x86>
 800557c:	2503      	movs	r5, #3
 800557e:	6909      	ldr	r1, [r1, #16]
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	1a5b      	subs	r3, r3, r1
 8005584:	9302      	str	r3, [sp, #8]
 8005586:	6963      	ldr	r3, [r4, #20]
 8005588:	9802      	ldr	r0, [sp, #8]
 800558a:	435d      	muls	r5, r3
 800558c:	0feb      	lsrs	r3, r5, #31
 800558e:	195d      	adds	r5, r3, r5
 8005590:	9b01      	ldr	r3, [sp, #4]
 8005592:	106d      	asrs	r5, r5, #1
 8005594:	3301      	adds	r3, #1
 8005596:	181b      	adds	r3, r3, r0
 8005598:	42ab      	cmp	r3, r5
 800559a:	d900      	bls.n	800559e <__ssputs_r+0x3e>
 800559c:	001d      	movs	r5, r3
 800559e:	0553      	lsls	r3, r2, #21
 80055a0:	d532      	bpl.n	8005608 <__ssputs_r+0xa8>
 80055a2:	0029      	movs	r1, r5
 80055a4:	0038      	movs	r0, r7
 80055a6:	f000 fb31 	bl	8005c0c <_malloc_r>
 80055aa:	1e06      	subs	r6, r0, #0
 80055ac:	d109      	bne.n	80055c2 <__ssputs_r+0x62>
 80055ae:	230c      	movs	r3, #12
 80055b0:	603b      	str	r3, [r7, #0]
 80055b2:	2340      	movs	r3, #64	; 0x40
 80055b4:	2001      	movs	r0, #1
 80055b6:	89a2      	ldrh	r2, [r4, #12]
 80055b8:	4240      	negs	r0, r0
 80055ba:	4313      	orrs	r3, r2
 80055bc:	81a3      	strh	r3, [r4, #12]
 80055be:	b005      	add	sp, #20
 80055c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055c2:	9a02      	ldr	r2, [sp, #8]
 80055c4:	6921      	ldr	r1, [r4, #16]
 80055c6:	f000 faba 	bl	8005b3e <memcpy>
 80055ca:	89a3      	ldrh	r3, [r4, #12]
 80055cc:	4a14      	ldr	r2, [pc, #80]	; (8005620 <__ssputs_r+0xc0>)
 80055ce:	401a      	ands	r2, r3
 80055d0:	2380      	movs	r3, #128	; 0x80
 80055d2:	4313      	orrs	r3, r2
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	9b02      	ldr	r3, [sp, #8]
 80055d8:	6126      	str	r6, [r4, #16]
 80055da:	18f6      	adds	r6, r6, r3
 80055dc:	6026      	str	r6, [r4, #0]
 80055de:	6165      	str	r5, [r4, #20]
 80055e0:	9e01      	ldr	r6, [sp, #4]
 80055e2:	1aed      	subs	r5, r5, r3
 80055e4:	60a5      	str	r5, [r4, #8]
 80055e6:	9b01      	ldr	r3, [sp, #4]
 80055e8:	429e      	cmp	r6, r3
 80055ea:	d900      	bls.n	80055ee <__ssputs_r+0x8e>
 80055ec:	9e01      	ldr	r6, [sp, #4]
 80055ee:	0032      	movs	r2, r6
 80055f0:	9903      	ldr	r1, [sp, #12]
 80055f2:	6820      	ldr	r0, [r4, #0]
 80055f4:	f000 faac 	bl	8005b50 <memmove>
 80055f8:	68a3      	ldr	r3, [r4, #8]
 80055fa:	2000      	movs	r0, #0
 80055fc:	1b9b      	subs	r3, r3, r6
 80055fe:	60a3      	str	r3, [r4, #8]
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	199e      	adds	r6, r3, r6
 8005604:	6026      	str	r6, [r4, #0]
 8005606:	e7da      	b.n	80055be <__ssputs_r+0x5e>
 8005608:	002a      	movs	r2, r5
 800560a:	0038      	movs	r0, r7
 800560c:	f000 fb5c 	bl	8005cc8 <_realloc_r>
 8005610:	1e06      	subs	r6, r0, #0
 8005612:	d1e0      	bne.n	80055d6 <__ssputs_r+0x76>
 8005614:	0038      	movs	r0, r7
 8005616:	6921      	ldr	r1, [r4, #16]
 8005618:	f000 faae 	bl	8005b78 <_free_r>
 800561c:	e7c7      	b.n	80055ae <__ssputs_r+0x4e>
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	fffffb7f 	.word	0xfffffb7f

08005624 <_svfiprintf_r>:
 8005624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005626:	b0a1      	sub	sp, #132	; 0x84
 8005628:	9003      	str	r0, [sp, #12]
 800562a:	001d      	movs	r5, r3
 800562c:	898b      	ldrh	r3, [r1, #12]
 800562e:	000f      	movs	r7, r1
 8005630:	0016      	movs	r6, r2
 8005632:	061b      	lsls	r3, r3, #24
 8005634:	d511      	bpl.n	800565a <_svfiprintf_r+0x36>
 8005636:	690b      	ldr	r3, [r1, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10e      	bne.n	800565a <_svfiprintf_r+0x36>
 800563c:	2140      	movs	r1, #64	; 0x40
 800563e:	f000 fae5 	bl	8005c0c <_malloc_r>
 8005642:	6038      	str	r0, [r7, #0]
 8005644:	6138      	str	r0, [r7, #16]
 8005646:	2800      	cmp	r0, #0
 8005648:	d105      	bne.n	8005656 <_svfiprintf_r+0x32>
 800564a:	230c      	movs	r3, #12
 800564c:	9a03      	ldr	r2, [sp, #12]
 800564e:	3801      	subs	r0, #1
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	b021      	add	sp, #132	; 0x84
 8005654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005656:	2340      	movs	r3, #64	; 0x40
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	2300      	movs	r3, #0
 800565c:	ac08      	add	r4, sp, #32
 800565e:	6163      	str	r3, [r4, #20]
 8005660:	3320      	adds	r3, #32
 8005662:	7663      	strb	r3, [r4, #25]
 8005664:	3310      	adds	r3, #16
 8005666:	76a3      	strb	r3, [r4, #26]
 8005668:	9507      	str	r5, [sp, #28]
 800566a:	0035      	movs	r5, r6
 800566c:	782b      	ldrb	r3, [r5, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <_svfiprintf_r+0x52>
 8005672:	2b25      	cmp	r3, #37	; 0x25
 8005674:	d147      	bne.n	8005706 <_svfiprintf_r+0xe2>
 8005676:	1bab      	subs	r3, r5, r6
 8005678:	9305      	str	r3, [sp, #20]
 800567a:	42b5      	cmp	r5, r6
 800567c:	d00c      	beq.n	8005698 <_svfiprintf_r+0x74>
 800567e:	0032      	movs	r2, r6
 8005680:	0039      	movs	r1, r7
 8005682:	9803      	ldr	r0, [sp, #12]
 8005684:	f7ff ff6c 	bl	8005560 <__ssputs_r>
 8005688:	1c43      	adds	r3, r0, #1
 800568a:	d100      	bne.n	800568e <_svfiprintf_r+0x6a>
 800568c:	e0ae      	b.n	80057ec <_svfiprintf_r+0x1c8>
 800568e:	6962      	ldr	r2, [r4, #20]
 8005690:	9b05      	ldr	r3, [sp, #20]
 8005692:	4694      	mov	ip, r2
 8005694:	4463      	add	r3, ip
 8005696:	6163      	str	r3, [r4, #20]
 8005698:	782b      	ldrb	r3, [r5, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d100      	bne.n	80056a0 <_svfiprintf_r+0x7c>
 800569e:	e0a5      	b.n	80057ec <_svfiprintf_r+0x1c8>
 80056a0:	2201      	movs	r2, #1
 80056a2:	2300      	movs	r3, #0
 80056a4:	4252      	negs	r2, r2
 80056a6:	6062      	str	r2, [r4, #4]
 80056a8:	a904      	add	r1, sp, #16
 80056aa:	3254      	adds	r2, #84	; 0x54
 80056ac:	1852      	adds	r2, r2, r1
 80056ae:	1c6e      	adds	r6, r5, #1
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	60e3      	str	r3, [r4, #12]
 80056b4:	60a3      	str	r3, [r4, #8]
 80056b6:	7013      	strb	r3, [r2, #0]
 80056b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80056ba:	2205      	movs	r2, #5
 80056bc:	7831      	ldrb	r1, [r6, #0]
 80056be:	4854      	ldr	r0, [pc, #336]	; (8005810 <_svfiprintf_r+0x1ec>)
 80056c0:	f000 fa32 	bl	8005b28 <memchr>
 80056c4:	1c75      	adds	r5, r6, #1
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d11f      	bne.n	800570a <_svfiprintf_r+0xe6>
 80056ca:	6822      	ldr	r2, [r4, #0]
 80056cc:	06d3      	lsls	r3, r2, #27
 80056ce:	d504      	bpl.n	80056da <_svfiprintf_r+0xb6>
 80056d0:	2353      	movs	r3, #83	; 0x53
 80056d2:	a904      	add	r1, sp, #16
 80056d4:	185b      	adds	r3, r3, r1
 80056d6:	2120      	movs	r1, #32
 80056d8:	7019      	strb	r1, [r3, #0]
 80056da:	0713      	lsls	r3, r2, #28
 80056dc:	d504      	bpl.n	80056e8 <_svfiprintf_r+0xc4>
 80056de:	2353      	movs	r3, #83	; 0x53
 80056e0:	a904      	add	r1, sp, #16
 80056e2:	185b      	adds	r3, r3, r1
 80056e4:	212b      	movs	r1, #43	; 0x2b
 80056e6:	7019      	strb	r1, [r3, #0]
 80056e8:	7833      	ldrb	r3, [r6, #0]
 80056ea:	2b2a      	cmp	r3, #42	; 0x2a
 80056ec:	d016      	beq.n	800571c <_svfiprintf_r+0xf8>
 80056ee:	0035      	movs	r5, r6
 80056f0:	2100      	movs	r1, #0
 80056f2:	200a      	movs	r0, #10
 80056f4:	68e3      	ldr	r3, [r4, #12]
 80056f6:	782a      	ldrb	r2, [r5, #0]
 80056f8:	1c6e      	adds	r6, r5, #1
 80056fa:	3a30      	subs	r2, #48	; 0x30
 80056fc:	2a09      	cmp	r2, #9
 80056fe:	d94e      	bls.n	800579e <_svfiprintf_r+0x17a>
 8005700:	2900      	cmp	r1, #0
 8005702:	d111      	bne.n	8005728 <_svfiprintf_r+0x104>
 8005704:	e017      	b.n	8005736 <_svfiprintf_r+0x112>
 8005706:	3501      	adds	r5, #1
 8005708:	e7b0      	b.n	800566c <_svfiprintf_r+0x48>
 800570a:	4b41      	ldr	r3, [pc, #260]	; (8005810 <_svfiprintf_r+0x1ec>)
 800570c:	6822      	ldr	r2, [r4, #0]
 800570e:	1ac0      	subs	r0, r0, r3
 8005710:	2301      	movs	r3, #1
 8005712:	4083      	lsls	r3, r0
 8005714:	4313      	orrs	r3, r2
 8005716:	002e      	movs	r6, r5
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	e7ce      	b.n	80056ba <_svfiprintf_r+0x96>
 800571c:	9b07      	ldr	r3, [sp, #28]
 800571e:	1d19      	adds	r1, r3, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	9107      	str	r1, [sp, #28]
 8005724:	2b00      	cmp	r3, #0
 8005726:	db01      	blt.n	800572c <_svfiprintf_r+0x108>
 8005728:	930b      	str	r3, [sp, #44]	; 0x2c
 800572a:	e004      	b.n	8005736 <_svfiprintf_r+0x112>
 800572c:	425b      	negs	r3, r3
 800572e:	60e3      	str	r3, [r4, #12]
 8005730:	2302      	movs	r3, #2
 8005732:	4313      	orrs	r3, r2
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	782b      	ldrb	r3, [r5, #0]
 8005738:	2b2e      	cmp	r3, #46	; 0x2e
 800573a:	d10a      	bne.n	8005752 <_svfiprintf_r+0x12e>
 800573c:	786b      	ldrb	r3, [r5, #1]
 800573e:	2b2a      	cmp	r3, #42	; 0x2a
 8005740:	d135      	bne.n	80057ae <_svfiprintf_r+0x18a>
 8005742:	9b07      	ldr	r3, [sp, #28]
 8005744:	3502      	adds	r5, #2
 8005746:	1d1a      	adds	r2, r3, #4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	9207      	str	r2, [sp, #28]
 800574c:	2b00      	cmp	r3, #0
 800574e:	db2b      	blt.n	80057a8 <_svfiprintf_r+0x184>
 8005750:	9309      	str	r3, [sp, #36]	; 0x24
 8005752:	4e30      	ldr	r6, [pc, #192]	; (8005814 <_svfiprintf_r+0x1f0>)
 8005754:	2203      	movs	r2, #3
 8005756:	0030      	movs	r0, r6
 8005758:	7829      	ldrb	r1, [r5, #0]
 800575a:	f000 f9e5 	bl	8005b28 <memchr>
 800575e:	2800      	cmp	r0, #0
 8005760:	d006      	beq.n	8005770 <_svfiprintf_r+0x14c>
 8005762:	2340      	movs	r3, #64	; 0x40
 8005764:	1b80      	subs	r0, r0, r6
 8005766:	4083      	lsls	r3, r0
 8005768:	6822      	ldr	r2, [r4, #0]
 800576a:	3501      	adds	r5, #1
 800576c:	4313      	orrs	r3, r2
 800576e:	6023      	str	r3, [r4, #0]
 8005770:	7829      	ldrb	r1, [r5, #0]
 8005772:	2206      	movs	r2, #6
 8005774:	4828      	ldr	r0, [pc, #160]	; (8005818 <_svfiprintf_r+0x1f4>)
 8005776:	1c6e      	adds	r6, r5, #1
 8005778:	7621      	strb	r1, [r4, #24]
 800577a:	f000 f9d5 	bl	8005b28 <memchr>
 800577e:	2800      	cmp	r0, #0
 8005780:	d03c      	beq.n	80057fc <_svfiprintf_r+0x1d8>
 8005782:	4b26      	ldr	r3, [pc, #152]	; (800581c <_svfiprintf_r+0x1f8>)
 8005784:	2b00      	cmp	r3, #0
 8005786:	d125      	bne.n	80057d4 <_svfiprintf_r+0x1b0>
 8005788:	2207      	movs	r2, #7
 800578a:	9b07      	ldr	r3, [sp, #28]
 800578c:	3307      	adds	r3, #7
 800578e:	4393      	bics	r3, r2
 8005790:	3308      	adds	r3, #8
 8005792:	9307      	str	r3, [sp, #28]
 8005794:	6963      	ldr	r3, [r4, #20]
 8005796:	9a04      	ldr	r2, [sp, #16]
 8005798:	189b      	adds	r3, r3, r2
 800579a:	6163      	str	r3, [r4, #20]
 800579c:	e765      	b.n	800566a <_svfiprintf_r+0x46>
 800579e:	4343      	muls	r3, r0
 80057a0:	0035      	movs	r5, r6
 80057a2:	2101      	movs	r1, #1
 80057a4:	189b      	adds	r3, r3, r2
 80057a6:	e7a6      	b.n	80056f6 <_svfiprintf_r+0xd2>
 80057a8:	2301      	movs	r3, #1
 80057aa:	425b      	negs	r3, r3
 80057ac:	e7d0      	b.n	8005750 <_svfiprintf_r+0x12c>
 80057ae:	2300      	movs	r3, #0
 80057b0:	200a      	movs	r0, #10
 80057b2:	001a      	movs	r2, r3
 80057b4:	3501      	adds	r5, #1
 80057b6:	6063      	str	r3, [r4, #4]
 80057b8:	7829      	ldrb	r1, [r5, #0]
 80057ba:	1c6e      	adds	r6, r5, #1
 80057bc:	3930      	subs	r1, #48	; 0x30
 80057be:	2909      	cmp	r1, #9
 80057c0:	d903      	bls.n	80057ca <_svfiprintf_r+0x1a6>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0c5      	beq.n	8005752 <_svfiprintf_r+0x12e>
 80057c6:	9209      	str	r2, [sp, #36]	; 0x24
 80057c8:	e7c3      	b.n	8005752 <_svfiprintf_r+0x12e>
 80057ca:	4342      	muls	r2, r0
 80057cc:	0035      	movs	r5, r6
 80057ce:	2301      	movs	r3, #1
 80057d0:	1852      	adds	r2, r2, r1
 80057d2:	e7f1      	b.n	80057b8 <_svfiprintf_r+0x194>
 80057d4:	ab07      	add	r3, sp, #28
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	003a      	movs	r2, r7
 80057da:	0021      	movs	r1, r4
 80057dc:	4b10      	ldr	r3, [pc, #64]	; (8005820 <_svfiprintf_r+0x1fc>)
 80057de:	9803      	ldr	r0, [sp, #12]
 80057e0:	e000      	b.n	80057e4 <_svfiprintf_r+0x1c0>
 80057e2:	bf00      	nop
 80057e4:	9004      	str	r0, [sp, #16]
 80057e6:	9b04      	ldr	r3, [sp, #16]
 80057e8:	3301      	adds	r3, #1
 80057ea:	d1d3      	bne.n	8005794 <_svfiprintf_r+0x170>
 80057ec:	89bb      	ldrh	r3, [r7, #12]
 80057ee:	980d      	ldr	r0, [sp, #52]	; 0x34
 80057f0:	065b      	lsls	r3, r3, #25
 80057f2:	d400      	bmi.n	80057f6 <_svfiprintf_r+0x1d2>
 80057f4:	e72d      	b.n	8005652 <_svfiprintf_r+0x2e>
 80057f6:	2001      	movs	r0, #1
 80057f8:	4240      	negs	r0, r0
 80057fa:	e72a      	b.n	8005652 <_svfiprintf_r+0x2e>
 80057fc:	ab07      	add	r3, sp, #28
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	003a      	movs	r2, r7
 8005802:	0021      	movs	r1, r4
 8005804:	4b06      	ldr	r3, [pc, #24]	; (8005820 <_svfiprintf_r+0x1fc>)
 8005806:	9803      	ldr	r0, [sp, #12]
 8005808:	f000 f87c 	bl	8005904 <_printf_i>
 800580c:	e7ea      	b.n	80057e4 <_svfiprintf_r+0x1c0>
 800580e:	46c0      	nop			; (mov r8, r8)
 8005810:	08005f05 	.word	0x08005f05
 8005814:	08005f0b 	.word	0x08005f0b
 8005818:	08005f0f 	.word	0x08005f0f
 800581c:	00000000 	.word	0x00000000
 8005820:	08005561 	.word	0x08005561

08005824 <_printf_common>:
 8005824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005826:	0015      	movs	r5, r2
 8005828:	9301      	str	r3, [sp, #4]
 800582a:	688a      	ldr	r2, [r1, #8]
 800582c:	690b      	ldr	r3, [r1, #16]
 800582e:	000c      	movs	r4, r1
 8005830:	9000      	str	r0, [sp, #0]
 8005832:	4293      	cmp	r3, r2
 8005834:	da00      	bge.n	8005838 <_printf_common+0x14>
 8005836:	0013      	movs	r3, r2
 8005838:	0022      	movs	r2, r4
 800583a:	602b      	str	r3, [r5, #0]
 800583c:	3243      	adds	r2, #67	; 0x43
 800583e:	7812      	ldrb	r2, [r2, #0]
 8005840:	2a00      	cmp	r2, #0
 8005842:	d001      	beq.n	8005848 <_printf_common+0x24>
 8005844:	3301      	adds	r3, #1
 8005846:	602b      	str	r3, [r5, #0]
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	069b      	lsls	r3, r3, #26
 800584c:	d502      	bpl.n	8005854 <_printf_common+0x30>
 800584e:	682b      	ldr	r3, [r5, #0]
 8005850:	3302      	adds	r3, #2
 8005852:	602b      	str	r3, [r5, #0]
 8005854:	6822      	ldr	r2, [r4, #0]
 8005856:	2306      	movs	r3, #6
 8005858:	0017      	movs	r7, r2
 800585a:	401f      	ands	r7, r3
 800585c:	421a      	tst	r2, r3
 800585e:	d027      	beq.n	80058b0 <_printf_common+0x8c>
 8005860:	0023      	movs	r3, r4
 8005862:	3343      	adds	r3, #67	; 0x43
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	1e5a      	subs	r2, r3, #1
 8005868:	4193      	sbcs	r3, r2
 800586a:	6822      	ldr	r2, [r4, #0]
 800586c:	0692      	lsls	r2, r2, #26
 800586e:	d430      	bmi.n	80058d2 <_printf_common+0xae>
 8005870:	0022      	movs	r2, r4
 8005872:	9901      	ldr	r1, [sp, #4]
 8005874:	9800      	ldr	r0, [sp, #0]
 8005876:	9e08      	ldr	r6, [sp, #32]
 8005878:	3243      	adds	r2, #67	; 0x43
 800587a:	47b0      	blx	r6
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d025      	beq.n	80058cc <_printf_common+0xa8>
 8005880:	2306      	movs	r3, #6
 8005882:	6820      	ldr	r0, [r4, #0]
 8005884:	682a      	ldr	r2, [r5, #0]
 8005886:	68e1      	ldr	r1, [r4, #12]
 8005888:	2500      	movs	r5, #0
 800588a:	4003      	ands	r3, r0
 800588c:	2b04      	cmp	r3, #4
 800588e:	d103      	bne.n	8005898 <_printf_common+0x74>
 8005890:	1a8d      	subs	r5, r1, r2
 8005892:	43eb      	mvns	r3, r5
 8005894:	17db      	asrs	r3, r3, #31
 8005896:	401d      	ands	r5, r3
 8005898:	68a3      	ldr	r3, [r4, #8]
 800589a:	6922      	ldr	r2, [r4, #16]
 800589c:	4293      	cmp	r3, r2
 800589e:	dd01      	ble.n	80058a4 <_printf_common+0x80>
 80058a0:	1a9b      	subs	r3, r3, r2
 80058a2:	18ed      	adds	r5, r5, r3
 80058a4:	2700      	movs	r7, #0
 80058a6:	42bd      	cmp	r5, r7
 80058a8:	d120      	bne.n	80058ec <_printf_common+0xc8>
 80058aa:	2000      	movs	r0, #0
 80058ac:	e010      	b.n	80058d0 <_printf_common+0xac>
 80058ae:	3701      	adds	r7, #1
 80058b0:	68e3      	ldr	r3, [r4, #12]
 80058b2:	682a      	ldr	r2, [r5, #0]
 80058b4:	1a9b      	subs	r3, r3, r2
 80058b6:	42bb      	cmp	r3, r7
 80058b8:	ddd2      	ble.n	8005860 <_printf_common+0x3c>
 80058ba:	0022      	movs	r2, r4
 80058bc:	2301      	movs	r3, #1
 80058be:	9901      	ldr	r1, [sp, #4]
 80058c0:	9800      	ldr	r0, [sp, #0]
 80058c2:	9e08      	ldr	r6, [sp, #32]
 80058c4:	3219      	adds	r2, #25
 80058c6:	47b0      	blx	r6
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d1f0      	bne.n	80058ae <_printf_common+0x8a>
 80058cc:	2001      	movs	r0, #1
 80058ce:	4240      	negs	r0, r0
 80058d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058d2:	2030      	movs	r0, #48	; 0x30
 80058d4:	18e1      	adds	r1, r4, r3
 80058d6:	3143      	adds	r1, #67	; 0x43
 80058d8:	7008      	strb	r0, [r1, #0]
 80058da:	0021      	movs	r1, r4
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	3145      	adds	r1, #69	; 0x45
 80058e0:	7809      	ldrb	r1, [r1, #0]
 80058e2:	18a2      	adds	r2, r4, r2
 80058e4:	3243      	adds	r2, #67	; 0x43
 80058e6:	3302      	adds	r3, #2
 80058e8:	7011      	strb	r1, [r2, #0]
 80058ea:	e7c1      	b.n	8005870 <_printf_common+0x4c>
 80058ec:	0022      	movs	r2, r4
 80058ee:	2301      	movs	r3, #1
 80058f0:	9901      	ldr	r1, [sp, #4]
 80058f2:	9800      	ldr	r0, [sp, #0]
 80058f4:	9e08      	ldr	r6, [sp, #32]
 80058f6:	321a      	adds	r2, #26
 80058f8:	47b0      	blx	r6
 80058fa:	1c43      	adds	r3, r0, #1
 80058fc:	d0e6      	beq.n	80058cc <_printf_common+0xa8>
 80058fe:	3701      	adds	r7, #1
 8005900:	e7d1      	b.n	80058a6 <_printf_common+0x82>
	...

08005904 <_printf_i>:
 8005904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005906:	b08b      	sub	sp, #44	; 0x2c
 8005908:	9206      	str	r2, [sp, #24]
 800590a:	000a      	movs	r2, r1
 800590c:	3243      	adds	r2, #67	; 0x43
 800590e:	9307      	str	r3, [sp, #28]
 8005910:	9005      	str	r0, [sp, #20]
 8005912:	9204      	str	r2, [sp, #16]
 8005914:	7e0a      	ldrb	r2, [r1, #24]
 8005916:	000c      	movs	r4, r1
 8005918:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800591a:	2a78      	cmp	r2, #120	; 0x78
 800591c:	d806      	bhi.n	800592c <_printf_i+0x28>
 800591e:	2a62      	cmp	r2, #98	; 0x62
 8005920:	d808      	bhi.n	8005934 <_printf_i+0x30>
 8005922:	2a00      	cmp	r2, #0
 8005924:	d100      	bne.n	8005928 <_printf_i+0x24>
 8005926:	e0c0      	b.n	8005aaa <_printf_i+0x1a6>
 8005928:	2a58      	cmp	r2, #88	; 0x58
 800592a:	d052      	beq.n	80059d2 <_printf_i+0xce>
 800592c:	0026      	movs	r6, r4
 800592e:	3642      	adds	r6, #66	; 0x42
 8005930:	7032      	strb	r2, [r6, #0]
 8005932:	e022      	b.n	800597a <_printf_i+0x76>
 8005934:	0010      	movs	r0, r2
 8005936:	3863      	subs	r0, #99	; 0x63
 8005938:	2815      	cmp	r0, #21
 800593a:	d8f7      	bhi.n	800592c <_printf_i+0x28>
 800593c:	f7fa fbe4 	bl	8000108 <__gnu_thumb1_case_shi>
 8005940:	001f0016 	.word	0x001f0016
 8005944:	fff6fff6 	.word	0xfff6fff6
 8005948:	fff6fff6 	.word	0xfff6fff6
 800594c:	fff6001f 	.word	0xfff6001f
 8005950:	fff6fff6 	.word	0xfff6fff6
 8005954:	00a8fff6 	.word	0x00a8fff6
 8005958:	009a0036 	.word	0x009a0036
 800595c:	fff6fff6 	.word	0xfff6fff6
 8005960:	fff600b9 	.word	0xfff600b9
 8005964:	fff60036 	.word	0xfff60036
 8005968:	009efff6 	.word	0x009efff6
 800596c:	0026      	movs	r6, r4
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	3642      	adds	r6, #66	; 0x42
 8005972:	1d11      	adds	r1, r2, #4
 8005974:	6019      	str	r1, [r3, #0]
 8005976:	6813      	ldr	r3, [r2, #0]
 8005978:	7033      	strb	r3, [r6, #0]
 800597a:	2301      	movs	r3, #1
 800597c:	e0a7      	b.n	8005ace <_printf_i+0x1ca>
 800597e:	6808      	ldr	r0, [r1, #0]
 8005980:	6819      	ldr	r1, [r3, #0]
 8005982:	1d0a      	adds	r2, r1, #4
 8005984:	0605      	lsls	r5, r0, #24
 8005986:	d50b      	bpl.n	80059a0 <_printf_i+0x9c>
 8005988:	680d      	ldr	r5, [r1, #0]
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	2d00      	cmp	r5, #0
 800598e:	da03      	bge.n	8005998 <_printf_i+0x94>
 8005990:	232d      	movs	r3, #45	; 0x2d
 8005992:	9a04      	ldr	r2, [sp, #16]
 8005994:	426d      	negs	r5, r5
 8005996:	7013      	strb	r3, [r2, #0]
 8005998:	4b61      	ldr	r3, [pc, #388]	; (8005b20 <_printf_i+0x21c>)
 800599a:	270a      	movs	r7, #10
 800599c:	9303      	str	r3, [sp, #12]
 800599e:	e032      	b.n	8005a06 <_printf_i+0x102>
 80059a0:	680d      	ldr	r5, [r1, #0]
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	0641      	lsls	r1, r0, #25
 80059a6:	d5f1      	bpl.n	800598c <_printf_i+0x88>
 80059a8:	b22d      	sxth	r5, r5
 80059aa:	e7ef      	b.n	800598c <_printf_i+0x88>
 80059ac:	680d      	ldr	r5, [r1, #0]
 80059ae:	6819      	ldr	r1, [r3, #0]
 80059b0:	1d08      	adds	r0, r1, #4
 80059b2:	6018      	str	r0, [r3, #0]
 80059b4:	062e      	lsls	r6, r5, #24
 80059b6:	d501      	bpl.n	80059bc <_printf_i+0xb8>
 80059b8:	680d      	ldr	r5, [r1, #0]
 80059ba:	e003      	b.n	80059c4 <_printf_i+0xc0>
 80059bc:	066d      	lsls	r5, r5, #25
 80059be:	d5fb      	bpl.n	80059b8 <_printf_i+0xb4>
 80059c0:	680d      	ldr	r5, [r1, #0]
 80059c2:	b2ad      	uxth	r5, r5
 80059c4:	4b56      	ldr	r3, [pc, #344]	; (8005b20 <_printf_i+0x21c>)
 80059c6:	270a      	movs	r7, #10
 80059c8:	9303      	str	r3, [sp, #12]
 80059ca:	2a6f      	cmp	r2, #111	; 0x6f
 80059cc:	d117      	bne.n	80059fe <_printf_i+0xfa>
 80059ce:	2708      	movs	r7, #8
 80059d0:	e015      	b.n	80059fe <_printf_i+0xfa>
 80059d2:	3145      	adds	r1, #69	; 0x45
 80059d4:	700a      	strb	r2, [r1, #0]
 80059d6:	4a52      	ldr	r2, [pc, #328]	; (8005b20 <_printf_i+0x21c>)
 80059d8:	9203      	str	r2, [sp, #12]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	6821      	ldr	r1, [r4, #0]
 80059de:	ca20      	ldmia	r2!, {r5}
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	0608      	lsls	r0, r1, #24
 80059e4:	d550      	bpl.n	8005a88 <_printf_i+0x184>
 80059e6:	07cb      	lsls	r3, r1, #31
 80059e8:	d502      	bpl.n	80059f0 <_printf_i+0xec>
 80059ea:	2320      	movs	r3, #32
 80059ec:	4319      	orrs	r1, r3
 80059ee:	6021      	str	r1, [r4, #0]
 80059f0:	2710      	movs	r7, #16
 80059f2:	2d00      	cmp	r5, #0
 80059f4:	d103      	bne.n	80059fe <_printf_i+0xfa>
 80059f6:	2320      	movs	r3, #32
 80059f8:	6822      	ldr	r2, [r4, #0]
 80059fa:	439a      	bics	r2, r3
 80059fc:	6022      	str	r2, [r4, #0]
 80059fe:	0023      	movs	r3, r4
 8005a00:	2200      	movs	r2, #0
 8005a02:	3343      	adds	r3, #67	; 0x43
 8005a04:	701a      	strb	r2, [r3, #0]
 8005a06:	6863      	ldr	r3, [r4, #4]
 8005a08:	60a3      	str	r3, [r4, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	db03      	blt.n	8005a16 <_printf_i+0x112>
 8005a0e:	2204      	movs	r2, #4
 8005a10:	6821      	ldr	r1, [r4, #0]
 8005a12:	4391      	bics	r1, r2
 8005a14:	6021      	str	r1, [r4, #0]
 8005a16:	2d00      	cmp	r5, #0
 8005a18:	d102      	bne.n	8005a20 <_printf_i+0x11c>
 8005a1a:	9e04      	ldr	r6, [sp, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00c      	beq.n	8005a3a <_printf_i+0x136>
 8005a20:	9e04      	ldr	r6, [sp, #16]
 8005a22:	0028      	movs	r0, r5
 8005a24:	0039      	movs	r1, r7
 8005a26:	f7fa fbff 	bl	8000228 <__aeabi_uidivmod>
 8005a2a:	9b03      	ldr	r3, [sp, #12]
 8005a2c:	3e01      	subs	r6, #1
 8005a2e:	5c5b      	ldrb	r3, [r3, r1]
 8005a30:	7033      	strb	r3, [r6, #0]
 8005a32:	002b      	movs	r3, r5
 8005a34:	0005      	movs	r5, r0
 8005a36:	429f      	cmp	r7, r3
 8005a38:	d9f3      	bls.n	8005a22 <_printf_i+0x11e>
 8005a3a:	2f08      	cmp	r7, #8
 8005a3c:	d109      	bne.n	8005a52 <_printf_i+0x14e>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	07db      	lsls	r3, r3, #31
 8005a42:	d506      	bpl.n	8005a52 <_printf_i+0x14e>
 8005a44:	6863      	ldr	r3, [r4, #4]
 8005a46:	6922      	ldr	r2, [r4, #16]
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	dc02      	bgt.n	8005a52 <_printf_i+0x14e>
 8005a4c:	2330      	movs	r3, #48	; 0x30
 8005a4e:	3e01      	subs	r6, #1
 8005a50:	7033      	strb	r3, [r6, #0]
 8005a52:	9b04      	ldr	r3, [sp, #16]
 8005a54:	1b9b      	subs	r3, r3, r6
 8005a56:	6123      	str	r3, [r4, #16]
 8005a58:	9b07      	ldr	r3, [sp, #28]
 8005a5a:	0021      	movs	r1, r4
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	9805      	ldr	r0, [sp, #20]
 8005a60:	9b06      	ldr	r3, [sp, #24]
 8005a62:	aa09      	add	r2, sp, #36	; 0x24
 8005a64:	f7ff fede 	bl	8005824 <_printf_common>
 8005a68:	1c43      	adds	r3, r0, #1
 8005a6a:	d135      	bne.n	8005ad8 <_printf_i+0x1d4>
 8005a6c:	2001      	movs	r0, #1
 8005a6e:	4240      	negs	r0, r0
 8005a70:	b00b      	add	sp, #44	; 0x2c
 8005a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a74:	2220      	movs	r2, #32
 8005a76:	6809      	ldr	r1, [r1, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	6022      	str	r2, [r4, #0]
 8005a7c:	0022      	movs	r2, r4
 8005a7e:	2178      	movs	r1, #120	; 0x78
 8005a80:	3245      	adds	r2, #69	; 0x45
 8005a82:	7011      	strb	r1, [r2, #0]
 8005a84:	4a27      	ldr	r2, [pc, #156]	; (8005b24 <_printf_i+0x220>)
 8005a86:	e7a7      	b.n	80059d8 <_printf_i+0xd4>
 8005a88:	0648      	lsls	r0, r1, #25
 8005a8a:	d5ac      	bpl.n	80059e6 <_printf_i+0xe2>
 8005a8c:	b2ad      	uxth	r5, r5
 8005a8e:	e7aa      	b.n	80059e6 <_printf_i+0xe2>
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	680d      	ldr	r5, [r1, #0]
 8005a94:	1d10      	adds	r0, r2, #4
 8005a96:	6949      	ldr	r1, [r1, #20]
 8005a98:	6018      	str	r0, [r3, #0]
 8005a9a:	6813      	ldr	r3, [r2, #0]
 8005a9c:	062e      	lsls	r6, r5, #24
 8005a9e:	d501      	bpl.n	8005aa4 <_printf_i+0x1a0>
 8005aa0:	6019      	str	r1, [r3, #0]
 8005aa2:	e002      	b.n	8005aaa <_printf_i+0x1a6>
 8005aa4:	066d      	lsls	r5, r5, #25
 8005aa6:	d5fb      	bpl.n	8005aa0 <_printf_i+0x19c>
 8005aa8:	8019      	strh	r1, [r3, #0]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	9e04      	ldr	r6, [sp, #16]
 8005aae:	6123      	str	r3, [r4, #16]
 8005ab0:	e7d2      	b.n	8005a58 <_printf_i+0x154>
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	1d11      	adds	r1, r2, #4
 8005ab6:	6019      	str	r1, [r3, #0]
 8005ab8:	6816      	ldr	r6, [r2, #0]
 8005aba:	2100      	movs	r1, #0
 8005abc:	0030      	movs	r0, r6
 8005abe:	6862      	ldr	r2, [r4, #4]
 8005ac0:	f000 f832 	bl	8005b28 <memchr>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d001      	beq.n	8005acc <_printf_i+0x1c8>
 8005ac8:	1b80      	subs	r0, r0, r6
 8005aca:	6060      	str	r0, [r4, #4]
 8005acc:	6863      	ldr	r3, [r4, #4]
 8005ace:	6123      	str	r3, [r4, #16]
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	9a04      	ldr	r2, [sp, #16]
 8005ad4:	7013      	strb	r3, [r2, #0]
 8005ad6:	e7bf      	b.n	8005a58 <_printf_i+0x154>
 8005ad8:	6923      	ldr	r3, [r4, #16]
 8005ada:	0032      	movs	r2, r6
 8005adc:	9906      	ldr	r1, [sp, #24]
 8005ade:	9805      	ldr	r0, [sp, #20]
 8005ae0:	9d07      	ldr	r5, [sp, #28]
 8005ae2:	47a8      	blx	r5
 8005ae4:	1c43      	adds	r3, r0, #1
 8005ae6:	d0c1      	beq.n	8005a6c <_printf_i+0x168>
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	079b      	lsls	r3, r3, #30
 8005aec:	d415      	bmi.n	8005b1a <_printf_i+0x216>
 8005aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af0:	68e0      	ldr	r0, [r4, #12]
 8005af2:	4298      	cmp	r0, r3
 8005af4:	dabc      	bge.n	8005a70 <_printf_i+0x16c>
 8005af6:	0018      	movs	r0, r3
 8005af8:	e7ba      	b.n	8005a70 <_printf_i+0x16c>
 8005afa:	0022      	movs	r2, r4
 8005afc:	2301      	movs	r3, #1
 8005afe:	9906      	ldr	r1, [sp, #24]
 8005b00:	9805      	ldr	r0, [sp, #20]
 8005b02:	9e07      	ldr	r6, [sp, #28]
 8005b04:	3219      	adds	r2, #25
 8005b06:	47b0      	blx	r6
 8005b08:	1c43      	adds	r3, r0, #1
 8005b0a:	d0af      	beq.n	8005a6c <_printf_i+0x168>
 8005b0c:	3501      	adds	r5, #1
 8005b0e:	68e3      	ldr	r3, [r4, #12]
 8005b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b12:	1a9b      	subs	r3, r3, r2
 8005b14:	42ab      	cmp	r3, r5
 8005b16:	dcf0      	bgt.n	8005afa <_printf_i+0x1f6>
 8005b18:	e7e9      	b.n	8005aee <_printf_i+0x1ea>
 8005b1a:	2500      	movs	r5, #0
 8005b1c:	e7f7      	b.n	8005b0e <_printf_i+0x20a>
 8005b1e:	46c0      	nop			; (mov r8, r8)
 8005b20:	08005f16 	.word	0x08005f16
 8005b24:	08005f27 	.word	0x08005f27

08005b28 <memchr>:
 8005b28:	b2c9      	uxtb	r1, r1
 8005b2a:	1882      	adds	r2, r0, r2
 8005b2c:	4290      	cmp	r0, r2
 8005b2e:	d101      	bne.n	8005b34 <memchr+0xc>
 8005b30:	2000      	movs	r0, #0
 8005b32:	4770      	bx	lr
 8005b34:	7803      	ldrb	r3, [r0, #0]
 8005b36:	428b      	cmp	r3, r1
 8005b38:	d0fb      	beq.n	8005b32 <memchr+0xa>
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	e7f6      	b.n	8005b2c <memchr+0x4>

08005b3e <memcpy>:
 8005b3e:	2300      	movs	r3, #0
 8005b40:	b510      	push	{r4, lr}
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d100      	bne.n	8005b48 <memcpy+0xa>
 8005b46:	bd10      	pop	{r4, pc}
 8005b48:	5ccc      	ldrb	r4, [r1, r3]
 8005b4a:	54c4      	strb	r4, [r0, r3]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	e7f8      	b.n	8005b42 <memcpy+0x4>

08005b50 <memmove>:
 8005b50:	b510      	push	{r4, lr}
 8005b52:	4288      	cmp	r0, r1
 8005b54:	d902      	bls.n	8005b5c <memmove+0xc>
 8005b56:	188b      	adds	r3, r1, r2
 8005b58:	4298      	cmp	r0, r3
 8005b5a:	d303      	bcc.n	8005b64 <memmove+0x14>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	e007      	b.n	8005b70 <memmove+0x20>
 8005b60:	5c8b      	ldrb	r3, [r1, r2]
 8005b62:	5483      	strb	r3, [r0, r2]
 8005b64:	3a01      	subs	r2, #1
 8005b66:	d2fb      	bcs.n	8005b60 <memmove+0x10>
 8005b68:	bd10      	pop	{r4, pc}
 8005b6a:	5ccc      	ldrb	r4, [r1, r3]
 8005b6c:	54c4      	strb	r4, [r0, r3]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d1fa      	bne.n	8005b6a <memmove+0x1a>
 8005b74:	e7f8      	b.n	8005b68 <memmove+0x18>
	...

08005b78 <_free_r>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	0005      	movs	r5, r0
 8005b7c:	2900      	cmp	r1, #0
 8005b7e:	d010      	beq.n	8005ba2 <_free_r+0x2a>
 8005b80:	1f0c      	subs	r4, r1, #4
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	da00      	bge.n	8005b8a <_free_r+0x12>
 8005b88:	18e4      	adds	r4, r4, r3
 8005b8a:	0028      	movs	r0, r5
 8005b8c:	f000 f8d4 	bl	8005d38 <__malloc_lock>
 8005b90:	4a1d      	ldr	r2, [pc, #116]	; (8005c08 <_free_r+0x90>)
 8005b92:	6813      	ldr	r3, [r2, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d105      	bne.n	8005ba4 <_free_r+0x2c>
 8005b98:	6063      	str	r3, [r4, #4]
 8005b9a:	6014      	str	r4, [r2, #0]
 8005b9c:	0028      	movs	r0, r5
 8005b9e:	f000 f8d3 	bl	8005d48 <__malloc_unlock>
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	d908      	bls.n	8005bba <_free_r+0x42>
 8005ba8:	6821      	ldr	r1, [r4, #0]
 8005baa:	1860      	adds	r0, r4, r1
 8005bac:	4283      	cmp	r3, r0
 8005bae:	d1f3      	bne.n	8005b98 <_free_r+0x20>
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	1841      	adds	r1, r0, r1
 8005bb6:	6021      	str	r1, [r4, #0]
 8005bb8:	e7ee      	b.n	8005b98 <_free_r+0x20>
 8005bba:	001a      	movs	r2, r3
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <_free_r+0x4e>
 8005bc2:	42a3      	cmp	r3, r4
 8005bc4:	d9f9      	bls.n	8005bba <_free_r+0x42>
 8005bc6:	6811      	ldr	r1, [r2, #0]
 8005bc8:	1850      	adds	r0, r2, r1
 8005bca:	42a0      	cmp	r0, r4
 8005bcc:	d10b      	bne.n	8005be6 <_free_r+0x6e>
 8005bce:	6820      	ldr	r0, [r4, #0]
 8005bd0:	1809      	adds	r1, r1, r0
 8005bd2:	1850      	adds	r0, r2, r1
 8005bd4:	6011      	str	r1, [r2, #0]
 8005bd6:	4283      	cmp	r3, r0
 8005bd8:	d1e0      	bne.n	8005b9c <_free_r+0x24>
 8005bda:	6818      	ldr	r0, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	1841      	adds	r1, r0, r1
 8005be0:	6011      	str	r1, [r2, #0]
 8005be2:	6053      	str	r3, [r2, #4]
 8005be4:	e7da      	b.n	8005b9c <_free_r+0x24>
 8005be6:	42a0      	cmp	r0, r4
 8005be8:	d902      	bls.n	8005bf0 <_free_r+0x78>
 8005bea:	230c      	movs	r3, #12
 8005bec:	602b      	str	r3, [r5, #0]
 8005bee:	e7d5      	b.n	8005b9c <_free_r+0x24>
 8005bf0:	6821      	ldr	r1, [r4, #0]
 8005bf2:	1860      	adds	r0, r4, r1
 8005bf4:	4283      	cmp	r3, r0
 8005bf6:	d103      	bne.n	8005c00 <_free_r+0x88>
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	1841      	adds	r1, r0, r1
 8005bfe:	6021      	str	r1, [r4, #0]
 8005c00:	6063      	str	r3, [r4, #4]
 8005c02:	6054      	str	r4, [r2, #4]
 8005c04:	e7ca      	b.n	8005b9c <_free_r+0x24>
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	20000090 	.word	0x20000090

08005c0c <_malloc_r>:
 8005c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0e:	2303      	movs	r3, #3
 8005c10:	1ccd      	adds	r5, r1, #3
 8005c12:	439d      	bics	r5, r3
 8005c14:	3508      	adds	r5, #8
 8005c16:	0006      	movs	r6, r0
 8005c18:	2d0c      	cmp	r5, #12
 8005c1a:	d21f      	bcs.n	8005c5c <_malloc_r+0x50>
 8005c1c:	250c      	movs	r5, #12
 8005c1e:	42a9      	cmp	r1, r5
 8005c20:	d81e      	bhi.n	8005c60 <_malloc_r+0x54>
 8005c22:	0030      	movs	r0, r6
 8005c24:	f000 f888 	bl	8005d38 <__malloc_lock>
 8005c28:	4925      	ldr	r1, [pc, #148]	; (8005cc0 <_malloc_r+0xb4>)
 8005c2a:	680a      	ldr	r2, [r1, #0]
 8005c2c:	0014      	movs	r4, r2
 8005c2e:	2c00      	cmp	r4, #0
 8005c30:	d11a      	bne.n	8005c68 <_malloc_r+0x5c>
 8005c32:	4f24      	ldr	r7, [pc, #144]	; (8005cc4 <_malloc_r+0xb8>)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d104      	bne.n	8005c44 <_malloc_r+0x38>
 8005c3a:	0021      	movs	r1, r4
 8005c3c:	0030      	movs	r0, r6
 8005c3e:	f000 f869 	bl	8005d14 <_sbrk_r>
 8005c42:	6038      	str	r0, [r7, #0]
 8005c44:	0029      	movs	r1, r5
 8005c46:	0030      	movs	r0, r6
 8005c48:	f000 f864 	bl	8005d14 <_sbrk_r>
 8005c4c:	1c43      	adds	r3, r0, #1
 8005c4e:	d12b      	bne.n	8005ca8 <_malloc_r+0x9c>
 8005c50:	230c      	movs	r3, #12
 8005c52:	0030      	movs	r0, r6
 8005c54:	6033      	str	r3, [r6, #0]
 8005c56:	f000 f877 	bl	8005d48 <__malloc_unlock>
 8005c5a:	e003      	b.n	8005c64 <_malloc_r+0x58>
 8005c5c:	2d00      	cmp	r5, #0
 8005c5e:	dade      	bge.n	8005c1e <_malloc_r+0x12>
 8005c60:	230c      	movs	r3, #12
 8005c62:	6033      	str	r3, [r6, #0]
 8005c64:	2000      	movs	r0, #0
 8005c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	1b5b      	subs	r3, r3, r5
 8005c6c:	d419      	bmi.n	8005ca2 <_malloc_r+0x96>
 8005c6e:	2b0b      	cmp	r3, #11
 8005c70:	d903      	bls.n	8005c7a <_malloc_r+0x6e>
 8005c72:	6023      	str	r3, [r4, #0]
 8005c74:	18e4      	adds	r4, r4, r3
 8005c76:	6025      	str	r5, [r4, #0]
 8005c78:	e003      	b.n	8005c82 <_malloc_r+0x76>
 8005c7a:	6863      	ldr	r3, [r4, #4]
 8005c7c:	42a2      	cmp	r2, r4
 8005c7e:	d10e      	bne.n	8005c9e <_malloc_r+0x92>
 8005c80:	600b      	str	r3, [r1, #0]
 8005c82:	0030      	movs	r0, r6
 8005c84:	f000 f860 	bl	8005d48 <__malloc_unlock>
 8005c88:	0020      	movs	r0, r4
 8005c8a:	2207      	movs	r2, #7
 8005c8c:	300b      	adds	r0, #11
 8005c8e:	1d23      	adds	r3, r4, #4
 8005c90:	4390      	bics	r0, r2
 8005c92:	1ac2      	subs	r2, r0, r3
 8005c94:	4298      	cmp	r0, r3
 8005c96:	d0e6      	beq.n	8005c66 <_malloc_r+0x5a>
 8005c98:	1a1b      	subs	r3, r3, r0
 8005c9a:	50a3      	str	r3, [r4, r2]
 8005c9c:	e7e3      	b.n	8005c66 <_malloc_r+0x5a>
 8005c9e:	6053      	str	r3, [r2, #4]
 8005ca0:	e7ef      	b.n	8005c82 <_malloc_r+0x76>
 8005ca2:	0022      	movs	r2, r4
 8005ca4:	6864      	ldr	r4, [r4, #4]
 8005ca6:	e7c2      	b.n	8005c2e <_malloc_r+0x22>
 8005ca8:	2303      	movs	r3, #3
 8005caa:	1cc4      	adds	r4, r0, #3
 8005cac:	439c      	bics	r4, r3
 8005cae:	42a0      	cmp	r0, r4
 8005cb0:	d0e1      	beq.n	8005c76 <_malloc_r+0x6a>
 8005cb2:	1a21      	subs	r1, r4, r0
 8005cb4:	0030      	movs	r0, r6
 8005cb6:	f000 f82d 	bl	8005d14 <_sbrk_r>
 8005cba:	1c43      	adds	r3, r0, #1
 8005cbc:	d1db      	bne.n	8005c76 <_malloc_r+0x6a>
 8005cbe:	e7c7      	b.n	8005c50 <_malloc_r+0x44>
 8005cc0:	20000090 	.word	0x20000090
 8005cc4:	20000094 	.word	0x20000094

08005cc8 <_realloc_r>:
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cca:	0007      	movs	r7, r0
 8005ccc:	000d      	movs	r5, r1
 8005cce:	0016      	movs	r6, r2
 8005cd0:	2900      	cmp	r1, #0
 8005cd2:	d105      	bne.n	8005ce0 <_realloc_r+0x18>
 8005cd4:	0011      	movs	r1, r2
 8005cd6:	f7ff ff99 	bl	8005c0c <_malloc_r>
 8005cda:	0004      	movs	r4, r0
 8005cdc:	0020      	movs	r0, r4
 8005cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce0:	2a00      	cmp	r2, #0
 8005ce2:	d103      	bne.n	8005cec <_realloc_r+0x24>
 8005ce4:	f7ff ff48 	bl	8005b78 <_free_r>
 8005ce8:	0034      	movs	r4, r6
 8005cea:	e7f7      	b.n	8005cdc <_realloc_r+0x14>
 8005cec:	f000 f834 	bl	8005d58 <_malloc_usable_size_r>
 8005cf0:	002c      	movs	r4, r5
 8005cf2:	42b0      	cmp	r0, r6
 8005cf4:	d2f2      	bcs.n	8005cdc <_realloc_r+0x14>
 8005cf6:	0031      	movs	r1, r6
 8005cf8:	0038      	movs	r0, r7
 8005cfa:	f7ff ff87 	bl	8005c0c <_malloc_r>
 8005cfe:	1e04      	subs	r4, r0, #0
 8005d00:	d0ec      	beq.n	8005cdc <_realloc_r+0x14>
 8005d02:	0029      	movs	r1, r5
 8005d04:	0032      	movs	r2, r6
 8005d06:	f7ff ff1a 	bl	8005b3e <memcpy>
 8005d0a:	0029      	movs	r1, r5
 8005d0c:	0038      	movs	r0, r7
 8005d0e:	f7ff ff33 	bl	8005b78 <_free_r>
 8005d12:	e7e3      	b.n	8005cdc <_realloc_r+0x14>

08005d14 <_sbrk_r>:
 8005d14:	2300      	movs	r3, #0
 8005d16:	b570      	push	{r4, r5, r6, lr}
 8005d18:	4d06      	ldr	r5, [pc, #24]	; (8005d34 <_sbrk_r+0x20>)
 8005d1a:	0004      	movs	r4, r0
 8005d1c:	0008      	movs	r0, r1
 8005d1e:	602b      	str	r3, [r5, #0]
 8005d20:	f7fc ffea 	bl	8002cf8 <_sbrk>
 8005d24:	1c43      	adds	r3, r0, #1
 8005d26:	d103      	bne.n	8005d30 <_sbrk_r+0x1c>
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d000      	beq.n	8005d30 <_sbrk_r+0x1c>
 8005d2e:	6023      	str	r3, [r4, #0]
 8005d30:	bd70      	pop	{r4, r5, r6, pc}
 8005d32:	46c0      	nop			; (mov r8, r8)
 8005d34:	200001b4 	.word	0x200001b4

08005d38 <__malloc_lock>:
 8005d38:	b510      	push	{r4, lr}
 8005d3a:	4802      	ldr	r0, [pc, #8]	; (8005d44 <__malloc_lock+0xc>)
 8005d3c:	f000 f814 	bl	8005d68 <__retarget_lock_acquire_recursive>
 8005d40:	bd10      	pop	{r4, pc}
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	200001bc 	.word	0x200001bc

08005d48 <__malloc_unlock>:
 8005d48:	b510      	push	{r4, lr}
 8005d4a:	4802      	ldr	r0, [pc, #8]	; (8005d54 <__malloc_unlock+0xc>)
 8005d4c:	f000 f80d 	bl	8005d6a <__retarget_lock_release_recursive>
 8005d50:	bd10      	pop	{r4, pc}
 8005d52:	46c0      	nop			; (mov r8, r8)
 8005d54:	200001bc 	.word	0x200001bc

08005d58 <_malloc_usable_size_r>:
 8005d58:	1f0b      	subs	r3, r1, #4
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	1f18      	subs	r0, r3, #4
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	da01      	bge.n	8005d66 <_malloc_usable_size_r+0xe>
 8005d62:	580b      	ldr	r3, [r1, r0]
 8005d64:	18c0      	adds	r0, r0, r3
 8005d66:	4770      	bx	lr

08005d68 <__retarget_lock_acquire_recursive>:
 8005d68:	4770      	bx	lr

08005d6a <__retarget_lock_release_recursive>:
 8005d6a:	4770      	bx	lr

08005d6c <_init>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d72:	bc08      	pop	{r3}
 8005d74:	469e      	mov	lr, r3
 8005d76:	4770      	bx	lr

08005d78 <_fini>:
 8005d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7e:	bc08      	pop	{r3}
 8005d80:	469e      	mov	lr, r3
 8005d82:	4770      	bx	lr
