
smokePID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a64  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08007b24  08007b24  00017b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cf0  08007cf0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007cf0  08007cf0  00017cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cf8  08007cf8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cf8  08007cf8  00017cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cfc  08007cfc  00017cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000074  08007d74  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08007d74  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1d5  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4a  00000000  00000000  0002a271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002ca28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012aa5  00000000  00000000  0002d398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf9d  00000000  00000000  0003fe3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f532  00000000  00000000  0004bdda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bb30c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e0c  00000000  00000000  000bb35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007b0c 	.word	0x08007b0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08007b0c 	.word	0x08007b0c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cdrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	0010      	movs	r0, r2
 8000238:	4662      	mov	r2, ip
 800023a:	468c      	mov	ip, r1
 800023c:	0019      	movs	r1, r3
 800023e:	4663      	mov	r3, ip
 8000240:	e000      	b.n	8000244 <__aeabi_cdcmpeq>
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cdcmpeq>:
 8000244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000246:	f001 ff81 	bl	800214c <__ledf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	d401      	bmi.n	8000252 <__aeabi_cdcmpeq+0xe>
 800024e:	2100      	movs	r1, #0
 8000250:	42c8      	cmn	r0, r1
 8000252:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000254 <__aeabi_dcmpeq>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f001 fed1 	bl	8001ffc <__eqdf2>
 800025a:	4240      	negs	r0, r0
 800025c:	3001      	adds	r0, #1
 800025e:	bd10      	pop	{r4, pc}

08000260 <__aeabi_dcmplt>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 ff73 	bl	800214c <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	db01      	blt.n	800026e <__aeabi_dcmplt+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmple>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 ff69 	bl	800214c <__ledf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dd01      	ble.n	8000282 <__aeabi_dcmple+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpgt>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fef9 	bl	8002080 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	dc01      	bgt.n	8000296 <__aeabi_dcmpgt+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_dcmpge>:
 800029c:	b510      	push	{r4, lr}
 800029e:	f001 feef 	bl	8002080 <__gedf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	da01      	bge.n	80002aa <__aeabi_dcmpge+0xe>
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	2001      	movs	r0, #1
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)

080002b0 <__aeabi_cfrcmple>:
 80002b0:	4684      	mov	ip, r0
 80002b2:	0008      	movs	r0, r1
 80002b4:	4661      	mov	r1, ip
 80002b6:	e7ff      	b.n	80002b8 <__aeabi_cfcmpeq>

080002b8 <__aeabi_cfcmpeq>:
 80002b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002ba:	f000 fca5 	bl	8000c08 <__lesf2>
 80002be:	2800      	cmp	r0, #0
 80002c0:	d401      	bmi.n	80002c6 <__aeabi_cfcmpeq+0xe>
 80002c2:	2100      	movs	r1, #0
 80002c4:	42c8      	cmn	r0, r1
 80002c6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002c8 <__aeabi_fcmpeq>:
 80002c8:	b510      	push	{r4, lr}
 80002ca:	f000 fc31 	bl	8000b30 <__eqsf2>
 80002ce:	4240      	negs	r0, r0
 80002d0:	3001      	adds	r0, #1
 80002d2:	bd10      	pop	{r4, pc}

080002d4 <__aeabi_fcmplt>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fc97 	bl	8000c08 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	db01      	blt.n	80002e2 <__aeabi_fcmplt+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmple>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fc8d 	bl	8000c08 <__lesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dd01      	ble.n	80002f6 <__aeabi_fcmple+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpgt>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 fc3d 	bl	8000b7c <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	dc01      	bgt.n	800030a <__aeabi_fcmpgt+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_fcmpge>:
 8000310:	b510      	push	{r4, lr}
 8000312:	f000 fc33 	bl	8000b7c <__gesf2>
 8000316:	2800      	cmp	r0, #0
 8000318:	da01      	bge.n	800031e <__aeabi_fcmpge+0xe>
 800031a:	2000      	movs	r0, #0
 800031c:	bd10      	pop	{r4, pc}
 800031e:	2001      	movs	r0, #1
 8000320:	bd10      	pop	{r4, pc}
 8000322:	46c0      	nop			; (mov r8, r8)

08000324 <__aeabi_uldivmod>:
 8000324:	2b00      	cmp	r3, #0
 8000326:	d111      	bne.n	800034c <__aeabi_uldivmod+0x28>
 8000328:	2a00      	cmp	r2, #0
 800032a:	d10f      	bne.n	800034c <__aeabi_uldivmod+0x28>
 800032c:	2900      	cmp	r1, #0
 800032e:	d100      	bne.n	8000332 <__aeabi_uldivmod+0xe>
 8000330:	2800      	cmp	r0, #0
 8000332:	d002      	beq.n	800033a <__aeabi_uldivmod+0x16>
 8000334:	2100      	movs	r1, #0
 8000336:	43c9      	mvns	r1, r1
 8000338:	0008      	movs	r0, r1
 800033a:	b407      	push	{r0, r1, r2}
 800033c:	4802      	ldr	r0, [pc, #8]	; (8000348 <__aeabi_uldivmod+0x24>)
 800033e:	a102      	add	r1, pc, #8	; (adr r1, 8000348 <__aeabi_uldivmod+0x24>)
 8000340:	1840      	adds	r0, r0, r1
 8000342:	9002      	str	r0, [sp, #8]
 8000344:	bd03      	pop	{r0, r1, pc}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	fffffee9 	.word	0xfffffee9
 800034c:	b403      	push	{r0, r1}
 800034e:	4668      	mov	r0, sp
 8000350:	b501      	push	{r0, lr}
 8000352:	9802      	ldr	r0, [sp, #8]
 8000354:	f000 f86a 	bl	800042c <__udivmoddi4>
 8000358:	9b01      	ldr	r3, [sp, #4]
 800035a:	469e      	mov	lr, r3
 800035c:	b002      	add	sp, #8
 800035e:	bc0c      	pop	{r2, r3}
 8000360:	4770      	bx	lr
 8000362:	46c0      	nop			; (mov r8, r8)

08000364 <__aeabi_lmul>:
 8000364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000366:	46ce      	mov	lr, r9
 8000368:	4647      	mov	r7, r8
 800036a:	b580      	push	{r7, lr}
 800036c:	0007      	movs	r7, r0
 800036e:	4699      	mov	r9, r3
 8000370:	0c3b      	lsrs	r3, r7, #16
 8000372:	469c      	mov	ip, r3
 8000374:	0413      	lsls	r3, r2, #16
 8000376:	0c1b      	lsrs	r3, r3, #16
 8000378:	001d      	movs	r5, r3
 800037a:	000e      	movs	r6, r1
 800037c:	4661      	mov	r1, ip
 800037e:	0400      	lsls	r0, r0, #16
 8000380:	0c14      	lsrs	r4, r2, #16
 8000382:	0c00      	lsrs	r0, r0, #16
 8000384:	4345      	muls	r5, r0
 8000386:	434b      	muls	r3, r1
 8000388:	4360      	muls	r0, r4
 800038a:	4361      	muls	r1, r4
 800038c:	18c0      	adds	r0, r0, r3
 800038e:	0c2c      	lsrs	r4, r5, #16
 8000390:	1820      	adds	r0, r4, r0
 8000392:	468c      	mov	ip, r1
 8000394:	4283      	cmp	r3, r0
 8000396:	d903      	bls.n	80003a0 <__aeabi_lmul+0x3c>
 8000398:	2380      	movs	r3, #128	; 0x80
 800039a:	025b      	lsls	r3, r3, #9
 800039c:	4698      	mov	r8, r3
 800039e:	44c4      	add	ip, r8
 80003a0:	4649      	mov	r1, r9
 80003a2:	4379      	muls	r1, r7
 80003a4:	4372      	muls	r2, r6
 80003a6:	0c03      	lsrs	r3, r0, #16
 80003a8:	4463      	add	r3, ip
 80003aa:	042d      	lsls	r5, r5, #16
 80003ac:	0c2d      	lsrs	r5, r5, #16
 80003ae:	18c9      	adds	r1, r1, r3
 80003b0:	0400      	lsls	r0, r0, #16
 80003b2:	1940      	adds	r0, r0, r5
 80003b4:	1889      	adds	r1, r1, r2
 80003b6:	bcc0      	pop	{r6, r7}
 80003b8:	46b9      	mov	r9, r7
 80003ba:	46b0      	mov	r8, r6
 80003bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003be:	46c0      	nop			; (mov r8, r8)

080003c0 <__aeabi_f2uiz>:
 80003c0:	219e      	movs	r1, #158	; 0x9e
 80003c2:	b510      	push	{r4, lr}
 80003c4:	05c9      	lsls	r1, r1, #23
 80003c6:	1c04      	adds	r4, r0, #0
 80003c8:	f7ff ffa2 	bl	8000310 <__aeabi_fcmpge>
 80003cc:	2800      	cmp	r0, #0
 80003ce:	d103      	bne.n	80003d8 <__aeabi_f2uiz+0x18>
 80003d0:	1c20      	adds	r0, r4, #0
 80003d2:	f000 ff31 	bl	8001238 <__aeabi_f2iz>
 80003d6:	bd10      	pop	{r4, pc}
 80003d8:	219e      	movs	r1, #158	; 0x9e
 80003da:	1c20      	adds	r0, r4, #0
 80003dc:	05c9      	lsls	r1, r1, #23
 80003de:	f000 fd7d 	bl	8000edc <__aeabi_fsub>
 80003e2:	f000 ff29 	bl	8001238 <__aeabi_f2iz>
 80003e6:	2380      	movs	r3, #128	; 0x80
 80003e8:	061b      	lsls	r3, r3, #24
 80003ea:	469c      	mov	ip, r3
 80003ec:	4460      	add	r0, ip
 80003ee:	e7f2      	b.n	80003d6 <__aeabi_f2uiz+0x16>

080003f0 <__aeabi_d2uiz>:
 80003f0:	b570      	push	{r4, r5, r6, lr}
 80003f2:	2200      	movs	r2, #0
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <__aeabi_d2uiz+0x38>)
 80003f6:	0004      	movs	r4, r0
 80003f8:	000d      	movs	r5, r1
 80003fa:	f7ff ff4f 	bl	800029c <__aeabi_dcmpge>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d104      	bne.n	800040c <__aeabi_d2uiz+0x1c>
 8000402:	0020      	movs	r0, r4
 8000404:	0029      	movs	r1, r5
 8000406:	f002 fd21 	bl	8002e4c <__aeabi_d2iz>
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <__aeabi_d2uiz+0x38>)
 800040e:	2200      	movs	r2, #0
 8000410:	0020      	movs	r0, r4
 8000412:	0029      	movs	r1, r5
 8000414:	f002 f96a 	bl	80026ec <__aeabi_dsub>
 8000418:	f002 fd18 	bl	8002e4c <__aeabi_d2iz>
 800041c:	2380      	movs	r3, #128	; 0x80
 800041e:	061b      	lsls	r3, r3, #24
 8000420:	469c      	mov	ip, r3
 8000422:	4460      	add	r0, ip
 8000424:	e7f1      	b.n	800040a <__aeabi_d2uiz+0x1a>
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	41e00000 	.word	0x41e00000

0800042c <__udivmoddi4>:
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	4657      	mov	r7, sl
 8000430:	464e      	mov	r6, r9
 8000432:	4645      	mov	r5, r8
 8000434:	46de      	mov	lr, fp
 8000436:	b5e0      	push	{r5, r6, r7, lr}
 8000438:	0004      	movs	r4, r0
 800043a:	000d      	movs	r5, r1
 800043c:	4692      	mov	sl, r2
 800043e:	4699      	mov	r9, r3
 8000440:	b083      	sub	sp, #12
 8000442:	428b      	cmp	r3, r1
 8000444:	d830      	bhi.n	80004a8 <__udivmoddi4+0x7c>
 8000446:	d02d      	beq.n	80004a4 <__udivmoddi4+0x78>
 8000448:	4649      	mov	r1, r9
 800044a:	4650      	mov	r0, sl
 800044c:	f002 fe78 	bl	8003140 <__clzdi2>
 8000450:	0029      	movs	r1, r5
 8000452:	0006      	movs	r6, r0
 8000454:	0020      	movs	r0, r4
 8000456:	f002 fe73 	bl	8003140 <__clzdi2>
 800045a:	1a33      	subs	r3, r6, r0
 800045c:	4698      	mov	r8, r3
 800045e:	3b20      	subs	r3, #32
 8000460:	469b      	mov	fp, r3
 8000462:	d433      	bmi.n	80004cc <__udivmoddi4+0xa0>
 8000464:	465a      	mov	r2, fp
 8000466:	4653      	mov	r3, sl
 8000468:	4093      	lsls	r3, r2
 800046a:	4642      	mov	r2, r8
 800046c:	001f      	movs	r7, r3
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	001e      	movs	r6, r3
 8000474:	42af      	cmp	r7, r5
 8000476:	d83a      	bhi.n	80004ee <__udivmoddi4+0xc2>
 8000478:	42af      	cmp	r7, r5
 800047a:	d100      	bne.n	800047e <__udivmoddi4+0x52>
 800047c:	e078      	b.n	8000570 <__udivmoddi4+0x144>
 800047e:	465b      	mov	r3, fp
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5e>
 8000488:	e075      	b.n	8000576 <__udivmoddi4+0x14a>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	465a      	mov	r2, fp
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4642      	mov	r2, r8
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e028      	b.n	80004f6 <__udivmoddi4+0xca>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9cf      	bls.n	8000448 <__udivmoddi4+0x1c>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8e>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b003      	add	sp, #12
 80004c0:	bcf0      	pop	{r4, r5, r6, r7}
 80004c2:	46bb      	mov	fp, r7
 80004c4:	46b2      	mov	sl, r6
 80004c6:	46a9      	mov	r9, r5
 80004c8:	46a0      	mov	r8, r4
 80004ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004cc:	4642      	mov	r2, r8
 80004ce:	2320      	movs	r3, #32
 80004d0:	1a9b      	subs	r3, r3, r2
 80004d2:	4652      	mov	r2, sl
 80004d4:	40da      	lsrs	r2, r3
 80004d6:	4641      	mov	r1, r8
 80004d8:	0013      	movs	r3, r2
 80004da:	464a      	mov	r2, r9
 80004dc:	408a      	lsls	r2, r1
 80004de:	0017      	movs	r7, r2
 80004e0:	4642      	mov	r2, r8
 80004e2:	431f      	orrs	r7, r3
 80004e4:	4653      	mov	r3, sl
 80004e6:	4093      	lsls	r3, r2
 80004e8:	001e      	movs	r6, r3
 80004ea:	42af      	cmp	r7, r5
 80004ec:	d9c4      	bls.n	8000478 <__udivmoddi4+0x4c>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	4643      	mov	r3, r8
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0d9      	beq.n	80004b0 <__udivmoddi4+0x84>
 80004fc:	07fb      	lsls	r3, r7, #31
 80004fe:	0872      	lsrs	r2, r6, #1
 8000500:	431a      	orrs	r2, r3
 8000502:	4646      	mov	r6, r8
 8000504:	087b      	lsrs	r3, r7, #1
 8000506:	e00e      	b.n	8000526 <__udivmoddi4+0xfa>
 8000508:	42ab      	cmp	r3, r5
 800050a:	d101      	bne.n	8000510 <__udivmoddi4+0xe4>
 800050c:	42a2      	cmp	r2, r4
 800050e:	d80c      	bhi.n	800052a <__udivmoddi4+0xfe>
 8000510:	1aa4      	subs	r4, r4, r2
 8000512:	419d      	sbcs	r5, r3
 8000514:	2001      	movs	r0, #1
 8000516:	1924      	adds	r4, r4, r4
 8000518:	416d      	adcs	r5, r5
 800051a:	2100      	movs	r1, #0
 800051c:	3e01      	subs	r6, #1
 800051e:	1824      	adds	r4, r4, r0
 8000520:	414d      	adcs	r5, r1
 8000522:	2e00      	cmp	r6, #0
 8000524:	d006      	beq.n	8000534 <__udivmoddi4+0x108>
 8000526:	42ab      	cmp	r3, r5
 8000528:	d9ee      	bls.n	8000508 <__udivmoddi4+0xdc>
 800052a:	3e01      	subs	r6, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2e00      	cmp	r6, #0
 8000532:	d1f8      	bne.n	8000526 <__udivmoddi4+0xfa>
 8000534:	9800      	ldr	r0, [sp, #0]
 8000536:	9901      	ldr	r1, [sp, #4]
 8000538:	465b      	mov	r3, fp
 800053a:	1900      	adds	r0, r0, r4
 800053c:	4169      	adcs	r1, r5
 800053e:	2b00      	cmp	r3, #0
 8000540:	db24      	blt.n	800058c <__udivmoddi4+0x160>
 8000542:	002b      	movs	r3, r5
 8000544:	465a      	mov	r2, fp
 8000546:	4644      	mov	r4, r8
 8000548:	40d3      	lsrs	r3, r2
 800054a:	002a      	movs	r2, r5
 800054c:	40e2      	lsrs	r2, r4
 800054e:	001c      	movs	r4, r3
 8000550:	465b      	mov	r3, fp
 8000552:	0015      	movs	r5, r2
 8000554:	2b00      	cmp	r3, #0
 8000556:	db2a      	blt.n	80005ae <__udivmoddi4+0x182>
 8000558:	0026      	movs	r6, r4
 800055a:	409e      	lsls	r6, r3
 800055c:	0033      	movs	r3, r6
 800055e:	0026      	movs	r6, r4
 8000560:	4647      	mov	r7, r8
 8000562:	40be      	lsls	r6, r7
 8000564:	0032      	movs	r2, r6
 8000566:	1a80      	subs	r0, r0, r2
 8000568:	4199      	sbcs	r1, r3
 800056a:	9000      	str	r0, [sp, #0]
 800056c:	9101      	str	r1, [sp, #4]
 800056e:	e79f      	b.n	80004b0 <__udivmoddi4+0x84>
 8000570:	42a3      	cmp	r3, r4
 8000572:	d8bc      	bhi.n	80004ee <__udivmoddi4+0xc2>
 8000574:	e783      	b.n	800047e <__udivmoddi4+0x52>
 8000576:	4642      	mov	r2, r8
 8000578:	2320      	movs	r3, #32
 800057a:	2100      	movs	r1, #0
 800057c:	1a9b      	subs	r3, r3, r2
 800057e:	2200      	movs	r2, #0
 8000580:	9100      	str	r1, [sp, #0]
 8000582:	9201      	str	r2, [sp, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	40da      	lsrs	r2, r3
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	e786      	b.n	800049a <__udivmoddi4+0x6e>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	002a      	movs	r2, r5
 8000594:	4646      	mov	r6, r8
 8000596:	409a      	lsls	r2, r3
 8000598:	0023      	movs	r3, r4
 800059a:	40f3      	lsrs	r3, r6
 800059c:	4644      	mov	r4, r8
 800059e:	4313      	orrs	r3, r2
 80005a0:	002a      	movs	r2, r5
 80005a2:	40e2      	lsrs	r2, r4
 80005a4:	001c      	movs	r4, r3
 80005a6:	465b      	mov	r3, fp
 80005a8:	0015      	movs	r5, r2
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	dad4      	bge.n	8000558 <__udivmoddi4+0x12c>
 80005ae:	4642      	mov	r2, r8
 80005b0:	002f      	movs	r7, r5
 80005b2:	2320      	movs	r3, #32
 80005b4:	0026      	movs	r6, r4
 80005b6:	4097      	lsls	r7, r2
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	40de      	lsrs	r6, r3
 80005bc:	003b      	movs	r3, r7
 80005be:	4333      	orrs	r3, r6
 80005c0:	e7cd      	b.n	800055e <__udivmoddi4+0x132>
 80005c2:	46c0      	nop			; (mov r8, r8)

080005c4 <__aeabi_fadd>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	46c6      	mov	lr, r8
 80005c8:	0243      	lsls	r3, r0, #9
 80005ca:	0a5b      	lsrs	r3, r3, #9
 80005cc:	024e      	lsls	r6, r1, #9
 80005ce:	0045      	lsls	r5, r0, #1
 80005d0:	004f      	lsls	r7, r1, #1
 80005d2:	00da      	lsls	r2, r3, #3
 80005d4:	0fc4      	lsrs	r4, r0, #31
 80005d6:	469c      	mov	ip, r3
 80005d8:	0a70      	lsrs	r0, r6, #9
 80005da:	4690      	mov	r8, r2
 80005dc:	b500      	push	{lr}
 80005de:	0e2d      	lsrs	r5, r5, #24
 80005e0:	0e3f      	lsrs	r7, r7, #24
 80005e2:	0fc9      	lsrs	r1, r1, #31
 80005e4:	09b6      	lsrs	r6, r6, #6
 80005e6:	428c      	cmp	r4, r1
 80005e8:	d04b      	beq.n	8000682 <__aeabi_fadd+0xbe>
 80005ea:	1bea      	subs	r2, r5, r7
 80005ec:	2a00      	cmp	r2, #0
 80005ee:	dd36      	ble.n	800065e <__aeabi_fadd+0x9a>
 80005f0:	2f00      	cmp	r7, #0
 80005f2:	d061      	beq.n	80006b8 <__aeabi_fadd+0xf4>
 80005f4:	2dff      	cmp	r5, #255	; 0xff
 80005f6:	d100      	bne.n	80005fa <__aeabi_fadd+0x36>
 80005f8:	e0ad      	b.n	8000756 <__aeabi_fadd+0x192>
 80005fa:	2380      	movs	r3, #128	; 0x80
 80005fc:	04db      	lsls	r3, r3, #19
 80005fe:	431e      	orrs	r6, r3
 8000600:	2a1b      	cmp	r2, #27
 8000602:	dc00      	bgt.n	8000606 <__aeabi_fadd+0x42>
 8000604:	e0d3      	b.n	80007ae <__aeabi_fadd+0x1ea>
 8000606:	2001      	movs	r0, #1
 8000608:	4643      	mov	r3, r8
 800060a:	1a18      	subs	r0, r3, r0
 800060c:	0143      	lsls	r3, r0, #5
 800060e:	d400      	bmi.n	8000612 <__aeabi_fadd+0x4e>
 8000610:	e08c      	b.n	800072c <__aeabi_fadd+0x168>
 8000612:	0180      	lsls	r0, r0, #6
 8000614:	0987      	lsrs	r7, r0, #6
 8000616:	0038      	movs	r0, r7
 8000618:	f002 fd74 	bl	8003104 <__clzsi2>
 800061c:	3805      	subs	r0, #5
 800061e:	4087      	lsls	r7, r0
 8000620:	4285      	cmp	r5, r0
 8000622:	dc00      	bgt.n	8000626 <__aeabi_fadd+0x62>
 8000624:	e0b6      	b.n	8000794 <__aeabi_fadd+0x1d0>
 8000626:	1a2d      	subs	r5, r5, r0
 8000628:	48b3      	ldr	r0, [pc, #716]	; (80008f8 <__aeabi_fadd+0x334>)
 800062a:	4038      	ands	r0, r7
 800062c:	0743      	lsls	r3, r0, #29
 800062e:	d004      	beq.n	800063a <__aeabi_fadd+0x76>
 8000630:	230f      	movs	r3, #15
 8000632:	4003      	ands	r3, r0
 8000634:	2b04      	cmp	r3, #4
 8000636:	d000      	beq.n	800063a <__aeabi_fadd+0x76>
 8000638:	3004      	adds	r0, #4
 800063a:	0143      	lsls	r3, r0, #5
 800063c:	d400      	bmi.n	8000640 <__aeabi_fadd+0x7c>
 800063e:	e078      	b.n	8000732 <__aeabi_fadd+0x16e>
 8000640:	1c6a      	adds	r2, r5, #1
 8000642:	2dfe      	cmp	r5, #254	; 0xfe
 8000644:	d065      	beq.n	8000712 <__aeabi_fadd+0x14e>
 8000646:	0180      	lsls	r0, r0, #6
 8000648:	0a43      	lsrs	r3, r0, #9
 800064a:	469c      	mov	ip, r3
 800064c:	b2d2      	uxtb	r2, r2
 800064e:	4663      	mov	r3, ip
 8000650:	05d0      	lsls	r0, r2, #23
 8000652:	4318      	orrs	r0, r3
 8000654:	07e4      	lsls	r4, r4, #31
 8000656:	4320      	orrs	r0, r4
 8000658:	bc80      	pop	{r7}
 800065a:	46b8      	mov	r8, r7
 800065c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800065e:	2a00      	cmp	r2, #0
 8000660:	d035      	beq.n	80006ce <__aeabi_fadd+0x10a>
 8000662:	1b7a      	subs	r2, r7, r5
 8000664:	2d00      	cmp	r5, #0
 8000666:	d000      	beq.n	800066a <__aeabi_fadd+0xa6>
 8000668:	e0af      	b.n	80007ca <__aeabi_fadd+0x206>
 800066a:	4643      	mov	r3, r8
 800066c:	2b00      	cmp	r3, #0
 800066e:	d100      	bne.n	8000672 <__aeabi_fadd+0xae>
 8000670:	e0a7      	b.n	80007c2 <__aeabi_fadd+0x1fe>
 8000672:	1e53      	subs	r3, r2, #1
 8000674:	2a01      	cmp	r2, #1
 8000676:	d100      	bne.n	800067a <__aeabi_fadd+0xb6>
 8000678:	e12f      	b.n	80008da <__aeabi_fadd+0x316>
 800067a:	2aff      	cmp	r2, #255	; 0xff
 800067c:	d069      	beq.n	8000752 <__aeabi_fadd+0x18e>
 800067e:	001a      	movs	r2, r3
 8000680:	e0aa      	b.n	80007d8 <__aeabi_fadd+0x214>
 8000682:	1be9      	subs	r1, r5, r7
 8000684:	2900      	cmp	r1, #0
 8000686:	dd70      	ble.n	800076a <__aeabi_fadd+0x1a6>
 8000688:	2f00      	cmp	r7, #0
 800068a:	d037      	beq.n	80006fc <__aeabi_fadd+0x138>
 800068c:	2dff      	cmp	r5, #255	; 0xff
 800068e:	d062      	beq.n	8000756 <__aeabi_fadd+0x192>
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	04db      	lsls	r3, r3, #19
 8000694:	431e      	orrs	r6, r3
 8000696:	291b      	cmp	r1, #27
 8000698:	dc00      	bgt.n	800069c <__aeabi_fadd+0xd8>
 800069a:	e0b0      	b.n	80007fe <__aeabi_fadd+0x23a>
 800069c:	2001      	movs	r0, #1
 800069e:	4440      	add	r0, r8
 80006a0:	0143      	lsls	r3, r0, #5
 80006a2:	d543      	bpl.n	800072c <__aeabi_fadd+0x168>
 80006a4:	3501      	adds	r5, #1
 80006a6:	2dff      	cmp	r5, #255	; 0xff
 80006a8:	d033      	beq.n	8000712 <__aeabi_fadd+0x14e>
 80006aa:	2301      	movs	r3, #1
 80006ac:	4a93      	ldr	r2, [pc, #588]	; (80008fc <__aeabi_fadd+0x338>)
 80006ae:	4003      	ands	r3, r0
 80006b0:	0840      	lsrs	r0, r0, #1
 80006b2:	4010      	ands	r0, r2
 80006b4:	4318      	orrs	r0, r3
 80006b6:	e7b9      	b.n	800062c <__aeabi_fadd+0x68>
 80006b8:	2e00      	cmp	r6, #0
 80006ba:	d100      	bne.n	80006be <__aeabi_fadd+0xfa>
 80006bc:	e083      	b.n	80007c6 <__aeabi_fadd+0x202>
 80006be:	1e51      	subs	r1, r2, #1
 80006c0:	2a01      	cmp	r2, #1
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fadd+0x102>
 80006c4:	e0d8      	b.n	8000878 <__aeabi_fadd+0x2b4>
 80006c6:	2aff      	cmp	r2, #255	; 0xff
 80006c8:	d045      	beq.n	8000756 <__aeabi_fadd+0x192>
 80006ca:	000a      	movs	r2, r1
 80006cc:	e798      	b.n	8000600 <__aeabi_fadd+0x3c>
 80006ce:	27fe      	movs	r7, #254	; 0xfe
 80006d0:	1c6a      	adds	r2, r5, #1
 80006d2:	4217      	tst	r7, r2
 80006d4:	d000      	beq.n	80006d8 <__aeabi_fadd+0x114>
 80006d6:	e086      	b.n	80007e6 <__aeabi_fadd+0x222>
 80006d8:	2d00      	cmp	r5, #0
 80006da:	d000      	beq.n	80006de <__aeabi_fadd+0x11a>
 80006dc:	e0b7      	b.n	800084e <__aeabi_fadd+0x28a>
 80006de:	4643      	mov	r3, r8
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d100      	bne.n	80006e6 <__aeabi_fadd+0x122>
 80006e4:	e0f3      	b.n	80008ce <__aeabi_fadd+0x30a>
 80006e6:	2200      	movs	r2, #0
 80006e8:	2e00      	cmp	r6, #0
 80006ea:	d0b0      	beq.n	800064e <__aeabi_fadd+0x8a>
 80006ec:	1b98      	subs	r0, r3, r6
 80006ee:	0143      	lsls	r3, r0, #5
 80006f0:	d400      	bmi.n	80006f4 <__aeabi_fadd+0x130>
 80006f2:	e0fa      	b.n	80008ea <__aeabi_fadd+0x326>
 80006f4:	4643      	mov	r3, r8
 80006f6:	000c      	movs	r4, r1
 80006f8:	1af0      	subs	r0, r6, r3
 80006fa:	e797      	b.n	800062c <__aeabi_fadd+0x68>
 80006fc:	2e00      	cmp	r6, #0
 80006fe:	d100      	bne.n	8000702 <__aeabi_fadd+0x13e>
 8000700:	e0c8      	b.n	8000894 <__aeabi_fadd+0x2d0>
 8000702:	1e4a      	subs	r2, r1, #1
 8000704:	2901      	cmp	r1, #1
 8000706:	d100      	bne.n	800070a <__aeabi_fadd+0x146>
 8000708:	e0ae      	b.n	8000868 <__aeabi_fadd+0x2a4>
 800070a:	29ff      	cmp	r1, #255	; 0xff
 800070c:	d023      	beq.n	8000756 <__aeabi_fadd+0x192>
 800070e:	0011      	movs	r1, r2
 8000710:	e7c1      	b.n	8000696 <__aeabi_fadd+0xd2>
 8000712:	2300      	movs	r3, #0
 8000714:	22ff      	movs	r2, #255	; 0xff
 8000716:	469c      	mov	ip, r3
 8000718:	e799      	b.n	800064e <__aeabi_fadd+0x8a>
 800071a:	21fe      	movs	r1, #254	; 0xfe
 800071c:	1c6a      	adds	r2, r5, #1
 800071e:	4211      	tst	r1, r2
 8000720:	d077      	beq.n	8000812 <__aeabi_fadd+0x24e>
 8000722:	2aff      	cmp	r2, #255	; 0xff
 8000724:	d0f5      	beq.n	8000712 <__aeabi_fadd+0x14e>
 8000726:	0015      	movs	r5, r2
 8000728:	4446      	add	r6, r8
 800072a:	0870      	lsrs	r0, r6, #1
 800072c:	0743      	lsls	r3, r0, #29
 800072e:	d000      	beq.n	8000732 <__aeabi_fadd+0x16e>
 8000730:	e77e      	b.n	8000630 <__aeabi_fadd+0x6c>
 8000732:	08c3      	lsrs	r3, r0, #3
 8000734:	2dff      	cmp	r5, #255	; 0xff
 8000736:	d00e      	beq.n	8000756 <__aeabi_fadd+0x192>
 8000738:	025b      	lsls	r3, r3, #9
 800073a:	0a5b      	lsrs	r3, r3, #9
 800073c:	469c      	mov	ip, r3
 800073e:	b2ea      	uxtb	r2, r5
 8000740:	e785      	b.n	800064e <__aeabi_fadd+0x8a>
 8000742:	2e00      	cmp	r6, #0
 8000744:	d007      	beq.n	8000756 <__aeabi_fadd+0x192>
 8000746:	2280      	movs	r2, #128	; 0x80
 8000748:	03d2      	lsls	r2, r2, #15
 800074a:	4213      	tst	r3, r2
 800074c:	d003      	beq.n	8000756 <__aeabi_fadd+0x192>
 800074e:	4210      	tst	r0, r2
 8000750:	d101      	bne.n	8000756 <__aeabi_fadd+0x192>
 8000752:	000c      	movs	r4, r1
 8000754:	0003      	movs	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d0db      	beq.n	8000712 <__aeabi_fadd+0x14e>
 800075a:	2080      	movs	r0, #128	; 0x80
 800075c:	03c0      	lsls	r0, r0, #15
 800075e:	4318      	orrs	r0, r3
 8000760:	0240      	lsls	r0, r0, #9
 8000762:	0a43      	lsrs	r3, r0, #9
 8000764:	469c      	mov	ip, r3
 8000766:	22ff      	movs	r2, #255	; 0xff
 8000768:	e771      	b.n	800064e <__aeabi_fadd+0x8a>
 800076a:	2900      	cmp	r1, #0
 800076c:	d0d5      	beq.n	800071a <__aeabi_fadd+0x156>
 800076e:	1b7a      	subs	r2, r7, r5
 8000770:	2d00      	cmp	r5, #0
 8000772:	d160      	bne.n	8000836 <__aeabi_fadd+0x272>
 8000774:	4643      	mov	r3, r8
 8000776:	2b00      	cmp	r3, #0
 8000778:	d024      	beq.n	80007c4 <__aeabi_fadd+0x200>
 800077a:	1e53      	subs	r3, r2, #1
 800077c:	2a01      	cmp	r2, #1
 800077e:	d073      	beq.n	8000868 <__aeabi_fadd+0x2a4>
 8000780:	2aff      	cmp	r2, #255	; 0xff
 8000782:	d0e7      	beq.n	8000754 <__aeabi_fadd+0x190>
 8000784:	001a      	movs	r2, r3
 8000786:	2a1b      	cmp	r2, #27
 8000788:	dc00      	bgt.n	800078c <__aeabi_fadd+0x1c8>
 800078a:	e085      	b.n	8000898 <__aeabi_fadd+0x2d4>
 800078c:	2001      	movs	r0, #1
 800078e:	003d      	movs	r5, r7
 8000790:	1980      	adds	r0, r0, r6
 8000792:	e785      	b.n	80006a0 <__aeabi_fadd+0xdc>
 8000794:	2320      	movs	r3, #32
 8000796:	003a      	movs	r2, r7
 8000798:	1b45      	subs	r5, r0, r5
 800079a:	0038      	movs	r0, r7
 800079c:	3501      	adds	r5, #1
 800079e:	40ea      	lsrs	r2, r5
 80007a0:	1b5d      	subs	r5, r3, r5
 80007a2:	40a8      	lsls	r0, r5
 80007a4:	1e43      	subs	r3, r0, #1
 80007a6:	4198      	sbcs	r0, r3
 80007a8:	2500      	movs	r5, #0
 80007aa:	4310      	orrs	r0, r2
 80007ac:	e73e      	b.n	800062c <__aeabi_fadd+0x68>
 80007ae:	2320      	movs	r3, #32
 80007b0:	0030      	movs	r0, r6
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	0031      	movs	r1, r6
 80007b6:	4098      	lsls	r0, r3
 80007b8:	40d1      	lsrs	r1, r2
 80007ba:	1e43      	subs	r3, r0, #1
 80007bc:	4198      	sbcs	r0, r3
 80007be:	4308      	orrs	r0, r1
 80007c0:	e722      	b.n	8000608 <__aeabi_fadd+0x44>
 80007c2:	000c      	movs	r4, r1
 80007c4:	0003      	movs	r3, r0
 80007c6:	0015      	movs	r5, r2
 80007c8:	e7b4      	b.n	8000734 <__aeabi_fadd+0x170>
 80007ca:	2fff      	cmp	r7, #255	; 0xff
 80007cc:	d0c1      	beq.n	8000752 <__aeabi_fadd+0x18e>
 80007ce:	2380      	movs	r3, #128	; 0x80
 80007d0:	4640      	mov	r0, r8
 80007d2:	04db      	lsls	r3, r3, #19
 80007d4:	4318      	orrs	r0, r3
 80007d6:	4680      	mov	r8, r0
 80007d8:	2a1b      	cmp	r2, #27
 80007da:	dd51      	ble.n	8000880 <__aeabi_fadd+0x2bc>
 80007dc:	2001      	movs	r0, #1
 80007de:	000c      	movs	r4, r1
 80007e0:	003d      	movs	r5, r7
 80007e2:	1a30      	subs	r0, r6, r0
 80007e4:	e712      	b.n	800060c <__aeabi_fadd+0x48>
 80007e6:	4643      	mov	r3, r8
 80007e8:	1b9f      	subs	r7, r3, r6
 80007ea:	017b      	lsls	r3, r7, #5
 80007ec:	d42b      	bmi.n	8000846 <__aeabi_fadd+0x282>
 80007ee:	2f00      	cmp	r7, #0
 80007f0:	d000      	beq.n	80007f4 <__aeabi_fadd+0x230>
 80007f2:	e710      	b.n	8000616 <__aeabi_fadd+0x52>
 80007f4:	2300      	movs	r3, #0
 80007f6:	2400      	movs	r4, #0
 80007f8:	2200      	movs	r2, #0
 80007fa:	469c      	mov	ip, r3
 80007fc:	e727      	b.n	800064e <__aeabi_fadd+0x8a>
 80007fe:	2320      	movs	r3, #32
 8000800:	0032      	movs	r2, r6
 8000802:	0030      	movs	r0, r6
 8000804:	40ca      	lsrs	r2, r1
 8000806:	1a59      	subs	r1, r3, r1
 8000808:	4088      	lsls	r0, r1
 800080a:	1e43      	subs	r3, r0, #1
 800080c:	4198      	sbcs	r0, r3
 800080e:	4310      	orrs	r0, r2
 8000810:	e745      	b.n	800069e <__aeabi_fadd+0xda>
 8000812:	2d00      	cmp	r5, #0
 8000814:	d14a      	bne.n	80008ac <__aeabi_fadd+0x2e8>
 8000816:	4643      	mov	r3, r8
 8000818:	2b00      	cmp	r3, #0
 800081a:	d063      	beq.n	80008e4 <__aeabi_fadd+0x320>
 800081c:	2200      	movs	r2, #0
 800081e:	2e00      	cmp	r6, #0
 8000820:	d100      	bne.n	8000824 <__aeabi_fadd+0x260>
 8000822:	e714      	b.n	800064e <__aeabi_fadd+0x8a>
 8000824:	0030      	movs	r0, r6
 8000826:	4440      	add	r0, r8
 8000828:	0143      	lsls	r3, r0, #5
 800082a:	d400      	bmi.n	800082e <__aeabi_fadd+0x26a>
 800082c:	e77e      	b.n	800072c <__aeabi_fadd+0x168>
 800082e:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <__aeabi_fadd+0x334>)
 8000830:	3501      	adds	r5, #1
 8000832:	4018      	ands	r0, r3
 8000834:	e77a      	b.n	800072c <__aeabi_fadd+0x168>
 8000836:	2fff      	cmp	r7, #255	; 0xff
 8000838:	d08c      	beq.n	8000754 <__aeabi_fadd+0x190>
 800083a:	2380      	movs	r3, #128	; 0x80
 800083c:	4641      	mov	r1, r8
 800083e:	04db      	lsls	r3, r3, #19
 8000840:	4319      	orrs	r1, r3
 8000842:	4688      	mov	r8, r1
 8000844:	e79f      	b.n	8000786 <__aeabi_fadd+0x1c2>
 8000846:	4643      	mov	r3, r8
 8000848:	000c      	movs	r4, r1
 800084a:	1af7      	subs	r7, r6, r3
 800084c:	e6e3      	b.n	8000616 <__aeabi_fadd+0x52>
 800084e:	4642      	mov	r2, r8
 8000850:	2a00      	cmp	r2, #0
 8000852:	d000      	beq.n	8000856 <__aeabi_fadd+0x292>
 8000854:	e775      	b.n	8000742 <__aeabi_fadd+0x17e>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d000      	beq.n	800085c <__aeabi_fadd+0x298>
 800085a:	e77a      	b.n	8000752 <__aeabi_fadd+0x18e>
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	03db      	lsls	r3, r3, #15
 8000860:	2400      	movs	r4, #0
 8000862:	469c      	mov	ip, r3
 8000864:	22ff      	movs	r2, #255	; 0xff
 8000866:	e6f2      	b.n	800064e <__aeabi_fadd+0x8a>
 8000868:	0030      	movs	r0, r6
 800086a:	4440      	add	r0, r8
 800086c:	2501      	movs	r5, #1
 800086e:	0143      	lsls	r3, r0, #5
 8000870:	d400      	bmi.n	8000874 <__aeabi_fadd+0x2b0>
 8000872:	e75b      	b.n	800072c <__aeabi_fadd+0x168>
 8000874:	2502      	movs	r5, #2
 8000876:	e718      	b.n	80006aa <__aeabi_fadd+0xe6>
 8000878:	4643      	mov	r3, r8
 800087a:	2501      	movs	r5, #1
 800087c:	1b98      	subs	r0, r3, r6
 800087e:	e6c5      	b.n	800060c <__aeabi_fadd+0x48>
 8000880:	2320      	movs	r3, #32
 8000882:	4644      	mov	r4, r8
 8000884:	4640      	mov	r0, r8
 8000886:	40d4      	lsrs	r4, r2
 8000888:	1a9a      	subs	r2, r3, r2
 800088a:	4090      	lsls	r0, r2
 800088c:	1e43      	subs	r3, r0, #1
 800088e:	4198      	sbcs	r0, r3
 8000890:	4320      	orrs	r0, r4
 8000892:	e7a4      	b.n	80007de <__aeabi_fadd+0x21a>
 8000894:	000d      	movs	r5, r1
 8000896:	e74d      	b.n	8000734 <__aeabi_fadd+0x170>
 8000898:	2320      	movs	r3, #32
 800089a:	4641      	mov	r1, r8
 800089c:	4640      	mov	r0, r8
 800089e:	40d1      	lsrs	r1, r2
 80008a0:	1a9a      	subs	r2, r3, r2
 80008a2:	4090      	lsls	r0, r2
 80008a4:	1e43      	subs	r3, r0, #1
 80008a6:	4198      	sbcs	r0, r3
 80008a8:	4308      	orrs	r0, r1
 80008aa:	e770      	b.n	800078e <__aeabi_fadd+0x1ca>
 80008ac:	4642      	mov	r2, r8
 80008ae:	2a00      	cmp	r2, #0
 80008b0:	d100      	bne.n	80008b4 <__aeabi_fadd+0x2f0>
 80008b2:	e74f      	b.n	8000754 <__aeabi_fadd+0x190>
 80008b4:	2e00      	cmp	r6, #0
 80008b6:	d100      	bne.n	80008ba <__aeabi_fadd+0x2f6>
 80008b8:	e74d      	b.n	8000756 <__aeabi_fadd+0x192>
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	03d2      	lsls	r2, r2, #15
 80008be:	4213      	tst	r3, r2
 80008c0:	d100      	bne.n	80008c4 <__aeabi_fadd+0x300>
 80008c2:	e748      	b.n	8000756 <__aeabi_fadd+0x192>
 80008c4:	4210      	tst	r0, r2
 80008c6:	d000      	beq.n	80008ca <__aeabi_fadd+0x306>
 80008c8:	e745      	b.n	8000756 <__aeabi_fadd+0x192>
 80008ca:	0003      	movs	r3, r0
 80008cc:	e743      	b.n	8000756 <__aeabi_fadd+0x192>
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	d090      	beq.n	80007f4 <__aeabi_fadd+0x230>
 80008d2:	000c      	movs	r4, r1
 80008d4:	4684      	mov	ip, r0
 80008d6:	2200      	movs	r2, #0
 80008d8:	e6b9      	b.n	800064e <__aeabi_fadd+0x8a>
 80008da:	4643      	mov	r3, r8
 80008dc:	000c      	movs	r4, r1
 80008de:	1af0      	subs	r0, r6, r3
 80008e0:	3501      	adds	r5, #1
 80008e2:	e693      	b.n	800060c <__aeabi_fadd+0x48>
 80008e4:	4684      	mov	ip, r0
 80008e6:	2200      	movs	r2, #0
 80008e8:	e6b1      	b.n	800064e <__aeabi_fadd+0x8a>
 80008ea:	2800      	cmp	r0, #0
 80008ec:	d000      	beq.n	80008f0 <__aeabi_fadd+0x32c>
 80008ee:	e71d      	b.n	800072c <__aeabi_fadd+0x168>
 80008f0:	2300      	movs	r3, #0
 80008f2:	2400      	movs	r4, #0
 80008f4:	469c      	mov	ip, r3
 80008f6:	e6aa      	b.n	800064e <__aeabi_fadd+0x8a>
 80008f8:	fbffffff 	.word	0xfbffffff
 80008fc:	7dffffff 	.word	0x7dffffff

08000900 <__aeabi_fdiv>:
 8000900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000902:	464f      	mov	r7, r9
 8000904:	4646      	mov	r6, r8
 8000906:	46d6      	mov	lr, sl
 8000908:	0245      	lsls	r5, r0, #9
 800090a:	b5c0      	push	{r6, r7, lr}
 800090c:	0047      	lsls	r7, r0, #1
 800090e:	1c0c      	adds	r4, r1, #0
 8000910:	0a6d      	lsrs	r5, r5, #9
 8000912:	0e3f      	lsrs	r7, r7, #24
 8000914:	0fc6      	lsrs	r6, r0, #31
 8000916:	2f00      	cmp	r7, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fdiv+0x1c>
 800091a:	e070      	b.n	80009fe <__aeabi_fdiv+0xfe>
 800091c:	2fff      	cmp	r7, #255	; 0xff
 800091e:	d100      	bne.n	8000922 <__aeabi_fdiv+0x22>
 8000920:	e075      	b.n	8000a0e <__aeabi_fdiv+0x10e>
 8000922:	00eb      	lsls	r3, r5, #3
 8000924:	2580      	movs	r5, #128	; 0x80
 8000926:	04ed      	lsls	r5, r5, #19
 8000928:	431d      	orrs	r5, r3
 800092a:	2300      	movs	r3, #0
 800092c:	4699      	mov	r9, r3
 800092e:	469a      	mov	sl, r3
 8000930:	3f7f      	subs	r7, #127	; 0x7f
 8000932:	0260      	lsls	r0, r4, #9
 8000934:	0a43      	lsrs	r3, r0, #9
 8000936:	4698      	mov	r8, r3
 8000938:	0063      	lsls	r3, r4, #1
 800093a:	0e1b      	lsrs	r3, r3, #24
 800093c:	0fe4      	lsrs	r4, r4, #31
 800093e:	2b00      	cmp	r3, #0
 8000940:	d04e      	beq.n	80009e0 <__aeabi_fdiv+0xe0>
 8000942:	2bff      	cmp	r3, #255	; 0xff
 8000944:	d046      	beq.n	80009d4 <__aeabi_fdiv+0xd4>
 8000946:	4642      	mov	r2, r8
 8000948:	00d0      	lsls	r0, r2, #3
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	04d2      	lsls	r2, r2, #19
 800094e:	4302      	orrs	r2, r0
 8000950:	4690      	mov	r8, r2
 8000952:	2200      	movs	r2, #0
 8000954:	3b7f      	subs	r3, #127	; 0x7f
 8000956:	0031      	movs	r1, r6
 8000958:	1aff      	subs	r7, r7, r3
 800095a:	464b      	mov	r3, r9
 800095c:	4061      	eors	r1, r4
 800095e:	b2c9      	uxtb	r1, r1
 8000960:	4313      	orrs	r3, r2
 8000962:	2b0f      	cmp	r3, #15
 8000964:	d900      	bls.n	8000968 <__aeabi_fdiv+0x68>
 8000966:	e0b5      	b.n	8000ad4 <__aeabi_fdiv+0x1d4>
 8000968:	486e      	ldr	r0, [pc, #440]	; (8000b24 <__aeabi_fdiv+0x224>)
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	58c3      	ldr	r3, [r0, r3]
 800096e:	469f      	mov	pc, r3
 8000970:	2300      	movs	r3, #0
 8000972:	4698      	mov	r8, r3
 8000974:	0026      	movs	r6, r4
 8000976:	4645      	mov	r5, r8
 8000978:	4692      	mov	sl, r2
 800097a:	4653      	mov	r3, sl
 800097c:	2b02      	cmp	r3, #2
 800097e:	d100      	bne.n	8000982 <__aeabi_fdiv+0x82>
 8000980:	e089      	b.n	8000a96 <__aeabi_fdiv+0x196>
 8000982:	2b03      	cmp	r3, #3
 8000984:	d100      	bne.n	8000988 <__aeabi_fdiv+0x88>
 8000986:	e09e      	b.n	8000ac6 <__aeabi_fdiv+0x1c6>
 8000988:	2b01      	cmp	r3, #1
 800098a:	d018      	beq.n	80009be <__aeabi_fdiv+0xbe>
 800098c:	003b      	movs	r3, r7
 800098e:	337f      	adds	r3, #127	; 0x7f
 8000990:	2b00      	cmp	r3, #0
 8000992:	dd69      	ble.n	8000a68 <__aeabi_fdiv+0x168>
 8000994:	076a      	lsls	r2, r5, #29
 8000996:	d004      	beq.n	80009a2 <__aeabi_fdiv+0xa2>
 8000998:	220f      	movs	r2, #15
 800099a:	402a      	ands	r2, r5
 800099c:	2a04      	cmp	r2, #4
 800099e:	d000      	beq.n	80009a2 <__aeabi_fdiv+0xa2>
 80009a0:	3504      	adds	r5, #4
 80009a2:	012a      	lsls	r2, r5, #4
 80009a4:	d503      	bpl.n	80009ae <__aeabi_fdiv+0xae>
 80009a6:	4b60      	ldr	r3, [pc, #384]	; (8000b28 <__aeabi_fdiv+0x228>)
 80009a8:	401d      	ands	r5, r3
 80009aa:	003b      	movs	r3, r7
 80009ac:	3380      	adds	r3, #128	; 0x80
 80009ae:	2bfe      	cmp	r3, #254	; 0xfe
 80009b0:	dd00      	ble.n	80009b4 <__aeabi_fdiv+0xb4>
 80009b2:	e070      	b.n	8000a96 <__aeabi_fdiv+0x196>
 80009b4:	01ad      	lsls	r5, r5, #6
 80009b6:	0a6d      	lsrs	r5, r5, #9
 80009b8:	b2d8      	uxtb	r0, r3
 80009ba:	e002      	b.n	80009c2 <__aeabi_fdiv+0xc2>
 80009bc:	000e      	movs	r6, r1
 80009be:	2000      	movs	r0, #0
 80009c0:	2500      	movs	r5, #0
 80009c2:	05c0      	lsls	r0, r0, #23
 80009c4:	4328      	orrs	r0, r5
 80009c6:	07f6      	lsls	r6, r6, #31
 80009c8:	4330      	orrs	r0, r6
 80009ca:	bce0      	pop	{r5, r6, r7}
 80009cc:	46ba      	mov	sl, r7
 80009ce:	46b1      	mov	r9, r6
 80009d0:	46a8      	mov	r8, r5
 80009d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009d4:	4643      	mov	r3, r8
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d13f      	bne.n	8000a5a <__aeabi_fdiv+0x15a>
 80009da:	2202      	movs	r2, #2
 80009dc:	3fff      	subs	r7, #255	; 0xff
 80009de:	e003      	b.n	80009e8 <__aeabi_fdiv+0xe8>
 80009e0:	4643      	mov	r3, r8
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d12d      	bne.n	8000a42 <__aeabi_fdiv+0x142>
 80009e6:	2201      	movs	r2, #1
 80009e8:	0031      	movs	r1, r6
 80009ea:	464b      	mov	r3, r9
 80009ec:	4061      	eors	r1, r4
 80009ee:	b2c9      	uxtb	r1, r1
 80009f0:	4313      	orrs	r3, r2
 80009f2:	2b0f      	cmp	r3, #15
 80009f4:	d834      	bhi.n	8000a60 <__aeabi_fdiv+0x160>
 80009f6:	484d      	ldr	r0, [pc, #308]	; (8000b2c <__aeabi_fdiv+0x22c>)
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	58c3      	ldr	r3, [r0, r3]
 80009fc:	469f      	mov	pc, r3
 80009fe:	2d00      	cmp	r5, #0
 8000a00:	d113      	bne.n	8000a2a <__aeabi_fdiv+0x12a>
 8000a02:	2304      	movs	r3, #4
 8000a04:	4699      	mov	r9, r3
 8000a06:	3b03      	subs	r3, #3
 8000a08:	2700      	movs	r7, #0
 8000a0a:	469a      	mov	sl, r3
 8000a0c:	e791      	b.n	8000932 <__aeabi_fdiv+0x32>
 8000a0e:	2d00      	cmp	r5, #0
 8000a10:	d105      	bne.n	8000a1e <__aeabi_fdiv+0x11e>
 8000a12:	2308      	movs	r3, #8
 8000a14:	4699      	mov	r9, r3
 8000a16:	3b06      	subs	r3, #6
 8000a18:	27ff      	movs	r7, #255	; 0xff
 8000a1a:	469a      	mov	sl, r3
 8000a1c:	e789      	b.n	8000932 <__aeabi_fdiv+0x32>
 8000a1e:	230c      	movs	r3, #12
 8000a20:	4699      	mov	r9, r3
 8000a22:	3b09      	subs	r3, #9
 8000a24:	27ff      	movs	r7, #255	; 0xff
 8000a26:	469a      	mov	sl, r3
 8000a28:	e783      	b.n	8000932 <__aeabi_fdiv+0x32>
 8000a2a:	0028      	movs	r0, r5
 8000a2c:	f002 fb6a 	bl	8003104 <__clzsi2>
 8000a30:	2776      	movs	r7, #118	; 0x76
 8000a32:	1f43      	subs	r3, r0, #5
 8000a34:	409d      	lsls	r5, r3
 8000a36:	2300      	movs	r3, #0
 8000a38:	427f      	negs	r7, r7
 8000a3a:	4699      	mov	r9, r3
 8000a3c:	469a      	mov	sl, r3
 8000a3e:	1a3f      	subs	r7, r7, r0
 8000a40:	e777      	b.n	8000932 <__aeabi_fdiv+0x32>
 8000a42:	4640      	mov	r0, r8
 8000a44:	f002 fb5e 	bl	8003104 <__clzsi2>
 8000a48:	4642      	mov	r2, r8
 8000a4a:	1f43      	subs	r3, r0, #5
 8000a4c:	409a      	lsls	r2, r3
 8000a4e:	2376      	movs	r3, #118	; 0x76
 8000a50:	425b      	negs	r3, r3
 8000a52:	4690      	mov	r8, r2
 8000a54:	1a1b      	subs	r3, r3, r0
 8000a56:	2200      	movs	r2, #0
 8000a58:	e77d      	b.n	8000956 <__aeabi_fdiv+0x56>
 8000a5a:	23ff      	movs	r3, #255	; 0xff
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	e77a      	b.n	8000956 <__aeabi_fdiv+0x56>
 8000a60:	000e      	movs	r6, r1
 8000a62:	20ff      	movs	r0, #255	; 0xff
 8000a64:	2500      	movs	r5, #0
 8000a66:	e7ac      	b.n	80009c2 <__aeabi_fdiv+0xc2>
 8000a68:	2001      	movs	r0, #1
 8000a6a:	1ac0      	subs	r0, r0, r3
 8000a6c:	281b      	cmp	r0, #27
 8000a6e:	dca6      	bgt.n	80009be <__aeabi_fdiv+0xbe>
 8000a70:	379e      	adds	r7, #158	; 0x9e
 8000a72:	002a      	movs	r2, r5
 8000a74:	40bd      	lsls	r5, r7
 8000a76:	40c2      	lsrs	r2, r0
 8000a78:	1e6b      	subs	r3, r5, #1
 8000a7a:	419d      	sbcs	r5, r3
 8000a7c:	4315      	orrs	r5, r2
 8000a7e:	076b      	lsls	r3, r5, #29
 8000a80:	d004      	beq.n	8000a8c <__aeabi_fdiv+0x18c>
 8000a82:	230f      	movs	r3, #15
 8000a84:	402b      	ands	r3, r5
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d000      	beq.n	8000a8c <__aeabi_fdiv+0x18c>
 8000a8a:	3504      	adds	r5, #4
 8000a8c:	016b      	lsls	r3, r5, #5
 8000a8e:	d544      	bpl.n	8000b1a <__aeabi_fdiv+0x21a>
 8000a90:	2001      	movs	r0, #1
 8000a92:	2500      	movs	r5, #0
 8000a94:	e795      	b.n	80009c2 <__aeabi_fdiv+0xc2>
 8000a96:	20ff      	movs	r0, #255	; 0xff
 8000a98:	2500      	movs	r5, #0
 8000a9a:	e792      	b.n	80009c2 <__aeabi_fdiv+0xc2>
 8000a9c:	2580      	movs	r5, #128	; 0x80
 8000a9e:	2600      	movs	r6, #0
 8000aa0:	20ff      	movs	r0, #255	; 0xff
 8000aa2:	03ed      	lsls	r5, r5, #15
 8000aa4:	e78d      	b.n	80009c2 <__aeabi_fdiv+0xc2>
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	4698      	mov	r8, r3
 8000aaa:	2080      	movs	r0, #128	; 0x80
 8000aac:	03c0      	lsls	r0, r0, #15
 8000aae:	4205      	tst	r5, r0
 8000ab0:	d009      	beq.n	8000ac6 <__aeabi_fdiv+0x1c6>
 8000ab2:	4643      	mov	r3, r8
 8000ab4:	4203      	tst	r3, r0
 8000ab6:	d106      	bne.n	8000ac6 <__aeabi_fdiv+0x1c6>
 8000ab8:	4645      	mov	r5, r8
 8000aba:	4305      	orrs	r5, r0
 8000abc:	026d      	lsls	r5, r5, #9
 8000abe:	0026      	movs	r6, r4
 8000ac0:	20ff      	movs	r0, #255	; 0xff
 8000ac2:	0a6d      	lsrs	r5, r5, #9
 8000ac4:	e77d      	b.n	80009c2 <__aeabi_fdiv+0xc2>
 8000ac6:	2080      	movs	r0, #128	; 0x80
 8000ac8:	03c0      	lsls	r0, r0, #15
 8000aca:	4305      	orrs	r5, r0
 8000acc:	026d      	lsls	r5, r5, #9
 8000ace:	20ff      	movs	r0, #255	; 0xff
 8000ad0:	0a6d      	lsrs	r5, r5, #9
 8000ad2:	e776      	b.n	80009c2 <__aeabi_fdiv+0xc2>
 8000ad4:	4642      	mov	r2, r8
 8000ad6:	016b      	lsls	r3, r5, #5
 8000ad8:	0150      	lsls	r0, r2, #5
 8000ada:	4283      	cmp	r3, r0
 8000adc:	d219      	bcs.n	8000b12 <__aeabi_fdiv+0x212>
 8000ade:	221b      	movs	r2, #27
 8000ae0:	2500      	movs	r5, #0
 8000ae2:	3f01      	subs	r7, #1
 8000ae4:	2601      	movs	r6, #1
 8000ae6:	001c      	movs	r4, r3
 8000ae8:	006d      	lsls	r5, r5, #1
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	2c00      	cmp	r4, #0
 8000aee:	db01      	blt.n	8000af4 <__aeabi_fdiv+0x1f4>
 8000af0:	4298      	cmp	r0, r3
 8000af2:	d801      	bhi.n	8000af8 <__aeabi_fdiv+0x1f8>
 8000af4:	1a1b      	subs	r3, r3, r0
 8000af6:	4335      	orrs	r5, r6
 8000af8:	3a01      	subs	r2, #1
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d1f3      	bne.n	8000ae6 <__aeabi_fdiv+0x1e6>
 8000afe:	1e5a      	subs	r2, r3, #1
 8000b00:	4193      	sbcs	r3, r2
 8000b02:	431d      	orrs	r5, r3
 8000b04:	003b      	movs	r3, r7
 8000b06:	337f      	adds	r3, #127	; 0x7f
 8000b08:	000e      	movs	r6, r1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	dd00      	ble.n	8000b10 <__aeabi_fdiv+0x210>
 8000b0e:	e741      	b.n	8000994 <__aeabi_fdiv+0x94>
 8000b10:	e7aa      	b.n	8000a68 <__aeabi_fdiv+0x168>
 8000b12:	221a      	movs	r2, #26
 8000b14:	2501      	movs	r5, #1
 8000b16:	1a1b      	subs	r3, r3, r0
 8000b18:	e7e4      	b.n	8000ae4 <__aeabi_fdiv+0x1e4>
 8000b1a:	01ad      	lsls	r5, r5, #6
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	0a6d      	lsrs	r5, r5, #9
 8000b20:	e74f      	b.n	80009c2 <__aeabi_fdiv+0xc2>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	08007b64 	.word	0x08007b64
 8000b28:	f7ffffff 	.word	0xf7ffffff
 8000b2c:	08007ba4 	.word	0x08007ba4

08000b30 <__eqsf2>:
 8000b30:	b570      	push	{r4, r5, r6, lr}
 8000b32:	0042      	lsls	r2, r0, #1
 8000b34:	0245      	lsls	r5, r0, #9
 8000b36:	024e      	lsls	r6, r1, #9
 8000b38:	004c      	lsls	r4, r1, #1
 8000b3a:	0fc3      	lsrs	r3, r0, #31
 8000b3c:	0a6d      	lsrs	r5, r5, #9
 8000b3e:	2001      	movs	r0, #1
 8000b40:	0e12      	lsrs	r2, r2, #24
 8000b42:	0a76      	lsrs	r6, r6, #9
 8000b44:	0e24      	lsrs	r4, r4, #24
 8000b46:	0fc9      	lsrs	r1, r1, #31
 8000b48:	2aff      	cmp	r2, #255	; 0xff
 8000b4a:	d006      	beq.n	8000b5a <__eqsf2+0x2a>
 8000b4c:	2cff      	cmp	r4, #255	; 0xff
 8000b4e:	d003      	beq.n	8000b58 <__eqsf2+0x28>
 8000b50:	42a2      	cmp	r2, r4
 8000b52:	d101      	bne.n	8000b58 <__eqsf2+0x28>
 8000b54:	42b5      	cmp	r5, r6
 8000b56:	d006      	beq.n	8000b66 <__eqsf2+0x36>
 8000b58:	bd70      	pop	{r4, r5, r6, pc}
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d1fc      	bne.n	8000b58 <__eqsf2+0x28>
 8000b5e:	2cff      	cmp	r4, #255	; 0xff
 8000b60:	d1fa      	bne.n	8000b58 <__eqsf2+0x28>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d1f8      	bne.n	8000b58 <__eqsf2+0x28>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d006      	beq.n	8000b78 <__eqsf2+0x48>
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	d1f3      	bne.n	8000b58 <__eqsf2+0x28>
 8000b70:	0028      	movs	r0, r5
 8000b72:	1e43      	subs	r3, r0, #1
 8000b74:	4198      	sbcs	r0, r3
 8000b76:	e7ef      	b.n	8000b58 <__eqsf2+0x28>
 8000b78:	2000      	movs	r0, #0
 8000b7a:	e7ed      	b.n	8000b58 <__eqsf2+0x28>

08000b7c <__gesf2>:
 8000b7c:	b570      	push	{r4, r5, r6, lr}
 8000b7e:	0042      	lsls	r2, r0, #1
 8000b80:	0245      	lsls	r5, r0, #9
 8000b82:	024e      	lsls	r6, r1, #9
 8000b84:	004c      	lsls	r4, r1, #1
 8000b86:	0fc3      	lsrs	r3, r0, #31
 8000b88:	0a6d      	lsrs	r5, r5, #9
 8000b8a:	0e12      	lsrs	r2, r2, #24
 8000b8c:	0a76      	lsrs	r6, r6, #9
 8000b8e:	0e24      	lsrs	r4, r4, #24
 8000b90:	0fc8      	lsrs	r0, r1, #31
 8000b92:	2aff      	cmp	r2, #255	; 0xff
 8000b94:	d01b      	beq.n	8000bce <__gesf2+0x52>
 8000b96:	2cff      	cmp	r4, #255	; 0xff
 8000b98:	d00e      	beq.n	8000bb8 <__gesf2+0x3c>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d11b      	bne.n	8000bd6 <__gesf2+0x5a>
 8000b9e:	2c00      	cmp	r4, #0
 8000ba0:	d101      	bne.n	8000ba6 <__gesf2+0x2a>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d01c      	beq.n	8000be0 <__gesf2+0x64>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d00c      	beq.n	8000bc4 <__gesf2+0x48>
 8000baa:	4283      	cmp	r3, r0
 8000bac:	d01c      	beq.n	8000be8 <__gesf2+0x6c>
 8000bae:	2102      	movs	r1, #2
 8000bb0:	1e58      	subs	r0, r3, #1
 8000bb2:	4008      	ands	r0, r1
 8000bb4:	3801      	subs	r0, #1
 8000bb6:	bd70      	pop	{r4, r5, r6, pc}
 8000bb8:	2e00      	cmp	r6, #0
 8000bba:	d122      	bne.n	8000c02 <__gesf2+0x86>
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	d1f4      	bne.n	8000baa <__gesf2+0x2e>
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d1f2      	bne.n	8000baa <__gesf2+0x2e>
 8000bc4:	2800      	cmp	r0, #0
 8000bc6:	d1f6      	bne.n	8000bb6 <__gesf2+0x3a>
 8000bc8:	2001      	movs	r0, #1
 8000bca:	4240      	negs	r0, r0
 8000bcc:	e7f3      	b.n	8000bb6 <__gesf2+0x3a>
 8000bce:	2d00      	cmp	r5, #0
 8000bd0:	d117      	bne.n	8000c02 <__gesf2+0x86>
 8000bd2:	2cff      	cmp	r4, #255	; 0xff
 8000bd4:	d0f0      	beq.n	8000bb8 <__gesf2+0x3c>
 8000bd6:	2c00      	cmp	r4, #0
 8000bd8:	d1e7      	bne.n	8000baa <__gesf2+0x2e>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	d1e5      	bne.n	8000baa <__gesf2+0x2e>
 8000bde:	e7e6      	b.n	8000bae <__gesf2+0x32>
 8000be0:	2000      	movs	r0, #0
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	d0e7      	beq.n	8000bb6 <__gesf2+0x3a>
 8000be6:	e7e2      	b.n	8000bae <__gesf2+0x32>
 8000be8:	42a2      	cmp	r2, r4
 8000bea:	dc05      	bgt.n	8000bf8 <__gesf2+0x7c>
 8000bec:	dbea      	blt.n	8000bc4 <__gesf2+0x48>
 8000bee:	42b5      	cmp	r5, r6
 8000bf0:	d802      	bhi.n	8000bf8 <__gesf2+0x7c>
 8000bf2:	d3e7      	bcc.n	8000bc4 <__gesf2+0x48>
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	e7de      	b.n	8000bb6 <__gesf2+0x3a>
 8000bf8:	4243      	negs	r3, r0
 8000bfa:	4158      	adcs	r0, r3
 8000bfc:	0040      	lsls	r0, r0, #1
 8000bfe:	3801      	subs	r0, #1
 8000c00:	e7d9      	b.n	8000bb6 <__gesf2+0x3a>
 8000c02:	2002      	movs	r0, #2
 8000c04:	4240      	negs	r0, r0
 8000c06:	e7d6      	b.n	8000bb6 <__gesf2+0x3a>

08000c08 <__lesf2>:
 8000c08:	b570      	push	{r4, r5, r6, lr}
 8000c0a:	0042      	lsls	r2, r0, #1
 8000c0c:	0245      	lsls	r5, r0, #9
 8000c0e:	024e      	lsls	r6, r1, #9
 8000c10:	004c      	lsls	r4, r1, #1
 8000c12:	0fc3      	lsrs	r3, r0, #31
 8000c14:	0a6d      	lsrs	r5, r5, #9
 8000c16:	0e12      	lsrs	r2, r2, #24
 8000c18:	0a76      	lsrs	r6, r6, #9
 8000c1a:	0e24      	lsrs	r4, r4, #24
 8000c1c:	0fc8      	lsrs	r0, r1, #31
 8000c1e:	2aff      	cmp	r2, #255	; 0xff
 8000c20:	d00b      	beq.n	8000c3a <__lesf2+0x32>
 8000c22:	2cff      	cmp	r4, #255	; 0xff
 8000c24:	d00d      	beq.n	8000c42 <__lesf2+0x3a>
 8000c26:	2a00      	cmp	r2, #0
 8000c28:	d11f      	bne.n	8000c6a <__lesf2+0x62>
 8000c2a:	2c00      	cmp	r4, #0
 8000c2c:	d116      	bne.n	8000c5c <__lesf2+0x54>
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d114      	bne.n	8000c5c <__lesf2+0x54>
 8000c32:	2000      	movs	r0, #0
 8000c34:	2d00      	cmp	r5, #0
 8000c36:	d010      	beq.n	8000c5a <__lesf2+0x52>
 8000c38:	e009      	b.n	8000c4e <__lesf2+0x46>
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	d10c      	bne.n	8000c58 <__lesf2+0x50>
 8000c3e:	2cff      	cmp	r4, #255	; 0xff
 8000c40:	d113      	bne.n	8000c6a <__lesf2+0x62>
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	d108      	bne.n	8000c58 <__lesf2+0x50>
 8000c46:	2a00      	cmp	r2, #0
 8000c48:	d008      	beq.n	8000c5c <__lesf2+0x54>
 8000c4a:	4283      	cmp	r3, r0
 8000c4c:	d012      	beq.n	8000c74 <__lesf2+0x6c>
 8000c4e:	2102      	movs	r1, #2
 8000c50:	1e58      	subs	r0, r3, #1
 8000c52:	4008      	ands	r0, r1
 8000c54:	3801      	subs	r0, #1
 8000c56:	e000      	b.n	8000c5a <__lesf2+0x52>
 8000c58:	2002      	movs	r0, #2
 8000c5a:	bd70      	pop	{r4, r5, r6, pc}
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d1f4      	bne.n	8000c4a <__lesf2+0x42>
 8000c60:	2800      	cmp	r0, #0
 8000c62:	d1fa      	bne.n	8000c5a <__lesf2+0x52>
 8000c64:	2001      	movs	r0, #1
 8000c66:	4240      	negs	r0, r0
 8000c68:	e7f7      	b.n	8000c5a <__lesf2+0x52>
 8000c6a:	2c00      	cmp	r4, #0
 8000c6c:	d1ed      	bne.n	8000c4a <__lesf2+0x42>
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d1eb      	bne.n	8000c4a <__lesf2+0x42>
 8000c72:	e7ec      	b.n	8000c4e <__lesf2+0x46>
 8000c74:	42a2      	cmp	r2, r4
 8000c76:	dc05      	bgt.n	8000c84 <__lesf2+0x7c>
 8000c78:	dbf2      	blt.n	8000c60 <__lesf2+0x58>
 8000c7a:	42b5      	cmp	r5, r6
 8000c7c:	d802      	bhi.n	8000c84 <__lesf2+0x7c>
 8000c7e:	d3ef      	bcc.n	8000c60 <__lesf2+0x58>
 8000c80:	2000      	movs	r0, #0
 8000c82:	e7ea      	b.n	8000c5a <__lesf2+0x52>
 8000c84:	4243      	negs	r3, r0
 8000c86:	4158      	adcs	r0, r3
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	3801      	subs	r0, #1
 8000c8c:	e7e5      	b.n	8000c5a <__lesf2+0x52>
 8000c8e:	46c0      	nop			; (mov r8, r8)

08000c90 <__aeabi_fmul>:
 8000c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c92:	464f      	mov	r7, r9
 8000c94:	4646      	mov	r6, r8
 8000c96:	46d6      	mov	lr, sl
 8000c98:	0244      	lsls	r4, r0, #9
 8000c9a:	0045      	lsls	r5, r0, #1
 8000c9c:	b5c0      	push	{r6, r7, lr}
 8000c9e:	0a64      	lsrs	r4, r4, #9
 8000ca0:	1c0f      	adds	r7, r1, #0
 8000ca2:	0e2d      	lsrs	r5, r5, #24
 8000ca4:	0fc6      	lsrs	r6, r0, #31
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_fmul+0x1c>
 8000caa:	e08d      	b.n	8000dc8 <__aeabi_fmul+0x138>
 8000cac:	2dff      	cmp	r5, #255	; 0xff
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_fmul+0x22>
 8000cb0:	e092      	b.n	8000dd8 <__aeabi_fmul+0x148>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2080      	movs	r0, #128	; 0x80
 8000cb6:	4699      	mov	r9, r3
 8000cb8:	469a      	mov	sl, r3
 8000cba:	00e4      	lsls	r4, r4, #3
 8000cbc:	04c0      	lsls	r0, r0, #19
 8000cbe:	4304      	orrs	r4, r0
 8000cc0:	3d7f      	subs	r5, #127	; 0x7f
 8000cc2:	0278      	lsls	r0, r7, #9
 8000cc4:	0a43      	lsrs	r3, r0, #9
 8000cc6:	4698      	mov	r8, r3
 8000cc8:	007b      	lsls	r3, r7, #1
 8000cca:	0e1b      	lsrs	r3, r3, #24
 8000ccc:	0fff      	lsrs	r7, r7, #31
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_fmul+0x44>
 8000cd2:	e070      	b.n	8000db6 <__aeabi_fmul+0x126>
 8000cd4:	2bff      	cmp	r3, #255	; 0xff
 8000cd6:	d100      	bne.n	8000cda <__aeabi_fmul+0x4a>
 8000cd8:	e086      	b.n	8000de8 <__aeabi_fmul+0x158>
 8000cda:	4642      	mov	r2, r8
 8000cdc:	00d0      	lsls	r0, r2, #3
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	3b7f      	subs	r3, #127	; 0x7f
 8000ce2:	18ed      	adds	r5, r5, r3
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	04d2      	lsls	r2, r2, #19
 8000ce8:	4302      	orrs	r2, r0
 8000cea:	4690      	mov	r8, r2
 8000cec:	469c      	mov	ip, r3
 8000cee:	0031      	movs	r1, r6
 8000cf0:	464b      	mov	r3, r9
 8000cf2:	4079      	eors	r1, r7
 8000cf4:	1c68      	adds	r0, r5, #1
 8000cf6:	2b0f      	cmp	r3, #15
 8000cf8:	d81c      	bhi.n	8000d34 <__aeabi_fmul+0xa4>
 8000cfa:	4a76      	ldr	r2, [pc, #472]	; (8000ed4 <__aeabi_fmul+0x244>)
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	58d3      	ldr	r3, [r2, r3]
 8000d00:	469f      	mov	pc, r3
 8000d02:	0039      	movs	r1, r7
 8000d04:	4644      	mov	r4, r8
 8000d06:	46e2      	mov	sl, ip
 8000d08:	4653      	mov	r3, sl
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d00f      	beq.n	8000d2e <__aeabi_fmul+0x9e>
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d100      	bne.n	8000d14 <__aeabi_fmul+0x84>
 8000d12:	e0d7      	b.n	8000ec4 <__aeabi_fmul+0x234>
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d137      	bne.n	8000d88 <__aeabi_fmul+0xf8>
 8000d18:	2000      	movs	r0, #0
 8000d1a:	2400      	movs	r4, #0
 8000d1c:	05c0      	lsls	r0, r0, #23
 8000d1e:	4320      	orrs	r0, r4
 8000d20:	07c9      	lsls	r1, r1, #31
 8000d22:	4308      	orrs	r0, r1
 8000d24:	bce0      	pop	{r5, r6, r7}
 8000d26:	46ba      	mov	sl, r7
 8000d28:	46b1      	mov	r9, r6
 8000d2a:	46a8      	mov	r8, r5
 8000d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d2e:	20ff      	movs	r0, #255	; 0xff
 8000d30:	2400      	movs	r4, #0
 8000d32:	e7f3      	b.n	8000d1c <__aeabi_fmul+0x8c>
 8000d34:	0c26      	lsrs	r6, r4, #16
 8000d36:	0424      	lsls	r4, r4, #16
 8000d38:	0c22      	lsrs	r2, r4, #16
 8000d3a:	4644      	mov	r4, r8
 8000d3c:	0424      	lsls	r4, r4, #16
 8000d3e:	0c24      	lsrs	r4, r4, #16
 8000d40:	4643      	mov	r3, r8
 8000d42:	0027      	movs	r7, r4
 8000d44:	0c1b      	lsrs	r3, r3, #16
 8000d46:	4357      	muls	r7, r2
 8000d48:	4374      	muls	r4, r6
 8000d4a:	435a      	muls	r2, r3
 8000d4c:	435e      	muls	r6, r3
 8000d4e:	1912      	adds	r2, r2, r4
 8000d50:	0c3b      	lsrs	r3, r7, #16
 8000d52:	189b      	adds	r3, r3, r2
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d903      	bls.n	8000d60 <__aeabi_fmul+0xd0>
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	0252      	lsls	r2, r2, #9
 8000d5c:	4694      	mov	ip, r2
 8000d5e:	4466      	add	r6, ip
 8000d60:	043f      	lsls	r7, r7, #16
 8000d62:	041a      	lsls	r2, r3, #16
 8000d64:	0c3f      	lsrs	r7, r7, #16
 8000d66:	19d2      	adds	r2, r2, r7
 8000d68:	0194      	lsls	r4, r2, #6
 8000d6a:	1e67      	subs	r7, r4, #1
 8000d6c:	41bc      	sbcs	r4, r7
 8000d6e:	0c1b      	lsrs	r3, r3, #16
 8000d70:	0e92      	lsrs	r2, r2, #26
 8000d72:	199b      	adds	r3, r3, r6
 8000d74:	4314      	orrs	r4, r2
 8000d76:	019b      	lsls	r3, r3, #6
 8000d78:	431c      	orrs	r4, r3
 8000d7a:	011b      	lsls	r3, r3, #4
 8000d7c:	d400      	bmi.n	8000d80 <__aeabi_fmul+0xf0>
 8000d7e:	e09b      	b.n	8000eb8 <__aeabi_fmul+0x228>
 8000d80:	2301      	movs	r3, #1
 8000d82:	0862      	lsrs	r2, r4, #1
 8000d84:	401c      	ands	r4, r3
 8000d86:	4314      	orrs	r4, r2
 8000d88:	0002      	movs	r2, r0
 8000d8a:	327f      	adds	r2, #127	; 0x7f
 8000d8c:	2a00      	cmp	r2, #0
 8000d8e:	dd64      	ble.n	8000e5a <__aeabi_fmul+0x1ca>
 8000d90:	0763      	lsls	r3, r4, #29
 8000d92:	d004      	beq.n	8000d9e <__aeabi_fmul+0x10e>
 8000d94:	230f      	movs	r3, #15
 8000d96:	4023      	ands	r3, r4
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d000      	beq.n	8000d9e <__aeabi_fmul+0x10e>
 8000d9c:	3404      	adds	r4, #4
 8000d9e:	0123      	lsls	r3, r4, #4
 8000da0:	d503      	bpl.n	8000daa <__aeabi_fmul+0x11a>
 8000da2:	0002      	movs	r2, r0
 8000da4:	4b4c      	ldr	r3, [pc, #304]	; (8000ed8 <__aeabi_fmul+0x248>)
 8000da6:	3280      	adds	r2, #128	; 0x80
 8000da8:	401c      	ands	r4, r3
 8000daa:	2afe      	cmp	r2, #254	; 0xfe
 8000dac:	dcbf      	bgt.n	8000d2e <__aeabi_fmul+0x9e>
 8000dae:	01a4      	lsls	r4, r4, #6
 8000db0:	0a64      	lsrs	r4, r4, #9
 8000db2:	b2d0      	uxtb	r0, r2
 8000db4:	e7b2      	b.n	8000d1c <__aeabi_fmul+0x8c>
 8000db6:	4643      	mov	r3, r8
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d13d      	bne.n	8000e38 <__aeabi_fmul+0x1a8>
 8000dbc:	464a      	mov	r2, r9
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	4691      	mov	r9, r2
 8000dc4:	469c      	mov	ip, r3
 8000dc6:	e792      	b.n	8000cee <__aeabi_fmul+0x5e>
 8000dc8:	2c00      	cmp	r4, #0
 8000dca:	d129      	bne.n	8000e20 <__aeabi_fmul+0x190>
 8000dcc:	2304      	movs	r3, #4
 8000dce:	4699      	mov	r9, r3
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	2500      	movs	r5, #0
 8000dd4:	469a      	mov	sl, r3
 8000dd6:	e774      	b.n	8000cc2 <__aeabi_fmul+0x32>
 8000dd8:	2c00      	cmp	r4, #0
 8000dda:	d11b      	bne.n	8000e14 <__aeabi_fmul+0x184>
 8000ddc:	2308      	movs	r3, #8
 8000dde:	4699      	mov	r9, r3
 8000de0:	3b06      	subs	r3, #6
 8000de2:	25ff      	movs	r5, #255	; 0xff
 8000de4:	469a      	mov	sl, r3
 8000de6:	e76c      	b.n	8000cc2 <__aeabi_fmul+0x32>
 8000de8:	4643      	mov	r3, r8
 8000dea:	35ff      	adds	r5, #255	; 0xff
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d10b      	bne.n	8000e08 <__aeabi_fmul+0x178>
 8000df0:	2302      	movs	r3, #2
 8000df2:	464a      	mov	r2, r9
 8000df4:	431a      	orrs	r2, r3
 8000df6:	4691      	mov	r9, r2
 8000df8:	469c      	mov	ip, r3
 8000dfa:	e778      	b.n	8000cee <__aeabi_fmul+0x5e>
 8000dfc:	4653      	mov	r3, sl
 8000dfe:	0031      	movs	r1, r6
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d000      	beq.n	8000e06 <__aeabi_fmul+0x176>
 8000e04:	e783      	b.n	8000d0e <__aeabi_fmul+0x7e>
 8000e06:	e792      	b.n	8000d2e <__aeabi_fmul+0x9e>
 8000e08:	2303      	movs	r3, #3
 8000e0a:	464a      	mov	r2, r9
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	4691      	mov	r9, r2
 8000e10:	469c      	mov	ip, r3
 8000e12:	e76c      	b.n	8000cee <__aeabi_fmul+0x5e>
 8000e14:	230c      	movs	r3, #12
 8000e16:	4699      	mov	r9, r3
 8000e18:	3b09      	subs	r3, #9
 8000e1a:	25ff      	movs	r5, #255	; 0xff
 8000e1c:	469a      	mov	sl, r3
 8000e1e:	e750      	b.n	8000cc2 <__aeabi_fmul+0x32>
 8000e20:	0020      	movs	r0, r4
 8000e22:	f002 f96f 	bl	8003104 <__clzsi2>
 8000e26:	2576      	movs	r5, #118	; 0x76
 8000e28:	1f43      	subs	r3, r0, #5
 8000e2a:	409c      	lsls	r4, r3
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	426d      	negs	r5, r5
 8000e30:	4699      	mov	r9, r3
 8000e32:	469a      	mov	sl, r3
 8000e34:	1a2d      	subs	r5, r5, r0
 8000e36:	e744      	b.n	8000cc2 <__aeabi_fmul+0x32>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	f002 f963 	bl	8003104 <__clzsi2>
 8000e3e:	4642      	mov	r2, r8
 8000e40:	1f43      	subs	r3, r0, #5
 8000e42:	409a      	lsls	r2, r3
 8000e44:	2300      	movs	r3, #0
 8000e46:	1a2d      	subs	r5, r5, r0
 8000e48:	4690      	mov	r8, r2
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	3d76      	subs	r5, #118	; 0x76
 8000e4e:	e74e      	b.n	8000cee <__aeabi_fmul+0x5e>
 8000e50:	2480      	movs	r4, #128	; 0x80
 8000e52:	2100      	movs	r1, #0
 8000e54:	20ff      	movs	r0, #255	; 0xff
 8000e56:	03e4      	lsls	r4, r4, #15
 8000e58:	e760      	b.n	8000d1c <__aeabi_fmul+0x8c>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	1a9b      	subs	r3, r3, r2
 8000e5e:	2b1b      	cmp	r3, #27
 8000e60:	dd00      	ble.n	8000e64 <__aeabi_fmul+0x1d4>
 8000e62:	e759      	b.n	8000d18 <__aeabi_fmul+0x88>
 8000e64:	0022      	movs	r2, r4
 8000e66:	309e      	adds	r0, #158	; 0x9e
 8000e68:	40da      	lsrs	r2, r3
 8000e6a:	4084      	lsls	r4, r0
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	1e62      	subs	r2, r4, #1
 8000e70:	4194      	sbcs	r4, r2
 8000e72:	431c      	orrs	r4, r3
 8000e74:	0763      	lsls	r3, r4, #29
 8000e76:	d004      	beq.n	8000e82 <__aeabi_fmul+0x1f2>
 8000e78:	230f      	movs	r3, #15
 8000e7a:	4023      	ands	r3, r4
 8000e7c:	2b04      	cmp	r3, #4
 8000e7e:	d000      	beq.n	8000e82 <__aeabi_fmul+0x1f2>
 8000e80:	3404      	adds	r4, #4
 8000e82:	0163      	lsls	r3, r4, #5
 8000e84:	d51a      	bpl.n	8000ebc <__aeabi_fmul+0x22c>
 8000e86:	2001      	movs	r0, #1
 8000e88:	2400      	movs	r4, #0
 8000e8a:	e747      	b.n	8000d1c <__aeabi_fmul+0x8c>
 8000e8c:	2080      	movs	r0, #128	; 0x80
 8000e8e:	03c0      	lsls	r0, r0, #15
 8000e90:	4204      	tst	r4, r0
 8000e92:	d009      	beq.n	8000ea8 <__aeabi_fmul+0x218>
 8000e94:	4643      	mov	r3, r8
 8000e96:	4203      	tst	r3, r0
 8000e98:	d106      	bne.n	8000ea8 <__aeabi_fmul+0x218>
 8000e9a:	4644      	mov	r4, r8
 8000e9c:	4304      	orrs	r4, r0
 8000e9e:	0264      	lsls	r4, r4, #9
 8000ea0:	0039      	movs	r1, r7
 8000ea2:	20ff      	movs	r0, #255	; 0xff
 8000ea4:	0a64      	lsrs	r4, r4, #9
 8000ea6:	e739      	b.n	8000d1c <__aeabi_fmul+0x8c>
 8000ea8:	2080      	movs	r0, #128	; 0x80
 8000eaa:	03c0      	lsls	r0, r0, #15
 8000eac:	4304      	orrs	r4, r0
 8000eae:	0264      	lsls	r4, r4, #9
 8000eb0:	0031      	movs	r1, r6
 8000eb2:	20ff      	movs	r0, #255	; 0xff
 8000eb4:	0a64      	lsrs	r4, r4, #9
 8000eb6:	e731      	b.n	8000d1c <__aeabi_fmul+0x8c>
 8000eb8:	0028      	movs	r0, r5
 8000eba:	e765      	b.n	8000d88 <__aeabi_fmul+0xf8>
 8000ebc:	01a4      	lsls	r4, r4, #6
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	0a64      	lsrs	r4, r4, #9
 8000ec2:	e72b      	b.n	8000d1c <__aeabi_fmul+0x8c>
 8000ec4:	2080      	movs	r0, #128	; 0x80
 8000ec6:	03c0      	lsls	r0, r0, #15
 8000ec8:	4304      	orrs	r4, r0
 8000eca:	0264      	lsls	r4, r4, #9
 8000ecc:	20ff      	movs	r0, #255	; 0xff
 8000ece:	0a64      	lsrs	r4, r4, #9
 8000ed0:	e724      	b.n	8000d1c <__aeabi_fmul+0x8c>
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	08007be4 	.word	0x08007be4
 8000ed8:	f7ffffff 	.word	0xf7ffffff

08000edc <__aeabi_fsub>:
 8000edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ede:	46ce      	mov	lr, r9
 8000ee0:	4647      	mov	r7, r8
 8000ee2:	0243      	lsls	r3, r0, #9
 8000ee4:	0a5b      	lsrs	r3, r3, #9
 8000ee6:	024e      	lsls	r6, r1, #9
 8000ee8:	00da      	lsls	r2, r3, #3
 8000eea:	4694      	mov	ip, r2
 8000eec:	0a72      	lsrs	r2, r6, #9
 8000eee:	4691      	mov	r9, r2
 8000ef0:	0045      	lsls	r5, r0, #1
 8000ef2:	004a      	lsls	r2, r1, #1
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	0e2d      	lsrs	r5, r5, #24
 8000ef8:	001f      	movs	r7, r3
 8000efa:	0fc4      	lsrs	r4, r0, #31
 8000efc:	0e12      	lsrs	r2, r2, #24
 8000efe:	0fc9      	lsrs	r1, r1, #31
 8000f00:	09b6      	lsrs	r6, r6, #6
 8000f02:	2aff      	cmp	r2, #255	; 0xff
 8000f04:	d05b      	beq.n	8000fbe <__aeabi_fsub+0xe2>
 8000f06:	2001      	movs	r0, #1
 8000f08:	4041      	eors	r1, r0
 8000f0a:	428c      	cmp	r4, r1
 8000f0c:	d039      	beq.n	8000f82 <__aeabi_fsub+0xa6>
 8000f0e:	1aa8      	subs	r0, r5, r2
 8000f10:	2800      	cmp	r0, #0
 8000f12:	dd5a      	ble.n	8000fca <__aeabi_fsub+0xee>
 8000f14:	2a00      	cmp	r2, #0
 8000f16:	d06a      	beq.n	8000fee <__aeabi_fsub+0x112>
 8000f18:	2dff      	cmp	r5, #255	; 0xff
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_fsub+0x42>
 8000f1c:	e0d9      	b.n	80010d2 <__aeabi_fsub+0x1f6>
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	04d2      	lsls	r2, r2, #19
 8000f22:	4316      	orrs	r6, r2
 8000f24:	281b      	cmp	r0, #27
 8000f26:	dc00      	bgt.n	8000f2a <__aeabi_fsub+0x4e>
 8000f28:	e0e9      	b.n	80010fe <__aeabi_fsub+0x222>
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	4663      	mov	r3, ip
 8000f2e:	1a18      	subs	r0, r3, r0
 8000f30:	0143      	lsls	r3, r0, #5
 8000f32:	d400      	bmi.n	8000f36 <__aeabi_fsub+0x5a>
 8000f34:	e0b4      	b.n	80010a0 <__aeabi_fsub+0x1c4>
 8000f36:	0180      	lsls	r0, r0, #6
 8000f38:	0987      	lsrs	r7, r0, #6
 8000f3a:	0038      	movs	r0, r7
 8000f3c:	f002 f8e2 	bl	8003104 <__clzsi2>
 8000f40:	3805      	subs	r0, #5
 8000f42:	4087      	lsls	r7, r0
 8000f44:	4285      	cmp	r5, r0
 8000f46:	dc00      	bgt.n	8000f4a <__aeabi_fsub+0x6e>
 8000f48:	e0cc      	b.n	80010e4 <__aeabi_fsub+0x208>
 8000f4a:	1a2d      	subs	r5, r5, r0
 8000f4c:	48b5      	ldr	r0, [pc, #724]	; (8001224 <__aeabi_fsub+0x348>)
 8000f4e:	4038      	ands	r0, r7
 8000f50:	0743      	lsls	r3, r0, #29
 8000f52:	d004      	beq.n	8000f5e <__aeabi_fsub+0x82>
 8000f54:	230f      	movs	r3, #15
 8000f56:	4003      	ands	r3, r0
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d000      	beq.n	8000f5e <__aeabi_fsub+0x82>
 8000f5c:	3004      	adds	r0, #4
 8000f5e:	0143      	lsls	r3, r0, #5
 8000f60:	d400      	bmi.n	8000f64 <__aeabi_fsub+0x88>
 8000f62:	e0a0      	b.n	80010a6 <__aeabi_fsub+0x1ca>
 8000f64:	1c6a      	adds	r2, r5, #1
 8000f66:	2dfe      	cmp	r5, #254	; 0xfe
 8000f68:	d100      	bne.n	8000f6c <__aeabi_fsub+0x90>
 8000f6a:	e08d      	b.n	8001088 <__aeabi_fsub+0x1ac>
 8000f6c:	0180      	lsls	r0, r0, #6
 8000f6e:	0a47      	lsrs	r7, r0, #9
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	05d0      	lsls	r0, r2, #23
 8000f74:	4338      	orrs	r0, r7
 8000f76:	07e4      	lsls	r4, r4, #31
 8000f78:	4320      	orrs	r0, r4
 8000f7a:	bcc0      	pop	{r6, r7}
 8000f7c:	46b9      	mov	r9, r7
 8000f7e:	46b0      	mov	r8, r6
 8000f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f82:	1aa8      	subs	r0, r5, r2
 8000f84:	4680      	mov	r8, r0
 8000f86:	2800      	cmp	r0, #0
 8000f88:	dd45      	ble.n	8001016 <__aeabi_fsub+0x13a>
 8000f8a:	2a00      	cmp	r2, #0
 8000f8c:	d070      	beq.n	8001070 <__aeabi_fsub+0x194>
 8000f8e:	2dff      	cmp	r5, #255	; 0xff
 8000f90:	d100      	bne.n	8000f94 <__aeabi_fsub+0xb8>
 8000f92:	e09e      	b.n	80010d2 <__aeabi_fsub+0x1f6>
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	04db      	lsls	r3, r3, #19
 8000f98:	431e      	orrs	r6, r3
 8000f9a:	4643      	mov	r3, r8
 8000f9c:	2b1b      	cmp	r3, #27
 8000f9e:	dc00      	bgt.n	8000fa2 <__aeabi_fsub+0xc6>
 8000fa0:	e0d2      	b.n	8001148 <__aeabi_fsub+0x26c>
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	4460      	add	r0, ip
 8000fa6:	0143      	lsls	r3, r0, #5
 8000fa8:	d57a      	bpl.n	80010a0 <__aeabi_fsub+0x1c4>
 8000faa:	3501      	adds	r5, #1
 8000fac:	2dff      	cmp	r5, #255	; 0xff
 8000fae:	d06b      	beq.n	8001088 <__aeabi_fsub+0x1ac>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	4a9d      	ldr	r2, [pc, #628]	; (8001228 <__aeabi_fsub+0x34c>)
 8000fb4:	4003      	ands	r3, r0
 8000fb6:	0840      	lsrs	r0, r0, #1
 8000fb8:	4010      	ands	r0, r2
 8000fba:	4318      	orrs	r0, r3
 8000fbc:	e7c8      	b.n	8000f50 <__aeabi_fsub+0x74>
 8000fbe:	2e00      	cmp	r6, #0
 8000fc0:	d020      	beq.n	8001004 <__aeabi_fsub+0x128>
 8000fc2:	428c      	cmp	r4, r1
 8000fc4:	d023      	beq.n	800100e <__aeabi_fsub+0x132>
 8000fc6:	0028      	movs	r0, r5
 8000fc8:	38ff      	subs	r0, #255	; 0xff
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	d039      	beq.n	8001042 <__aeabi_fsub+0x166>
 8000fce:	1b57      	subs	r7, r2, r5
 8000fd0:	2d00      	cmp	r5, #0
 8000fd2:	d000      	beq.n	8000fd6 <__aeabi_fsub+0xfa>
 8000fd4:	e09d      	b.n	8001112 <__aeabi_fsub+0x236>
 8000fd6:	4663      	mov	r3, ip
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d100      	bne.n	8000fde <__aeabi_fsub+0x102>
 8000fdc:	e0db      	b.n	8001196 <__aeabi_fsub+0x2ba>
 8000fde:	1e7b      	subs	r3, r7, #1
 8000fe0:	2f01      	cmp	r7, #1
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_fsub+0x10a>
 8000fe4:	e10d      	b.n	8001202 <__aeabi_fsub+0x326>
 8000fe6:	2fff      	cmp	r7, #255	; 0xff
 8000fe8:	d071      	beq.n	80010ce <__aeabi_fsub+0x1f2>
 8000fea:	001f      	movs	r7, r3
 8000fec:	e098      	b.n	8001120 <__aeabi_fsub+0x244>
 8000fee:	2e00      	cmp	r6, #0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_fsub+0x118>
 8000ff2:	e0a7      	b.n	8001144 <__aeabi_fsub+0x268>
 8000ff4:	1e42      	subs	r2, r0, #1
 8000ff6:	2801      	cmp	r0, #1
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_fsub+0x120>
 8000ffa:	e0e6      	b.n	80011ca <__aeabi_fsub+0x2ee>
 8000ffc:	28ff      	cmp	r0, #255	; 0xff
 8000ffe:	d068      	beq.n	80010d2 <__aeabi_fsub+0x1f6>
 8001000:	0010      	movs	r0, r2
 8001002:	e78f      	b.n	8000f24 <__aeabi_fsub+0x48>
 8001004:	2001      	movs	r0, #1
 8001006:	4041      	eors	r1, r0
 8001008:	42a1      	cmp	r1, r4
 800100a:	d000      	beq.n	800100e <__aeabi_fsub+0x132>
 800100c:	e77f      	b.n	8000f0e <__aeabi_fsub+0x32>
 800100e:	20ff      	movs	r0, #255	; 0xff
 8001010:	4240      	negs	r0, r0
 8001012:	4680      	mov	r8, r0
 8001014:	44a8      	add	r8, r5
 8001016:	4640      	mov	r0, r8
 8001018:	2800      	cmp	r0, #0
 800101a:	d038      	beq.n	800108e <__aeabi_fsub+0x1b2>
 800101c:	1b51      	subs	r1, r2, r5
 800101e:	2d00      	cmp	r5, #0
 8001020:	d100      	bne.n	8001024 <__aeabi_fsub+0x148>
 8001022:	e0ae      	b.n	8001182 <__aeabi_fsub+0x2a6>
 8001024:	2aff      	cmp	r2, #255	; 0xff
 8001026:	d100      	bne.n	800102a <__aeabi_fsub+0x14e>
 8001028:	e0df      	b.n	80011ea <__aeabi_fsub+0x30e>
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	4660      	mov	r0, ip
 800102e:	04db      	lsls	r3, r3, #19
 8001030:	4318      	orrs	r0, r3
 8001032:	4684      	mov	ip, r0
 8001034:	291b      	cmp	r1, #27
 8001036:	dc00      	bgt.n	800103a <__aeabi_fsub+0x15e>
 8001038:	e0d9      	b.n	80011ee <__aeabi_fsub+0x312>
 800103a:	2001      	movs	r0, #1
 800103c:	0015      	movs	r5, r2
 800103e:	1980      	adds	r0, r0, r6
 8001040:	e7b1      	b.n	8000fa6 <__aeabi_fsub+0xca>
 8001042:	20fe      	movs	r0, #254	; 0xfe
 8001044:	1c6a      	adds	r2, r5, #1
 8001046:	4210      	tst	r0, r2
 8001048:	d171      	bne.n	800112e <__aeabi_fsub+0x252>
 800104a:	2d00      	cmp	r5, #0
 800104c:	d000      	beq.n	8001050 <__aeabi_fsub+0x174>
 800104e:	e0a6      	b.n	800119e <__aeabi_fsub+0x2c2>
 8001050:	4663      	mov	r3, ip
 8001052:	2b00      	cmp	r3, #0
 8001054:	d100      	bne.n	8001058 <__aeabi_fsub+0x17c>
 8001056:	e0d9      	b.n	800120c <__aeabi_fsub+0x330>
 8001058:	2200      	movs	r2, #0
 800105a:	2e00      	cmp	r6, #0
 800105c:	d100      	bne.n	8001060 <__aeabi_fsub+0x184>
 800105e:	e788      	b.n	8000f72 <__aeabi_fsub+0x96>
 8001060:	1b98      	subs	r0, r3, r6
 8001062:	0143      	lsls	r3, r0, #5
 8001064:	d400      	bmi.n	8001068 <__aeabi_fsub+0x18c>
 8001066:	e0e1      	b.n	800122c <__aeabi_fsub+0x350>
 8001068:	4663      	mov	r3, ip
 800106a:	000c      	movs	r4, r1
 800106c:	1af0      	subs	r0, r6, r3
 800106e:	e76f      	b.n	8000f50 <__aeabi_fsub+0x74>
 8001070:	2e00      	cmp	r6, #0
 8001072:	d100      	bne.n	8001076 <__aeabi_fsub+0x19a>
 8001074:	e0b7      	b.n	80011e6 <__aeabi_fsub+0x30a>
 8001076:	0002      	movs	r2, r0
 8001078:	3a01      	subs	r2, #1
 800107a:	2801      	cmp	r0, #1
 800107c:	d100      	bne.n	8001080 <__aeabi_fsub+0x1a4>
 800107e:	e09c      	b.n	80011ba <__aeabi_fsub+0x2de>
 8001080:	28ff      	cmp	r0, #255	; 0xff
 8001082:	d026      	beq.n	80010d2 <__aeabi_fsub+0x1f6>
 8001084:	4690      	mov	r8, r2
 8001086:	e788      	b.n	8000f9a <__aeabi_fsub+0xbe>
 8001088:	22ff      	movs	r2, #255	; 0xff
 800108a:	2700      	movs	r7, #0
 800108c:	e771      	b.n	8000f72 <__aeabi_fsub+0x96>
 800108e:	20fe      	movs	r0, #254	; 0xfe
 8001090:	1c6a      	adds	r2, r5, #1
 8001092:	4210      	tst	r0, r2
 8001094:	d064      	beq.n	8001160 <__aeabi_fsub+0x284>
 8001096:	2aff      	cmp	r2, #255	; 0xff
 8001098:	d0f6      	beq.n	8001088 <__aeabi_fsub+0x1ac>
 800109a:	0015      	movs	r5, r2
 800109c:	4466      	add	r6, ip
 800109e:	0870      	lsrs	r0, r6, #1
 80010a0:	0743      	lsls	r3, r0, #29
 80010a2:	d000      	beq.n	80010a6 <__aeabi_fsub+0x1ca>
 80010a4:	e756      	b.n	8000f54 <__aeabi_fsub+0x78>
 80010a6:	08c3      	lsrs	r3, r0, #3
 80010a8:	2dff      	cmp	r5, #255	; 0xff
 80010aa:	d012      	beq.n	80010d2 <__aeabi_fsub+0x1f6>
 80010ac:	025b      	lsls	r3, r3, #9
 80010ae:	0a5f      	lsrs	r7, r3, #9
 80010b0:	b2ea      	uxtb	r2, r5
 80010b2:	e75e      	b.n	8000f72 <__aeabi_fsub+0x96>
 80010b4:	4662      	mov	r2, ip
 80010b6:	2a00      	cmp	r2, #0
 80010b8:	d100      	bne.n	80010bc <__aeabi_fsub+0x1e0>
 80010ba:	e096      	b.n	80011ea <__aeabi_fsub+0x30e>
 80010bc:	2e00      	cmp	r6, #0
 80010be:	d008      	beq.n	80010d2 <__aeabi_fsub+0x1f6>
 80010c0:	2280      	movs	r2, #128	; 0x80
 80010c2:	03d2      	lsls	r2, r2, #15
 80010c4:	4213      	tst	r3, r2
 80010c6:	d004      	beq.n	80010d2 <__aeabi_fsub+0x1f6>
 80010c8:	4648      	mov	r0, r9
 80010ca:	4210      	tst	r0, r2
 80010cc:	d101      	bne.n	80010d2 <__aeabi_fsub+0x1f6>
 80010ce:	000c      	movs	r4, r1
 80010d0:	464b      	mov	r3, r9
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0d8      	beq.n	8001088 <__aeabi_fsub+0x1ac>
 80010d6:	2780      	movs	r7, #128	; 0x80
 80010d8:	03ff      	lsls	r7, r7, #15
 80010da:	431f      	orrs	r7, r3
 80010dc:	027f      	lsls	r7, r7, #9
 80010de:	22ff      	movs	r2, #255	; 0xff
 80010e0:	0a7f      	lsrs	r7, r7, #9
 80010e2:	e746      	b.n	8000f72 <__aeabi_fsub+0x96>
 80010e4:	2320      	movs	r3, #32
 80010e6:	003a      	movs	r2, r7
 80010e8:	1b45      	subs	r5, r0, r5
 80010ea:	0038      	movs	r0, r7
 80010ec:	3501      	adds	r5, #1
 80010ee:	40ea      	lsrs	r2, r5
 80010f0:	1b5d      	subs	r5, r3, r5
 80010f2:	40a8      	lsls	r0, r5
 80010f4:	1e43      	subs	r3, r0, #1
 80010f6:	4198      	sbcs	r0, r3
 80010f8:	2500      	movs	r5, #0
 80010fa:	4310      	orrs	r0, r2
 80010fc:	e728      	b.n	8000f50 <__aeabi_fsub+0x74>
 80010fe:	2320      	movs	r3, #32
 8001100:	1a1b      	subs	r3, r3, r0
 8001102:	0032      	movs	r2, r6
 8001104:	409e      	lsls	r6, r3
 8001106:	40c2      	lsrs	r2, r0
 8001108:	0030      	movs	r0, r6
 800110a:	1e43      	subs	r3, r0, #1
 800110c:	4198      	sbcs	r0, r3
 800110e:	4310      	orrs	r0, r2
 8001110:	e70c      	b.n	8000f2c <__aeabi_fsub+0x50>
 8001112:	2aff      	cmp	r2, #255	; 0xff
 8001114:	d0db      	beq.n	80010ce <__aeabi_fsub+0x1f2>
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	4660      	mov	r0, ip
 800111a:	04db      	lsls	r3, r3, #19
 800111c:	4318      	orrs	r0, r3
 800111e:	4684      	mov	ip, r0
 8001120:	2f1b      	cmp	r7, #27
 8001122:	dd56      	ble.n	80011d2 <__aeabi_fsub+0x2f6>
 8001124:	2001      	movs	r0, #1
 8001126:	000c      	movs	r4, r1
 8001128:	0015      	movs	r5, r2
 800112a:	1a30      	subs	r0, r6, r0
 800112c:	e700      	b.n	8000f30 <__aeabi_fsub+0x54>
 800112e:	4663      	mov	r3, ip
 8001130:	1b9f      	subs	r7, r3, r6
 8001132:	017b      	lsls	r3, r7, #5
 8001134:	d43d      	bmi.n	80011b2 <__aeabi_fsub+0x2d6>
 8001136:	2f00      	cmp	r7, #0
 8001138:	d000      	beq.n	800113c <__aeabi_fsub+0x260>
 800113a:	e6fe      	b.n	8000f3a <__aeabi_fsub+0x5e>
 800113c:	2400      	movs	r4, #0
 800113e:	2200      	movs	r2, #0
 8001140:	2700      	movs	r7, #0
 8001142:	e716      	b.n	8000f72 <__aeabi_fsub+0x96>
 8001144:	0005      	movs	r5, r0
 8001146:	e7af      	b.n	80010a8 <__aeabi_fsub+0x1cc>
 8001148:	0032      	movs	r2, r6
 800114a:	4643      	mov	r3, r8
 800114c:	4641      	mov	r1, r8
 800114e:	40da      	lsrs	r2, r3
 8001150:	2320      	movs	r3, #32
 8001152:	1a5b      	subs	r3, r3, r1
 8001154:	409e      	lsls	r6, r3
 8001156:	0030      	movs	r0, r6
 8001158:	1e43      	subs	r3, r0, #1
 800115a:	4198      	sbcs	r0, r3
 800115c:	4310      	orrs	r0, r2
 800115e:	e721      	b.n	8000fa4 <__aeabi_fsub+0xc8>
 8001160:	2d00      	cmp	r5, #0
 8001162:	d1a7      	bne.n	80010b4 <__aeabi_fsub+0x1d8>
 8001164:	4663      	mov	r3, ip
 8001166:	2b00      	cmp	r3, #0
 8001168:	d059      	beq.n	800121e <__aeabi_fsub+0x342>
 800116a:	2200      	movs	r2, #0
 800116c:	2e00      	cmp	r6, #0
 800116e:	d100      	bne.n	8001172 <__aeabi_fsub+0x296>
 8001170:	e6ff      	b.n	8000f72 <__aeabi_fsub+0x96>
 8001172:	0030      	movs	r0, r6
 8001174:	4460      	add	r0, ip
 8001176:	0143      	lsls	r3, r0, #5
 8001178:	d592      	bpl.n	80010a0 <__aeabi_fsub+0x1c4>
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <__aeabi_fsub+0x348>)
 800117c:	3501      	adds	r5, #1
 800117e:	4018      	ands	r0, r3
 8001180:	e78e      	b.n	80010a0 <__aeabi_fsub+0x1c4>
 8001182:	4663      	mov	r3, ip
 8001184:	2b00      	cmp	r3, #0
 8001186:	d047      	beq.n	8001218 <__aeabi_fsub+0x33c>
 8001188:	1e4b      	subs	r3, r1, #1
 800118a:	2901      	cmp	r1, #1
 800118c:	d015      	beq.n	80011ba <__aeabi_fsub+0x2de>
 800118e:	29ff      	cmp	r1, #255	; 0xff
 8001190:	d02b      	beq.n	80011ea <__aeabi_fsub+0x30e>
 8001192:	0019      	movs	r1, r3
 8001194:	e74e      	b.n	8001034 <__aeabi_fsub+0x158>
 8001196:	000c      	movs	r4, r1
 8001198:	464b      	mov	r3, r9
 800119a:	003d      	movs	r5, r7
 800119c:	e784      	b.n	80010a8 <__aeabi_fsub+0x1cc>
 800119e:	4662      	mov	r2, ip
 80011a0:	2a00      	cmp	r2, #0
 80011a2:	d18b      	bne.n	80010bc <__aeabi_fsub+0x1e0>
 80011a4:	2e00      	cmp	r6, #0
 80011a6:	d192      	bne.n	80010ce <__aeabi_fsub+0x1f2>
 80011a8:	2780      	movs	r7, #128	; 0x80
 80011aa:	2400      	movs	r4, #0
 80011ac:	22ff      	movs	r2, #255	; 0xff
 80011ae:	03ff      	lsls	r7, r7, #15
 80011b0:	e6df      	b.n	8000f72 <__aeabi_fsub+0x96>
 80011b2:	4663      	mov	r3, ip
 80011b4:	000c      	movs	r4, r1
 80011b6:	1af7      	subs	r7, r6, r3
 80011b8:	e6bf      	b.n	8000f3a <__aeabi_fsub+0x5e>
 80011ba:	0030      	movs	r0, r6
 80011bc:	4460      	add	r0, ip
 80011be:	2501      	movs	r5, #1
 80011c0:	0143      	lsls	r3, r0, #5
 80011c2:	d400      	bmi.n	80011c6 <__aeabi_fsub+0x2ea>
 80011c4:	e76c      	b.n	80010a0 <__aeabi_fsub+0x1c4>
 80011c6:	2502      	movs	r5, #2
 80011c8:	e6f2      	b.n	8000fb0 <__aeabi_fsub+0xd4>
 80011ca:	4663      	mov	r3, ip
 80011cc:	2501      	movs	r5, #1
 80011ce:	1b98      	subs	r0, r3, r6
 80011d0:	e6ae      	b.n	8000f30 <__aeabi_fsub+0x54>
 80011d2:	2320      	movs	r3, #32
 80011d4:	4664      	mov	r4, ip
 80011d6:	4660      	mov	r0, ip
 80011d8:	40fc      	lsrs	r4, r7
 80011da:	1bdf      	subs	r7, r3, r7
 80011dc:	40b8      	lsls	r0, r7
 80011de:	1e43      	subs	r3, r0, #1
 80011e0:	4198      	sbcs	r0, r3
 80011e2:	4320      	orrs	r0, r4
 80011e4:	e79f      	b.n	8001126 <__aeabi_fsub+0x24a>
 80011e6:	0005      	movs	r5, r0
 80011e8:	e75e      	b.n	80010a8 <__aeabi_fsub+0x1cc>
 80011ea:	464b      	mov	r3, r9
 80011ec:	e771      	b.n	80010d2 <__aeabi_fsub+0x1f6>
 80011ee:	2320      	movs	r3, #32
 80011f0:	4665      	mov	r5, ip
 80011f2:	4660      	mov	r0, ip
 80011f4:	40cd      	lsrs	r5, r1
 80011f6:	1a59      	subs	r1, r3, r1
 80011f8:	4088      	lsls	r0, r1
 80011fa:	1e43      	subs	r3, r0, #1
 80011fc:	4198      	sbcs	r0, r3
 80011fe:	4328      	orrs	r0, r5
 8001200:	e71c      	b.n	800103c <__aeabi_fsub+0x160>
 8001202:	4663      	mov	r3, ip
 8001204:	000c      	movs	r4, r1
 8001206:	2501      	movs	r5, #1
 8001208:	1af0      	subs	r0, r6, r3
 800120a:	e691      	b.n	8000f30 <__aeabi_fsub+0x54>
 800120c:	2e00      	cmp	r6, #0
 800120e:	d095      	beq.n	800113c <__aeabi_fsub+0x260>
 8001210:	000c      	movs	r4, r1
 8001212:	464f      	mov	r7, r9
 8001214:	2200      	movs	r2, #0
 8001216:	e6ac      	b.n	8000f72 <__aeabi_fsub+0x96>
 8001218:	464b      	mov	r3, r9
 800121a:	000d      	movs	r5, r1
 800121c:	e744      	b.n	80010a8 <__aeabi_fsub+0x1cc>
 800121e:	464f      	mov	r7, r9
 8001220:	2200      	movs	r2, #0
 8001222:	e6a6      	b.n	8000f72 <__aeabi_fsub+0x96>
 8001224:	fbffffff 	.word	0xfbffffff
 8001228:	7dffffff 	.word	0x7dffffff
 800122c:	2800      	cmp	r0, #0
 800122e:	d000      	beq.n	8001232 <__aeabi_fsub+0x356>
 8001230:	e736      	b.n	80010a0 <__aeabi_fsub+0x1c4>
 8001232:	2400      	movs	r4, #0
 8001234:	2700      	movs	r7, #0
 8001236:	e69c      	b.n	8000f72 <__aeabi_fsub+0x96>

08001238 <__aeabi_f2iz>:
 8001238:	0241      	lsls	r1, r0, #9
 800123a:	0042      	lsls	r2, r0, #1
 800123c:	0fc3      	lsrs	r3, r0, #31
 800123e:	0a49      	lsrs	r1, r1, #9
 8001240:	2000      	movs	r0, #0
 8001242:	0e12      	lsrs	r2, r2, #24
 8001244:	2a7e      	cmp	r2, #126	; 0x7e
 8001246:	dd03      	ble.n	8001250 <__aeabi_f2iz+0x18>
 8001248:	2a9d      	cmp	r2, #157	; 0x9d
 800124a:	dd02      	ble.n	8001252 <__aeabi_f2iz+0x1a>
 800124c:	4a09      	ldr	r2, [pc, #36]	; (8001274 <__aeabi_f2iz+0x3c>)
 800124e:	1898      	adds	r0, r3, r2
 8001250:	4770      	bx	lr
 8001252:	2080      	movs	r0, #128	; 0x80
 8001254:	0400      	lsls	r0, r0, #16
 8001256:	4301      	orrs	r1, r0
 8001258:	2a95      	cmp	r2, #149	; 0x95
 800125a:	dc07      	bgt.n	800126c <__aeabi_f2iz+0x34>
 800125c:	2096      	movs	r0, #150	; 0x96
 800125e:	1a82      	subs	r2, r0, r2
 8001260:	40d1      	lsrs	r1, r2
 8001262:	4248      	negs	r0, r1
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1f3      	bne.n	8001250 <__aeabi_f2iz+0x18>
 8001268:	0008      	movs	r0, r1
 800126a:	e7f1      	b.n	8001250 <__aeabi_f2iz+0x18>
 800126c:	3a96      	subs	r2, #150	; 0x96
 800126e:	4091      	lsls	r1, r2
 8001270:	e7f7      	b.n	8001262 <__aeabi_f2iz+0x2a>
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	7fffffff 	.word	0x7fffffff

08001278 <__aeabi_i2f>:
 8001278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127a:	2800      	cmp	r0, #0
 800127c:	d013      	beq.n	80012a6 <__aeabi_i2f+0x2e>
 800127e:	17c3      	asrs	r3, r0, #31
 8001280:	18c6      	adds	r6, r0, r3
 8001282:	405e      	eors	r6, r3
 8001284:	0fc4      	lsrs	r4, r0, #31
 8001286:	0030      	movs	r0, r6
 8001288:	f001 ff3c 	bl	8003104 <__clzsi2>
 800128c:	239e      	movs	r3, #158	; 0x9e
 800128e:	0005      	movs	r5, r0
 8001290:	1a1b      	subs	r3, r3, r0
 8001292:	2b96      	cmp	r3, #150	; 0x96
 8001294:	dc0f      	bgt.n	80012b6 <__aeabi_i2f+0x3e>
 8001296:	2808      	cmp	r0, #8
 8001298:	dd01      	ble.n	800129e <__aeabi_i2f+0x26>
 800129a:	3d08      	subs	r5, #8
 800129c:	40ae      	lsls	r6, r5
 800129e:	0276      	lsls	r6, r6, #9
 80012a0:	0a76      	lsrs	r6, r6, #9
 80012a2:	b2d8      	uxtb	r0, r3
 80012a4:	e002      	b.n	80012ac <__aeabi_i2f+0x34>
 80012a6:	2400      	movs	r4, #0
 80012a8:	2000      	movs	r0, #0
 80012aa:	2600      	movs	r6, #0
 80012ac:	05c0      	lsls	r0, r0, #23
 80012ae:	4330      	orrs	r0, r6
 80012b0:	07e4      	lsls	r4, r4, #31
 80012b2:	4320      	orrs	r0, r4
 80012b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012b6:	2b99      	cmp	r3, #153	; 0x99
 80012b8:	dd0c      	ble.n	80012d4 <__aeabi_i2f+0x5c>
 80012ba:	2205      	movs	r2, #5
 80012bc:	0031      	movs	r1, r6
 80012be:	1a12      	subs	r2, r2, r0
 80012c0:	40d1      	lsrs	r1, r2
 80012c2:	000a      	movs	r2, r1
 80012c4:	0001      	movs	r1, r0
 80012c6:	0030      	movs	r0, r6
 80012c8:	311b      	adds	r1, #27
 80012ca:	4088      	lsls	r0, r1
 80012cc:	1e41      	subs	r1, r0, #1
 80012ce:	4188      	sbcs	r0, r1
 80012d0:	4302      	orrs	r2, r0
 80012d2:	0016      	movs	r6, r2
 80012d4:	2d05      	cmp	r5, #5
 80012d6:	dc12      	bgt.n	80012fe <__aeabi_i2f+0x86>
 80012d8:	0031      	movs	r1, r6
 80012da:	4f0d      	ldr	r7, [pc, #52]	; (8001310 <__aeabi_i2f+0x98>)
 80012dc:	4039      	ands	r1, r7
 80012de:	0772      	lsls	r2, r6, #29
 80012e0:	d009      	beq.n	80012f6 <__aeabi_i2f+0x7e>
 80012e2:	200f      	movs	r0, #15
 80012e4:	4030      	ands	r0, r6
 80012e6:	2804      	cmp	r0, #4
 80012e8:	d005      	beq.n	80012f6 <__aeabi_i2f+0x7e>
 80012ea:	3104      	adds	r1, #4
 80012ec:	014a      	lsls	r2, r1, #5
 80012ee:	d502      	bpl.n	80012f6 <__aeabi_i2f+0x7e>
 80012f0:	239f      	movs	r3, #159	; 0x9f
 80012f2:	4039      	ands	r1, r7
 80012f4:	1b5b      	subs	r3, r3, r5
 80012f6:	0189      	lsls	r1, r1, #6
 80012f8:	0a4e      	lsrs	r6, r1, #9
 80012fa:	b2d8      	uxtb	r0, r3
 80012fc:	e7d6      	b.n	80012ac <__aeabi_i2f+0x34>
 80012fe:	1f6a      	subs	r2, r5, #5
 8001300:	4096      	lsls	r6, r2
 8001302:	0031      	movs	r1, r6
 8001304:	4f02      	ldr	r7, [pc, #8]	; (8001310 <__aeabi_i2f+0x98>)
 8001306:	4039      	ands	r1, r7
 8001308:	0772      	lsls	r2, r6, #29
 800130a:	d0f4      	beq.n	80012f6 <__aeabi_i2f+0x7e>
 800130c:	e7e9      	b.n	80012e2 <__aeabi_i2f+0x6a>
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	fbffffff 	.word	0xfbffffff

08001314 <__aeabi_ui2f>:
 8001314:	b570      	push	{r4, r5, r6, lr}
 8001316:	1e05      	subs	r5, r0, #0
 8001318:	d00e      	beq.n	8001338 <__aeabi_ui2f+0x24>
 800131a:	f001 fef3 	bl	8003104 <__clzsi2>
 800131e:	239e      	movs	r3, #158	; 0x9e
 8001320:	0004      	movs	r4, r0
 8001322:	1a1b      	subs	r3, r3, r0
 8001324:	2b96      	cmp	r3, #150	; 0x96
 8001326:	dc0c      	bgt.n	8001342 <__aeabi_ui2f+0x2e>
 8001328:	2808      	cmp	r0, #8
 800132a:	dd01      	ble.n	8001330 <__aeabi_ui2f+0x1c>
 800132c:	3c08      	subs	r4, #8
 800132e:	40a5      	lsls	r5, r4
 8001330:	026d      	lsls	r5, r5, #9
 8001332:	0a6d      	lsrs	r5, r5, #9
 8001334:	b2d8      	uxtb	r0, r3
 8001336:	e001      	b.n	800133c <__aeabi_ui2f+0x28>
 8001338:	2000      	movs	r0, #0
 800133a:	2500      	movs	r5, #0
 800133c:	05c0      	lsls	r0, r0, #23
 800133e:	4328      	orrs	r0, r5
 8001340:	bd70      	pop	{r4, r5, r6, pc}
 8001342:	2b99      	cmp	r3, #153	; 0x99
 8001344:	dd09      	ble.n	800135a <__aeabi_ui2f+0x46>
 8001346:	0002      	movs	r2, r0
 8001348:	0029      	movs	r1, r5
 800134a:	321b      	adds	r2, #27
 800134c:	4091      	lsls	r1, r2
 800134e:	1e4a      	subs	r2, r1, #1
 8001350:	4191      	sbcs	r1, r2
 8001352:	2205      	movs	r2, #5
 8001354:	1a12      	subs	r2, r2, r0
 8001356:	40d5      	lsrs	r5, r2
 8001358:	430d      	orrs	r5, r1
 800135a:	2c05      	cmp	r4, #5
 800135c:	dc12      	bgt.n	8001384 <__aeabi_ui2f+0x70>
 800135e:	0029      	movs	r1, r5
 8001360:	4e0c      	ldr	r6, [pc, #48]	; (8001394 <__aeabi_ui2f+0x80>)
 8001362:	4031      	ands	r1, r6
 8001364:	076a      	lsls	r2, r5, #29
 8001366:	d009      	beq.n	800137c <__aeabi_ui2f+0x68>
 8001368:	200f      	movs	r0, #15
 800136a:	4028      	ands	r0, r5
 800136c:	2804      	cmp	r0, #4
 800136e:	d005      	beq.n	800137c <__aeabi_ui2f+0x68>
 8001370:	3104      	adds	r1, #4
 8001372:	014a      	lsls	r2, r1, #5
 8001374:	d502      	bpl.n	800137c <__aeabi_ui2f+0x68>
 8001376:	239f      	movs	r3, #159	; 0x9f
 8001378:	4031      	ands	r1, r6
 800137a:	1b1b      	subs	r3, r3, r4
 800137c:	0189      	lsls	r1, r1, #6
 800137e:	0a4d      	lsrs	r5, r1, #9
 8001380:	b2d8      	uxtb	r0, r3
 8001382:	e7db      	b.n	800133c <__aeabi_ui2f+0x28>
 8001384:	1f62      	subs	r2, r4, #5
 8001386:	4095      	lsls	r5, r2
 8001388:	0029      	movs	r1, r5
 800138a:	4e02      	ldr	r6, [pc, #8]	; (8001394 <__aeabi_ui2f+0x80>)
 800138c:	4031      	ands	r1, r6
 800138e:	076a      	lsls	r2, r5, #29
 8001390:	d0f4      	beq.n	800137c <__aeabi_ui2f+0x68>
 8001392:	e7e9      	b.n	8001368 <__aeabi_ui2f+0x54>
 8001394:	fbffffff 	.word	0xfbffffff

08001398 <__aeabi_dadd>:
 8001398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139a:	464f      	mov	r7, r9
 800139c:	4646      	mov	r6, r8
 800139e:	46d6      	mov	lr, sl
 80013a0:	000d      	movs	r5, r1
 80013a2:	0004      	movs	r4, r0
 80013a4:	b5c0      	push	{r6, r7, lr}
 80013a6:	001f      	movs	r7, r3
 80013a8:	0011      	movs	r1, r2
 80013aa:	0328      	lsls	r0, r5, #12
 80013ac:	0f62      	lsrs	r2, r4, #29
 80013ae:	0a40      	lsrs	r0, r0, #9
 80013b0:	4310      	orrs	r0, r2
 80013b2:	007a      	lsls	r2, r7, #1
 80013b4:	0d52      	lsrs	r2, r2, #21
 80013b6:	00e3      	lsls	r3, r4, #3
 80013b8:	033c      	lsls	r4, r7, #12
 80013ba:	4691      	mov	r9, r2
 80013bc:	0a64      	lsrs	r4, r4, #9
 80013be:	0ffa      	lsrs	r2, r7, #31
 80013c0:	0f4f      	lsrs	r7, r1, #29
 80013c2:	006e      	lsls	r6, r5, #1
 80013c4:	4327      	orrs	r7, r4
 80013c6:	4692      	mov	sl, r2
 80013c8:	46b8      	mov	r8, r7
 80013ca:	0d76      	lsrs	r6, r6, #21
 80013cc:	0fed      	lsrs	r5, r5, #31
 80013ce:	00c9      	lsls	r1, r1, #3
 80013d0:	4295      	cmp	r5, r2
 80013d2:	d100      	bne.n	80013d6 <__aeabi_dadd+0x3e>
 80013d4:	e099      	b.n	800150a <__aeabi_dadd+0x172>
 80013d6:	464c      	mov	r4, r9
 80013d8:	1b34      	subs	r4, r6, r4
 80013da:	46a4      	mov	ip, r4
 80013dc:	2c00      	cmp	r4, #0
 80013de:	dc00      	bgt.n	80013e2 <__aeabi_dadd+0x4a>
 80013e0:	e07c      	b.n	80014dc <__aeabi_dadd+0x144>
 80013e2:	464a      	mov	r2, r9
 80013e4:	2a00      	cmp	r2, #0
 80013e6:	d100      	bne.n	80013ea <__aeabi_dadd+0x52>
 80013e8:	e0b8      	b.n	800155c <__aeabi_dadd+0x1c4>
 80013ea:	4ac5      	ldr	r2, [pc, #788]	; (8001700 <__aeabi_dadd+0x368>)
 80013ec:	4296      	cmp	r6, r2
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dadd+0x5a>
 80013f0:	e11c      	b.n	800162c <__aeabi_dadd+0x294>
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	003c      	movs	r4, r7
 80013f6:	0412      	lsls	r2, r2, #16
 80013f8:	4314      	orrs	r4, r2
 80013fa:	46a0      	mov	r8, r4
 80013fc:	4662      	mov	r2, ip
 80013fe:	2a38      	cmp	r2, #56	; 0x38
 8001400:	dd00      	ble.n	8001404 <__aeabi_dadd+0x6c>
 8001402:	e161      	b.n	80016c8 <__aeabi_dadd+0x330>
 8001404:	2a1f      	cmp	r2, #31
 8001406:	dd00      	ble.n	800140a <__aeabi_dadd+0x72>
 8001408:	e1cc      	b.n	80017a4 <__aeabi_dadd+0x40c>
 800140a:	4664      	mov	r4, ip
 800140c:	2220      	movs	r2, #32
 800140e:	1b12      	subs	r2, r2, r4
 8001410:	4644      	mov	r4, r8
 8001412:	4094      	lsls	r4, r2
 8001414:	000f      	movs	r7, r1
 8001416:	46a1      	mov	r9, r4
 8001418:	4664      	mov	r4, ip
 800141a:	4091      	lsls	r1, r2
 800141c:	40e7      	lsrs	r7, r4
 800141e:	464c      	mov	r4, r9
 8001420:	1e4a      	subs	r2, r1, #1
 8001422:	4191      	sbcs	r1, r2
 8001424:	433c      	orrs	r4, r7
 8001426:	4642      	mov	r2, r8
 8001428:	4321      	orrs	r1, r4
 800142a:	4664      	mov	r4, ip
 800142c:	40e2      	lsrs	r2, r4
 800142e:	1a80      	subs	r0, r0, r2
 8001430:	1a5c      	subs	r4, r3, r1
 8001432:	42a3      	cmp	r3, r4
 8001434:	419b      	sbcs	r3, r3
 8001436:	425f      	negs	r7, r3
 8001438:	1bc7      	subs	r7, r0, r7
 800143a:	023b      	lsls	r3, r7, #8
 800143c:	d400      	bmi.n	8001440 <__aeabi_dadd+0xa8>
 800143e:	e0d0      	b.n	80015e2 <__aeabi_dadd+0x24a>
 8001440:	027f      	lsls	r7, r7, #9
 8001442:	0a7f      	lsrs	r7, r7, #9
 8001444:	2f00      	cmp	r7, #0
 8001446:	d100      	bne.n	800144a <__aeabi_dadd+0xb2>
 8001448:	e0ff      	b.n	800164a <__aeabi_dadd+0x2b2>
 800144a:	0038      	movs	r0, r7
 800144c:	f001 fe5a 	bl	8003104 <__clzsi2>
 8001450:	0001      	movs	r1, r0
 8001452:	3908      	subs	r1, #8
 8001454:	2320      	movs	r3, #32
 8001456:	0022      	movs	r2, r4
 8001458:	1a5b      	subs	r3, r3, r1
 800145a:	408f      	lsls	r7, r1
 800145c:	40da      	lsrs	r2, r3
 800145e:	408c      	lsls	r4, r1
 8001460:	4317      	orrs	r7, r2
 8001462:	42b1      	cmp	r1, r6
 8001464:	da00      	bge.n	8001468 <__aeabi_dadd+0xd0>
 8001466:	e0ff      	b.n	8001668 <__aeabi_dadd+0x2d0>
 8001468:	1b89      	subs	r1, r1, r6
 800146a:	1c4b      	adds	r3, r1, #1
 800146c:	2b1f      	cmp	r3, #31
 800146e:	dd00      	ble.n	8001472 <__aeabi_dadd+0xda>
 8001470:	e0a8      	b.n	80015c4 <__aeabi_dadd+0x22c>
 8001472:	2220      	movs	r2, #32
 8001474:	0039      	movs	r1, r7
 8001476:	1ad2      	subs	r2, r2, r3
 8001478:	0020      	movs	r0, r4
 800147a:	4094      	lsls	r4, r2
 800147c:	4091      	lsls	r1, r2
 800147e:	40d8      	lsrs	r0, r3
 8001480:	1e62      	subs	r2, r4, #1
 8001482:	4194      	sbcs	r4, r2
 8001484:	40df      	lsrs	r7, r3
 8001486:	2600      	movs	r6, #0
 8001488:	4301      	orrs	r1, r0
 800148a:	430c      	orrs	r4, r1
 800148c:	0763      	lsls	r3, r4, #29
 800148e:	d009      	beq.n	80014a4 <__aeabi_dadd+0x10c>
 8001490:	230f      	movs	r3, #15
 8001492:	4023      	ands	r3, r4
 8001494:	2b04      	cmp	r3, #4
 8001496:	d005      	beq.n	80014a4 <__aeabi_dadd+0x10c>
 8001498:	1d23      	adds	r3, r4, #4
 800149a:	42a3      	cmp	r3, r4
 800149c:	41a4      	sbcs	r4, r4
 800149e:	4264      	negs	r4, r4
 80014a0:	193f      	adds	r7, r7, r4
 80014a2:	001c      	movs	r4, r3
 80014a4:	023b      	lsls	r3, r7, #8
 80014a6:	d400      	bmi.n	80014aa <__aeabi_dadd+0x112>
 80014a8:	e09e      	b.n	80015e8 <__aeabi_dadd+0x250>
 80014aa:	4b95      	ldr	r3, [pc, #596]	; (8001700 <__aeabi_dadd+0x368>)
 80014ac:	3601      	adds	r6, #1
 80014ae:	429e      	cmp	r6, r3
 80014b0:	d100      	bne.n	80014b4 <__aeabi_dadd+0x11c>
 80014b2:	e0b7      	b.n	8001624 <__aeabi_dadd+0x28c>
 80014b4:	4a93      	ldr	r2, [pc, #588]	; (8001704 <__aeabi_dadd+0x36c>)
 80014b6:	08e4      	lsrs	r4, r4, #3
 80014b8:	4017      	ands	r7, r2
 80014ba:	077b      	lsls	r3, r7, #29
 80014bc:	0571      	lsls	r1, r6, #21
 80014be:	027f      	lsls	r7, r7, #9
 80014c0:	4323      	orrs	r3, r4
 80014c2:	0b3f      	lsrs	r7, r7, #12
 80014c4:	0d4a      	lsrs	r2, r1, #21
 80014c6:	0512      	lsls	r2, r2, #20
 80014c8:	433a      	orrs	r2, r7
 80014ca:	07ed      	lsls	r5, r5, #31
 80014cc:	432a      	orrs	r2, r5
 80014ce:	0018      	movs	r0, r3
 80014d0:	0011      	movs	r1, r2
 80014d2:	bce0      	pop	{r5, r6, r7}
 80014d4:	46ba      	mov	sl, r7
 80014d6:	46b1      	mov	r9, r6
 80014d8:	46a8      	mov	r8, r5
 80014da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014dc:	2c00      	cmp	r4, #0
 80014de:	d04b      	beq.n	8001578 <__aeabi_dadd+0x1e0>
 80014e0:	464c      	mov	r4, r9
 80014e2:	1ba4      	subs	r4, r4, r6
 80014e4:	46a4      	mov	ip, r4
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d000      	beq.n	80014ec <__aeabi_dadd+0x154>
 80014ea:	e123      	b.n	8001734 <__aeabi_dadd+0x39c>
 80014ec:	0004      	movs	r4, r0
 80014ee:	431c      	orrs	r4, r3
 80014f0:	d100      	bne.n	80014f4 <__aeabi_dadd+0x15c>
 80014f2:	e1af      	b.n	8001854 <__aeabi_dadd+0x4bc>
 80014f4:	4662      	mov	r2, ip
 80014f6:	1e54      	subs	r4, r2, #1
 80014f8:	2a01      	cmp	r2, #1
 80014fa:	d100      	bne.n	80014fe <__aeabi_dadd+0x166>
 80014fc:	e215      	b.n	800192a <__aeabi_dadd+0x592>
 80014fe:	4d80      	ldr	r5, [pc, #512]	; (8001700 <__aeabi_dadd+0x368>)
 8001500:	45ac      	cmp	ip, r5
 8001502:	d100      	bne.n	8001506 <__aeabi_dadd+0x16e>
 8001504:	e1c8      	b.n	8001898 <__aeabi_dadd+0x500>
 8001506:	46a4      	mov	ip, r4
 8001508:	e11b      	b.n	8001742 <__aeabi_dadd+0x3aa>
 800150a:	464a      	mov	r2, r9
 800150c:	1ab2      	subs	r2, r6, r2
 800150e:	4694      	mov	ip, r2
 8001510:	2a00      	cmp	r2, #0
 8001512:	dc00      	bgt.n	8001516 <__aeabi_dadd+0x17e>
 8001514:	e0ac      	b.n	8001670 <__aeabi_dadd+0x2d8>
 8001516:	464a      	mov	r2, r9
 8001518:	2a00      	cmp	r2, #0
 800151a:	d043      	beq.n	80015a4 <__aeabi_dadd+0x20c>
 800151c:	4a78      	ldr	r2, [pc, #480]	; (8001700 <__aeabi_dadd+0x368>)
 800151e:	4296      	cmp	r6, r2
 8001520:	d100      	bne.n	8001524 <__aeabi_dadd+0x18c>
 8001522:	e1af      	b.n	8001884 <__aeabi_dadd+0x4ec>
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	003c      	movs	r4, r7
 8001528:	0412      	lsls	r2, r2, #16
 800152a:	4314      	orrs	r4, r2
 800152c:	46a0      	mov	r8, r4
 800152e:	4662      	mov	r2, ip
 8001530:	2a38      	cmp	r2, #56	; 0x38
 8001532:	dc67      	bgt.n	8001604 <__aeabi_dadd+0x26c>
 8001534:	2a1f      	cmp	r2, #31
 8001536:	dc00      	bgt.n	800153a <__aeabi_dadd+0x1a2>
 8001538:	e15f      	b.n	80017fa <__aeabi_dadd+0x462>
 800153a:	4647      	mov	r7, r8
 800153c:	3a20      	subs	r2, #32
 800153e:	40d7      	lsrs	r7, r2
 8001540:	4662      	mov	r2, ip
 8001542:	2a20      	cmp	r2, #32
 8001544:	d005      	beq.n	8001552 <__aeabi_dadd+0x1ba>
 8001546:	4664      	mov	r4, ip
 8001548:	2240      	movs	r2, #64	; 0x40
 800154a:	1b12      	subs	r2, r2, r4
 800154c:	4644      	mov	r4, r8
 800154e:	4094      	lsls	r4, r2
 8001550:	4321      	orrs	r1, r4
 8001552:	1e4a      	subs	r2, r1, #1
 8001554:	4191      	sbcs	r1, r2
 8001556:	000c      	movs	r4, r1
 8001558:	433c      	orrs	r4, r7
 800155a:	e057      	b.n	800160c <__aeabi_dadd+0x274>
 800155c:	003a      	movs	r2, r7
 800155e:	430a      	orrs	r2, r1
 8001560:	d100      	bne.n	8001564 <__aeabi_dadd+0x1cc>
 8001562:	e105      	b.n	8001770 <__aeabi_dadd+0x3d8>
 8001564:	0022      	movs	r2, r4
 8001566:	3a01      	subs	r2, #1
 8001568:	2c01      	cmp	r4, #1
 800156a:	d100      	bne.n	800156e <__aeabi_dadd+0x1d6>
 800156c:	e182      	b.n	8001874 <__aeabi_dadd+0x4dc>
 800156e:	4c64      	ldr	r4, [pc, #400]	; (8001700 <__aeabi_dadd+0x368>)
 8001570:	45a4      	cmp	ip, r4
 8001572:	d05b      	beq.n	800162c <__aeabi_dadd+0x294>
 8001574:	4694      	mov	ip, r2
 8001576:	e741      	b.n	80013fc <__aeabi_dadd+0x64>
 8001578:	4c63      	ldr	r4, [pc, #396]	; (8001708 <__aeabi_dadd+0x370>)
 800157a:	1c77      	adds	r7, r6, #1
 800157c:	4227      	tst	r7, r4
 800157e:	d000      	beq.n	8001582 <__aeabi_dadd+0x1ea>
 8001580:	e0c4      	b.n	800170c <__aeabi_dadd+0x374>
 8001582:	0004      	movs	r4, r0
 8001584:	431c      	orrs	r4, r3
 8001586:	2e00      	cmp	r6, #0
 8001588:	d000      	beq.n	800158c <__aeabi_dadd+0x1f4>
 800158a:	e169      	b.n	8001860 <__aeabi_dadd+0x4c8>
 800158c:	2c00      	cmp	r4, #0
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x1fa>
 8001590:	e1bf      	b.n	8001912 <__aeabi_dadd+0x57a>
 8001592:	4644      	mov	r4, r8
 8001594:	430c      	orrs	r4, r1
 8001596:	d000      	beq.n	800159a <__aeabi_dadd+0x202>
 8001598:	e1d0      	b.n	800193c <__aeabi_dadd+0x5a4>
 800159a:	0742      	lsls	r2, r0, #29
 800159c:	08db      	lsrs	r3, r3, #3
 800159e:	4313      	orrs	r3, r2
 80015a0:	08c0      	lsrs	r0, r0, #3
 80015a2:	e029      	b.n	80015f8 <__aeabi_dadd+0x260>
 80015a4:	003a      	movs	r2, r7
 80015a6:	430a      	orrs	r2, r1
 80015a8:	d100      	bne.n	80015ac <__aeabi_dadd+0x214>
 80015aa:	e170      	b.n	800188e <__aeabi_dadd+0x4f6>
 80015ac:	4662      	mov	r2, ip
 80015ae:	4664      	mov	r4, ip
 80015b0:	3a01      	subs	r2, #1
 80015b2:	2c01      	cmp	r4, #1
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dadd+0x220>
 80015b6:	e0e0      	b.n	800177a <__aeabi_dadd+0x3e2>
 80015b8:	4c51      	ldr	r4, [pc, #324]	; (8001700 <__aeabi_dadd+0x368>)
 80015ba:	45a4      	cmp	ip, r4
 80015bc:	d100      	bne.n	80015c0 <__aeabi_dadd+0x228>
 80015be:	e161      	b.n	8001884 <__aeabi_dadd+0x4ec>
 80015c0:	4694      	mov	ip, r2
 80015c2:	e7b4      	b.n	800152e <__aeabi_dadd+0x196>
 80015c4:	003a      	movs	r2, r7
 80015c6:	391f      	subs	r1, #31
 80015c8:	40ca      	lsrs	r2, r1
 80015ca:	0011      	movs	r1, r2
 80015cc:	2b20      	cmp	r3, #32
 80015ce:	d003      	beq.n	80015d8 <__aeabi_dadd+0x240>
 80015d0:	2240      	movs	r2, #64	; 0x40
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	409f      	lsls	r7, r3
 80015d6:	433c      	orrs	r4, r7
 80015d8:	1e63      	subs	r3, r4, #1
 80015da:	419c      	sbcs	r4, r3
 80015dc:	2700      	movs	r7, #0
 80015de:	2600      	movs	r6, #0
 80015e0:	430c      	orrs	r4, r1
 80015e2:	0763      	lsls	r3, r4, #29
 80015e4:	d000      	beq.n	80015e8 <__aeabi_dadd+0x250>
 80015e6:	e753      	b.n	8001490 <__aeabi_dadd+0xf8>
 80015e8:	46b4      	mov	ip, r6
 80015ea:	08e4      	lsrs	r4, r4, #3
 80015ec:	077b      	lsls	r3, r7, #29
 80015ee:	4323      	orrs	r3, r4
 80015f0:	08f8      	lsrs	r0, r7, #3
 80015f2:	4a43      	ldr	r2, [pc, #268]	; (8001700 <__aeabi_dadd+0x368>)
 80015f4:	4594      	cmp	ip, r2
 80015f6:	d01d      	beq.n	8001634 <__aeabi_dadd+0x29c>
 80015f8:	4662      	mov	r2, ip
 80015fa:	0307      	lsls	r7, r0, #12
 80015fc:	0552      	lsls	r2, r2, #21
 80015fe:	0b3f      	lsrs	r7, r7, #12
 8001600:	0d52      	lsrs	r2, r2, #21
 8001602:	e760      	b.n	80014c6 <__aeabi_dadd+0x12e>
 8001604:	4644      	mov	r4, r8
 8001606:	430c      	orrs	r4, r1
 8001608:	1e62      	subs	r2, r4, #1
 800160a:	4194      	sbcs	r4, r2
 800160c:	18e4      	adds	r4, r4, r3
 800160e:	429c      	cmp	r4, r3
 8001610:	419b      	sbcs	r3, r3
 8001612:	425f      	negs	r7, r3
 8001614:	183f      	adds	r7, r7, r0
 8001616:	023b      	lsls	r3, r7, #8
 8001618:	d5e3      	bpl.n	80015e2 <__aeabi_dadd+0x24a>
 800161a:	4b39      	ldr	r3, [pc, #228]	; (8001700 <__aeabi_dadd+0x368>)
 800161c:	3601      	adds	r6, #1
 800161e:	429e      	cmp	r6, r3
 8001620:	d000      	beq.n	8001624 <__aeabi_dadd+0x28c>
 8001622:	e0b5      	b.n	8001790 <__aeabi_dadd+0x3f8>
 8001624:	0032      	movs	r2, r6
 8001626:	2700      	movs	r7, #0
 8001628:	2300      	movs	r3, #0
 800162a:	e74c      	b.n	80014c6 <__aeabi_dadd+0x12e>
 800162c:	0742      	lsls	r2, r0, #29
 800162e:	08db      	lsrs	r3, r3, #3
 8001630:	4313      	orrs	r3, r2
 8001632:	08c0      	lsrs	r0, r0, #3
 8001634:	001a      	movs	r2, r3
 8001636:	4302      	orrs	r2, r0
 8001638:	d100      	bne.n	800163c <__aeabi_dadd+0x2a4>
 800163a:	e1e1      	b.n	8001a00 <__aeabi_dadd+0x668>
 800163c:	2780      	movs	r7, #128	; 0x80
 800163e:	033f      	lsls	r7, r7, #12
 8001640:	4307      	orrs	r7, r0
 8001642:	033f      	lsls	r7, r7, #12
 8001644:	4a2e      	ldr	r2, [pc, #184]	; (8001700 <__aeabi_dadd+0x368>)
 8001646:	0b3f      	lsrs	r7, r7, #12
 8001648:	e73d      	b.n	80014c6 <__aeabi_dadd+0x12e>
 800164a:	0020      	movs	r0, r4
 800164c:	f001 fd5a 	bl	8003104 <__clzsi2>
 8001650:	0001      	movs	r1, r0
 8001652:	3118      	adds	r1, #24
 8001654:	291f      	cmp	r1, #31
 8001656:	dc00      	bgt.n	800165a <__aeabi_dadd+0x2c2>
 8001658:	e6fc      	b.n	8001454 <__aeabi_dadd+0xbc>
 800165a:	3808      	subs	r0, #8
 800165c:	4084      	lsls	r4, r0
 800165e:	0027      	movs	r7, r4
 8001660:	2400      	movs	r4, #0
 8001662:	42b1      	cmp	r1, r6
 8001664:	db00      	blt.n	8001668 <__aeabi_dadd+0x2d0>
 8001666:	e6ff      	b.n	8001468 <__aeabi_dadd+0xd0>
 8001668:	4a26      	ldr	r2, [pc, #152]	; (8001704 <__aeabi_dadd+0x36c>)
 800166a:	1a76      	subs	r6, r6, r1
 800166c:	4017      	ands	r7, r2
 800166e:	e70d      	b.n	800148c <__aeabi_dadd+0xf4>
 8001670:	2a00      	cmp	r2, #0
 8001672:	d02f      	beq.n	80016d4 <__aeabi_dadd+0x33c>
 8001674:	464a      	mov	r2, r9
 8001676:	1b92      	subs	r2, r2, r6
 8001678:	4694      	mov	ip, r2
 800167a:	2e00      	cmp	r6, #0
 800167c:	d100      	bne.n	8001680 <__aeabi_dadd+0x2e8>
 800167e:	e0ad      	b.n	80017dc <__aeabi_dadd+0x444>
 8001680:	4a1f      	ldr	r2, [pc, #124]	; (8001700 <__aeabi_dadd+0x368>)
 8001682:	4591      	cmp	r9, r2
 8001684:	d100      	bne.n	8001688 <__aeabi_dadd+0x2f0>
 8001686:	e10f      	b.n	80018a8 <__aeabi_dadd+0x510>
 8001688:	2280      	movs	r2, #128	; 0x80
 800168a:	0412      	lsls	r2, r2, #16
 800168c:	4310      	orrs	r0, r2
 800168e:	4662      	mov	r2, ip
 8001690:	2a38      	cmp	r2, #56	; 0x38
 8001692:	dd00      	ble.n	8001696 <__aeabi_dadd+0x2fe>
 8001694:	e10f      	b.n	80018b6 <__aeabi_dadd+0x51e>
 8001696:	2a1f      	cmp	r2, #31
 8001698:	dd00      	ble.n	800169c <__aeabi_dadd+0x304>
 800169a:	e180      	b.n	800199e <__aeabi_dadd+0x606>
 800169c:	4664      	mov	r4, ip
 800169e:	2220      	movs	r2, #32
 80016a0:	001e      	movs	r6, r3
 80016a2:	1b12      	subs	r2, r2, r4
 80016a4:	4667      	mov	r7, ip
 80016a6:	0004      	movs	r4, r0
 80016a8:	4093      	lsls	r3, r2
 80016aa:	4094      	lsls	r4, r2
 80016ac:	40fe      	lsrs	r6, r7
 80016ae:	1e5a      	subs	r2, r3, #1
 80016b0:	4193      	sbcs	r3, r2
 80016b2:	40f8      	lsrs	r0, r7
 80016b4:	4334      	orrs	r4, r6
 80016b6:	431c      	orrs	r4, r3
 80016b8:	4480      	add	r8, r0
 80016ba:	1864      	adds	r4, r4, r1
 80016bc:	428c      	cmp	r4, r1
 80016be:	41bf      	sbcs	r7, r7
 80016c0:	427f      	negs	r7, r7
 80016c2:	464e      	mov	r6, r9
 80016c4:	4447      	add	r7, r8
 80016c6:	e7a6      	b.n	8001616 <__aeabi_dadd+0x27e>
 80016c8:	4642      	mov	r2, r8
 80016ca:	430a      	orrs	r2, r1
 80016cc:	0011      	movs	r1, r2
 80016ce:	1e4a      	subs	r2, r1, #1
 80016d0:	4191      	sbcs	r1, r2
 80016d2:	e6ad      	b.n	8001430 <__aeabi_dadd+0x98>
 80016d4:	4c0c      	ldr	r4, [pc, #48]	; (8001708 <__aeabi_dadd+0x370>)
 80016d6:	1c72      	adds	r2, r6, #1
 80016d8:	4222      	tst	r2, r4
 80016da:	d000      	beq.n	80016de <__aeabi_dadd+0x346>
 80016dc:	e0a1      	b.n	8001822 <__aeabi_dadd+0x48a>
 80016de:	0002      	movs	r2, r0
 80016e0:	431a      	orrs	r2, r3
 80016e2:	2e00      	cmp	r6, #0
 80016e4:	d000      	beq.n	80016e8 <__aeabi_dadd+0x350>
 80016e6:	e0fa      	b.n	80018de <__aeabi_dadd+0x546>
 80016e8:	2a00      	cmp	r2, #0
 80016ea:	d100      	bne.n	80016ee <__aeabi_dadd+0x356>
 80016ec:	e145      	b.n	800197a <__aeabi_dadd+0x5e2>
 80016ee:	003a      	movs	r2, r7
 80016f0:	430a      	orrs	r2, r1
 80016f2:	d000      	beq.n	80016f6 <__aeabi_dadd+0x35e>
 80016f4:	e146      	b.n	8001984 <__aeabi_dadd+0x5ec>
 80016f6:	0742      	lsls	r2, r0, #29
 80016f8:	08db      	lsrs	r3, r3, #3
 80016fa:	4313      	orrs	r3, r2
 80016fc:	08c0      	lsrs	r0, r0, #3
 80016fe:	e77b      	b.n	80015f8 <__aeabi_dadd+0x260>
 8001700:	000007ff 	.word	0x000007ff
 8001704:	ff7fffff 	.word	0xff7fffff
 8001708:	000007fe 	.word	0x000007fe
 800170c:	4647      	mov	r7, r8
 800170e:	1a5c      	subs	r4, r3, r1
 8001710:	1bc2      	subs	r2, r0, r7
 8001712:	42a3      	cmp	r3, r4
 8001714:	41bf      	sbcs	r7, r7
 8001716:	427f      	negs	r7, r7
 8001718:	46b9      	mov	r9, r7
 800171a:	0017      	movs	r7, r2
 800171c:	464a      	mov	r2, r9
 800171e:	1abf      	subs	r7, r7, r2
 8001720:	023a      	lsls	r2, r7, #8
 8001722:	d500      	bpl.n	8001726 <__aeabi_dadd+0x38e>
 8001724:	e08d      	b.n	8001842 <__aeabi_dadd+0x4aa>
 8001726:	0023      	movs	r3, r4
 8001728:	433b      	orrs	r3, r7
 800172a:	d000      	beq.n	800172e <__aeabi_dadd+0x396>
 800172c:	e68a      	b.n	8001444 <__aeabi_dadd+0xac>
 800172e:	2000      	movs	r0, #0
 8001730:	2500      	movs	r5, #0
 8001732:	e761      	b.n	80015f8 <__aeabi_dadd+0x260>
 8001734:	4cb4      	ldr	r4, [pc, #720]	; (8001a08 <__aeabi_dadd+0x670>)
 8001736:	45a1      	cmp	r9, r4
 8001738:	d100      	bne.n	800173c <__aeabi_dadd+0x3a4>
 800173a:	e0ad      	b.n	8001898 <__aeabi_dadd+0x500>
 800173c:	2480      	movs	r4, #128	; 0x80
 800173e:	0424      	lsls	r4, r4, #16
 8001740:	4320      	orrs	r0, r4
 8001742:	4664      	mov	r4, ip
 8001744:	2c38      	cmp	r4, #56	; 0x38
 8001746:	dc3d      	bgt.n	80017c4 <__aeabi_dadd+0x42c>
 8001748:	4662      	mov	r2, ip
 800174a:	2c1f      	cmp	r4, #31
 800174c:	dd00      	ble.n	8001750 <__aeabi_dadd+0x3b8>
 800174e:	e0b7      	b.n	80018c0 <__aeabi_dadd+0x528>
 8001750:	2520      	movs	r5, #32
 8001752:	001e      	movs	r6, r3
 8001754:	1b2d      	subs	r5, r5, r4
 8001756:	0004      	movs	r4, r0
 8001758:	40ab      	lsls	r3, r5
 800175a:	40ac      	lsls	r4, r5
 800175c:	40d6      	lsrs	r6, r2
 800175e:	40d0      	lsrs	r0, r2
 8001760:	4642      	mov	r2, r8
 8001762:	1e5d      	subs	r5, r3, #1
 8001764:	41ab      	sbcs	r3, r5
 8001766:	4334      	orrs	r4, r6
 8001768:	1a12      	subs	r2, r2, r0
 800176a:	4690      	mov	r8, r2
 800176c:	4323      	orrs	r3, r4
 800176e:	e02c      	b.n	80017ca <__aeabi_dadd+0x432>
 8001770:	0742      	lsls	r2, r0, #29
 8001772:	08db      	lsrs	r3, r3, #3
 8001774:	4313      	orrs	r3, r2
 8001776:	08c0      	lsrs	r0, r0, #3
 8001778:	e73b      	b.n	80015f2 <__aeabi_dadd+0x25a>
 800177a:	185c      	adds	r4, r3, r1
 800177c:	429c      	cmp	r4, r3
 800177e:	419b      	sbcs	r3, r3
 8001780:	4440      	add	r0, r8
 8001782:	425b      	negs	r3, r3
 8001784:	18c7      	adds	r7, r0, r3
 8001786:	2601      	movs	r6, #1
 8001788:	023b      	lsls	r3, r7, #8
 800178a:	d400      	bmi.n	800178e <__aeabi_dadd+0x3f6>
 800178c:	e729      	b.n	80015e2 <__aeabi_dadd+0x24a>
 800178e:	2602      	movs	r6, #2
 8001790:	4a9e      	ldr	r2, [pc, #632]	; (8001a0c <__aeabi_dadd+0x674>)
 8001792:	0863      	lsrs	r3, r4, #1
 8001794:	4017      	ands	r7, r2
 8001796:	2201      	movs	r2, #1
 8001798:	4014      	ands	r4, r2
 800179a:	431c      	orrs	r4, r3
 800179c:	07fb      	lsls	r3, r7, #31
 800179e:	431c      	orrs	r4, r3
 80017a0:	087f      	lsrs	r7, r7, #1
 80017a2:	e673      	b.n	800148c <__aeabi_dadd+0xf4>
 80017a4:	4644      	mov	r4, r8
 80017a6:	3a20      	subs	r2, #32
 80017a8:	40d4      	lsrs	r4, r2
 80017aa:	4662      	mov	r2, ip
 80017ac:	2a20      	cmp	r2, #32
 80017ae:	d005      	beq.n	80017bc <__aeabi_dadd+0x424>
 80017b0:	4667      	mov	r7, ip
 80017b2:	2240      	movs	r2, #64	; 0x40
 80017b4:	1bd2      	subs	r2, r2, r7
 80017b6:	4647      	mov	r7, r8
 80017b8:	4097      	lsls	r7, r2
 80017ba:	4339      	orrs	r1, r7
 80017bc:	1e4a      	subs	r2, r1, #1
 80017be:	4191      	sbcs	r1, r2
 80017c0:	4321      	orrs	r1, r4
 80017c2:	e635      	b.n	8001430 <__aeabi_dadd+0x98>
 80017c4:	4303      	orrs	r3, r0
 80017c6:	1e58      	subs	r0, r3, #1
 80017c8:	4183      	sbcs	r3, r0
 80017ca:	1acc      	subs	r4, r1, r3
 80017cc:	42a1      	cmp	r1, r4
 80017ce:	41bf      	sbcs	r7, r7
 80017d0:	4643      	mov	r3, r8
 80017d2:	427f      	negs	r7, r7
 80017d4:	4655      	mov	r5, sl
 80017d6:	464e      	mov	r6, r9
 80017d8:	1bdf      	subs	r7, r3, r7
 80017da:	e62e      	b.n	800143a <__aeabi_dadd+0xa2>
 80017dc:	0002      	movs	r2, r0
 80017de:	431a      	orrs	r2, r3
 80017e0:	d100      	bne.n	80017e4 <__aeabi_dadd+0x44c>
 80017e2:	e0bd      	b.n	8001960 <__aeabi_dadd+0x5c8>
 80017e4:	4662      	mov	r2, ip
 80017e6:	4664      	mov	r4, ip
 80017e8:	3a01      	subs	r2, #1
 80017ea:	2c01      	cmp	r4, #1
 80017ec:	d100      	bne.n	80017f0 <__aeabi_dadd+0x458>
 80017ee:	e0e5      	b.n	80019bc <__aeabi_dadd+0x624>
 80017f0:	4c85      	ldr	r4, [pc, #532]	; (8001a08 <__aeabi_dadd+0x670>)
 80017f2:	45a4      	cmp	ip, r4
 80017f4:	d058      	beq.n	80018a8 <__aeabi_dadd+0x510>
 80017f6:	4694      	mov	ip, r2
 80017f8:	e749      	b.n	800168e <__aeabi_dadd+0x2f6>
 80017fa:	4664      	mov	r4, ip
 80017fc:	2220      	movs	r2, #32
 80017fe:	1b12      	subs	r2, r2, r4
 8001800:	4644      	mov	r4, r8
 8001802:	4094      	lsls	r4, r2
 8001804:	000f      	movs	r7, r1
 8001806:	46a1      	mov	r9, r4
 8001808:	4664      	mov	r4, ip
 800180a:	4091      	lsls	r1, r2
 800180c:	40e7      	lsrs	r7, r4
 800180e:	464c      	mov	r4, r9
 8001810:	1e4a      	subs	r2, r1, #1
 8001812:	4191      	sbcs	r1, r2
 8001814:	433c      	orrs	r4, r7
 8001816:	4642      	mov	r2, r8
 8001818:	430c      	orrs	r4, r1
 800181a:	4661      	mov	r1, ip
 800181c:	40ca      	lsrs	r2, r1
 800181e:	1880      	adds	r0, r0, r2
 8001820:	e6f4      	b.n	800160c <__aeabi_dadd+0x274>
 8001822:	4c79      	ldr	r4, [pc, #484]	; (8001a08 <__aeabi_dadd+0x670>)
 8001824:	42a2      	cmp	r2, r4
 8001826:	d100      	bne.n	800182a <__aeabi_dadd+0x492>
 8001828:	e6fd      	b.n	8001626 <__aeabi_dadd+0x28e>
 800182a:	1859      	adds	r1, r3, r1
 800182c:	4299      	cmp	r1, r3
 800182e:	419b      	sbcs	r3, r3
 8001830:	4440      	add	r0, r8
 8001832:	425f      	negs	r7, r3
 8001834:	19c7      	adds	r7, r0, r7
 8001836:	07fc      	lsls	r4, r7, #31
 8001838:	0849      	lsrs	r1, r1, #1
 800183a:	0016      	movs	r6, r2
 800183c:	430c      	orrs	r4, r1
 800183e:	087f      	lsrs	r7, r7, #1
 8001840:	e6cf      	b.n	80015e2 <__aeabi_dadd+0x24a>
 8001842:	1acc      	subs	r4, r1, r3
 8001844:	42a1      	cmp	r1, r4
 8001846:	41bf      	sbcs	r7, r7
 8001848:	4643      	mov	r3, r8
 800184a:	427f      	negs	r7, r7
 800184c:	1a18      	subs	r0, r3, r0
 800184e:	4655      	mov	r5, sl
 8001850:	1bc7      	subs	r7, r0, r7
 8001852:	e5f7      	b.n	8001444 <__aeabi_dadd+0xac>
 8001854:	08c9      	lsrs	r1, r1, #3
 8001856:	077b      	lsls	r3, r7, #29
 8001858:	4655      	mov	r5, sl
 800185a:	430b      	orrs	r3, r1
 800185c:	08f8      	lsrs	r0, r7, #3
 800185e:	e6c8      	b.n	80015f2 <__aeabi_dadd+0x25a>
 8001860:	2c00      	cmp	r4, #0
 8001862:	d000      	beq.n	8001866 <__aeabi_dadd+0x4ce>
 8001864:	e081      	b.n	800196a <__aeabi_dadd+0x5d2>
 8001866:	4643      	mov	r3, r8
 8001868:	430b      	orrs	r3, r1
 800186a:	d115      	bne.n	8001898 <__aeabi_dadd+0x500>
 800186c:	2080      	movs	r0, #128	; 0x80
 800186e:	2500      	movs	r5, #0
 8001870:	0300      	lsls	r0, r0, #12
 8001872:	e6e3      	b.n	800163c <__aeabi_dadd+0x2a4>
 8001874:	1a5c      	subs	r4, r3, r1
 8001876:	42a3      	cmp	r3, r4
 8001878:	419b      	sbcs	r3, r3
 800187a:	1bc7      	subs	r7, r0, r7
 800187c:	425b      	negs	r3, r3
 800187e:	2601      	movs	r6, #1
 8001880:	1aff      	subs	r7, r7, r3
 8001882:	e5da      	b.n	800143a <__aeabi_dadd+0xa2>
 8001884:	0742      	lsls	r2, r0, #29
 8001886:	08db      	lsrs	r3, r3, #3
 8001888:	4313      	orrs	r3, r2
 800188a:	08c0      	lsrs	r0, r0, #3
 800188c:	e6d2      	b.n	8001634 <__aeabi_dadd+0x29c>
 800188e:	0742      	lsls	r2, r0, #29
 8001890:	08db      	lsrs	r3, r3, #3
 8001892:	4313      	orrs	r3, r2
 8001894:	08c0      	lsrs	r0, r0, #3
 8001896:	e6ac      	b.n	80015f2 <__aeabi_dadd+0x25a>
 8001898:	4643      	mov	r3, r8
 800189a:	4642      	mov	r2, r8
 800189c:	08c9      	lsrs	r1, r1, #3
 800189e:	075b      	lsls	r3, r3, #29
 80018a0:	4655      	mov	r5, sl
 80018a2:	430b      	orrs	r3, r1
 80018a4:	08d0      	lsrs	r0, r2, #3
 80018a6:	e6c5      	b.n	8001634 <__aeabi_dadd+0x29c>
 80018a8:	4643      	mov	r3, r8
 80018aa:	4642      	mov	r2, r8
 80018ac:	075b      	lsls	r3, r3, #29
 80018ae:	08c9      	lsrs	r1, r1, #3
 80018b0:	430b      	orrs	r3, r1
 80018b2:	08d0      	lsrs	r0, r2, #3
 80018b4:	e6be      	b.n	8001634 <__aeabi_dadd+0x29c>
 80018b6:	4303      	orrs	r3, r0
 80018b8:	001c      	movs	r4, r3
 80018ba:	1e63      	subs	r3, r4, #1
 80018bc:	419c      	sbcs	r4, r3
 80018be:	e6fc      	b.n	80016ba <__aeabi_dadd+0x322>
 80018c0:	0002      	movs	r2, r0
 80018c2:	3c20      	subs	r4, #32
 80018c4:	40e2      	lsrs	r2, r4
 80018c6:	0014      	movs	r4, r2
 80018c8:	4662      	mov	r2, ip
 80018ca:	2a20      	cmp	r2, #32
 80018cc:	d003      	beq.n	80018d6 <__aeabi_dadd+0x53e>
 80018ce:	2540      	movs	r5, #64	; 0x40
 80018d0:	1aad      	subs	r5, r5, r2
 80018d2:	40a8      	lsls	r0, r5
 80018d4:	4303      	orrs	r3, r0
 80018d6:	1e58      	subs	r0, r3, #1
 80018d8:	4183      	sbcs	r3, r0
 80018da:	4323      	orrs	r3, r4
 80018dc:	e775      	b.n	80017ca <__aeabi_dadd+0x432>
 80018de:	2a00      	cmp	r2, #0
 80018e0:	d0e2      	beq.n	80018a8 <__aeabi_dadd+0x510>
 80018e2:	003a      	movs	r2, r7
 80018e4:	430a      	orrs	r2, r1
 80018e6:	d0cd      	beq.n	8001884 <__aeabi_dadd+0x4ec>
 80018e8:	0742      	lsls	r2, r0, #29
 80018ea:	08db      	lsrs	r3, r3, #3
 80018ec:	4313      	orrs	r3, r2
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	08c0      	lsrs	r0, r0, #3
 80018f2:	0312      	lsls	r2, r2, #12
 80018f4:	4210      	tst	r0, r2
 80018f6:	d006      	beq.n	8001906 <__aeabi_dadd+0x56e>
 80018f8:	08fc      	lsrs	r4, r7, #3
 80018fa:	4214      	tst	r4, r2
 80018fc:	d103      	bne.n	8001906 <__aeabi_dadd+0x56e>
 80018fe:	0020      	movs	r0, r4
 8001900:	08cb      	lsrs	r3, r1, #3
 8001902:	077a      	lsls	r2, r7, #29
 8001904:	4313      	orrs	r3, r2
 8001906:	0f5a      	lsrs	r2, r3, #29
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	0752      	lsls	r2, r2, #29
 800190c:	08db      	lsrs	r3, r3, #3
 800190e:	4313      	orrs	r3, r2
 8001910:	e690      	b.n	8001634 <__aeabi_dadd+0x29c>
 8001912:	4643      	mov	r3, r8
 8001914:	430b      	orrs	r3, r1
 8001916:	d100      	bne.n	800191a <__aeabi_dadd+0x582>
 8001918:	e709      	b.n	800172e <__aeabi_dadd+0x396>
 800191a:	4643      	mov	r3, r8
 800191c:	4642      	mov	r2, r8
 800191e:	08c9      	lsrs	r1, r1, #3
 8001920:	075b      	lsls	r3, r3, #29
 8001922:	4655      	mov	r5, sl
 8001924:	430b      	orrs	r3, r1
 8001926:	08d0      	lsrs	r0, r2, #3
 8001928:	e666      	b.n	80015f8 <__aeabi_dadd+0x260>
 800192a:	1acc      	subs	r4, r1, r3
 800192c:	42a1      	cmp	r1, r4
 800192e:	4189      	sbcs	r1, r1
 8001930:	1a3f      	subs	r7, r7, r0
 8001932:	4249      	negs	r1, r1
 8001934:	4655      	mov	r5, sl
 8001936:	2601      	movs	r6, #1
 8001938:	1a7f      	subs	r7, r7, r1
 800193a:	e57e      	b.n	800143a <__aeabi_dadd+0xa2>
 800193c:	4642      	mov	r2, r8
 800193e:	1a5c      	subs	r4, r3, r1
 8001940:	1a87      	subs	r7, r0, r2
 8001942:	42a3      	cmp	r3, r4
 8001944:	4192      	sbcs	r2, r2
 8001946:	4252      	negs	r2, r2
 8001948:	1abf      	subs	r7, r7, r2
 800194a:	023a      	lsls	r2, r7, #8
 800194c:	d53d      	bpl.n	80019ca <__aeabi_dadd+0x632>
 800194e:	1acc      	subs	r4, r1, r3
 8001950:	42a1      	cmp	r1, r4
 8001952:	4189      	sbcs	r1, r1
 8001954:	4643      	mov	r3, r8
 8001956:	4249      	negs	r1, r1
 8001958:	1a1f      	subs	r7, r3, r0
 800195a:	4655      	mov	r5, sl
 800195c:	1a7f      	subs	r7, r7, r1
 800195e:	e595      	b.n	800148c <__aeabi_dadd+0xf4>
 8001960:	077b      	lsls	r3, r7, #29
 8001962:	08c9      	lsrs	r1, r1, #3
 8001964:	430b      	orrs	r3, r1
 8001966:	08f8      	lsrs	r0, r7, #3
 8001968:	e643      	b.n	80015f2 <__aeabi_dadd+0x25a>
 800196a:	4644      	mov	r4, r8
 800196c:	08db      	lsrs	r3, r3, #3
 800196e:	430c      	orrs	r4, r1
 8001970:	d130      	bne.n	80019d4 <__aeabi_dadd+0x63c>
 8001972:	0742      	lsls	r2, r0, #29
 8001974:	4313      	orrs	r3, r2
 8001976:	08c0      	lsrs	r0, r0, #3
 8001978:	e65c      	b.n	8001634 <__aeabi_dadd+0x29c>
 800197a:	077b      	lsls	r3, r7, #29
 800197c:	08c9      	lsrs	r1, r1, #3
 800197e:	430b      	orrs	r3, r1
 8001980:	08f8      	lsrs	r0, r7, #3
 8001982:	e639      	b.n	80015f8 <__aeabi_dadd+0x260>
 8001984:	185c      	adds	r4, r3, r1
 8001986:	429c      	cmp	r4, r3
 8001988:	419b      	sbcs	r3, r3
 800198a:	4440      	add	r0, r8
 800198c:	425b      	negs	r3, r3
 800198e:	18c7      	adds	r7, r0, r3
 8001990:	023b      	lsls	r3, r7, #8
 8001992:	d400      	bmi.n	8001996 <__aeabi_dadd+0x5fe>
 8001994:	e625      	b.n	80015e2 <__aeabi_dadd+0x24a>
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <__aeabi_dadd+0x674>)
 8001998:	2601      	movs	r6, #1
 800199a:	401f      	ands	r7, r3
 800199c:	e621      	b.n	80015e2 <__aeabi_dadd+0x24a>
 800199e:	0004      	movs	r4, r0
 80019a0:	3a20      	subs	r2, #32
 80019a2:	40d4      	lsrs	r4, r2
 80019a4:	4662      	mov	r2, ip
 80019a6:	2a20      	cmp	r2, #32
 80019a8:	d004      	beq.n	80019b4 <__aeabi_dadd+0x61c>
 80019aa:	2240      	movs	r2, #64	; 0x40
 80019ac:	4666      	mov	r6, ip
 80019ae:	1b92      	subs	r2, r2, r6
 80019b0:	4090      	lsls	r0, r2
 80019b2:	4303      	orrs	r3, r0
 80019b4:	1e5a      	subs	r2, r3, #1
 80019b6:	4193      	sbcs	r3, r2
 80019b8:	431c      	orrs	r4, r3
 80019ba:	e67e      	b.n	80016ba <__aeabi_dadd+0x322>
 80019bc:	185c      	adds	r4, r3, r1
 80019be:	428c      	cmp	r4, r1
 80019c0:	4189      	sbcs	r1, r1
 80019c2:	4440      	add	r0, r8
 80019c4:	4249      	negs	r1, r1
 80019c6:	1847      	adds	r7, r0, r1
 80019c8:	e6dd      	b.n	8001786 <__aeabi_dadd+0x3ee>
 80019ca:	0023      	movs	r3, r4
 80019cc:	433b      	orrs	r3, r7
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x63a>
 80019d0:	e6ad      	b.n	800172e <__aeabi_dadd+0x396>
 80019d2:	e606      	b.n	80015e2 <__aeabi_dadd+0x24a>
 80019d4:	0744      	lsls	r4, r0, #29
 80019d6:	4323      	orrs	r3, r4
 80019d8:	2480      	movs	r4, #128	; 0x80
 80019da:	08c0      	lsrs	r0, r0, #3
 80019dc:	0324      	lsls	r4, r4, #12
 80019de:	4220      	tst	r0, r4
 80019e0:	d008      	beq.n	80019f4 <__aeabi_dadd+0x65c>
 80019e2:	4642      	mov	r2, r8
 80019e4:	08d6      	lsrs	r6, r2, #3
 80019e6:	4226      	tst	r6, r4
 80019e8:	d104      	bne.n	80019f4 <__aeabi_dadd+0x65c>
 80019ea:	4655      	mov	r5, sl
 80019ec:	0030      	movs	r0, r6
 80019ee:	08cb      	lsrs	r3, r1, #3
 80019f0:	0751      	lsls	r1, r2, #29
 80019f2:	430b      	orrs	r3, r1
 80019f4:	0f5a      	lsrs	r2, r3, #29
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	08db      	lsrs	r3, r3, #3
 80019fa:	0752      	lsls	r2, r2, #29
 80019fc:	4313      	orrs	r3, r2
 80019fe:	e619      	b.n	8001634 <__aeabi_dadd+0x29c>
 8001a00:	2300      	movs	r3, #0
 8001a02:	4a01      	ldr	r2, [pc, #4]	; (8001a08 <__aeabi_dadd+0x670>)
 8001a04:	001f      	movs	r7, r3
 8001a06:	e55e      	b.n	80014c6 <__aeabi_dadd+0x12e>
 8001a08:	000007ff 	.word	0x000007ff
 8001a0c:	ff7fffff 	.word	0xff7fffff

08001a10 <__aeabi_ddiv>:
 8001a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a12:	4657      	mov	r7, sl
 8001a14:	464e      	mov	r6, r9
 8001a16:	4645      	mov	r5, r8
 8001a18:	46de      	mov	lr, fp
 8001a1a:	b5e0      	push	{r5, r6, r7, lr}
 8001a1c:	4681      	mov	r9, r0
 8001a1e:	0005      	movs	r5, r0
 8001a20:	030c      	lsls	r4, r1, #12
 8001a22:	0048      	lsls	r0, r1, #1
 8001a24:	4692      	mov	sl, r2
 8001a26:	001f      	movs	r7, r3
 8001a28:	b085      	sub	sp, #20
 8001a2a:	0b24      	lsrs	r4, r4, #12
 8001a2c:	0d40      	lsrs	r0, r0, #21
 8001a2e:	0fce      	lsrs	r6, r1, #31
 8001a30:	2800      	cmp	r0, #0
 8001a32:	d100      	bne.n	8001a36 <__aeabi_ddiv+0x26>
 8001a34:	e156      	b.n	8001ce4 <__aeabi_ddiv+0x2d4>
 8001a36:	4bd4      	ldr	r3, [pc, #848]	; (8001d88 <__aeabi_ddiv+0x378>)
 8001a38:	4298      	cmp	r0, r3
 8001a3a:	d100      	bne.n	8001a3e <__aeabi_ddiv+0x2e>
 8001a3c:	e172      	b.n	8001d24 <__aeabi_ddiv+0x314>
 8001a3e:	0f6b      	lsrs	r3, r5, #29
 8001a40:	00e4      	lsls	r4, r4, #3
 8001a42:	431c      	orrs	r4, r3
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	041b      	lsls	r3, r3, #16
 8001a48:	4323      	orrs	r3, r4
 8001a4a:	4698      	mov	r8, r3
 8001a4c:	4bcf      	ldr	r3, [pc, #828]	; (8001d8c <__aeabi_ddiv+0x37c>)
 8001a4e:	00ed      	lsls	r5, r5, #3
 8001a50:	469b      	mov	fp, r3
 8001a52:	2300      	movs	r3, #0
 8001a54:	4699      	mov	r9, r3
 8001a56:	4483      	add	fp, r0
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	033c      	lsls	r4, r7, #12
 8001a5c:	007b      	lsls	r3, r7, #1
 8001a5e:	4650      	mov	r0, sl
 8001a60:	0b24      	lsrs	r4, r4, #12
 8001a62:	0d5b      	lsrs	r3, r3, #21
 8001a64:	0fff      	lsrs	r7, r7, #31
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d100      	bne.n	8001a6c <__aeabi_ddiv+0x5c>
 8001a6a:	e11f      	b.n	8001cac <__aeabi_ddiv+0x29c>
 8001a6c:	4ac6      	ldr	r2, [pc, #792]	; (8001d88 <__aeabi_ddiv+0x378>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d100      	bne.n	8001a74 <__aeabi_ddiv+0x64>
 8001a72:	e162      	b.n	8001d3a <__aeabi_ddiv+0x32a>
 8001a74:	49c5      	ldr	r1, [pc, #788]	; (8001d8c <__aeabi_ddiv+0x37c>)
 8001a76:	0f42      	lsrs	r2, r0, #29
 8001a78:	468c      	mov	ip, r1
 8001a7a:	00e4      	lsls	r4, r4, #3
 8001a7c:	4659      	mov	r1, fp
 8001a7e:	4314      	orrs	r4, r2
 8001a80:	2280      	movs	r2, #128	; 0x80
 8001a82:	4463      	add	r3, ip
 8001a84:	0412      	lsls	r2, r2, #16
 8001a86:	1acb      	subs	r3, r1, r3
 8001a88:	4314      	orrs	r4, r2
 8001a8a:	469b      	mov	fp, r3
 8001a8c:	00c2      	lsls	r2, r0, #3
 8001a8e:	2000      	movs	r0, #0
 8001a90:	0033      	movs	r3, r6
 8001a92:	407b      	eors	r3, r7
 8001a94:	469a      	mov	sl, r3
 8001a96:	464b      	mov	r3, r9
 8001a98:	2b0f      	cmp	r3, #15
 8001a9a:	d827      	bhi.n	8001aec <__aeabi_ddiv+0xdc>
 8001a9c:	49bc      	ldr	r1, [pc, #752]	; (8001d90 <__aeabi_ddiv+0x380>)
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	58cb      	ldr	r3, [r1, r3]
 8001aa2:	469f      	mov	pc, r3
 8001aa4:	46b2      	mov	sl, r6
 8001aa6:	9b00      	ldr	r3, [sp, #0]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d016      	beq.n	8001ada <__aeabi_ddiv+0xca>
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_ddiv+0xa2>
 8001ab0:	e28e      	b.n	8001fd0 <__aeabi_ddiv+0x5c0>
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d000      	beq.n	8001ab8 <__aeabi_ddiv+0xa8>
 8001ab6:	e0d9      	b.n	8001c6c <__aeabi_ddiv+0x25c>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	2400      	movs	r4, #0
 8001abc:	2500      	movs	r5, #0
 8001abe:	4652      	mov	r2, sl
 8001ac0:	051b      	lsls	r3, r3, #20
 8001ac2:	4323      	orrs	r3, r4
 8001ac4:	07d2      	lsls	r2, r2, #31
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	0028      	movs	r0, r5
 8001aca:	0019      	movs	r1, r3
 8001acc:	b005      	add	sp, #20
 8001ace:	bcf0      	pop	{r4, r5, r6, r7}
 8001ad0:	46bb      	mov	fp, r7
 8001ad2:	46b2      	mov	sl, r6
 8001ad4:	46a9      	mov	r9, r5
 8001ad6:	46a0      	mov	r8, r4
 8001ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ada:	2400      	movs	r4, #0
 8001adc:	2500      	movs	r5, #0
 8001ade:	4baa      	ldr	r3, [pc, #680]	; (8001d88 <__aeabi_ddiv+0x378>)
 8001ae0:	e7ed      	b.n	8001abe <__aeabi_ddiv+0xae>
 8001ae2:	46ba      	mov	sl, r7
 8001ae4:	46a0      	mov	r8, r4
 8001ae6:	0015      	movs	r5, r2
 8001ae8:	9000      	str	r0, [sp, #0]
 8001aea:	e7dc      	b.n	8001aa6 <__aeabi_ddiv+0x96>
 8001aec:	4544      	cmp	r4, r8
 8001aee:	d200      	bcs.n	8001af2 <__aeabi_ddiv+0xe2>
 8001af0:	e1c7      	b.n	8001e82 <__aeabi_ddiv+0x472>
 8001af2:	d100      	bne.n	8001af6 <__aeabi_ddiv+0xe6>
 8001af4:	e1c2      	b.n	8001e7c <__aeabi_ddiv+0x46c>
 8001af6:	2301      	movs	r3, #1
 8001af8:	425b      	negs	r3, r3
 8001afa:	469c      	mov	ip, r3
 8001afc:	002e      	movs	r6, r5
 8001afe:	4640      	mov	r0, r8
 8001b00:	2500      	movs	r5, #0
 8001b02:	44e3      	add	fp, ip
 8001b04:	0223      	lsls	r3, r4, #8
 8001b06:	0e14      	lsrs	r4, r2, #24
 8001b08:	431c      	orrs	r4, r3
 8001b0a:	0c1b      	lsrs	r3, r3, #16
 8001b0c:	4699      	mov	r9, r3
 8001b0e:	0423      	lsls	r3, r4, #16
 8001b10:	0c1f      	lsrs	r7, r3, #16
 8001b12:	0212      	lsls	r2, r2, #8
 8001b14:	4649      	mov	r1, r9
 8001b16:	9200      	str	r2, [sp, #0]
 8001b18:	9701      	str	r7, [sp, #4]
 8001b1a:	f7fe fb85 	bl	8000228 <__aeabi_uidivmod>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	437a      	muls	r2, r7
 8001b22:	040b      	lsls	r3, r1, #16
 8001b24:	0c31      	lsrs	r1, r6, #16
 8001b26:	4680      	mov	r8, r0
 8001b28:	4319      	orrs	r1, r3
 8001b2a:	428a      	cmp	r2, r1
 8001b2c:	d907      	bls.n	8001b3e <__aeabi_ddiv+0x12e>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	425b      	negs	r3, r3
 8001b32:	469c      	mov	ip, r3
 8001b34:	1909      	adds	r1, r1, r4
 8001b36:	44e0      	add	r8, ip
 8001b38:	428c      	cmp	r4, r1
 8001b3a:	d800      	bhi.n	8001b3e <__aeabi_ddiv+0x12e>
 8001b3c:	e207      	b.n	8001f4e <__aeabi_ddiv+0x53e>
 8001b3e:	1a88      	subs	r0, r1, r2
 8001b40:	4649      	mov	r1, r9
 8001b42:	f7fe fb71 	bl	8000228 <__aeabi_uidivmod>
 8001b46:	0409      	lsls	r1, r1, #16
 8001b48:	468c      	mov	ip, r1
 8001b4a:	0431      	lsls	r1, r6, #16
 8001b4c:	4666      	mov	r6, ip
 8001b4e:	9a01      	ldr	r2, [sp, #4]
 8001b50:	0c09      	lsrs	r1, r1, #16
 8001b52:	4342      	muls	r2, r0
 8001b54:	0003      	movs	r3, r0
 8001b56:	4331      	orrs	r1, r6
 8001b58:	428a      	cmp	r2, r1
 8001b5a:	d904      	bls.n	8001b66 <__aeabi_ddiv+0x156>
 8001b5c:	1909      	adds	r1, r1, r4
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	428c      	cmp	r4, r1
 8001b62:	d800      	bhi.n	8001b66 <__aeabi_ddiv+0x156>
 8001b64:	e1ed      	b.n	8001f42 <__aeabi_ddiv+0x532>
 8001b66:	1a88      	subs	r0, r1, r2
 8001b68:	4642      	mov	r2, r8
 8001b6a:	0412      	lsls	r2, r2, #16
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	4690      	mov	r8, r2
 8001b70:	4641      	mov	r1, r8
 8001b72:	9b00      	ldr	r3, [sp, #0]
 8001b74:	040e      	lsls	r6, r1, #16
 8001b76:	0c1b      	lsrs	r3, r3, #16
 8001b78:	001f      	movs	r7, r3
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	9b00      	ldr	r3, [sp, #0]
 8001b7e:	0c36      	lsrs	r6, r6, #16
 8001b80:	041b      	lsls	r3, r3, #16
 8001b82:	0c19      	lsrs	r1, r3, #16
 8001b84:	000b      	movs	r3, r1
 8001b86:	4373      	muls	r3, r6
 8001b88:	0c12      	lsrs	r2, r2, #16
 8001b8a:	437e      	muls	r6, r7
 8001b8c:	9103      	str	r1, [sp, #12]
 8001b8e:	4351      	muls	r1, r2
 8001b90:	437a      	muls	r2, r7
 8001b92:	0c1f      	lsrs	r7, r3, #16
 8001b94:	46bc      	mov	ip, r7
 8001b96:	1876      	adds	r6, r6, r1
 8001b98:	4466      	add	r6, ip
 8001b9a:	42b1      	cmp	r1, r6
 8001b9c:	d903      	bls.n	8001ba6 <__aeabi_ddiv+0x196>
 8001b9e:	2180      	movs	r1, #128	; 0x80
 8001ba0:	0249      	lsls	r1, r1, #9
 8001ba2:	468c      	mov	ip, r1
 8001ba4:	4462      	add	r2, ip
 8001ba6:	0c31      	lsrs	r1, r6, #16
 8001ba8:	188a      	adds	r2, r1, r2
 8001baa:	0431      	lsls	r1, r6, #16
 8001bac:	041e      	lsls	r6, r3, #16
 8001bae:	0c36      	lsrs	r6, r6, #16
 8001bb0:	198e      	adds	r6, r1, r6
 8001bb2:	4290      	cmp	r0, r2
 8001bb4:	d302      	bcc.n	8001bbc <__aeabi_ddiv+0x1ac>
 8001bb6:	d112      	bne.n	8001bde <__aeabi_ddiv+0x1ce>
 8001bb8:	42b5      	cmp	r5, r6
 8001bba:	d210      	bcs.n	8001bde <__aeabi_ddiv+0x1ce>
 8001bbc:	4643      	mov	r3, r8
 8001bbe:	1e59      	subs	r1, r3, #1
 8001bc0:	9b00      	ldr	r3, [sp, #0]
 8001bc2:	469c      	mov	ip, r3
 8001bc4:	4465      	add	r5, ip
 8001bc6:	001f      	movs	r7, r3
 8001bc8:	429d      	cmp	r5, r3
 8001bca:	419b      	sbcs	r3, r3
 8001bcc:	425b      	negs	r3, r3
 8001bce:	191b      	adds	r3, r3, r4
 8001bd0:	18c0      	adds	r0, r0, r3
 8001bd2:	4284      	cmp	r4, r0
 8001bd4:	d200      	bcs.n	8001bd8 <__aeabi_ddiv+0x1c8>
 8001bd6:	e1a0      	b.n	8001f1a <__aeabi_ddiv+0x50a>
 8001bd8:	d100      	bne.n	8001bdc <__aeabi_ddiv+0x1cc>
 8001bda:	e19b      	b.n	8001f14 <__aeabi_ddiv+0x504>
 8001bdc:	4688      	mov	r8, r1
 8001bde:	1bae      	subs	r6, r5, r6
 8001be0:	42b5      	cmp	r5, r6
 8001be2:	41ad      	sbcs	r5, r5
 8001be4:	1a80      	subs	r0, r0, r2
 8001be6:	426d      	negs	r5, r5
 8001be8:	1b40      	subs	r0, r0, r5
 8001bea:	4284      	cmp	r4, r0
 8001bec:	d100      	bne.n	8001bf0 <__aeabi_ddiv+0x1e0>
 8001bee:	e1d5      	b.n	8001f9c <__aeabi_ddiv+0x58c>
 8001bf0:	4649      	mov	r1, r9
 8001bf2:	f7fe fb19 	bl	8000228 <__aeabi_uidivmod>
 8001bf6:	9a01      	ldr	r2, [sp, #4]
 8001bf8:	040b      	lsls	r3, r1, #16
 8001bfa:	4342      	muls	r2, r0
 8001bfc:	0c31      	lsrs	r1, r6, #16
 8001bfe:	0005      	movs	r5, r0
 8001c00:	4319      	orrs	r1, r3
 8001c02:	428a      	cmp	r2, r1
 8001c04:	d900      	bls.n	8001c08 <__aeabi_ddiv+0x1f8>
 8001c06:	e16c      	b.n	8001ee2 <__aeabi_ddiv+0x4d2>
 8001c08:	1a88      	subs	r0, r1, r2
 8001c0a:	4649      	mov	r1, r9
 8001c0c:	f7fe fb0c 	bl	8000228 <__aeabi_uidivmod>
 8001c10:	9a01      	ldr	r2, [sp, #4]
 8001c12:	0436      	lsls	r6, r6, #16
 8001c14:	4342      	muls	r2, r0
 8001c16:	0409      	lsls	r1, r1, #16
 8001c18:	0c36      	lsrs	r6, r6, #16
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	430e      	orrs	r6, r1
 8001c1e:	42b2      	cmp	r2, r6
 8001c20:	d900      	bls.n	8001c24 <__aeabi_ddiv+0x214>
 8001c22:	e153      	b.n	8001ecc <__aeabi_ddiv+0x4bc>
 8001c24:	9803      	ldr	r0, [sp, #12]
 8001c26:	1ab6      	subs	r6, r6, r2
 8001c28:	0002      	movs	r2, r0
 8001c2a:	042d      	lsls	r5, r5, #16
 8001c2c:	431d      	orrs	r5, r3
 8001c2e:	9f02      	ldr	r7, [sp, #8]
 8001c30:	042b      	lsls	r3, r5, #16
 8001c32:	0c1b      	lsrs	r3, r3, #16
 8001c34:	435a      	muls	r2, r3
 8001c36:	437b      	muls	r3, r7
 8001c38:	469c      	mov	ip, r3
 8001c3a:	0c29      	lsrs	r1, r5, #16
 8001c3c:	4348      	muls	r0, r1
 8001c3e:	0c13      	lsrs	r3, r2, #16
 8001c40:	4484      	add	ip, r0
 8001c42:	4463      	add	r3, ip
 8001c44:	4379      	muls	r1, r7
 8001c46:	4298      	cmp	r0, r3
 8001c48:	d903      	bls.n	8001c52 <__aeabi_ddiv+0x242>
 8001c4a:	2080      	movs	r0, #128	; 0x80
 8001c4c:	0240      	lsls	r0, r0, #9
 8001c4e:	4684      	mov	ip, r0
 8001c50:	4461      	add	r1, ip
 8001c52:	0c18      	lsrs	r0, r3, #16
 8001c54:	0412      	lsls	r2, r2, #16
 8001c56:	041b      	lsls	r3, r3, #16
 8001c58:	0c12      	lsrs	r2, r2, #16
 8001c5a:	1841      	adds	r1, r0, r1
 8001c5c:	189b      	adds	r3, r3, r2
 8001c5e:	428e      	cmp	r6, r1
 8001c60:	d200      	bcs.n	8001c64 <__aeabi_ddiv+0x254>
 8001c62:	e0ff      	b.n	8001e64 <__aeabi_ddiv+0x454>
 8001c64:	d100      	bne.n	8001c68 <__aeabi_ddiv+0x258>
 8001c66:	e0fa      	b.n	8001e5e <__aeabi_ddiv+0x44e>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	431d      	orrs	r5, r3
 8001c6c:	4a49      	ldr	r2, [pc, #292]	; (8001d94 <__aeabi_ddiv+0x384>)
 8001c6e:	445a      	add	r2, fp
 8001c70:	2a00      	cmp	r2, #0
 8001c72:	dc00      	bgt.n	8001c76 <__aeabi_ddiv+0x266>
 8001c74:	e0aa      	b.n	8001dcc <__aeabi_ddiv+0x3bc>
 8001c76:	076b      	lsls	r3, r5, #29
 8001c78:	d000      	beq.n	8001c7c <__aeabi_ddiv+0x26c>
 8001c7a:	e13d      	b.n	8001ef8 <__aeabi_ddiv+0x4e8>
 8001c7c:	08ed      	lsrs	r5, r5, #3
 8001c7e:	4643      	mov	r3, r8
 8001c80:	01db      	lsls	r3, r3, #7
 8001c82:	d506      	bpl.n	8001c92 <__aeabi_ddiv+0x282>
 8001c84:	4642      	mov	r2, r8
 8001c86:	4b44      	ldr	r3, [pc, #272]	; (8001d98 <__aeabi_ddiv+0x388>)
 8001c88:	401a      	ands	r2, r3
 8001c8a:	4690      	mov	r8, r2
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	00d2      	lsls	r2, r2, #3
 8001c90:	445a      	add	r2, fp
 8001c92:	4b42      	ldr	r3, [pc, #264]	; (8001d9c <__aeabi_ddiv+0x38c>)
 8001c94:	429a      	cmp	r2, r3
 8001c96:	dd00      	ble.n	8001c9a <__aeabi_ddiv+0x28a>
 8001c98:	e71f      	b.n	8001ada <__aeabi_ddiv+0xca>
 8001c9a:	4643      	mov	r3, r8
 8001c9c:	075b      	lsls	r3, r3, #29
 8001c9e:	431d      	orrs	r5, r3
 8001ca0:	4643      	mov	r3, r8
 8001ca2:	0552      	lsls	r2, r2, #21
 8001ca4:	025c      	lsls	r4, r3, #9
 8001ca6:	0b24      	lsrs	r4, r4, #12
 8001ca8:	0d53      	lsrs	r3, r2, #21
 8001caa:	e708      	b.n	8001abe <__aeabi_ddiv+0xae>
 8001cac:	4652      	mov	r2, sl
 8001cae:	4322      	orrs	r2, r4
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_ddiv+0x2a4>
 8001cb2:	e07b      	b.n	8001dac <__aeabi_ddiv+0x39c>
 8001cb4:	2c00      	cmp	r4, #0
 8001cb6:	d100      	bne.n	8001cba <__aeabi_ddiv+0x2aa>
 8001cb8:	e0fa      	b.n	8001eb0 <__aeabi_ddiv+0x4a0>
 8001cba:	0020      	movs	r0, r4
 8001cbc:	f001 fa22 	bl	8003104 <__clzsi2>
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	3a0b      	subs	r2, #11
 8001cc4:	231d      	movs	r3, #29
 8001cc6:	0001      	movs	r1, r0
 8001cc8:	1a9b      	subs	r3, r3, r2
 8001cca:	4652      	mov	r2, sl
 8001ccc:	3908      	subs	r1, #8
 8001cce:	40da      	lsrs	r2, r3
 8001cd0:	408c      	lsls	r4, r1
 8001cd2:	4314      	orrs	r4, r2
 8001cd4:	4652      	mov	r2, sl
 8001cd6:	408a      	lsls	r2, r1
 8001cd8:	4b31      	ldr	r3, [pc, #196]	; (8001da0 <__aeabi_ddiv+0x390>)
 8001cda:	4458      	add	r0, fp
 8001cdc:	469b      	mov	fp, r3
 8001cde:	4483      	add	fp, r0
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	e6d5      	b.n	8001a90 <__aeabi_ddiv+0x80>
 8001ce4:	464b      	mov	r3, r9
 8001ce6:	4323      	orrs	r3, r4
 8001ce8:	4698      	mov	r8, r3
 8001cea:	d044      	beq.n	8001d76 <__aeabi_ddiv+0x366>
 8001cec:	2c00      	cmp	r4, #0
 8001cee:	d100      	bne.n	8001cf2 <__aeabi_ddiv+0x2e2>
 8001cf0:	e0ce      	b.n	8001e90 <__aeabi_ddiv+0x480>
 8001cf2:	0020      	movs	r0, r4
 8001cf4:	f001 fa06 	bl	8003104 <__clzsi2>
 8001cf8:	0001      	movs	r1, r0
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	390b      	subs	r1, #11
 8001cfe:	231d      	movs	r3, #29
 8001d00:	1a5b      	subs	r3, r3, r1
 8001d02:	4649      	mov	r1, r9
 8001d04:	0010      	movs	r0, r2
 8001d06:	40d9      	lsrs	r1, r3
 8001d08:	3808      	subs	r0, #8
 8001d0a:	4084      	lsls	r4, r0
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	464d      	mov	r5, r9
 8001d10:	4323      	orrs	r3, r4
 8001d12:	4698      	mov	r8, r3
 8001d14:	4085      	lsls	r5, r0
 8001d16:	4823      	ldr	r0, [pc, #140]	; (8001da4 <__aeabi_ddiv+0x394>)
 8001d18:	1a83      	subs	r3, r0, r2
 8001d1a:	469b      	mov	fp, r3
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	4699      	mov	r9, r3
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	e69a      	b.n	8001a5a <__aeabi_ddiv+0x4a>
 8001d24:	464b      	mov	r3, r9
 8001d26:	4323      	orrs	r3, r4
 8001d28:	4698      	mov	r8, r3
 8001d2a:	d11d      	bne.n	8001d68 <__aeabi_ddiv+0x358>
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	4699      	mov	r9, r3
 8001d30:	3b06      	subs	r3, #6
 8001d32:	2500      	movs	r5, #0
 8001d34:	4683      	mov	fp, r0
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	e68f      	b.n	8001a5a <__aeabi_ddiv+0x4a>
 8001d3a:	4652      	mov	r2, sl
 8001d3c:	4322      	orrs	r2, r4
 8001d3e:	d109      	bne.n	8001d54 <__aeabi_ddiv+0x344>
 8001d40:	2302      	movs	r3, #2
 8001d42:	4649      	mov	r1, r9
 8001d44:	4319      	orrs	r1, r3
 8001d46:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <__aeabi_ddiv+0x398>)
 8001d48:	4689      	mov	r9, r1
 8001d4a:	469c      	mov	ip, r3
 8001d4c:	2400      	movs	r4, #0
 8001d4e:	2002      	movs	r0, #2
 8001d50:	44e3      	add	fp, ip
 8001d52:	e69d      	b.n	8001a90 <__aeabi_ddiv+0x80>
 8001d54:	2303      	movs	r3, #3
 8001d56:	464a      	mov	r2, r9
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <__aeabi_ddiv+0x398>)
 8001d5c:	4691      	mov	r9, r2
 8001d5e:	469c      	mov	ip, r3
 8001d60:	4652      	mov	r2, sl
 8001d62:	2003      	movs	r0, #3
 8001d64:	44e3      	add	fp, ip
 8001d66:	e693      	b.n	8001a90 <__aeabi_ddiv+0x80>
 8001d68:	230c      	movs	r3, #12
 8001d6a:	4699      	mov	r9, r3
 8001d6c:	3b09      	subs	r3, #9
 8001d6e:	46a0      	mov	r8, r4
 8001d70:	4683      	mov	fp, r0
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	e671      	b.n	8001a5a <__aeabi_ddiv+0x4a>
 8001d76:	2304      	movs	r3, #4
 8001d78:	4699      	mov	r9, r3
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	469b      	mov	fp, r3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	2500      	movs	r5, #0
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	e669      	b.n	8001a5a <__aeabi_ddiv+0x4a>
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	000007ff 	.word	0x000007ff
 8001d8c:	fffffc01 	.word	0xfffffc01
 8001d90:	08007c24 	.word	0x08007c24
 8001d94:	000003ff 	.word	0x000003ff
 8001d98:	feffffff 	.word	0xfeffffff
 8001d9c:	000007fe 	.word	0x000007fe
 8001da0:	000003f3 	.word	0x000003f3
 8001da4:	fffffc0d 	.word	0xfffffc0d
 8001da8:	fffff801 	.word	0xfffff801
 8001dac:	4649      	mov	r1, r9
 8001dae:	2301      	movs	r3, #1
 8001db0:	4319      	orrs	r1, r3
 8001db2:	4689      	mov	r9, r1
 8001db4:	2400      	movs	r4, #0
 8001db6:	2001      	movs	r0, #1
 8001db8:	e66a      	b.n	8001a90 <__aeabi_ddiv+0x80>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2480      	movs	r4, #128	; 0x80
 8001dbe:	469a      	mov	sl, r3
 8001dc0:	2500      	movs	r5, #0
 8001dc2:	4b8a      	ldr	r3, [pc, #552]	; (8001fec <__aeabi_ddiv+0x5dc>)
 8001dc4:	0324      	lsls	r4, r4, #12
 8001dc6:	e67a      	b.n	8001abe <__aeabi_ddiv+0xae>
 8001dc8:	2501      	movs	r5, #1
 8001dca:	426d      	negs	r5, r5
 8001dcc:	2301      	movs	r3, #1
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	2b38      	cmp	r3, #56	; 0x38
 8001dd2:	dd00      	ble.n	8001dd6 <__aeabi_ddiv+0x3c6>
 8001dd4:	e670      	b.n	8001ab8 <__aeabi_ddiv+0xa8>
 8001dd6:	2b1f      	cmp	r3, #31
 8001dd8:	dc00      	bgt.n	8001ddc <__aeabi_ddiv+0x3cc>
 8001dda:	e0bf      	b.n	8001f5c <__aeabi_ddiv+0x54c>
 8001ddc:	211f      	movs	r1, #31
 8001dde:	4249      	negs	r1, r1
 8001de0:	1a8a      	subs	r2, r1, r2
 8001de2:	4641      	mov	r1, r8
 8001de4:	40d1      	lsrs	r1, r2
 8001de6:	000a      	movs	r2, r1
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	d004      	beq.n	8001df6 <__aeabi_ddiv+0x3e6>
 8001dec:	4641      	mov	r1, r8
 8001dee:	4b80      	ldr	r3, [pc, #512]	; (8001ff0 <__aeabi_ddiv+0x5e0>)
 8001df0:	445b      	add	r3, fp
 8001df2:	4099      	lsls	r1, r3
 8001df4:	430d      	orrs	r5, r1
 8001df6:	1e6b      	subs	r3, r5, #1
 8001df8:	419d      	sbcs	r5, r3
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	432a      	orrs	r2, r5
 8001dfe:	001d      	movs	r5, r3
 8001e00:	2400      	movs	r4, #0
 8001e02:	4015      	ands	r5, r2
 8001e04:	4213      	tst	r3, r2
 8001e06:	d100      	bne.n	8001e0a <__aeabi_ddiv+0x3fa>
 8001e08:	e0d4      	b.n	8001fb4 <__aeabi_ddiv+0x5a4>
 8001e0a:	210f      	movs	r1, #15
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	4011      	ands	r1, r2
 8001e10:	2904      	cmp	r1, #4
 8001e12:	d100      	bne.n	8001e16 <__aeabi_ddiv+0x406>
 8001e14:	e0cb      	b.n	8001fae <__aeabi_ddiv+0x59e>
 8001e16:	1d11      	adds	r1, r2, #4
 8001e18:	4291      	cmp	r1, r2
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	4252      	negs	r2, r2
 8001e1e:	189b      	adds	r3, r3, r2
 8001e20:	000a      	movs	r2, r1
 8001e22:	0219      	lsls	r1, r3, #8
 8001e24:	d400      	bmi.n	8001e28 <__aeabi_ddiv+0x418>
 8001e26:	e0c2      	b.n	8001fae <__aeabi_ddiv+0x59e>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	2400      	movs	r4, #0
 8001e2c:	2500      	movs	r5, #0
 8001e2e:	e646      	b.n	8001abe <__aeabi_ddiv+0xae>
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	4641      	mov	r1, r8
 8001e34:	031b      	lsls	r3, r3, #12
 8001e36:	4219      	tst	r1, r3
 8001e38:	d008      	beq.n	8001e4c <__aeabi_ddiv+0x43c>
 8001e3a:	421c      	tst	r4, r3
 8001e3c:	d106      	bne.n	8001e4c <__aeabi_ddiv+0x43c>
 8001e3e:	431c      	orrs	r4, r3
 8001e40:	0324      	lsls	r4, r4, #12
 8001e42:	46ba      	mov	sl, r7
 8001e44:	0015      	movs	r5, r2
 8001e46:	4b69      	ldr	r3, [pc, #420]	; (8001fec <__aeabi_ddiv+0x5dc>)
 8001e48:	0b24      	lsrs	r4, r4, #12
 8001e4a:	e638      	b.n	8001abe <__aeabi_ddiv+0xae>
 8001e4c:	2480      	movs	r4, #128	; 0x80
 8001e4e:	4643      	mov	r3, r8
 8001e50:	0324      	lsls	r4, r4, #12
 8001e52:	431c      	orrs	r4, r3
 8001e54:	0324      	lsls	r4, r4, #12
 8001e56:	46b2      	mov	sl, r6
 8001e58:	4b64      	ldr	r3, [pc, #400]	; (8001fec <__aeabi_ddiv+0x5dc>)
 8001e5a:	0b24      	lsrs	r4, r4, #12
 8001e5c:	e62f      	b.n	8001abe <__aeabi_ddiv+0xae>
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d100      	bne.n	8001e64 <__aeabi_ddiv+0x454>
 8001e62:	e703      	b.n	8001c6c <__aeabi_ddiv+0x25c>
 8001e64:	19a6      	adds	r6, r4, r6
 8001e66:	1e68      	subs	r0, r5, #1
 8001e68:	42a6      	cmp	r6, r4
 8001e6a:	d200      	bcs.n	8001e6e <__aeabi_ddiv+0x45e>
 8001e6c:	e08d      	b.n	8001f8a <__aeabi_ddiv+0x57a>
 8001e6e:	428e      	cmp	r6, r1
 8001e70:	d200      	bcs.n	8001e74 <__aeabi_ddiv+0x464>
 8001e72:	e0a3      	b.n	8001fbc <__aeabi_ddiv+0x5ac>
 8001e74:	d100      	bne.n	8001e78 <__aeabi_ddiv+0x468>
 8001e76:	e0b3      	b.n	8001fe0 <__aeabi_ddiv+0x5d0>
 8001e78:	0005      	movs	r5, r0
 8001e7a:	e6f5      	b.n	8001c68 <__aeabi_ddiv+0x258>
 8001e7c:	42aa      	cmp	r2, r5
 8001e7e:	d900      	bls.n	8001e82 <__aeabi_ddiv+0x472>
 8001e80:	e639      	b.n	8001af6 <__aeabi_ddiv+0xe6>
 8001e82:	4643      	mov	r3, r8
 8001e84:	07de      	lsls	r6, r3, #31
 8001e86:	0858      	lsrs	r0, r3, #1
 8001e88:	086b      	lsrs	r3, r5, #1
 8001e8a:	431e      	orrs	r6, r3
 8001e8c:	07ed      	lsls	r5, r5, #31
 8001e8e:	e639      	b.n	8001b04 <__aeabi_ddiv+0xf4>
 8001e90:	4648      	mov	r0, r9
 8001e92:	f001 f937 	bl	8003104 <__clzsi2>
 8001e96:	0001      	movs	r1, r0
 8001e98:	0002      	movs	r2, r0
 8001e9a:	3115      	adds	r1, #21
 8001e9c:	3220      	adds	r2, #32
 8001e9e:	291c      	cmp	r1, #28
 8001ea0:	dc00      	bgt.n	8001ea4 <__aeabi_ddiv+0x494>
 8001ea2:	e72c      	b.n	8001cfe <__aeabi_ddiv+0x2ee>
 8001ea4:	464b      	mov	r3, r9
 8001ea6:	3808      	subs	r0, #8
 8001ea8:	4083      	lsls	r3, r0
 8001eaa:	2500      	movs	r5, #0
 8001eac:	4698      	mov	r8, r3
 8001eae:	e732      	b.n	8001d16 <__aeabi_ddiv+0x306>
 8001eb0:	f001 f928 	bl	8003104 <__clzsi2>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	001a      	movs	r2, r3
 8001eb8:	3215      	adds	r2, #21
 8001eba:	3020      	adds	r0, #32
 8001ebc:	2a1c      	cmp	r2, #28
 8001ebe:	dc00      	bgt.n	8001ec2 <__aeabi_ddiv+0x4b2>
 8001ec0:	e700      	b.n	8001cc4 <__aeabi_ddiv+0x2b4>
 8001ec2:	4654      	mov	r4, sl
 8001ec4:	3b08      	subs	r3, #8
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	409c      	lsls	r4, r3
 8001eca:	e705      	b.n	8001cd8 <__aeabi_ddiv+0x2c8>
 8001ecc:	1936      	adds	r6, r6, r4
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	42b4      	cmp	r4, r6
 8001ed2:	d900      	bls.n	8001ed6 <__aeabi_ddiv+0x4c6>
 8001ed4:	e6a6      	b.n	8001c24 <__aeabi_ddiv+0x214>
 8001ed6:	42b2      	cmp	r2, r6
 8001ed8:	d800      	bhi.n	8001edc <__aeabi_ddiv+0x4cc>
 8001eda:	e6a3      	b.n	8001c24 <__aeabi_ddiv+0x214>
 8001edc:	1e83      	subs	r3, r0, #2
 8001ede:	1936      	adds	r6, r6, r4
 8001ee0:	e6a0      	b.n	8001c24 <__aeabi_ddiv+0x214>
 8001ee2:	1909      	adds	r1, r1, r4
 8001ee4:	3d01      	subs	r5, #1
 8001ee6:	428c      	cmp	r4, r1
 8001ee8:	d900      	bls.n	8001eec <__aeabi_ddiv+0x4dc>
 8001eea:	e68d      	b.n	8001c08 <__aeabi_ddiv+0x1f8>
 8001eec:	428a      	cmp	r2, r1
 8001eee:	d800      	bhi.n	8001ef2 <__aeabi_ddiv+0x4e2>
 8001ef0:	e68a      	b.n	8001c08 <__aeabi_ddiv+0x1f8>
 8001ef2:	1e85      	subs	r5, r0, #2
 8001ef4:	1909      	adds	r1, r1, r4
 8001ef6:	e687      	b.n	8001c08 <__aeabi_ddiv+0x1f8>
 8001ef8:	230f      	movs	r3, #15
 8001efa:	402b      	ands	r3, r5
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d100      	bne.n	8001f02 <__aeabi_ddiv+0x4f2>
 8001f00:	e6bc      	b.n	8001c7c <__aeabi_ddiv+0x26c>
 8001f02:	2305      	movs	r3, #5
 8001f04:	425b      	negs	r3, r3
 8001f06:	42ab      	cmp	r3, r5
 8001f08:	419b      	sbcs	r3, r3
 8001f0a:	3504      	adds	r5, #4
 8001f0c:	425b      	negs	r3, r3
 8001f0e:	08ed      	lsrs	r5, r5, #3
 8001f10:	4498      	add	r8, r3
 8001f12:	e6b4      	b.n	8001c7e <__aeabi_ddiv+0x26e>
 8001f14:	42af      	cmp	r7, r5
 8001f16:	d900      	bls.n	8001f1a <__aeabi_ddiv+0x50a>
 8001f18:	e660      	b.n	8001bdc <__aeabi_ddiv+0x1cc>
 8001f1a:	4282      	cmp	r2, r0
 8001f1c:	d804      	bhi.n	8001f28 <__aeabi_ddiv+0x518>
 8001f1e:	d000      	beq.n	8001f22 <__aeabi_ddiv+0x512>
 8001f20:	e65c      	b.n	8001bdc <__aeabi_ddiv+0x1cc>
 8001f22:	42ae      	cmp	r6, r5
 8001f24:	d800      	bhi.n	8001f28 <__aeabi_ddiv+0x518>
 8001f26:	e659      	b.n	8001bdc <__aeabi_ddiv+0x1cc>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	425b      	negs	r3, r3
 8001f2c:	469c      	mov	ip, r3
 8001f2e:	9b00      	ldr	r3, [sp, #0]
 8001f30:	44e0      	add	r8, ip
 8001f32:	469c      	mov	ip, r3
 8001f34:	4465      	add	r5, ip
 8001f36:	429d      	cmp	r5, r3
 8001f38:	419b      	sbcs	r3, r3
 8001f3a:	425b      	negs	r3, r3
 8001f3c:	191b      	adds	r3, r3, r4
 8001f3e:	18c0      	adds	r0, r0, r3
 8001f40:	e64d      	b.n	8001bde <__aeabi_ddiv+0x1ce>
 8001f42:	428a      	cmp	r2, r1
 8001f44:	d800      	bhi.n	8001f48 <__aeabi_ddiv+0x538>
 8001f46:	e60e      	b.n	8001b66 <__aeabi_ddiv+0x156>
 8001f48:	1e83      	subs	r3, r0, #2
 8001f4a:	1909      	adds	r1, r1, r4
 8001f4c:	e60b      	b.n	8001b66 <__aeabi_ddiv+0x156>
 8001f4e:	428a      	cmp	r2, r1
 8001f50:	d800      	bhi.n	8001f54 <__aeabi_ddiv+0x544>
 8001f52:	e5f4      	b.n	8001b3e <__aeabi_ddiv+0x12e>
 8001f54:	1e83      	subs	r3, r0, #2
 8001f56:	4698      	mov	r8, r3
 8001f58:	1909      	adds	r1, r1, r4
 8001f5a:	e5f0      	b.n	8001b3e <__aeabi_ddiv+0x12e>
 8001f5c:	4925      	ldr	r1, [pc, #148]	; (8001ff4 <__aeabi_ddiv+0x5e4>)
 8001f5e:	0028      	movs	r0, r5
 8001f60:	4459      	add	r1, fp
 8001f62:	408d      	lsls	r5, r1
 8001f64:	4642      	mov	r2, r8
 8001f66:	408a      	lsls	r2, r1
 8001f68:	1e69      	subs	r1, r5, #1
 8001f6a:	418d      	sbcs	r5, r1
 8001f6c:	4641      	mov	r1, r8
 8001f6e:	40d8      	lsrs	r0, r3
 8001f70:	40d9      	lsrs	r1, r3
 8001f72:	4302      	orrs	r2, r0
 8001f74:	432a      	orrs	r2, r5
 8001f76:	000b      	movs	r3, r1
 8001f78:	0751      	lsls	r1, r2, #29
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_ddiv+0x56e>
 8001f7c:	e751      	b.n	8001e22 <__aeabi_ddiv+0x412>
 8001f7e:	210f      	movs	r1, #15
 8001f80:	4011      	ands	r1, r2
 8001f82:	2904      	cmp	r1, #4
 8001f84:	d000      	beq.n	8001f88 <__aeabi_ddiv+0x578>
 8001f86:	e746      	b.n	8001e16 <__aeabi_ddiv+0x406>
 8001f88:	e74b      	b.n	8001e22 <__aeabi_ddiv+0x412>
 8001f8a:	0005      	movs	r5, r0
 8001f8c:	428e      	cmp	r6, r1
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_ddiv+0x582>
 8001f90:	e66a      	b.n	8001c68 <__aeabi_ddiv+0x258>
 8001f92:	9a00      	ldr	r2, [sp, #0]
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d000      	beq.n	8001f9a <__aeabi_ddiv+0x58a>
 8001f98:	e666      	b.n	8001c68 <__aeabi_ddiv+0x258>
 8001f9a:	e667      	b.n	8001c6c <__aeabi_ddiv+0x25c>
 8001f9c:	4a16      	ldr	r2, [pc, #88]	; (8001ff8 <__aeabi_ddiv+0x5e8>)
 8001f9e:	445a      	add	r2, fp
 8001fa0:	2a00      	cmp	r2, #0
 8001fa2:	dc00      	bgt.n	8001fa6 <__aeabi_ddiv+0x596>
 8001fa4:	e710      	b.n	8001dc8 <__aeabi_ddiv+0x3b8>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	2500      	movs	r5, #0
 8001faa:	4498      	add	r8, r3
 8001fac:	e667      	b.n	8001c7e <__aeabi_ddiv+0x26e>
 8001fae:	075d      	lsls	r5, r3, #29
 8001fb0:	025b      	lsls	r3, r3, #9
 8001fb2:	0b1c      	lsrs	r4, r3, #12
 8001fb4:	08d2      	lsrs	r2, r2, #3
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	4315      	orrs	r5, r2
 8001fba:	e580      	b.n	8001abe <__aeabi_ddiv+0xae>
 8001fbc:	9800      	ldr	r0, [sp, #0]
 8001fbe:	3d02      	subs	r5, #2
 8001fc0:	0042      	lsls	r2, r0, #1
 8001fc2:	4282      	cmp	r2, r0
 8001fc4:	41bf      	sbcs	r7, r7
 8001fc6:	427f      	negs	r7, r7
 8001fc8:	193c      	adds	r4, r7, r4
 8001fca:	1936      	adds	r6, r6, r4
 8001fcc:	9200      	str	r2, [sp, #0]
 8001fce:	e7dd      	b.n	8001f8c <__aeabi_ddiv+0x57c>
 8001fd0:	2480      	movs	r4, #128	; 0x80
 8001fd2:	4643      	mov	r3, r8
 8001fd4:	0324      	lsls	r4, r4, #12
 8001fd6:	431c      	orrs	r4, r3
 8001fd8:	0324      	lsls	r4, r4, #12
 8001fda:	4b04      	ldr	r3, [pc, #16]	; (8001fec <__aeabi_ddiv+0x5dc>)
 8001fdc:	0b24      	lsrs	r4, r4, #12
 8001fde:	e56e      	b.n	8001abe <__aeabi_ddiv+0xae>
 8001fe0:	9a00      	ldr	r2, [sp, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d3ea      	bcc.n	8001fbc <__aeabi_ddiv+0x5ac>
 8001fe6:	0005      	movs	r5, r0
 8001fe8:	e7d3      	b.n	8001f92 <__aeabi_ddiv+0x582>
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	000007ff 	.word	0x000007ff
 8001ff0:	0000043e 	.word	0x0000043e
 8001ff4:	0000041e 	.word	0x0000041e
 8001ff8:	000003ff 	.word	0x000003ff

08001ffc <__eqdf2>:
 8001ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffe:	464e      	mov	r6, r9
 8002000:	4645      	mov	r5, r8
 8002002:	46de      	mov	lr, fp
 8002004:	4657      	mov	r7, sl
 8002006:	4690      	mov	r8, r2
 8002008:	b5e0      	push	{r5, r6, r7, lr}
 800200a:	0017      	movs	r7, r2
 800200c:	031a      	lsls	r2, r3, #12
 800200e:	0b12      	lsrs	r2, r2, #12
 8002010:	0005      	movs	r5, r0
 8002012:	4684      	mov	ip, r0
 8002014:	4819      	ldr	r0, [pc, #100]	; (800207c <__eqdf2+0x80>)
 8002016:	030e      	lsls	r6, r1, #12
 8002018:	004c      	lsls	r4, r1, #1
 800201a:	4691      	mov	r9, r2
 800201c:	005a      	lsls	r2, r3, #1
 800201e:	0fdb      	lsrs	r3, r3, #31
 8002020:	469b      	mov	fp, r3
 8002022:	0b36      	lsrs	r6, r6, #12
 8002024:	0d64      	lsrs	r4, r4, #21
 8002026:	0fc9      	lsrs	r1, r1, #31
 8002028:	0d52      	lsrs	r2, r2, #21
 800202a:	4284      	cmp	r4, r0
 800202c:	d019      	beq.n	8002062 <__eqdf2+0x66>
 800202e:	4282      	cmp	r2, r0
 8002030:	d010      	beq.n	8002054 <__eqdf2+0x58>
 8002032:	2001      	movs	r0, #1
 8002034:	4294      	cmp	r4, r2
 8002036:	d10e      	bne.n	8002056 <__eqdf2+0x5a>
 8002038:	454e      	cmp	r6, r9
 800203a:	d10c      	bne.n	8002056 <__eqdf2+0x5a>
 800203c:	2001      	movs	r0, #1
 800203e:	45c4      	cmp	ip, r8
 8002040:	d109      	bne.n	8002056 <__eqdf2+0x5a>
 8002042:	4559      	cmp	r1, fp
 8002044:	d017      	beq.n	8002076 <__eqdf2+0x7a>
 8002046:	2c00      	cmp	r4, #0
 8002048:	d105      	bne.n	8002056 <__eqdf2+0x5a>
 800204a:	0030      	movs	r0, r6
 800204c:	4328      	orrs	r0, r5
 800204e:	1e43      	subs	r3, r0, #1
 8002050:	4198      	sbcs	r0, r3
 8002052:	e000      	b.n	8002056 <__eqdf2+0x5a>
 8002054:	2001      	movs	r0, #1
 8002056:	bcf0      	pop	{r4, r5, r6, r7}
 8002058:	46bb      	mov	fp, r7
 800205a:	46b2      	mov	sl, r6
 800205c:	46a9      	mov	r9, r5
 800205e:	46a0      	mov	r8, r4
 8002060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002062:	0033      	movs	r3, r6
 8002064:	2001      	movs	r0, #1
 8002066:	432b      	orrs	r3, r5
 8002068:	d1f5      	bne.n	8002056 <__eqdf2+0x5a>
 800206a:	42a2      	cmp	r2, r4
 800206c:	d1f3      	bne.n	8002056 <__eqdf2+0x5a>
 800206e:	464b      	mov	r3, r9
 8002070:	433b      	orrs	r3, r7
 8002072:	d1f0      	bne.n	8002056 <__eqdf2+0x5a>
 8002074:	e7e2      	b.n	800203c <__eqdf2+0x40>
 8002076:	2000      	movs	r0, #0
 8002078:	e7ed      	b.n	8002056 <__eqdf2+0x5a>
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	000007ff 	.word	0x000007ff

08002080 <__gedf2>:
 8002080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002082:	4647      	mov	r7, r8
 8002084:	46ce      	mov	lr, r9
 8002086:	0004      	movs	r4, r0
 8002088:	0018      	movs	r0, r3
 800208a:	0016      	movs	r6, r2
 800208c:	031b      	lsls	r3, r3, #12
 800208e:	0b1b      	lsrs	r3, r3, #12
 8002090:	4d2d      	ldr	r5, [pc, #180]	; (8002148 <__gedf2+0xc8>)
 8002092:	004a      	lsls	r2, r1, #1
 8002094:	4699      	mov	r9, r3
 8002096:	b580      	push	{r7, lr}
 8002098:	0043      	lsls	r3, r0, #1
 800209a:	030f      	lsls	r7, r1, #12
 800209c:	46a4      	mov	ip, r4
 800209e:	46b0      	mov	r8, r6
 80020a0:	0b3f      	lsrs	r7, r7, #12
 80020a2:	0d52      	lsrs	r2, r2, #21
 80020a4:	0fc9      	lsrs	r1, r1, #31
 80020a6:	0d5b      	lsrs	r3, r3, #21
 80020a8:	0fc0      	lsrs	r0, r0, #31
 80020aa:	42aa      	cmp	r2, r5
 80020ac:	d021      	beq.n	80020f2 <__gedf2+0x72>
 80020ae:	42ab      	cmp	r3, r5
 80020b0:	d013      	beq.n	80020da <__gedf2+0x5a>
 80020b2:	2a00      	cmp	r2, #0
 80020b4:	d122      	bne.n	80020fc <__gedf2+0x7c>
 80020b6:	433c      	orrs	r4, r7
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <__gedf2+0x42>
 80020bc:	464d      	mov	r5, r9
 80020be:	432e      	orrs	r6, r5
 80020c0:	d022      	beq.n	8002108 <__gedf2+0x88>
 80020c2:	2c00      	cmp	r4, #0
 80020c4:	d010      	beq.n	80020e8 <__gedf2+0x68>
 80020c6:	4281      	cmp	r1, r0
 80020c8:	d022      	beq.n	8002110 <__gedf2+0x90>
 80020ca:	2002      	movs	r0, #2
 80020cc:	3901      	subs	r1, #1
 80020ce:	4008      	ands	r0, r1
 80020d0:	3801      	subs	r0, #1
 80020d2:	bcc0      	pop	{r6, r7}
 80020d4:	46b9      	mov	r9, r7
 80020d6:	46b0      	mov	r8, r6
 80020d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020da:	464d      	mov	r5, r9
 80020dc:	432e      	orrs	r6, r5
 80020de:	d129      	bne.n	8002134 <__gedf2+0xb4>
 80020e0:	2a00      	cmp	r2, #0
 80020e2:	d1f0      	bne.n	80020c6 <__gedf2+0x46>
 80020e4:	433c      	orrs	r4, r7
 80020e6:	d1ee      	bne.n	80020c6 <__gedf2+0x46>
 80020e8:	2800      	cmp	r0, #0
 80020ea:	d1f2      	bne.n	80020d2 <__gedf2+0x52>
 80020ec:	2001      	movs	r0, #1
 80020ee:	4240      	negs	r0, r0
 80020f0:	e7ef      	b.n	80020d2 <__gedf2+0x52>
 80020f2:	003d      	movs	r5, r7
 80020f4:	4325      	orrs	r5, r4
 80020f6:	d11d      	bne.n	8002134 <__gedf2+0xb4>
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d0ee      	beq.n	80020da <__gedf2+0x5a>
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1e2      	bne.n	80020c6 <__gedf2+0x46>
 8002100:	464c      	mov	r4, r9
 8002102:	4326      	orrs	r6, r4
 8002104:	d1df      	bne.n	80020c6 <__gedf2+0x46>
 8002106:	e7e0      	b.n	80020ca <__gedf2+0x4a>
 8002108:	2000      	movs	r0, #0
 800210a:	2c00      	cmp	r4, #0
 800210c:	d0e1      	beq.n	80020d2 <__gedf2+0x52>
 800210e:	e7dc      	b.n	80020ca <__gedf2+0x4a>
 8002110:	429a      	cmp	r2, r3
 8002112:	dc0a      	bgt.n	800212a <__gedf2+0xaa>
 8002114:	dbe8      	blt.n	80020e8 <__gedf2+0x68>
 8002116:	454f      	cmp	r7, r9
 8002118:	d8d7      	bhi.n	80020ca <__gedf2+0x4a>
 800211a:	d00e      	beq.n	800213a <__gedf2+0xba>
 800211c:	2000      	movs	r0, #0
 800211e:	454f      	cmp	r7, r9
 8002120:	d2d7      	bcs.n	80020d2 <__gedf2+0x52>
 8002122:	2900      	cmp	r1, #0
 8002124:	d0e2      	beq.n	80020ec <__gedf2+0x6c>
 8002126:	0008      	movs	r0, r1
 8002128:	e7d3      	b.n	80020d2 <__gedf2+0x52>
 800212a:	4243      	negs	r3, r0
 800212c:	4158      	adcs	r0, r3
 800212e:	0040      	lsls	r0, r0, #1
 8002130:	3801      	subs	r0, #1
 8002132:	e7ce      	b.n	80020d2 <__gedf2+0x52>
 8002134:	2002      	movs	r0, #2
 8002136:	4240      	negs	r0, r0
 8002138:	e7cb      	b.n	80020d2 <__gedf2+0x52>
 800213a:	45c4      	cmp	ip, r8
 800213c:	d8c5      	bhi.n	80020ca <__gedf2+0x4a>
 800213e:	2000      	movs	r0, #0
 8002140:	45c4      	cmp	ip, r8
 8002142:	d2c6      	bcs.n	80020d2 <__gedf2+0x52>
 8002144:	e7ed      	b.n	8002122 <__gedf2+0xa2>
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	000007ff 	.word	0x000007ff

0800214c <__ledf2>:
 800214c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800214e:	4647      	mov	r7, r8
 8002150:	46ce      	mov	lr, r9
 8002152:	0004      	movs	r4, r0
 8002154:	0018      	movs	r0, r3
 8002156:	0016      	movs	r6, r2
 8002158:	031b      	lsls	r3, r3, #12
 800215a:	0b1b      	lsrs	r3, r3, #12
 800215c:	4d2c      	ldr	r5, [pc, #176]	; (8002210 <__ledf2+0xc4>)
 800215e:	004a      	lsls	r2, r1, #1
 8002160:	4699      	mov	r9, r3
 8002162:	b580      	push	{r7, lr}
 8002164:	0043      	lsls	r3, r0, #1
 8002166:	030f      	lsls	r7, r1, #12
 8002168:	46a4      	mov	ip, r4
 800216a:	46b0      	mov	r8, r6
 800216c:	0b3f      	lsrs	r7, r7, #12
 800216e:	0d52      	lsrs	r2, r2, #21
 8002170:	0fc9      	lsrs	r1, r1, #31
 8002172:	0d5b      	lsrs	r3, r3, #21
 8002174:	0fc0      	lsrs	r0, r0, #31
 8002176:	42aa      	cmp	r2, r5
 8002178:	d00d      	beq.n	8002196 <__ledf2+0x4a>
 800217a:	42ab      	cmp	r3, r5
 800217c:	d010      	beq.n	80021a0 <__ledf2+0x54>
 800217e:	2a00      	cmp	r2, #0
 8002180:	d127      	bne.n	80021d2 <__ledf2+0x86>
 8002182:	433c      	orrs	r4, r7
 8002184:	2b00      	cmp	r3, #0
 8002186:	d111      	bne.n	80021ac <__ledf2+0x60>
 8002188:	464d      	mov	r5, r9
 800218a:	432e      	orrs	r6, r5
 800218c:	d10e      	bne.n	80021ac <__ledf2+0x60>
 800218e:	2000      	movs	r0, #0
 8002190:	2c00      	cmp	r4, #0
 8002192:	d015      	beq.n	80021c0 <__ledf2+0x74>
 8002194:	e00e      	b.n	80021b4 <__ledf2+0x68>
 8002196:	003d      	movs	r5, r7
 8002198:	4325      	orrs	r5, r4
 800219a:	d110      	bne.n	80021be <__ledf2+0x72>
 800219c:	4293      	cmp	r3, r2
 800219e:	d118      	bne.n	80021d2 <__ledf2+0x86>
 80021a0:	464d      	mov	r5, r9
 80021a2:	432e      	orrs	r6, r5
 80021a4:	d10b      	bne.n	80021be <__ledf2+0x72>
 80021a6:	2a00      	cmp	r2, #0
 80021a8:	d102      	bne.n	80021b0 <__ledf2+0x64>
 80021aa:	433c      	orrs	r4, r7
 80021ac:	2c00      	cmp	r4, #0
 80021ae:	d00b      	beq.n	80021c8 <__ledf2+0x7c>
 80021b0:	4281      	cmp	r1, r0
 80021b2:	d014      	beq.n	80021de <__ledf2+0x92>
 80021b4:	2002      	movs	r0, #2
 80021b6:	3901      	subs	r1, #1
 80021b8:	4008      	ands	r0, r1
 80021ba:	3801      	subs	r0, #1
 80021bc:	e000      	b.n	80021c0 <__ledf2+0x74>
 80021be:	2002      	movs	r0, #2
 80021c0:	bcc0      	pop	{r6, r7}
 80021c2:	46b9      	mov	r9, r7
 80021c4:	46b0      	mov	r8, r6
 80021c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021c8:	2800      	cmp	r0, #0
 80021ca:	d1f9      	bne.n	80021c0 <__ledf2+0x74>
 80021cc:	2001      	movs	r0, #1
 80021ce:	4240      	negs	r0, r0
 80021d0:	e7f6      	b.n	80021c0 <__ledf2+0x74>
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1ec      	bne.n	80021b0 <__ledf2+0x64>
 80021d6:	464c      	mov	r4, r9
 80021d8:	4326      	orrs	r6, r4
 80021da:	d1e9      	bne.n	80021b0 <__ledf2+0x64>
 80021dc:	e7ea      	b.n	80021b4 <__ledf2+0x68>
 80021de:	429a      	cmp	r2, r3
 80021e0:	dd04      	ble.n	80021ec <__ledf2+0xa0>
 80021e2:	4243      	negs	r3, r0
 80021e4:	4158      	adcs	r0, r3
 80021e6:	0040      	lsls	r0, r0, #1
 80021e8:	3801      	subs	r0, #1
 80021ea:	e7e9      	b.n	80021c0 <__ledf2+0x74>
 80021ec:	429a      	cmp	r2, r3
 80021ee:	dbeb      	blt.n	80021c8 <__ledf2+0x7c>
 80021f0:	454f      	cmp	r7, r9
 80021f2:	d8df      	bhi.n	80021b4 <__ledf2+0x68>
 80021f4:	d006      	beq.n	8002204 <__ledf2+0xb8>
 80021f6:	2000      	movs	r0, #0
 80021f8:	454f      	cmp	r7, r9
 80021fa:	d2e1      	bcs.n	80021c0 <__ledf2+0x74>
 80021fc:	2900      	cmp	r1, #0
 80021fe:	d0e5      	beq.n	80021cc <__ledf2+0x80>
 8002200:	0008      	movs	r0, r1
 8002202:	e7dd      	b.n	80021c0 <__ledf2+0x74>
 8002204:	45c4      	cmp	ip, r8
 8002206:	d8d5      	bhi.n	80021b4 <__ledf2+0x68>
 8002208:	2000      	movs	r0, #0
 800220a:	45c4      	cmp	ip, r8
 800220c:	d2d8      	bcs.n	80021c0 <__ledf2+0x74>
 800220e:	e7f5      	b.n	80021fc <__ledf2+0xb0>
 8002210:	000007ff 	.word	0x000007ff

08002214 <__aeabi_dmul>:
 8002214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002216:	4657      	mov	r7, sl
 8002218:	464e      	mov	r6, r9
 800221a:	4645      	mov	r5, r8
 800221c:	46de      	mov	lr, fp
 800221e:	b5e0      	push	{r5, r6, r7, lr}
 8002220:	4698      	mov	r8, r3
 8002222:	030c      	lsls	r4, r1, #12
 8002224:	004b      	lsls	r3, r1, #1
 8002226:	0006      	movs	r6, r0
 8002228:	4692      	mov	sl, r2
 800222a:	b087      	sub	sp, #28
 800222c:	0b24      	lsrs	r4, r4, #12
 800222e:	0d5b      	lsrs	r3, r3, #21
 8002230:	0fcf      	lsrs	r7, r1, #31
 8002232:	2b00      	cmp	r3, #0
 8002234:	d100      	bne.n	8002238 <__aeabi_dmul+0x24>
 8002236:	e15c      	b.n	80024f2 <__aeabi_dmul+0x2de>
 8002238:	4ad9      	ldr	r2, [pc, #868]	; (80025a0 <__aeabi_dmul+0x38c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d100      	bne.n	8002240 <__aeabi_dmul+0x2c>
 800223e:	e175      	b.n	800252c <__aeabi_dmul+0x318>
 8002240:	0f42      	lsrs	r2, r0, #29
 8002242:	00e4      	lsls	r4, r4, #3
 8002244:	4314      	orrs	r4, r2
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	0412      	lsls	r2, r2, #16
 800224a:	4314      	orrs	r4, r2
 800224c:	4ad5      	ldr	r2, [pc, #852]	; (80025a4 <__aeabi_dmul+0x390>)
 800224e:	00c5      	lsls	r5, r0, #3
 8002250:	4694      	mov	ip, r2
 8002252:	4463      	add	r3, ip
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	2300      	movs	r3, #0
 8002258:	4699      	mov	r9, r3
 800225a:	469b      	mov	fp, r3
 800225c:	4643      	mov	r3, r8
 800225e:	4642      	mov	r2, r8
 8002260:	031e      	lsls	r6, r3, #12
 8002262:	0fd2      	lsrs	r2, r2, #31
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4650      	mov	r0, sl
 8002268:	4690      	mov	r8, r2
 800226a:	0b36      	lsrs	r6, r6, #12
 800226c:	0d5b      	lsrs	r3, r3, #21
 800226e:	d100      	bne.n	8002272 <__aeabi_dmul+0x5e>
 8002270:	e120      	b.n	80024b4 <__aeabi_dmul+0x2a0>
 8002272:	4acb      	ldr	r2, [pc, #812]	; (80025a0 <__aeabi_dmul+0x38c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d100      	bne.n	800227a <__aeabi_dmul+0x66>
 8002278:	e162      	b.n	8002540 <__aeabi_dmul+0x32c>
 800227a:	49ca      	ldr	r1, [pc, #808]	; (80025a4 <__aeabi_dmul+0x390>)
 800227c:	0f42      	lsrs	r2, r0, #29
 800227e:	468c      	mov	ip, r1
 8002280:	9900      	ldr	r1, [sp, #0]
 8002282:	4463      	add	r3, ip
 8002284:	00f6      	lsls	r6, r6, #3
 8002286:	468c      	mov	ip, r1
 8002288:	4316      	orrs	r6, r2
 800228a:	2280      	movs	r2, #128	; 0x80
 800228c:	449c      	add	ip, r3
 800228e:	0412      	lsls	r2, r2, #16
 8002290:	4663      	mov	r3, ip
 8002292:	4316      	orrs	r6, r2
 8002294:	00c2      	lsls	r2, r0, #3
 8002296:	2000      	movs	r0, #0
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	9900      	ldr	r1, [sp, #0]
 800229c:	4643      	mov	r3, r8
 800229e:	3101      	adds	r1, #1
 80022a0:	468c      	mov	ip, r1
 80022a2:	4649      	mov	r1, r9
 80022a4:	407b      	eors	r3, r7
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	290f      	cmp	r1, #15
 80022aa:	d826      	bhi.n	80022fa <__aeabi_dmul+0xe6>
 80022ac:	4bbe      	ldr	r3, [pc, #760]	; (80025a8 <__aeabi_dmul+0x394>)
 80022ae:	0089      	lsls	r1, r1, #2
 80022b0:	5859      	ldr	r1, [r3, r1]
 80022b2:	468f      	mov	pc, r1
 80022b4:	4643      	mov	r3, r8
 80022b6:	9301      	str	r3, [sp, #4]
 80022b8:	0034      	movs	r4, r6
 80022ba:	0015      	movs	r5, r2
 80022bc:	4683      	mov	fp, r0
 80022be:	465b      	mov	r3, fp
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d016      	beq.n	80022f2 <__aeabi_dmul+0xde>
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d100      	bne.n	80022ca <__aeabi_dmul+0xb6>
 80022c8:	e203      	b.n	80026d2 <__aeabi_dmul+0x4be>
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d000      	beq.n	80022d0 <__aeabi_dmul+0xbc>
 80022ce:	e0cd      	b.n	800246c <__aeabi_dmul+0x258>
 80022d0:	2200      	movs	r2, #0
 80022d2:	2400      	movs	r4, #0
 80022d4:	2500      	movs	r5, #0
 80022d6:	9b01      	ldr	r3, [sp, #4]
 80022d8:	0512      	lsls	r2, r2, #20
 80022da:	4322      	orrs	r2, r4
 80022dc:	07db      	lsls	r3, r3, #31
 80022de:	431a      	orrs	r2, r3
 80022e0:	0028      	movs	r0, r5
 80022e2:	0011      	movs	r1, r2
 80022e4:	b007      	add	sp, #28
 80022e6:	bcf0      	pop	{r4, r5, r6, r7}
 80022e8:	46bb      	mov	fp, r7
 80022ea:	46b2      	mov	sl, r6
 80022ec:	46a9      	mov	r9, r5
 80022ee:	46a0      	mov	r8, r4
 80022f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f2:	2400      	movs	r4, #0
 80022f4:	2500      	movs	r5, #0
 80022f6:	4aaa      	ldr	r2, [pc, #680]	; (80025a0 <__aeabi_dmul+0x38c>)
 80022f8:	e7ed      	b.n	80022d6 <__aeabi_dmul+0xc2>
 80022fa:	0c28      	lsrs	r0, r5, #16
 80022fc:	042d      	lsls	r5, r5, #16
 80022fe:	0c2d      	lsrs	r5, r5, #16
 8002300:	002b      	movs	r3, r5
 8002302:	0c11      	lsrs	r1, r2, #16
 8002304:	0412      	lsls	r2, r2, #16
 8002306:	0c12      	lsrs	r2, r2, #16
 8002308:	4353      	muls	r3, r2
 800230a:	4698      	mov	r8, r3
 800230c:	0013      	movs	r3, r2
 800230e:	002f      	movs	r7, r5
 8002310:	4343      	muls	r3, r0
 8002312:	4699      	mov	r9, r3
 8002314:	434f      	muls	r7, r1
 8002316:	444f      	add	r7, r9
 8002318:	46bb      	mov	fp, r7
 800231a:	4647      	mov	r7, r8
 800231c:	000b      	movs	r3, r1
 800231e:	0c3f      	lsrs	r7, r7, #16
 8002320:	46ba      	mov	sl, r7
 8002322:	4343      	muls	r3, r0
 8002324:	44da      	add	sl, fp
 8002326:	9302      	str	r3, [sp, #8]
 8002328:	45d1      	cmp	r9, sl
 800232a:	d904      	bls.n	8002336 <__aeabi_dmul+0x122>
 800232c:	2780      	movs	r7, #128	; 0x80
 800232e:	027f      	lsls	r7, r7, #9
 8002330:	46b9      	mov	r9, r7
 8002332:	444b      	add	r3, r9
 8002334:	9302      	str	r3, [sp, #8]
 8002336:	4653      	mov	r3, sl
 8002338:	0c1b      	lsrs	r3, r3, #16
 800233a:	469b      	mov	fp, r3
 800233c:	4653      	mov	r3, sl
 800233e:	041f      	lsls	r7, r3, #16
 8002340:	4643      	mov	r3, r8
 8002342:	041b      	lsls	r3, r3, #16
 8002344:	0c1b      	lsrs	r3, r3, #16
 8002346:	4698      	mov	r8, r3
 8002348:	003b      	movs	r3, r7
 800234a:	4443      	add	r3, r8
 800234c:	9304      	str	r3, [sp, #16]
 800234e:	0c33      	lsrs	r3, r6, #16
 8002350:	0436      	lsls	r6, r6, #16
 8002352:	0c36      	lsrs	r6, r6, #16
 8002354:	4698      	mov	r8, r3
 8002356:	0033      	movs	r3, r6
 8002358:	4343      	muls	r3, r0
 800235a:	4699      	mov	r9, r3
 800235c:	4643      	mov	r3, r8
 800235e:	4343      	muls	r3, r0
 8002360:	002f      	movs	r7, r5
 8002362:	469a      	mov	sl, r3
 8002364:	4643      	mov	r3, r8
 8002366:	4377      	muls	r7, r6
 8002368:	435d      	muls	r5, r3
 800236a:	0c38      	lsrs	r0, r7, #16
 800236c:	444d      	add	r5, r9
 800236e:	1945      	adds	r5, r0, r5
 8002370:	45a9      	cmp	r9, r5
 8002372:	d903      	bls.n	800237c <__aeabi_dmul+0x168>
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	025b      	lsls	r3, r3, #9
 8002378:	4699      	mov	r9, r3
 800237a:	44ca      	add	sl, r9
 800237c:	043f      	lsls	r7, r7, #16
 800237e:	0c28      	lsrs	r0, r5, #16
 8002380:	0c3f      	lsrs	r7, r7, #16
 8002382:	042d      	lsls	r5, r5, #16
 8002384:	19ed      	adds	r5, r5, r7
 8002386:	0c27      	lsrs	r7, r4, #16
 8002388:	0424      	lsls	r4, r4, #16
 800238a:	0c24      	lsrs	r4, r4, #16
 800238c:	0003      	movs	r3, r0
 800238e:	0020      	movs	r0, r4
 8002390:	4350      	muls	r0, r2
 8002392:	437a      	muls	r2, r7
 8002394:	4691      	mov	r9, r2
 8002396:	003a      	movs	r2, r7
 8002398:	4453      	add	r3, sl
 800239a:	9305      	str	r3, [sp, #20]
 800239c:	0c03      	lsrs	r3, r0, #16
 800239e:	469a      	mov	sl, r3
 80023a0:	434a      	muls	r2, r1
 80023a2:	4361      	muls	r1, r4
 80023a4:	4449      	add	r1, r9
 80023a6:	4451      	add	r1, sl
 80023a8:	44ab      	add	fp, r5
 80023aa:	4589      	cmp	r9, r1
 80023ac:	d903      	bls.n	80023b6 <__aeabi_dmul+0x1a2>
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	025b      	lsls	r3, r3, #9
 80023b2:	4699      	mov	r9, r3
 80023b4:	444a      	add	r2, r9
 80023b6:	0400      	lsls	r0, r0, #16
 80023b8:	0c0b      	lsrs	r3, r1, #16
 80023ba:	0c00      	lsrs	r0, r0, #16
 80023bc:	0409      	lsls	r1, r1, #16
 80023be:	1809      	adds	r1, r1, r0
 80023c0:	0020      	movs	r0, r4
 80023c2:	4699      	mov	r9, r3
 80023c4:	4643      	mov	r3, r8
 80023c6:	4370      	muls	r0, r6
 80023c8:	435c      	muls	r4, r3
 80023ca:	437e      	muls	r6, r7
 80023cc:	435f      	muls	r7, r3
 80023ce:	0c03      	lsrs	r3, r0, #16
 80023d0:	4698      	mov	r8, r3
 80023d2:	19a4      	adds	r4, r4, r6
 80023d4:	4444      	add	r4, r8
 80023d6:	444a      	add	r2, r9
 80023d8:	9703      	str	r7, [sp, #12]
 80023da:	42a6      	cmp	r6, r4
 80023dc:	d904      	bls.n	80023e8 <__aeabi_dmul+0x1d4>
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	025b      	lsls	r3, r3, #9
 80023e2:	4698      	mov	r8, r3
 80023e4:	4447      	add	r7, r8
 80023e6:	9703      	str	r7, [sp, #12]
 80023e8:	0423      	lsls	r3, r4, #16
 80023ea:	9e02      	ldr	r6, [sp, #8]
 80023ec:	469a      	mov	sl, r3
 80023ee:	9b05      	ldr	r3, [sp, #20]
 80023f0:	445e      	add	r6, fp
 80023f2:	4698      	mov	r8, r3
 80023f4:	42ae      	cmp	r6, r5
 80023f6:	41ad      	sbcs	r5, r5
 80023f8:	1876      	adds	r6, r6, r1
 80023fa:	428e      	cmp	r6, r1
 80023fc:	4189      	sbcs	r1, r1
 80023fe:	0400      	lsls	r0, r0, #16
 8002400:	0c00      	lsrs	r0, r0, #16
 8002402:	4450      	add	r0, sl
 8002404:	4440      	add	r0, r8
 8002406:	426d      	negs	r5, r5
 8002408:	1947      	adds	r7, r0, r5
 800240a:	46b8      	mov	r8, r7
 800240c:	4693      	mov	fp, r2
 800240e:	4249      	negs	r1, r1
 8002410:	4689      	mov	r9, r1
 8002412:	44c3      	add	fp, r8
 8002414:	44d9      	add	r9, fp
 8002416:	4298      	cmp	r0, r3
 8002418:	4180      	sbcs	r0, r0
 800241a:	45a8      	cmp	r8, r5
 800241c:	41ad      	sbcs	r5, r5
 800241e:	4593      	cmp	fp, r2
 8002420:	4192      	sbcs	r2, r2
 8002422:	4589      	cmp	r9, r1
 8002424:	4189      	sbcs	r1, r1
 8002426:	426d      	negs	r5, r5
 8002428:	4240      	negs	r0, r0
 800242a:	4328      	orrs	r0, r5
 800242c:	0c24      	lsrs	r4, r4, #16
 800242e:	4252      	negs	r2, r2
 8002430:	4249      	negs	r1, r1
 8002432:	430a      	orrs	r2, r1
 8002434:	9b03      	ldr	r3, [sp, #12]
 8002436:	1900      	adds	r0, r0, r4
 8002438:	1880      	adds	r0, r0, r2
 800243a:	18c7      	adds	r7, r0, r3
 800243c:	464b      	mov	r3, r9
 800243e:	0ddc      	lsrs	r4, r3, #23
 8002440:	9b04      	ldr	r3, [sp, #16]
 8002442:	0275      	lsls	r5, r6, #9
 8002444:	431d      	orrs	r5, r3
 8002446:	1e6a      	subs	r2, r5, #1
 8002448:	4195      	sbcs	r5, r2
 800244a:	464b      	mov	r3, r9
 800244c:	0df6      	lsrs	r6, r6, #23
 800244e:	027f      	lsls	r7, r7, #9
 8002450:	4335      	orrs	r5, r6
 8002452:	025a      	lsls	r2, r3, #9
 8002454:	433c      	orrs	r4, r7
 8002456:	4315      	orrs	r5, r2
 8002458:	01fb      	lsls	r3, r7, #7
 800245a:	d400      	bmi.n	800245e <__aeabi_dmul+0x24a>
 800245c:	e11c      	b.n	8002698 <__aeabi_dmul+0x484>
 800245e:	2101      	movs	r1, #1
 8002460:	086a      	lsrs	r2, r5, #1
 8002462:	400d      	ands	r5, r1
 8002464:	4315      	orrs	r5, r2
 8002466:	07e2      	lsls	r2, r4, #31
 8002468:	4315      	orrs	r5, r2
 800246a:	0864      	lsrs	r4, r4, #1
 800246c:	494f      	ldr	r1, [pc, #316]	; (80025ac <__aeabi_dmul+0x398>)
 800246e:	4461      	add	r1, ip
 8002470:	2900      	cmp	r1, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dmul+0x262>
 8002474:	e0b0      	b.n	80025d8 <__aeabi_dmul+0x3c4>
 8002476:	076b      	lsls	r3, r5, #29
 8002478:	d009      	beq.n	800248e <__aeabi_dmul+0x27a>
 800247a:	220f      	movs	r2, #15
 800247c:	402a      	ands	r2, r5
 800247e:	2a04      	cmp	r2, #4
 8002480:	d005      	beq.n	800248e <__aeabi_dmul+0x27a>
 8002482:	1d2a      	adds	r2, r5, #4
 8002484:	42aa      	cmp	r2, r5
 8002486:	41ad      	sbcs	r5, r5
 8002488:	426d      	negs	r5, r5
 800248a:	1964      	adds	r4, r4, r5
 800248c:	0015      	movs	r5, r2
 800248e:	01e3      	lsls	r3, r4, #7
 8002490:	d504      	bpl.n	800249c <__aeabi_dmul+0x288>
 8002492:	2180      	movs	r1, #128	; 0x80
 8002494:	4a46      	ldr	r2, [pc, #280]	; (80025b0 <__aeabi_dmul+0x39c>)
 8002496:	00c9      	lsls	r1, r1, #3
 8002498:	4014      	ands	r4, r2
 800249a:	4461      	add	r1, ip
 800249c:	4a45      	ldr	r2, [pc, #276]	; (80025b4 <__aeabi_dmul+0x3a0>)
 800249e:	4291      	cmp	r1, r2
 80024a0:	dd00      	ble.n	80024a4 <__aeabi_dmul+0x290>
 80024a2:	e726      	b.n	80022f2 <__aeabi_dmul+0xde>
 80024a4:	0762      	lsls	r2, r4, #29
 80024a6:	08ed      	lsrs	r5, r5, #3
 80024a8:	0264      	lsls	r4, r4, #9
 80024aa:	0549      	lsls	r1, r1, #21
 80024ac:	4315      	orrs	r5, r2
 80024ae:	0b24      	lsrs	r4, r4, #12
 80024b0:	0d4a      	lsrs	r2, r1, #21
 80024b2:	e710      	b.n	80022d6 <__aeabi_dmul+0xc2>
 80024b4:	4652      	mov	r2, sl
 80024b6:	4332      	orrs	r2, r6
 80024b8:	d100      	bne.n	80024bc <__aeabi_dmul+0x2a8>
 80024ba:	e07f      	b.n	80025bc <__aeabi_dmul+0x3a8>
 80024bc:	2e00      	cmp	r6, #0
 80024be:	d100      	bne.n	80024c2 <__aeabi_dmul+0x2ae>
 80024c0:	e0dc      	b.n	800267c <__aeabi_dmul+0x468>
 80024c2:	0030      	movs	r0, r6
 80024c4:	f000 fe1e 	bl	8003104 <__clzsi2>
 80024c8:	0002      	movs	r2, r0
 80024ca:	3a0b      	subs	r2, #11
 80024cc:	231d      	movs	r3, #29
 80024ce:	0001      	movs	r1, r0
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	4652      	mov	r2, sl
 80024d4:	3908      	subs	r1, #8
 80024d6:	40da      	lsrs	r2, r3
 80024d8:	408e      	lsls	r6, r1
 80024da:	4316      	orrs	r6, r2
 80024dc:	4652      	mov	r2, sl
 80024de:	408a      	lsls	r2, r1
 80024e0:	9b00      	ldr	r3, [sp, #0]
 80024e2:	4935      	ldr	r1, [pc, #212]	; (80025b8 <__aeabi_dmul+0x3a4>)
 80024e4:	1a18      	subs	r0, r3, r0
 80024e6:	0003      	movs	r3, r0
 80024e8:	468c      	mov	ip, r1
 80024ea:	4463      	add	r3, ip
 80024ec:	2000      	movs	r0, #0
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	e6d3      	b.n	800229a <__aeabi_dmul+0x86>
 80024f2:	0025      	movs	r5, r4
 80024f4:	4305      	orrs	r5, r0
 80024f6:	d04a      	beq.n	800258e <__aeabi_dmul+0x37a>
 80024f8:	2c00      	cmp	r4, #0
 80024fa:	d100      	bne.n	80024fe <__aeabi_dmul+0x2ea>
 80024fc:	e0b0      	b.n	8002660 <__aeabi_dmul+0x44c>
 80024fe:	0020      	movs	r0, r4
 8002500:	f000 fe00 	bl	8003104 <__clzsi2>
 8002504:	0001      	movs	r1, r0
 8002506:	0002      	movs	r2, r0
 8002508:	390b      	subs	r1, #11
 800250a:	231d      	movs	r3, #29
 800250c:	0010      	movs	r0, r2
 800250e:	1a5b      	subs	r3, r3, r1
 8002510:	0031      	movs	r1, r6
 8002512:	0035      	movs	r5, r6
 8002514:	3808      	subs	r0, #8
 8002516:	4084      	lsls	r4, r0
 8002518:	40d9      	lsrs	r1, r3
 800251a:	4085      	lsls	r5, r0
 800251c:	430c      	orrs	r4, r1
 800251e:	4826      	ldr	r0, [pc, #152]	; (80025b8 <__aeabi_dmul+0x3a4>)
 8002520:	1a83      	subs	r3, r0, r2
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2300      	movs	r3, #0
 8002526:	4699      	mov	r9, r3
 8002528:	469b      	mov	fp, r3
 800252a:	e697      	b.n	800225c <__aeabi_dmul+0x48>
 800252c:	0005      	movs	r5, r0
 800252e:	4325      	orrs	r5, r4
 8002530:	d126      	bne.n	8002580 <__aeabi_dmul+0x36c>
 8002532:	2208      	movs	r2, #8
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2302      	movs	r3, #2
 8002538:	2400      	movs	r4, #0
 800253a:	4691      	mov	r9, r2
 800253c:	469b      	mov	fp, r3
 800253e:	e68d      	b.n	800225c <__aeabi_dmul+0x48>
 8002540:	4652      	mov	r2, sl
 8002542:	9b00      	ldr	r3, [sp, #0]
 8002544:	4332      	orrs	r2, r6
 8002546:	d110      	bne.n	800256a <__aeabi_dmul+0x356>
 8002548:	4915      	ldr	r1, [pc, #84]	; (80025a0 <__aeabi_dmul+0x38c>)
 800254a:	2600      	movs	r6, #0
 800254c:	468c      	mov	ip, r1
 800254e:	4463      	add	r3, ip
 8002550:	4649      	mov	r1, r9
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2302      	movs	r3, #2
 8002556:	4319      	orrs	r1, r3
 8002558:	4689      	mov	r9, r1
 800255a:	2002      	movs	r0, #2
 800255c:	e69d      	b.n	800229a <__aeabi_dmul+0x86>
 800255e:	465b      	mov	r3, fp
 8002560:	9701      	str	r7, [sp, #4]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d000      	beq.n	8002568 <__aeabi_dmul+0x354>
 8002566:	e6ad      	b.n	80022c4 <__aeabi_dmul+0xb0>
 8002568:	e6c3      	b.n	80022f2 <__aeabi_dmul+0xde>
 800256a:	4a0d      	ldr	r2, [pc, #52]	; (80025a0 <__aeabi_dmul+0x38c>)
 800256c:	2003      	movs	r0, #3
 800256e:	4694      	mov	ip, r2
 8002570:	4463      	add	r3, ip
 8002572:	464a      	mov	r2, r9
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2303      	movs	r3, #3
 8002578:	431a      	orrs	r2, r3
 800257a:	4691      	mov	r9, r2
 800257c:	4652      	mov	r2, sl
 800257e:	e68c      	b.n	800229a <__aeabi_dmul+0x86>
 8002580:	220c      	movs	r2, #12
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2303      	movs	r3, #3
 8002586:	0005      	movs	r5, r0
 8002588:	4691      	mov	r9, r2
 800258a:	469b      	mov	fp, r3
 800258c:	e666      	b.n	800225c <__aeabi_dmul+0x48>
 800258e:	2304      	movs	r3, #4
 8002590:	4699      	mov	r9, r3
 8002592:	2300      	movs	r3, #0
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	2400      	movs	r4, #0
 800259a:	469b      	mov	fp, r3
 800259c:	e65e      	b.n	800225c <__aeabi_dmul+0x48>
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	000007ff 	.word	0x000007ff
 80025a4:	fffffc01 	.word	0xfffffc01
 80025a8:	08007c64 	.word	0x08007c64
 80025ac:	000003ff 	.word	0x000003ff
 80025b0:	feffffff 	.word	0xfeffffff
 80025b4:	000007fe 	.word	0x000007fe
 80025b8:	fffffc0d 	.word	0xfffffc0d
 80025bc:	4649      	mov	r1, r9
 80025be:	2301      	movs	r3, #1
 80025c0:	4319      	orrs	r1, r3
 80025c2:	4689      	mov	r9, r1
 80025c4:	2600      	movs	r6, #0
 80025c6:	2001      	movs	r0, #1
 80025c8:	e667      	b.n	800229a <__aeabi_dmul+0x86>
 80025ca:	2300      	movs	r3, #0
 80025cc:	2480      	movs	r4, #128	; 0x80
 80025ce:	2500      	movs	r5, #0
 80025d0:	4a43      	ldr	r2, [pc, #268]	; (80026e0 <__aeabi_dmul+0x4cc>)
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	0324      	lsls	r4, r4, #12
 80025d6:	e67e      	b.n	80022d6 <__aeabi_dmul+0xc2>
 80025d8:	2001      	movs	r0, #1
 80025da:	1a40      	subs	r0, r0, r1
 80025dc:	2838      	cmp	r0, #56	; 0x38
 80025de:	dd00      	ble.n	80025e2 <__aeabi_dmul+0x3ce>
 80025e0:	e676      	b.n	80022d0 <__aeabi_dmul+0xbc>
 80025e2:	281f      	cmp	r0, #31
 80025e4:	dd5b      	ble.n	800269e <__aeabi_dmul+0x48a>
 80025e6:	221f      	movs	r2, #31
 80025e8:	0023      	movs	r3, r4
 80025ea:	4252      	negs	r2, r2
 80025ec:	1a51      	subs	r1, r2, r1
 80025ee:	40cb      	lsrs	r3, r1
 80025f0:	0019      	movs	r1, r3
 80025f2:	2820      	cmp	r0, #32
 80025f4:	d003      	beq.n	80025fe <__aeabi_dmul+0x3ea>
 80025f6:	4a3b      	ldr	r2, [pc, #236]	; (80026e4 <__aeabi_dmul+0x4d0>)
 80025f8:	4462      	add	r2, ip
 80025fa:	4094      	lsls	r4, r2
 80025fc:	4325      	orrs	r5, r4
 80025fe:	1e6a      	subs	r2, r5, #1
 8002600:	4195      	sbcs	r5, r2
 8002602:	002a      	movs	r2, r5
 8002604:	430a      	orrs	r2, r1
 8002606:	2107      	movs	r1, #7
 8002608:	000d      	movs	r5, r1
 800260a:	2400      	movs	r4, #0
 800260c:	4015      	ands	r5, r2
 800260e:	4211      	tst	r1, r2
 8002610:	d05b      	beq.n	80026ca <__aeabi_dmul+0x4b6>
 8002612:	210f      	movs	r1, #15
 8002614:	2400      	movs	r4, #0
 8002616:	4011      	ands	r1, r2
 8002618:	2904      	cmp	r1, #4
 800261a:	d053      	beq.n	80026c4 <__aeabi_dmul+0x4b0>
 800261c:	1d11      	adds	r1, r2, #4
 800261e:	4291      	cmp	r1, r2
 8002620:	4192      	sbcs	r2, r2
 8002622:	4252      	negs	r2, r2
 8002624:	18a4      	adds	r4, r4, r2
 8002626:	000a      	movs	r2, r1
 8002628:	0223      	lsls	r3, r4, #8
 800262a:	d54b      	bpl.n	80026c4 <__aeabi_dmul+0x4b0>
 800262c:	2201      	movs	r2, #1
 800262e:	2400      	movs	r4, #0
 8002630:	2500      	movs	r5, #0
 8002632:	e650      	b.n	80022d6 <__aeabi_dmul+0xc2>
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	031b      	lsls	r3, r3, #12
 8002638:	421c      	tst	r4, r3
 800263a:	d009      	beq.n	8002650 <__aeabi_dmul+0x43c>
 800263c:	421e      	tst	r6, r3
 800263e:	d107      	bne.n	8002650 <__aeabi_dmul+0x43c>
 8002640:	4333      	orrs	r3, r6
 8002642:	031c      	lsls	r4, r3, #12
 8002644:	4643      	mov	r3, r8
 8002646:	0015      	movs	r5, r2
 8002648:	0b24      	lsrs	r4, r4, #12
 800264a:	4a25      	ldr	r2, [pc, #148]	; (80026e0 <__aeabi_dmul+0x4cc>)
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	e642      	b.n	80022d6 <__aeabi_dmul+0xc2>
 8002650:	2280      	movs	r2, #128	; 0x80
 8002652:	0312      	lsls	r2, r2, #12
 8002654:	4314      	orrs	r4, r2
 8002656:	0324      	lsls	r4, r4, #12
 8002658:	4a21      	ldr	r2, [pc, #132]	; (80026e0 <__aeabi_dmul+0x4cc>)
 800265a:	0b24      	lsrs	r4, r4, #12
 800265c:	9701      	str	r7, [sp, #4]
 800265e:	e63a      	b.n	80022d6 <__aeabi_dmul+0xc2>
 8002660:	f000 fd50 	bl	8003104 <__clzsi2>
 8002664:	0001      	movs	r1, r0
 8002666:	0002      	movs	r2, r0
 8002668:	3115      	adds	r1, #21
 800266a:	3220      	adds	r2, #32
 800266c:	291c      	cmp	r1, #28
 800266e:	dc00      	bgt.n	8002672 <__aeabi_dmul+0x45e>
 8002670:	e74b      	b.n	800250a <__aeabi_dmul+0x2f6>
 8002672:	0034      	movs	r4, r6
 8002674:	3808      	subs	r0, #8
 8002676:	2500      	movs	r5, #0
 8002678:	4084      	lsls	r4, r0
 800267a:	e750      	b.n	800251e <__aeabi_dmul+0x30a>
 800267c:	f000 fd42 	bl	8003104 <__clzsi2>
 8002680:	0003      	movs	r3, r0
 8002682:	001a      	movs	r2, r3
 8002684:	3215      	adds	r2, #21
 8002686:	3020      	adds	r0, #32
 8002688:	2a1c      	cmp	r2, #28
 800268a:	dc00      	bgt.n	800268e <__aeabi_dmul+0x47a>
 800268c:	e71e      	b.n	80024cc <__aeabi_dmul+0x2b8>
 800268e:	4656      	mov	r6, sl
 8002690:	3b08      	subs	r3, #8
 8002692:	2200      	movs	r2, #0
 8002694:	409e      	lsls	r6, r3
 8002696:	e723      	b.n	80024e0 <__aeabi_dmul+0x2cc>
 8002698:	9b00      	ldr	r3, [sp, #0]
 800269a:	469c      	mov	ip, r3
 800269c:	e6e6      	b.n	800246c <__aeabi_dmul+0x258>
 800269e:	4912      	ldr	r1, [pc, #72]	; (80026e8 <__aeabi_dmul+0x4d4>)
 80026a0:	0022      	movs	r2, r4
 80026a2:	4461      	add	r1, ip
 80026a4:	002e      	movs	r6, r5
 80026a6:	408d      	lsls	r5, r1
 80026a8:	408a      	lsls	r2, r1
 80026aa:	40c6      	lsrs	r6, r0
 80026ac:	1e69      	subs	r1, r5, #1
 80026ae:	418d      	sbcs	r5, r1
 80026b0:	4332      	orrs	r2, r6
 80026b2:	432a      	orrs	r2, r5
 80026b4:	40c4      	lsrs	r4, r0
 80026b6:	0753      	lsls	r3, r2, #29
 80026b8:	d0b6      	beq.n	8002628 <__aeabi_dmul+0x414>
 80026ba:	210f      	movs	r1, #15
 80026bc:	4011      	ands	r1, r2
 80026be:	2904      	cmp	r1, #4
 80026c0:	d1ac      	bne.n	800261c <__aeabi_dmul+0x408>
 80026c2:	e7b1      	b.n	8002628 <__aeabi_dmul+0x414>
 80026c4:	0765      	lsls	r5, r4, #29
 80026c6:	0264      	lsls	r4, r4, #9
 80026c8:	0b24      	lsrs	r4, r4, #12
 80026ca:	08d2      	lsrs	r2, r2, #3
 80026cc:	4315      	orrs	r5, r2
 80026ce:	2200      	movs	r2, #0
 80026d0:	e601      	b.n	80022d6 <__aeabi_dmul+0xc2>
 80026d2:	2280      	movs	r2, #128	; 0x80
 80026d4:	0312      	lsls	r2, r2, #12
 80026d6:	4314      	orrs	r4, r2
 80026d8:	0324      	lsls	r4, r4, #12
 80026da:	4a01      	ldr	r2, [pc, #4]	; (80026e0 <__aeabi_dmul+0x4cc>)
 80026dc:	0b24      	lsrs	r4, r4, #12
 80026de:	e5fa      	b.n	80022d6 <__aeabi_dmul+0xc2>
 80026e0:	000007ff 	.word	0x000007ff
 80026e4:	0000043e 	.word	0x0000043e
 80026e8:	0000041e 	.word	0x0000041e

080026ec <__aeabi_dsub>:
 80026ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ee:	4657      	mov	r7, sl
 80026f0:	464e      	mov	r6, r9
 80026f2:	4645      	mov	r5, r8
 80026f4:	46de      	mov	lr, fp
 80026f6:	b5e0      	push	{r5, r6, r7, lr}
 80026f8:	001e      	movs	r6, r3
 80026fa:	0017      	movs	r7, r2
 80026fc:	004a      	lsls	r2, r1, #1
 80026fe:	030b      	lsls	r3, r1, #12
 8002700:	0d52      	lsrs	r2, r2, #21
 8002702:	0a5b      	lsrs	r3, r3, #9
 8002704:	4690      	mov	r8, r2
 8002706:	0f42      	lsrs	r2, r0, #29
 8002708:	431a      	orrs	r2, r3
 800270a:	0fcd      	lsrs	r5, r1, #31
 800270c:	4ccd      	ldr	r4, [pc, #820]	; (8002a44 <__aeabi_dsub+0x358>)
 800270e:	0331      	lsls	r1, r6, #12
 8002710:	00c3      	lsls	r3, r0, #3
 8002712:	4694      	mov	ip, r2
 8002714:	0070      	lsls	r0, r6, #1
 8002716:	0f7a      	lsrs	r2, r7, #29
 8002718:	0a49      	lsrs	r1, r1, #9
 800271a:	00ff      	lsls	r7, r7, #3
 800271c:	469a      	mov	sl, r3
 800271e:	46b9      	mov	r9, r7
 8002720:	0d40      	lsrs	r0, r0, #21
 8002722:	0ff6      	lsrs	r6, r6, #31
 8002724:	4311      	orrs	r1, r2
 8002726:	42a0      	cmp	r0, r4
 8002728:	d100      	bne.n	800272c <__aeabi_dsub+0x40>
 800272a:	e0b1      	b.n	8002890 <__aeabi_dsub+0x1a4>
 800272c:	2201      	movs	r2, #1
 800272e:	4056      	eors	r6, r2
 8002730:	46b3      	mov	fp, r6
 8002732:	42b5      	cmp	r5, r6
 8002734:	d100      	bne.n	8002738 <__aeabi_dsub+0x4c>
 8002736:	e088      	b.n	800284a <__aeabi_dsub+0x15e>
 8002738:	4642      	mov	r2, r8
 800273a:	1a12      	subs	r2, r2, r0
 800273c:	2a00      	cmp	r2, #0
 800273e:	dc00      	bgt.n	8002742 <__aeabi_dsub+0x56>
 8002740:	e0ae      	b.n	80028a0 <__aeabi_dsub+0x1b4>
 8002742:	2800      	cmp	r0, #0
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x5c>
 8002746:	e0c1      	b.n	80028cc <__aeabi_dsub+0x1e0>
 8002748:	48be      	ldr	r0, [pc, #760]	; (8002a44 <__aeabi_dsub+0x358>)
 800274a:	4580      	cmp	r8, r0
 800274c:	d100      	bne.n	8002750 <__aeabi_dsub+0x64>
 800274e:	e151      	b.n	80029f4 <__aeabi_dsub+0x308>
 8002750:	2080      	movs	r0, #128	; 0x80
 8002752:	0400      	lsls	r0, r0, #16
 8002754:	4301      	orrs	r1, r0
 8002756:	2a38      	cmp	r2, #56	; 0x38
 8002758:	dd00      	ble.n	800275c <__aeabi_dsub+0x70>
 800275a:	e17b      	b.n	8002a54 <__aeabi_dsub+0x368>
 800275c:	2a1f      	cmp	r2, #31
 800275e:	dd00      	ble.n	8002762 <__aeabi_dsub+0x76>
 8002760:	e1ee      	b.n	8002b40 <__aeabi_dsub+0x454>
 8002762:	2020      	movs	r0, #32
 8002764:	003e      	movs	r6, r7
 8002766:	1a80      	subs	r0, r0, r2
 8002768:	000c      	movs	r4, r1
 800276a:	40d6      	lsrs	r6, r2
 800276c:	40d1      	lsrs	r1, r2
 800276e:	4087      	lsls	r7, r0
 8002770:	4662      	mov	r2, ip
 8002772:	4084      	lsls	r4, r0
 8002774:	1a52      	subs	r2, r2, r1
 8002776:	1e78      	subs	r0, r7, #1
 8002778:	4187      	sbcs	r7, r0
 800277a:	4694      	mov	ip, r2
 800277c:	4334      	orrs	r4, r6
 800277e:	4327      	orrs	r7, r4
 8002780:	1bdc      	subs	r4, r3, r7
 8002782:	42a3      	cmp	r3, r4
 8002784:	419b      	sbcs	r3, r3
 8002786:	4662      	mov	r2, ip
 8002788:	425b      	negs	r3, r3
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	4699      	mov	r9, r3
 800278e:	464b      	mov	r3, r9
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	d400      	bmi.n	8002796 <__aeabi_dsub+0xaa>
 8002794:	e118      	b.n	80029c8 <__aeabi_dsub+0x2dc>
 8002796:	464b      	mov	r3, r9
 8002798:	0258      	lsls	r0, r3, #9
 800279a:	0a43      	lsrs	r3, r0, #9
 800279c:	4699      	mov	r9, r3
 800279e:	464b      	mov	r3, r9
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d100      	bne.n	80027a6 <__aeabi_dsub+0xba>
 80027a4:	e137      	b.n	8002a16 <__aeabi_dsub+0x32a>
 80027a6:	4648      	mov	r0, r9
 80027a8:	f000 fcac 	bl	8003104 <__clzsi2>
 80027ac:	0001      	movs	r1, r0
 80027ae:	3908      	subs	r1, #8
 80027b0:	2320      	movs	r3, #32
 80027b2:	0022      	movs	r2, r4
 80027b4:	4648      	mov	r0, r9
 80027b6:	1a5b      	subs	r3, r3, r1
 80027b8:	40da      	lsrs	r2, r3
 80027ba:	4088      	lsls	r0, r1
 80027bc:	408c      	lsls	r4, r1
 80027be:	4643      	mov	r3, r8
 80027c0:	4310      	orrs	r0, r2
 80027c2:	4588      	cmp	r8, r1
 80027c4:	dd00      	ble.n	80027c8 <__aeabi_dsub+0xdc>
 80027c6:	e136      	b.n	8002a36 <__aeabi_dsub+0x34a>
 80027c8:	1ac9      	subs	r1, r1, r3
 80027ca:	1c4b      	adds	r3, r1, #1
 80027cc:	2b1f      	cmp	r3, #31
 80027ce:	dd00      	ble.n	80027d2 <__aeabi_dsub+0xe6>
 80027d0:	e0ea      	b.n	80029a8 <__aeabi_dsub+0x2bc>
 80027d2:	2220      	movs	r2, #32
 80027d4:	0026      	movs	r6, r4
 80027d6:	1ad2      	subs	r2, r2, r3
 80027d8:	0001      	movs	r1, r0
 80027da:	4094      	lsls	r4, r2
 80027dc:	40de      	lsrs	r6, r3
 80027de:	40d8      	lsrs	r0, r3
 80027e0:	2300      	movs	r3, #0
 80027e2:	4091      	lsls	r1, r2
 80027e4:	1e62      	subs	r2, r4, #1
 80027e6:	4194      	sbcs	r4, r2
 80027e8:	4681      	mov	r9, r0
 80027ea:	4698      	mov	r8, r3
 80027ec:	4331      	orrs	r1, r6
 80027ee:	430c      	orrs	r4, r1
 80027f0:	0763      	lsls	r3, r4, #29
 80027f2:	d009      	beq.n	8002808 <__aeabi_dsub+0x11c>
 80027f4:	230f      	movs	r3, #15
 80027f6:	4023      	ands	r3, r4
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d005      	beq.n	8002808 <__aeabi_dsub+0x11c>
 80027fc:	1d23      	adds	r3, r4, #4
 80027fe:	42a3      	cmp	r3, r4
 8002800:	41a4      	sbcs	r4, r4
 8002802:	4264      	negs	r4, r4
 8002804:	44a1      	add	r9, r4
 8002806:	001c      	movs	r4, r3
 8002808:	464b      	mov	r3, r9
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	d400      	bmi.n	8002810 <__aeabi_dsub+0x124>
 800280e:	e0de      	b.n	80029ce <__aeabi_dsub+0x2e2>
 8002810:	4641      	mov	r1, r8
 8002812:	4b8c      	ldr	r3, [pc, #560]	; (8002a44 <__aeabi_dsub+0x358>)
 8002814:	3101      	adds	r1, #1
 8002816:	4299      	cmp	r1, r3
 8002818:	d100      	bne.n	800281c <__aeabi_dsub+0x130>
 800281a:	e0e7      	b.n	80029ec <__aeabi_dsub+0x300>
 800281c:	464b      	mov	r3, r9
 800281e:	488a      	ldr	r0, [pc, #552]	; (8002a48 <__aeabi_dsub+0x35c>)
 8002820:	08e4      	lsrs	r4, r4, #3
 8002822:	4003      	ands	r3, r0
 8002824:	0018      	movs	r0, r3
 8002826:	0549      	lsls	r1, r1, #21
 8002828:	075b      	lsls	r3, r3, #29
 800282a:	0240      	lsls	r0, r0, #9
 800282c:	4323      	orrs	r3, r4
 800282e:	0d4a      	lsrs	r2, r1, #21
 8002830:	0b04      	lsrs	r4, r0, #12
 8002832:	0512      	lsls	r2, r2, #20
 8002834:	07ed      	lsls	r5, r5, #31
 8002836:	4322      	orrs	r2, r4
 8002838:	432a      	orrs	r2, r5
 800283a:	0018      	movs	r0, r3
 800283c:	0011      	movs	r1, r2
 800283e:	bcf0      	pop	{r4, r5, r6, r7}
 8002840:	46bb      	mov	fp, r7
 8002842:	46b2      	mov	sl, r6
 8002844:	46a9      	mov	r9, r5
 8002846:	46a0      	mov	r8, r4
 8002848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800284a:	4642      	mov	r2, r8
 800284c:	1a12      	subs	r2, r2, r0
 800284e:	2a00      	cmp	r2, #0
 8002850:	dd52      	ble.n	80028f8 <__aeabi_dsub+0x20c>
 8002852:	2800      	cmp	r0, #0
 8002854:	d100      	bne.n	8002858 <__aeabi_dsub+0x16c>
 8002856:	e09c      	b.n	8002992 <__aeabi_dsub+0x2a6>
 8002858:	45a0      	cmp	r8, r4
 800285a:	d100      	bne.n	800285e <__aeabi_dsub+0x172>
 800285c:	e0ca      	b.n	80029f4 <__aeabi_dsub+0x308>
 800285e:	2080      	movs	r0, #128	; 0x80
 8002860:	0400      	lsls	r0, r0, #16
 8002862:	4301      	orrs	r1, r0
 8002864:	2a38      	cmp	r2, #56	; 0x38
 8002866:	dd00      	ble.n	800286a <__aeabi_dsub+0x17e>
 8002868:	e149      	b.n	8002afe <__aeabi_dsub+0x412>
 800286a:	2a1f      	cmp	r2, #31
 800286c:	dc00      	bgt.n	8002870 <__aeabi_dsub+0x184>
 800286e:	e197      	b.n	8002ba0 <__aeabi_dsub+0x4b4>
 8002870:	0010      	movs	r0, r2
 8002872:	000e      	movs	r6, r1
 8002874:	3820      	subs	r0, #32
 8002876:	40c6      	lsrs	r6, r0
 8002878:	2a20      	cmp	r2, #32
 800287a:	d004      	beq.n	8002886 <__aeabi_dsub+0x19a>
 800287c:	2040      	movs	r0, #64	; 0x40
 800287e:	1a82      	subs	r2, r0, r2
 8002880:	4091      	lsls	r1, r2
 8002882:	430f      	orrs	r7, r1
 8002884:	46b9      	mov	r9, r7
 8002886:	464c      	mov	r4, r9
 8002888:	1e62      	subs	r2, r4, #1
 800288a:	4194      	sbcs	r4, r2
 800288c:	4334      	orrs	r4, r6
 800288e:	e13a      	b.n	8002b06 <__aeabi_dsub+0x41a>
 8002890:	000a      	movs	r2, r1
 8002892:	433a      	orrs	r2, r7
 8002894:	d028      	beq.n	80028e8 <__aeabi_dsub+0x1fc>
 8002896:	46b3      	mov	fp, r6
 8002898:	42b5      	cmp	r5, r6
 800289a:	d02b      	beq.n	80028f4 <__aeabi_dsub+0x208>
 800289c:	4a6b      	ldr	r2, [pc, #428]	; (8002a4c <__aeabi_dsub+0x360>)
 800289e:	4442      	add	r2, r8
 80028a0:	2a00      	cmp	r2, #0
 80028a2:	d05d      	beq.n	8002960 <__aeabi_dsub+0x274>
 80028a4:	4642      	mov	r2, r8
 80028a6:	4644      	mov	r4, r8
 80028a8:	1a82      	subs	r2, r0, r2
 80028aa:	2c00      	cmp	r4, #0
 80028ac:	d000      	beq.n	80028b0 <__aeabi_dsub+0x1c4>
 80028ae:	e0f5      	b.n	8002a9c <__aeabi_dsub+0x3b0>
 80028b0:	4665      	mov	r5, ip
 80028b2:	431d      	orrs	r5, r3
 80028b4:	d100      	bne.n	80028b8 <__aeabi_dsub+0x1cc>
 80028b6:	e19c      	b.n	8002bf2 <__aeabi_dsub+0x506>
 80028b8:	1e55      	subs	r5, r2, #1
 80028ba:	2a01      	cmp	r2, #1
 80028bc:	d100      	bne.n	80028c0 <__aeabi_dsub+0x1d4>
 80028be:	e1fb      	b.n	8002cb8 <__aeabi_dsub+0x5cc>
 80028c0:	4c60      	ldr	r4, [pc, #384]	; (8002a44 <__aeabi_dsub+0x358>)
 80028c2:	42a2      	cmp	r2, r4
 80028c4:	d100      	bne.n	80028c8 <__aeabi_dsub+0x1dc>
 80028c6:	e1bd      	b.n	8002c44 <__aeabi_dsub+0x558>
 80028c8:	002a      	movs	r2, r5
 80028ca:	e0f0      	b.n	8002aae <__aeabi_dsub+0x3c2>
 80028cc:	0008      	movs	r0, r1
 80028ce:	4338      	orrs	r0, r7
 80028d0:	d100      	bne.n	80028d4 <__aeabi_dsub+0x1e8>
 80028d2:	e0c3      	b.n	8002a5c <__aeabi_dsub+0x370>
 80028d4:	1e50      	subs	r0, r2, #1
 80028d6:	2a01      	cmp	r2, #1
 80028d8:	d100      	bne.n	80028dc <__aeabi_dsub+0x1f0>
 80028da:	e1a8      	b.n	8002c2e <__aeabi_dsub+0x542>
 80028dc:	4c59      	ldr	r4, [pc, #356]	; (8002a44 <__aeabi_dsub+0x358>)
 80028de:	42a2      	cmp	r2, r4
 80028e0:	d100      	bne.n	80028e4 <__aeabi_dsub+0x1f8>
 80028e2:	e087      	b.n	80029f4 <__aeabi_dsub+0x308>
 80028e4:	0002      	movs	r2, r0
 80028e6:	e736      	b.n	8002756 <__aeabi_dsub+0x6a>
 80028e8:	2201      	movs	r2, #1
 80028ea:	4056      	eors	r6, r2
 80028ec:	46b3      	mov	fp, r6
 80028ee:	42b5      	cmp	r5, r6
 80028f0:	d000      	beq.n	80028f4 <__aeabi_dsub+0x208>
 80028f2:	e721      	b.n	8002738 <__aeabi_dsub+0x4c>
 80028f4:	4a55      	ldr	r2, [pc, #340]	; (8002a4c <__aeabi_dsub+0x360>)
 80028f6:	4442      	add	r2, r8
 80028f8:	2a00      	cmp	r2, #0
 80028fa:	d100      	bne.n	80028fe <__aeabi_dsub+0x212>
 80028fc:	e0b5      	b.n	8002a6a <__aeabi_dsub+0x37e>
 80028fe:	4642      	mov	r2, r8
 8002900:	4644      	mov	r4, r8
 8002902:	1a82      	subs	r2, r0, r2
 8002904:	2c00      	cmp	r4, #0
 8002906:	d100      	bne.n	800290a <__aeabi_dsub+0x21e>
 8002908:	e138      	b.n	8002b7c <__aeabi_dsub+0x490>
 800290a:	4e4e      	ldr	r6, [pc, #312]	; (8002a44 <__aeabi_dsub+0x358>)
 800290c:	42b0      	cmp	r0, r6
 800290e:	d100      	bne.n	8002912 <__aeabi_dsub+0x226>
 8002910:	e1de      	b.n	8002cd0 <__aeabi_dsub+0x5e4>
 8002912:	2680      	movs	r6, #128	; 0x80
 8002914:	4664      	mov	r4, ip
 8002916:	0436      	lsls	r6, r6, #16
 8002918:	4334      	orrs	r4, r6
 800291a:	46a4      	mov	ip, r4
 800291c:	2a38      	cmp	r2, #56	; 0x38
 800291e:	dd00      	ble.n	8002922 <__aeabi_dsub+0x236>
 8002920:	e196      	b.n	8002c50 <__aeabi_dsub+0x564>
 8002922:	2a1f      	cmp	r2, #31
 8002924:	dd00      	ble.n	8002928 <__aeabi_dsub+0x23c>
 8002926:	e224      	b.n	8002d72 <__aeabi_dsub+0x686>
 8002928:	2620      	movs	r6, #32
 800292a:	1ab4      	subs	r4, r6, r2
 800292c:	46a2      	mov	sl, r4
 800292e:	4664      	mov	r4, ip
 8002930:	4656      	mov	r6, sl
 8002932:	40b4      	lsls	r4, r6
 8002934:	46a1      	mov	r9, r4
 8002936:	001c      	movs	r4, r3
 8002938:	464e      	mov	r6, r9
 800293a:	40d4      	lsrs	r4, r2
 800293c:	4326      	orrs	r6, r4
 800293e:	0034      	movs	r4, r6
 8002940:	4656      	mov	r6, sl
 8002942:	40b3      	lsls	r3, r6
 8002944:	1e5e      	subs	r6, r3, #1
 8002946:	41b3      	sbcs	r3, r6
 8002948:	431c      	orrs	r4, r3
 800294a:	4663      	mov	r3, ip
 800294c:	40d3      	lsrs	r3, r2
 800294e:	18c9      	adds	r1, r1, r3
 8002950:	19e4      	adds	r4, r4, r7
 8002952:	42bc      	cmp	r4, r7
 8002954:	41bf      	sbcs	r7, r7
 8002956:	427f      	negs	r7, r7
 8002958:	46b9      	mov	r9, r7
 800295a:	4680      	mov	r8, r0
 800295c:	4489      	add	r9, r1
 800295e:	e0d8      	b.n	8002b12 <__aeabi_dsub+0x426>
 8002960:	4640      	mov	r0, r8
 8002962:	4c3b      	ldr	r4, [pc, #236]	; (8002a50 <__aeabi_dsub+0x364>)
 8002964:	3001      	adds	r0, #1
 8002966:	4220      	tst	r0, r4
 8002968:	d000      	beq.n	800296c <__aeabi_dsub+0x280>
 800296a:	e0b4      	b.n	8002ad6 <__aeabi_dsub+0x3ea>
 800296c:	4640      	mov	r0, r8
 800296e:	2800      	cmp	r0, #0
 8002970:	d000      	beq.n	8002974 <__aeabi_dsub+0x288>
 8002972:	e144      	b.n	8002bfe <__aeabi_dsub+0x512>
 8002974:	4660      	mov	r0, ip
 8002976:	4318      	orrs	r0, r3
 8002978:	d100      	bne.n	800297c <__aeabi_dsub+0x290>
 800297a:	e190      	b.n	8002c9e <__aeabi_dsub+0x5b2>
 800297c:	0008      	movs	r0, r1
 800297e:	4338      	orrs	r0, r7
 8002980:	d000      	beq.n	8002984 <__aeabi_dsub+0x298>
 8002982:	e1aa      	b.n	8002cda <__aeabi_dsub+0x5ee>
 8002984:	4661      	mov	r1, ip
 8002986:	08db      	lsrs	r3, r3, #3
 8002988:	0749      	lsls	r1, r1, #29
 800298a:	430b      	orrs	r3, r1
 800298c:	4661      	mov	r1, ip
 800298e:	08cc      	lsrs	r4, r1, #3
 8002990:	e027      	b.n	80029e2 <__aeabi_dsub+0x2f6>
 8002992:	0008      	movs	r0, r1
 8002994:	4338      	orrs	r0, r7
 8002996:	d061      	beq.n	8002a5c <__aeabi_dsub+0x370>
 8002998:	1e50      	subs	r0, r2, #1
 800299a:	2a01      	cmp	r2, #1
 800299c:	d100      	bne.n	80029a0 <__aeabi_dsub+0x2b4>
 800299e:	e139      	b.n	8002c14 <__aeabi_dsub+0x528>
 80029a0:	42a2      	cmp	r2, r4
 80029a2:	d027      	beq.n	80029f4 <__aeabi_dsub+0x308>
 80029a4:	0002      	movs	r2, r0
 80029a6:	e75d      	b.n	8002864 <__aeabi_dsub+0x178>
 80029a8:	0002      	movs	r2, r0
 80029aa:	391f      	subs	r1, #31
 80029ac:	40ca      	lsrs	r2, r1
 80029ae:	0011      	movs	r1, r2
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d003      	beq.n	80029bc <__aeabi_dsub+0x2d0>
 80029b4:	2240      	movs	r2, #64	; 0x40
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	4098      	lsls	r0, r3
 80029ba:	4304      	orrs	r4, r0
 80029bc:	1e63      	subs	r3, r4, #1
 80029be:	419c      	sbcs	r4, r3
 80029c0:	2300      	movs	r3, #0
 80029c2:	4699      	mov	r9, r3
 80029c4:	4698      	mov	r8, r3
 80029c6:	430c      	orrs	r4, r1
 80029c8:	0763      	lsls	r3, r4, #29
 80029ca:	d000      	beq.n	80029ce <__aeabi_dsub+0x2e2>
 80029cc:	e712      	b.n	80027f4 <__aeabi_dsub+0x108>
 80029ce:	464b      	mov	r3, r9
 80029d0:	464a      	mov	r2, r9
 80029d2:	08e4      	lsrs	r4, r4, #3
 80029d4:	075b      	lsls	r3, r3, #29
 80029d6:	4323      	orrs	r3, r4
 80029d8:	08d4      	lsrs	r4, r2, #3
 80029da:	4642      	mov	r2, r8
 80029dc:	4919      	ldr	r1, [pc, #100]	; (8002a44 <__aeabi_dsub+0x358>)
 80029de:	428a      	cmp	r2, r1
 80029e0:	d00e      	beq.n	8002a00 <__aeabi_dsub+0x314>
 80029e2:	0324      	lsls	r4, r4, #12
 80029e4:	0552      	lsls	r2, r2, #21
 80029e6:	0b24      	lsrs	r4, r4, #12
 80029e8:	0d52      	lsrs	r2, r2, #21
 80029ea:	e722      	b.n	8002832 <__aeabi_dsub+0x146>
 80029ec:	000a      	movs	r2, r1
 80029ee:	2400      	movs	r4, #0
 80029f0:	2300      	movs	r3, #0
 80029f2:	e71e      	b.n	8002832 <__aeabi_dsub+0x146>
 80029f4:	08db      	lsrs	r3, r3, #3
 80029f6:	4662      	mov	r2, ip
 80029f8:	0752      	lsls	r2, r2, #29
 80029fa:	4313      	orrs	r3, r2
 80029fc:	4662      	mov	r2, ip
 80029fe:	08d4      	lsrs	r4, r2, #3
 8002a00:	001a      	movs	r2, r3
 8002a02:	4322      	orrs	r2, r4
 8002a04:	d100      	bne.n	8002a08 <__aeabi_dsub+0x31c>
 8002a06:	e1fc      	b.n	8002e02 <__aeabi_dsub+0x716>
 8002a08:	2280      	movs	r2, #128	; 0x80
 8002a0a:	0312      	lsls	r2, r2, #12
 8002a0c:	4314      	orrs	r4, r2
 8002a0e:	0324      	lsls	r4, r4, #12
 8002a10:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <__aeabi_dsub+0x358>)
 8002a12:	0b24      	lsrs	r4, r4, #12
 8002a14:	e70d      	b.n	8002832 <__aeabi_dsub+0x146>
 8002a16:	0020      	movs	r0, r4
 8002a18:	f000 fb74 	bl	8003104 <__clzsi2>
 8002a1c:	0001      	movs	r1, r0
 8002a1e:	3118      	adds	r1, #24
 8002a20:	291f      	cmp	r1, #31
 8002a22:	dc00      	bgt.n	8002a26 <__aeabi_dsub+0x33a>
 8002a24:	e6c4      	b.n	80027b0 <__aeabi_dsub+0xc4>
 8002a26:	3808      	subs	r0, #8
 8002a28:	4084      	lsls	r4, r0
 8002a2a:	4643      	mov	r3, r8
 8002a2c:	0020      	movs	r0, r4
 8002a2e:	2400      	movs	r4, #0
 8002a30:	4588      	cmp	r8, r1
 8002a32:	dc00      	bgt.n	8002a36 <__aeabi_dsub+0x34a>
 8002a34:	e6c8      	b.n	80027c8 <__aeabi_dsub+0xdc>
 8002a36:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <__aeabi_dsub+0x35c>)
 8002a38:	1a5b      	subs	r3, r3, r1
 8002a3a:	4010      	ands	r0, r2
 8002a3c:	4698      	mov	r8, r3
 8002a3e:	4681      	mov	r9, r0
 8002a40:	e6d6      	b.n	80027f0 <__aeabi_dsub+0x104>
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	000007ff 	.word	0x000007ff
 8002a48:	ff7fffff 	.word	0xff7fffff
 8002a4c:	fffff801 	.word	0xfffff801
 8002a50:	000007fe 	.word	0x000007fe
 8002a54:	430f      	orrs	r7, r1
 8002a56:	1e7a      	subs	r2, r7, #1
 8002a58:	4197      	sbcs	r7, r2
 8002a5a:	e691      	b.n	8002780 <__aeabi_dsub+0x94>
 8002a5c:	4661      	mov	r1, ip
 8002a5e:	08db      	lsrs	r3, r3, #3
 8002a60:	0749      	lsls	r1, r1, #29
 8002a62:	430b      	orrs	r3, r1
 8002a64:	4661      	mov	r1, ip
 8002a66:	08cc      	lsrs	r4, r1, #3
 8002a68:	e7b8      	b.n	80029dc <__aeabi_dsub+0x2f0>
 8002a6a:	4640      	mov	r0, r8
 8002a6c:	4cd3      	ldr	r4, [pc, #844]	; (8002dbc <__aeabi_dsub+0x6d0>)
 8002a6e:	3001      	adds	r0, #1
 8002a70:	4220      	tst	r0, r4
 8002a72:	d000      	beq.n	8002a76 <__aeabi_dsub+0x38a>
 8002a74:	e0a2      	b.n	8002bbc <__aeabi_dsub+0x4d0>
 8002a76:	4640      	mov	r0, r8
 8002a78:	2800      	cmp	r0, #0
 8002a7a:	d000      	beq.n	8002a7e <__aeabi_dsub+0x392>
 8002a7c:	e101      	b.n	8002c82 <__aeabi_dsub+0x596>
 8002a7e:	4660      	mov	r0, ip
 8002a80:	4318      	orrs	r0, r3
 8002a82:	d100      	bne.n	8002a86 <__aeabi_dsub+0x39a>
 8002a84:	e15e      	b.n	8002d44 <__aeabi_dsub+0x658>
 8002a86:	0008      	movs	r0, r1
 8002a88:	4338      	orrs	r0, r7
 8002a8a:	d000      	beq.n	8002a8e <__aeabi_dsub+0x3a2>
 8002a8c:	e15f      	b.n	8002d4e <__aeabi_dsub+0x662>
 8002a8e:	4661      	mov	r1, ip
 8002a90:	08db      	lsrs	r3, r3, #3
 8002a92:	0749      	lsls	r1, r1, #29
 8002a94:	430b      	orrs	r3, r1
 8002a96:	4661      	mov	r1, ip
 8002a98:	08cc      	lsrs	r4, r1, #3
 8002a9a:	e7a2      	b.n	80029e2 <__aeabi_dsub+0x2f6>
 8002a9c:	4dc8      	ldr	r5, [pc, #800]	; (8002dc0 <__aeabi_dsub+0x6d4>)
 8002a9e:	42a8      	cmp	r0, r5
 8002aa0:	d100      	bne.n	8002aa4 <__aeabi_dsub+0x3b8>
 8002aa2:	e0cf      	b.n	8002c44 <__aeabi_dsub+0x558>
 8002aa4:	2580      	movs	r5, #128	; 0x80
 8002aa6:	4664      	mov	r4, ip
 8002aa8:	042d      	lsls	r5, r5, #16
 8002aaa:	432c      	orrs	r4, r5
 8002aac:	46a4      	mov	ip, r4
 8002aae:	2a38      	cmp	r2, #56	; 0x38
 8002ab0:	dc56      	bgt.n	8002b60 <__aeabi_dsub+0x474>
 8002ab2:	2a1f      	cmp	r2, #31
 8002ab4:	dd00      	ble.n	8002ab8 <__aeabi_dsub+0x3cc>
 8002ab6:	e0d1      	b.n	8002c5c <__aeabi_dsub+0x570>
 8002ab8:	2520      	movs	r5, #32
 8002aba:	001e      	movs	r6, r3
 8002abc:	1aad      	subs	r5, r5, r2
 8002abe:	4664      	mov	r4, ip
 8002ac0:	40ab      	lsls	r3, r5
 8002ac2:	40ac      	lsls	r4, r5
 8002ac4:	40d6      	lsrs	r6, r2
 8002ac6:	1e5d      	subs	r5, r3, #1
 8002ac8:	41ab      	sbcs	r3, r5
 8002aca:	4334      	orrs	r4, r6
 8002acc:	4323      	orrs	r3, r4
 8002ace:	4664      	mov	r4, ip
 8002ad0:	40d4      	lsrs	r4, r2
 8002ad2:	1b09      	subs	r1, r1, r4
 8002ad4:	e049      	b.n	8002b6a <__aeabi_dsub+0x47e>
 8002ad6:	4660      	mov	r0, ip
 8002ad8:	1bdc      	subs	r4, r3, r7
 8002ada:	1a46      	subs	r6, r0, r1
 8002adc:	42a3      	cmp	r3, r4
 8002ade:	4180      	sbcs	r0, r0
 8002ae0:	4240      	negs	r0, r0
 8002ae2:	4681      	mov	r9, r0
 8002ae4:	0030      	movs	r0, r6
 8002ae6:	464e      	mov	r6, r9
 8002ae8:	1b80      	subs	r0, r0, r6
 8002aea:	4681      	mov	r9, r0
 8002aec:	0200      	lsls	r0, r0, #8
 8002aee:	d476      	bmi.n	8002bde <__aeabi_dsub+0x4f2>
 8002af0:	464b      	mov	r3, r9
 8002af2:	4323      	orrs	r3, r4
 8002af4:	d000      	beq.n	8002af8 <__aeabi_dsub+0x40c>
 8002af6:	e652      	b.n	800279e <__aeabi_dsub+0xb2>
 8002af8:	2400      	movs	r4, #0
 8002afa:	2500      	movs	r5, #0
 8002afc:	e771      	b.n	80029e2 <__aeabi_dsub+0x2f6>
 8002afe:	4339      	orrs	r1, r7
 8002b00:	000c      	movs	r4, r1
 8002b02:	1e62      	subs	r2, r4, #1
 8002b04:	4194      	sbcs	r4, r2
 8002b06:	18e4      	adds	r4, r4, r3
 8002b08:	429c      	cmp	r4, r3
 8002b0a:	419b      	sbcs	r3, r3
 8002b0c:	425b      	negs	r3, r3
 8002b0e:	4463      	add	r3, ip
 8002b10:	4699      	mov	r9, r3
 8002b12:	464b      	mov	r3, r9
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	d400      	bmi.n	8002b1a <__aeabi_dsub+0x42e>
 8002b18:	e756      	b.n	80029c8 <__aeabi_dsub+0x2dc>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	469c      	mov	ip, r3
 8002b1e:	4ba8      	ldr	r3, [pc, #672]	; (8002dc0 <__aeabi_dsub+0x6d4>)
 8002b20:	44e0      	add	r8, ip
 8002b22:	4598      	cmp	r8, r3
 8002b24:	d038      	beq.n	8002b98 <__aeabi_dsub+0x4ac>
 8002b26:	464b      	mov	r3, r9
 8002b28:	48a6      	ldr	r0, [pc, #664]	; (8002dc4 <__aeabi_dsub+0x6d8>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	4003      	ands	r3, r0
 8002b2e:	0018      	movs	r0, r3
 8002b30:	0863      	lsrs	r3, r4, #1
 8002b32:	4014      	ands	r4, r2
 8002b34:	431c      	orrs	r4, r3
 8002b36:	07c3      	lsls	r3, r0, #31
 8002b38:	431c      	orrs	r4, r3
 8002b3a:	0843      	lsrs	r3, r0, #1
 8002b3c:	4699      	mov	r9, r3
 8002b3e:	e657      	b.n	80027f0 <__aeabi_dsub+0x104>
 8002b40:	0010      	movs	r0, r2
 8002b42:	000e      	movs	r6, r1
 8002b44:	3820      	subs	r0, #32
 8002b46:	40c6      	lsrs	r6, r0
 8002b48:	2a20      	cmp	r2, #32
 8002b4a:	d004      	beq.n	8002b56 <__aeabi_dsub+0x46a>
 8002b4c:	2040      	movs	r0, #64	; 0x40
 8002b4e:	1a82      	subs	r2, r0, r2
 8002b50:	4091      	lsls	r1, r2
 8002b52:	430f      	orrs	r7, r1
 8002b54:	46b9      	mov	r9, r7
 8002b56:	464f      	mov	r7, r9
 8002b58:	1e7a      	subs	r2, r7, #1
 8002b5a:	4197      	sbcs	r7, r2
 8002b5c:	4337      	orrs	r7, r6
 8002b5e:	e60f      	b.n	8002780 <__aeabi_dsub+0x94>
 8002b60:	4662      	mov	r2, ip
 8002b62:	431a      	orrs	r2, r3
 8002b64:	0013      	movs	r3, r2
 8002b66:	1e5a      	subs	r2, r3, #1
 8002b68:	4193      	sbcs	r3, r2
 8002b6a:	1afc      	subs	r4, r7, r3
 8002b6c:	42a7      	cmp	r7, r4
 8002b6e:	41bf      	sbcs	r7, r7
 8002b70:	427f      	negs	r7, r7
 8002b72:	1bcb      	subs	r3, r1, r7
 8002b74:	4699      	mov	r9, r3
 8002b76:	465d      	mov	r5, fp
 8002b78:	4680      	mov	r8, r0
 8002b7a:	e608      	b.n	800278e <__aeabi_dsub+0xa2>
 8002b7c:	4666      	mov	r6, ip
 8002b7e:	431e      	orrs	r6, r3
 8002b80:	d100      	bne.n	8002b84 <__aeabi_dsub+0x498>
 8002b82:	e0be      	b.n	8002d02 <__aeabi_dsub+0x616>
 8002b84:	1e56      	subs	r6, r2, #1
 8002b86:	2a01      	cmp	r2, #1
 8002b88:	d100      	bne.n	8002b8c <__aeabi_dsub+0x4a0>
 8002b8a:	e109      	b.n	8002da0 <__aeabi_dsub+0x6b4>
 8002b8c:	4c8c      	ldr	r4, [pc, #560]	; (8002dc0 <__aeabi_dsub+0x6d4>)
 8002b8e:	42a2      	cmp	r2, r4
 8002b90:	d100      	bne.n	8002b94 <__aeabi_dsub+0x4a8>
 8002b92:	e119      	b.n	8002dc8 <__aeabi_dsub+0x6dc>
 8002b94:	0032      	movs	r2, r6
 8002b96:	e6c1      	b.n	800291c <__aeabi_dsub+0x230>
 8002b98:	4642      	mov	r2, r8
 8002b9a:	2400      	movs	r4, #0
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e648      	b.n	8002832 <__aeabi_dsub+0x146>
 8002ba0:	2020      	movs	r0, #32
 8002ba2:	000c      	movs	r4, r1
 8002ba4:	1a80      	subs	r0, r0, r2
 8002ba6:	003e      	movs	r6, r7
 8002ba8:	4087      	lsls	r7, r0
 8002baa:	4084      	lsls	r4, r0
 8002bac:	40d6      	lsrs	r6, r2
 8002bae:	1e78      	subs	r0, r7, #1
 8002bb0:	4187      	sbcs	r7, r0
 8002bb2:	40d1      	lsrs	r1, r2
 8002bb4:	4334      	orrs	r4, r6
 8002bb6:	433c      	orrs	r4, r7
 8002bb8:	448c      	add	ip, r1
 8002bba:	e7a4      	b.n	8002b06 <__aeabi_dsub+0x41a>
 8002bbc:	4a80      	ldr	r2, [pc, #512]	; (8002dc0 <__aeabi_dsub+0x6d4>)
 8002bbe:	4290      	cmp	r0, r2
 8002bc0:	d100      	bne.n	8002bc4 <__aeabi_dsub+0x4d8>
 8002bc2:	e0e9      	b.n	8002d98 <__aeabi_dsub+0x6ac>
 8002bc4:	19df      	adds	r7, r3, r7
 8002bc6:	429f      	cmp	r7, r3
 8002bc8:	419b      	sbcs	r3, r3
 8002bca:	4461      	add	r1, ip
 8002bcc:	425b      	negs	r3, r3
 8002bce:	18c9      	adds	r1, r1, r3
 8002bd0:	07cc      	lsls	r4, r1, #31
 8002bd2:	087f      	lsrs	r7, r7, #1
 8002bd4:	084b      	lsrs	r3, r1, #1
 8002bd6:	4699      	mov	r9, r3
 8002bd8:	4680      	mov	r8, r0
 8002bda:	433c      	orrs	r4, r7
 8002bdc:	e6f4      	b.n	80029c8 <__aeabi_dsub+0x2dc>
 8002bde:	1afc      	subs	r4, r7, r3
 8002be0:	42a7      	cmp	r7, r4
 8002be2:	41bf      	sbcs	r7, r7
 8002be4:	4663      	mov	r3, ip
 8002be6:	427f      	negs	r7, r7
 8002be8:	1ac9      	subs	r1, r1, r3
 8002bea:	1bcb      	subs	r3, r1, r7
 8002bec:	4699      	mov	r9, r3
 8002bee:	465d      	mov	r5, fp
 8002bf0:	e5d5      	b.n	800279e <__aeabi_dsub+0xb2>
 8002bf2:	08ff      	lsrs	r7, r7, #3
 8002bf4:	074b      	lsls	r3, r1, #29
 8002bf6:	465d      	mov	r5, fp
 8002bf8:	433b      	orrs	r3, r7
 8002bfa:	08cc      	lsrs	r4, r1, #3
 8002bfc:	e6ee      	b.n	80029dc <__aeabi_dsub+0x2f0>
 8002bfe:	4662      	mov	r2, ip
 8002c00:	431a      	orrs	r2, r3
 8002c02:	d000      	beq.n	8002c06 <__aeabi_dsub+0x51a>
 8002c04:	e082      	b.n	8002d0c <__aeabi_dsub+0x620>
 8002c06:	000b      	movs	r3, r1
 8002c08:	433b      	orrs	r3, r7
 8002c0a:	d11b      	bne.n	8002c44 <__aeabi_dsub+0x558>
 8002c0c:	2480      	movs	r4, #128	; 0x80
 8002c0e:	2500      	movs	r5, #0
 8002c10:	0324      	lsls	r4, r4, #12
 8002c12:	e6f9      	b.n	8002a08 <__aeabi_dsub+0x31c>
 8002c14:	19dc      	adds	r4, r3, r7
 8002c16:	429c      	cmp	r4, r3
 8002c18:	419b      	sbcs	r3, r3
 8002c1a:	4461      	add	r1, ip
 8002c1c:	4689      	mov	r9, r1
 8002c1e:	425b      	negs	r3, r3
 8002c20:	4499      	add	r9, r3
 8002c22:	464b      	mov	r3, r9
 8002c24:	021b      	lsls	r3, r3, #8
 8002c26:	d444      	bmi.n	8002cb2 <__aeabi_dsub+0x5c6>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	4698      	mov	r8, r3
 8002c2c:	e6cc      	b.n	80029c8 <__aeabi_dsub+0x2dc>
 8002c2e:	1bdc      	subs	r4, r3, r7
 8002c30:	4662      	mov	r2, ip
 8002c32:	42a3      	cmp	r3, r4
 8002c34:	419b      	sbcs	r3, r3
 8002c36:	1a51      	subs	r1, r2, r1
 8002c38:	425b      	negs	r3, r3
 8002c3a:	1acb      	subs	r3, r1, r3
 8002c3c:	4699      	mov	r9, r3
 8002c3e:	2301      	movs	r3, #1
 8002c40:	4698      	mov	r8, r3
 8002c42:	e5a4      	b.n	800278e <__aeabi_dsub+0xa2>
 8002c44:	08ff      	lsrs	r7, r7, #3
 8002c46:	074b      	lsls	r3, r1, #29
 8002c48:	465d      	mov	r5, fp
 8002c4a:	433b      	orrs	r3, r7
 8002c4c:	08cc      	lsrs	r4, r1, #3
 8002c4e:	e6d7      	b.n	8002a00 <__aeabi_dsub+0x314>
 8002c50:	4662      	mov	r2, ip
 8002c52:	431a      	orrs	r2, r3
 8002c54:	0014      	movs	r4, r2
 8002c56:	1e63      	subs	r3, r4, #1
 8002c58:	419c      	sbcs	r4, r3
 8002c5a:	e679      	b.n	8002950 <__aeabi_dsub+0x264>
 8002c5c:	0015      	movs	r5, r2
 8002c5e:	4664      	mov	r4, ip
 8002c60:	3d20      	subs	r5, #32
 8002c62:	40ec      	lsrs	r4, r5
 8002c64:	46a0      	mov	r8, r4
 8002c66:	2a20      	cmp	r2, #32
 8002c68:	d005      	beq.n	8002c76 <__aeabi_dsub+0x58a>
 8002c6a:	2540      	movs	r5, #64	; 0x40
 8002c6c:	4664      	mov	r4, ip
 8002c6e:	1aaa      	subs	r2, r5, r2
 8002c70:	4094      	lsls	r4, r2
 8002c72:	4323      	orrs	r3, r4
 8002c74:	469a      	mov	sl, r3
 8002c76:	4654      	mov	r4, sl
 8002c78:	1e63      	subs	r3, r4, #1
 8002c7a:	419c      	sbcs	r4, r3
 8002c7c:	4643      	mov	r3, r8
 8002c7e:	4323      	orrs	r3, r4
 8002c80:	e773      	b.n	8002b6a <__aeabi_dsub+0x47e>
 8002c82:	4662      	mov	r2, ip
 8002c84:	431a      	orrs	r2, r3
 8002c86:	d023      	beq.n	8002cd0 <__aeabi_dsub+0x5e4>
 8002c88:	000a      	movs	r2, r1
 8002c8a:	433a      	orrs	r2, r7
 8002c8c:	d000      	beq.n	8002c90 <__aeabi_dsub+0x5a4>
 8002c8e:	e0a0      	b.n	8002dd2 <__aeabi_dsub+0x6e6>
 8002c90:	4662      	mov	r2, ip
 8002c92:	08db      	lsrs	r3, r3, #3
 8002c94:	0752      	lsls	r2, r2, #29
 8002c96:	4313      	orrs	r3, r2
 8002c98:	4662      	mov	r2, ip
 8002c9a:	08d4      	lsrs	r4, r2, #3
 8002c9c:	e6b0      	b.n	8002a00 <__aeabi_dsub+0x314>
 8002c9e:	000b      	movs	r3, r1
 8002ca0:	433b      	orrs	r3, r7
 8002ca2:	d100      	bne.n	8002ca6 <__aeabi_dsub+0x5ba>
 8002ca4:	e728      	b.n	8002af8 <__aeabi_dsub+0x40c>
 8002ca6:	08ff      	lsrs	r7, r7, #3
 8002ca8:	074b      	lsls	r3, r1, #29
 8002caa:	465d      	mov	r5, fp
 8002cac:	433b      	orrs	r3, r7
 8002cae:	08cc      	lsrs	r4, r1, #3
 8002cb0:	e697      	b.n	80029e2 <__aeabi_dsub+0x2f6>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	4698      	mov	r8, r3
 8002cb6:	e736      	b.n	8002b26 <__aeabi_dsub+0x43a>
 8002cb8:	1afc      	subs	r4, r7, r3
 8002cba:	42a7      	cmp	r7, r4
 8002cbc:	41bf      	sbcs	r7, r7
 8002cbe:	4663      	mov	r3, ip
 8002cc0:	427f      	negs	r7, r7
 8002cc2:	1ac9      	subs	r1, r1, r3
 8002cc4:	1bcb      	subs	r3, r1, r7
 8002cc6:	4699      	mov	r9, r3
 8002cc8:	2301      	movs	r3, #1
 8002cca:	465d      	mov	r5, fp
 8002ccc:	4698      	mov	r8, r3
 8002cce:	e55e      	b.n	800278e <__aeabi_dsub+0xa2>
 8002cd0:	074b      	lsls	r3, r1, #29
 8002cd2:	08ff      	lsrs	r7, r7, #3
 8002cd4:	433b      	orrs	r3, r7
 8002cd6:	08cc      	lsrs	r4, r1, #3
 8002cd8:	e692      	b.n	8002a00 <__aeabi_dsub+0x314>
 8002cda:	1bdc      	subs	r4, r3, r7
 8002cdc:	4660      	mov	r0, ip
 8002cde:	42a3      	cmp	r3, r4
 8002ce0:	41b6      	sbcs	r6, r6
 8002ce2:	1a40      	subs	r0, r0, r1
 8002ce4:	4276      	negs	r6, r6
 8002ce6:	1b80      	subs	r0, r0, r6
 8002ce8:	4681      	mov	r9, r0
 8002cea:	0200      	lsls	r0, r0, #8
 8002cec:	d560      	bpl.n	8002db0 <__aeabi_dsub+0x6c4>
 8002cee:	1afc      	subs	r4, r7, r3
 8002cf0:	42a7      	cmp	r7, r4
 8002cf2:	41bf      	sbcs	r7, r7
 8002cf4:	4663      	mov	r3, ip
 8002cf6:	427f      	negs	r7, r7
 8002cf8:	1ac9      	subs	r1, r1, r3
 8002cfa:	1bcb      	subs	r3, r1, r7
 8002cfc:	4699      	mov	r9, r3
 8002cfe:	465d      	mov	r5, fp
 8002d00:	e576      	b.n	80027f0 <__aeabi_dsub+0x104>
 8002d02:	08ff      	lsrs	r7, r7, #3
 8002d04:	074b      	lsls	r3, r1, #29
 8002d06:	433b      	orrs	r3, r7
 8002d08:	08cc      	lsrs	r4, r1, #3
 8002d0a:	e667      	b.n	80029dc <__aeabi_dsub+0x2f0>
 8002d0c:	000a      	movs	r2, r1
 8002d0e:	08db      	lsrs	r3, r3, #3
 8002d10:	433a      	orrs	r2, r7
 8002d12:	d100      	bne.n	8002d16 <__aeabi_dsub+0x62a>
 8002d14:	e66f      	b.n	80029f6 <__aeabi_dsub+0x30a>
 8002d16:	4662      	mov	r2, ip
 8002d18:	0752      	lsls	r2, r2, #29
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	4662      	mov	r2, ip
 8002d1e:	08d4      	lsrs	r4, r2, #3
 8002d20:	2280      	movs	r2, #128	; 0x80
 8002d22:	0312      	lsls	r2, r2, #12
 8002d24:	4214      	tst	r4, r2
 8002d26:	d007      	beq.n	8002d38 <__aeabi_dsub+0x64c>
 8002d28:	08c8      	lsrs	r0, r1, #3
 8002d2a:	4210      	tst	r0, r2
 8002d2c:	d104      	bne.n	8002d38 <__aeabi_dsub+0x64c>
 8002d2e:	465d      	mov	r5, fp
 8002d30:	0004      	movs	r4, r0
 8002d32:	08fb      	lsrs	r3, r7, #3
 8002d34:	0749      	lsls	r1, r1, #29
 8002d36:	430b      	orrs	r3, r1
 8002d38:	0f5a      	lsrs	r2, r3, #29
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	08db      	lsrs	r3, r3, #3
 8002d3e:	0752      	lsls	r2, r2, #29
 8002d40:	4313      	orrs	r3, r2
 8002d42:	e65d      	b.n	8002a00 <__aeabi_dsub+0x314>
 8002d44:	074b      	lsls	r3, r1, #29
 8002d46:	08ff      	lsrs	r7, r7, #3
 8002d48:	433b      	orrs	r3, r7
 8002d4a:	08cc      	lsrs	r4, r1, #3
 8002d4c:	e649      	b.n	80029e2 <__aeabi_dsub+0x2f6>
 8002d4e:	19dc      	adds	r4, r3, r7
 8002d50:	429c      	cmp	r4, r3
 8002d52:	419b      	sbcs	r3, r3
 8002d54:	4461      	add	r1, ip
 8002d56:	4689      	mov	r9, r1
 8002d58:	425b      	negs	r3, r3
 8002d5a:	4499      	add	r9, r3
 8002d5c:	464b      	mov	r3, r9
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	d400      	bmi.n	8002d64 <__aeabi_dsub+0x678>
 8002d62:	e631      	b.n	80029c8 <__aeabi_dsub+0x2dc>
 8002d64:	464a      	mov	r2, r9
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <__aeabi_dsub+0x6d8>)
 8002d68:	401a      	ands	r2, r3
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	4691      	mov	r9, r2
 8002d6e:	4698      	mov	r8, r3
 8002d70:	e62a      	b.n	80029c8 <__aeabi_dsub+0x2dc>
 8002d72:	0016      	movs	r6, r2
 8002d74:	4664      	mov	r4, ip
 8002d76:	3e20      	subs	r6, #32
 8002d78:	40f4      	lsrs	r4, r6
 8002d7a:	46a0      	mov	r8, r4
 8002d7c:	2a20      	cmp	r2, #32
 8002d7e:	d005      	beq.n	8002d8c <__aeabi_dsub+0x6a0>
 8002d80:	2640      	movs	r6, #64	; 0x40
 8002d82:	4664      	mov	r4, ip
 8002d84:	1ab2      	subs	r2, r6, r2
 8002d86:	4094      	lsls	r4, r2
 8002d88:	4323      	orrs	r3, r4
 8002d8a:	469a      	mov	sl, r3
 8002d8c:	4654      	mov	r4, sl
 8002d8e:	1e63      	subs	r3, r4, #1
 8002d90:	419c      	sbcs	r4, r3
 8002d92:	4643      	mov	r3, r8
 8002d94:	431c      	orrs	r4, r3
 8002d96:	e5db      	b.n	8002950 <__aeabi_dsub+0x264>
 8002d98:	0002      	movs	r2, r0
 8002d9a:	2400      	movs	r4, #0
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e548      	b.n	8002832 <__aeabi_dsub+0x146>
 8002da0:	19dc      	adds	r4, r3, r7
 8002da2:	42bc      	cmp	r4, r7
 8002da4:	41bf      	sbcs	r7, r7
 8002da6:	4461      	add	r1, ip
 8002da8:	4689      	mov	r9, r1
 8002daa:	427f      	negs	r7, r7
 8002dac:	44b9      	add	r9, r7
 8002dae:	e738      	b.n	8002c22 <__aeabi_dsub+0x536>
 8002db0:	464b      	mov	r3, r9
 8002db2:	4323      	orrs	r3, r4
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x6cc>
 8002db6:	e69f      	b.n	8002af8 <__aeabi_dsub+0x40c>
 8002db8:	e606      	b.n	80029c8 <__aeabi_dsub+0x2dc>
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	000007fe 	.word	0x000007fe
 8002dc0:	000007ff 	.word	0x000007ff
 8002dc4:	ff7fffff 	.word	0xff7fffff
 8002dc8:	08ff      	lsrs	r7, r7, #3
 8002dca:	074b      	lsls	r3, r1, #29
 8002dcc:	433b      	orrs	r3, r7
 8002dce:	08cc      	lsrs	r4, r1, #3
 8002dd0:	e616      	b.n	8002a00 <__aeabi_dsub+0x314>
 8002dd2:	4662      	mov	r2, ip
 8002dd4:	08db      	lsrs	r3, r3, #3
 8002dd6:	0752      	lsls	r2, r2, #29
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	4662      	mov	r2, ip
 8002ddc:	08d4      	lsrs	r4, r2, #3
 8002dde:	2280      	movs	r2, #128	; 0x80
 8002de0:	0312      	lsls	r2, r2, #12
 8002de2:	4214      	tst	r4, r2
 8002de4:	d007      	beq.n	8002df6 <__aeabi_dsub+0x70a>
 8002de6:	08c8      	lsrs	r0, r1, #3
 8002de8:	4210      	tst	r0, r2
 8002dea:	d104      	bne.n	8002df6 <__aeabi_dsub+0x70a>
 8002dec:	465d      	mov	r5, fp
 8002dee:	0004      	movs	r4, r0
 8002df0:	08fb      	lsrs	r3, r7, #3
 8002df2:	0749      	lsls	r1, r1, #29
 8002df4:	430b      	orrs	r3, r1
 8002df6:	0f5a      	lsrs	r2, r3, #29
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	0752      	lsls	r2, r2, #29
 8002dfc:	08db      	lsrs	r3, r3, #3
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	e5fe      	b.n	8002a00 <__aeabi_dsub+0x314>
 8002e02:	2300      	movs	r3, #0
 8002e04:	4a01      	ldr	r2, [pc, #4]	; (8002e0c <__aeabi_dsub+0x720>)
 8002e06:	001c      	movs	r4, r3
 8002e08:	e513      	b.n	8002832 <__aeabi_dsub+0x146>
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	000007ff 	.word	0x000007ff

08002e10 <__aeabi_dcmpun>:
 8002e10:	b570      	push	{r4, r5, r6, lr}
 8002e12:	0005      	movs	r5, r0
 8002e14:	480c      	ldr	r0, [pc, #48]	; (8002e48 <__aeabi_dcmpun+0x38>)
 8002e16:	031c      	lsls	r4, r3, #12
 8002e18:	0016      	movs	r6, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	030a      	lsls	r2, r1, #12
 8002e1e:	0049      	lsls	r1, r1, #1
 8002e20:	0b12      	lsrs	r2, r2, #12
 8002e22:	0d49      	lsrs	r1, r1, #21
 8002e24:	0b24      	lsrs	r4, r4, #12
 8002e26:	0d5b      	lsrs	r3, r3, #21
 8002e28:	4281      	cmp	r1, r0
 8002e2a:	d008      	beq.n	8002e3e <__aeabi_dcmpun+0x2e>
 8002e2c:	4a06      	ldr	r2, [pc, #24]	; (8002e48 <__aeabi_dcmpun+0x38>)
 8002e2e:	2000      	movs	r0, #0
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d103      	bne.n	8002e3c <__aeabi_dcmpun+0x2c>
 8002e34:	0020      	movs	r0, r4
 8002e36:	4330      	orrs	r0, r6
 8002e38:	1e43      	subs	r3, r0, #1
 8002e3a:	4198      	sbcs	r0, r3
 8002e3c:	bd70      	pop	{r4, r5, r6, pc}
 8002e3e:	2001      	movs	r0, #1
 8002e40:	432a      	orrs	r2, r5
 8002e42:	d1fb      	bne.n	8002e3c <__aeabi_dcmpun+0x2c>
 8002e44:	e7f2      	b.n	8002e2c <__aeabi_dcmpun+0x1c>
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	000007ff 	.word	0x000007ff

08002e4c <__aeabi_d2iz>:
 8002e4c:	000a      	movs	r2, r1
 8002e4e:	b530      	push	{r4, r5, lr}
 8002e50:	4c13      	ldr	r4, [pc, #76]	; (8002ea0 <__aeabi_d2iz+0x54>)
 8002e52:	0053      	lsls	r3, r2, #1
 8002e54:	0309      	lsls	r1, r1, #12
 8002e56:	0005      	movs	r5, r0
 8002e58:	0b09      	lsrs	r1, r1, #12
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	0d5b      	lsrs	r3, r3, #21
 8002e5e:	0fd2      	lsrs	r2, r2, #31
 8002e60:	42a3      	cmp	r3, r4
 8002e62:	dd04      	ble.n	8002e6e <__aeabi_d2iz+0x22>
 8002e64:	480f      	ldr	r0, [pc, #60]	; (8002ea4 <__aeabi_d2iz+0x58>)
 8002e66:	4283      	cmp	r3, r0
 8002e68:	dd02      	ble.n	8002e70 <__aeabi_d2iz+0x24>
 8002e6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <__aeabi_d2iz+0x5c>)
 8002e6c:	18d0      	adds	r0, r2, r3
 8002e6e:	bd30      	pop	{r4, r5, pc}
 8002e70:	2080      	movs	r0, #128	; 0x80
 8002e72:	0340      	lsls	r0, r0, #13
 8002e74:	4301      	orrs	r1, r0
 8002e76:	480d      	ldr	r0, [pc, #52]	; (8002eac <__aeabi_d2iz+0x60>)
 8002e78:	1ac0      	subs	r0, r0, r3
 8002e7a:	281f      	cmp	r0, #31
 8002e7c:	dd08      	ble.n	8002e90 <__aeabi_d2iz+0x44>
 8002e7e:	480c      	ldr	r0, [pc, #48]	; (8002eb0 <__aeabi_d2iz+0x64>)
 8002e80:	1ac3      	subs	r3, r0, r3
 8002e82:	40d9      	lsrs	r1, r3
 8002e84:	000b      	movs	r3, r1
 8002e86:	4258      	negs	r0, r3
 8002e88:	2a00      	cmp	r2, #0
 8002e8a:	d1f0      	bne.n	8002e6e <__aeabi_d2iz+0x22>
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	e7ee      	b.n	8002e6e <__aeabi_d2iz+0x22>
 8002e90:	4c08      	ldr	r4, [pc, #32]	; (8002eb4 <__aeabi_d2iz+0x68>)
 8002e92:	40c5      	lsrs	r5, r0
 8002e94:	46a4      	mov	ip, r4
 8002e96:	4463      	add	r3, ip
 8002e98:	4099      	lsls	r1, r3
 8002e9a:	000b      	movs	r3, r1
 8002e9c:	432b      	orrs	r3, r5
 8002e9e:	e7f2      	b.n	8002e86 <__aeabi_d2iz+0x3a>
 8002ea0:	000003fe 	.word	0x000003fe
 8002ea4:	0000041d 	.word	0x0000041d
 8002ea8:	7fffffff 	.word	0x7fffffff
 8002eac:	00000433 	.word	0x00000433
 8002eb0:	00000413 	.word	0x00000413
 8002eb4:	fffffbed 	.word	0xfffffbed

08002eb8 <__aeabi_i2d>:
 8002eb8:	b570      	push	{r4, r5, r6, lr}
 8002eba:	2800      	cmp	r0, #0
 8002ebc:	d016      	beq.n	8002eec <__aeabi_i2d+0x34>
 8002ebe:	17c3      	asrs	r3, r0, #31
 8002ec0:	18c5      	adds	r5, r0, r3
 8002ec2:	405d      	eors	r5, r3
 8002ec4:	0fc4      	lsrs	r4, r0, #31
 8002ec6:	0028      	movs	r0, r5
 8002ec8:	f000 f91c 	bl	8003104 <__clzsi2>
 8002ecc:	4a11      	ldr	r2, [pc, #68]	; (8002f14 <__aeabi_i2d+0x5c>)
 8002ece:	1a12      	subs	r2, r2, r0
 8002ed0:	280a      	cmp	r0, #10
 8002ed2:	dc16      	bgt.n	8002f02 <__aeabi_i2d+0x4a>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	002e      	movs	r6, r5
 8002ed8:	3315      	adds	r3, #21
 8002eda:	409e      	lsls	r6, r3
 8002edc:	230b      	movs	r3, #11
 8002ede:	1a18      	subs	r0, r3, r0
 8002ee0:	40c5      	lsrs	r5, r0
 8002ee2:	0552      	lsls	r2, r2, #21
 8002ee4:	032d      	lsls	r5, r5, #12
 8002ee6:	0b2d      	lsrs	r5, r5, #12
 8002ee8:	0d53      	lsrs	r3, r2, #21
 8002eea:	e003      	b.n	8002ef4 <__aeabi_i2d+0x3c>
 8002eec:	2400      	movs	r4, #0
 8002eee:	2300      	movs	r3, #0
 8002ef0:	2500      	movs	r5, #0
 8002ef2:	2600      	movs	r6, #0
 8002ef4:	051b      	lsls	r3, r3, #20
 8002ef6:	432b      	orrs	r3, r5
 8002ef8:	07e4      	lsls	r4, r4, #31
 8002efa:	4323      	orrs	r3, r4
 8002efc:	0030      	movs	r0, r6
 8002efe:	0019      	movs	r1, r3
 8002f00:	bd70      	pop	{r4, r5, r6, pc}
 8002f02:	380b      	subs	r0, #11
 8002f04:	4085      	lsls	r5, r0
 8002f06:	0552      	lsls	r2, r2, #21
 8002f08:	032d      	lsls	r5, r5, #12
 8002f0a:	2600      	movs	r6, #0
 8002f0c:	0b2d      	lsrs	r5, r5, #12
 8002f0e:	0d53      	lsrs	r3, r2, #21
 8002f10:	e7f0      	b.n	8002ef4 <__aeabi_i2d+0x3c>
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	0000041e 	.word	0x0000041e

08002f18 <__aeabi_ui2d>:
 8002f18:	b510      	push	{r4, lr}
 8002f1a:	1e04      	subs	r4, r0, #0
 8002f1c:	d010      	beq.n	8002f40 <__aeabi_ui2d+0x28>
 8002f1e:	f000 f8f1 	bl	8003104 <__clzsi2>
 8002f22:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <__aeabi_ui2d+0x48>)
 8002f24:	1a1b      	subs	r3, r3, r0
 8002f26:	280a      	cmp	r0, #10
 8002f28:	dc11      	bgt.n	8002f4e <__aeabi_ui2d+0x36>
 8002f2a:	220b      	movs	r2, #11
 8002f2c:	0021      	movs	r1, r4
 8002f2e:	1a12      	subs	r2, r2, r0
 8002f30:	40d1      	lsrs	r1, r2
 8002f32:	3015      	adds	r0, #21
 8002f34:	030a      	lsls	r2, r1, #12
 8002f36:	055b      	lsls	r3, r3, #21
 8002f38:	4084      	lsls	r4, r0
 8002f3a:	0b12      	lsrs	r2, r2, #12
 8002f3c:	0d5b      	lsrs	r3, r3, #21
 8002f3e:	e001      	b.n	8002f44 <__aeabi_ui2d+0x2c>
 8002f40:	2300      	movs	r3, #0
 8002f42:	2200      	movs	r2, #0
 8002f44:	051b      	lsls	r3, r3, #20
 8002f46:	4313      	orrs	r3, r2
 8002f48:	0020      	movs	r0, r4
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	bd10      	pop	{r4, pc}
 8002f4e:	0022      	movs	r2, r4
 8002f50:	380b      	subs	r0, #11
 8002f52:	4082      	lsls	r2, r0
 8002f54:	055b      	lsls	r3, r3, #21
 8002f56:	0312      	lsls	r2, r2, #12
 8002f58:	2400      	movs	r4, #0
 8002f5a:	0b12      	lsrs	r2, r2, #12
 8002f5c:	0d5b      	lsrs	r3, r3, #21
 8002f5e:	e7f1      	b.n	8002f44 <__aeabi_ui2d+0x2c>
 8002f60:	0000041e 	.word	0x0000041e

08002f64 <__aeabi_f2d>:
 8002f64:	b570      	push	{r4, r5, r6, lr}
 8002f66:	0043      	lsls	r3, r0, #1
 8002f68:	0246      	lsls	r6, r0, #9
 8002f6a:	0fc4      	lsrs	r4, r0, #31
 8002f6c:	20fe      	movs	r0, #254	; 0xfe
 8002f6e:	0e1b      	lsrs	r3, r3, #24
 8002f70:	1c59      	adds	r1, r3, #1
 8002f72:	0a75      	lsrs	r5, r6, #9
 8002f74:	4208      	tst	r0, r1
 8002f76:	d00c      	beq.n	8002f92 <__aeabi_f2d+0x2e>
 8002f78:	22e0      	movs	r2, #224	; 0xe0
 8002f7a:	0092      	lsls	r2, r2, #2
 8002f7c:	4694      	mov	ip, r2
 8002f7e:	076d      	lsls	r5, r5, #29
 8002f80:	0b36      	lsrs	r6, r6, #12
 8002f82:	4463      	add	r3, ip
 8002f84:	051b      	lsls	r3, r3, #20
 8002f86:	4333      	orrs	r3, r6
 8002f88:	07e4      	lsls	r4, r4, #31
 8002f8a:	4323      	orrs	r3, r4
 8002f8c:	0028      	movs	r0, r5
 8002f8e:	0019      	movs	r1, r3
 8002f90:	bd70      	pop	{r4, r5, r6, pc}
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d114      	bne.n	8002fc0 <__aeabi_f2d+0x5c>
 8002f96:	2d00      	cmp	r5, #0
 8002f98:	d01b      	beq.n	8002fd2 <__aeabi_f2d+0x6e>
 8002f9a:	0028      	movs	r0, r5
 8002f9c:	f000 f8b2 	bl	8003104 <__clzsi2>
 8002fa0:	280a      	cmp	r0, #10
 8002fa2:	dc1c      	bgt.n	8002fde <__aeabi_f2d+0x7a>
 8002fa4:	230b      	movs	r3, #11
 8002fa6:	002e      	movs	r6, r5
 8002fa8:	1a1b      	subs	r3, r3, r0
 8002faa:	40de      	lsrs	r6, r3
 8002fac:	0003      	movs	r3, r0
 8002fae:	3315      	adds	r3, #21
 8002fb0:	409d      	lsls	r5, r3
 8002fb2:	4a0e      	ldr	r2, [pc, #56]	; (8002fec <__aeabi_f2d+0x88>)
 8002fb4:	0336      	lsls	r6, r6, #12
 8002fb6:	1a12      	subs	r2, r2, r0
 8002fb8:	0552      	lsls	r2, r2, #21
 8002fba:	0b36      	lsrs	r6, r6, #12
 8002fbc:	0d53      	lsrs	r3, r2, #21
 8002fbe:	e7e1      	b.n	8002f84 <__aeabi_f2d+0x20>
 8002fc0:	2d00      	cmp	r5, #0
 8002fc2:	d009      	beq.n	8002fd8 <__aeabi_f2d+0x74>
 8002fc4:	2280      	movs	r2, #128	; 0x80
 8002fc6:	0b36      	lsrs	r6, r6, #12
 8002fc8:	0312      	lsls	r2, r2, #12
 8002fca:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <__aeabi_f2d+0x8c>)
 8002fcc:	076d      	lsls	r5, r5, #29
 8002fce:	4316      	orrs	r6, r2
 8002fd0:	e7d8      	b.n	8002f84 <__aeabi_f2d+0x20>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2600      	movs	r6, #0
 8002fd6:	e7d5      	b.n	8002f84 <__aeabi_f2d+0x20>
 8002fd8:	2600      	movs	r6, #0
 8002fda:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <__aeabi_f2d+0x8c>)
 8002fdc:	e7d2      	b.n	8002f84 <__aeabi_f2d+0x20>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	3b0b      	subs	r3, #11
 8002fe2:	409d      	lsls	r5, r3
 8002fe4:	002e      	movs	r6, r5
 8002fe6:	2500      	movs	r5, #0
 8002fe8:	e7e3      	b.n	8002fb2 <__aeabi_f2d+0x4e>
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	00000389 	.word	0x00000389
 8002ff0:	000007ff 	.word	0x000007ff

08002ff4 <__aeabi_d2f>:
 8002ff4:	0002      	movs	r2, r0
 8002ff6:	004b      	lsls	r3, r1, #1
 8002ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ffa:	0d5b      	lsrs	r3, r3, #21
 8002ffc:	030c      	lsls	r4, r1, #12
 8002ffe:	4e3d      	ldr	r6, [pc, #244]	; (80030f4 <__aeabi_d2f+0x100>)
 8003000:	0a64      	lsrs	r4, r4, #9
 8003002:	0f40      	lsrs	r0, r0, #29
 8003004:	1c5f      	adds	r7, r3, #1
 8003006:	0fc9      	lsrs	r1, r1, #31
 8003008:	4304      	orrs	r4, r0
 800300a:	00d5      	lsls	r5, r2, #3
 800300c:	4237      	tst	r7, r6
 800300e:	d00a      	beq.n	8003026 <__aeabi_d2f+0x32>
 8003010:	4839      	ldr	r0, [pc, #228]	; (80030f8 <__aeabi_d2f+0x104>)
 8003012:	181e      	adds	r6, r3, r0
 8003014:	2efe      	cmp	r6, #254	; 0xfe
 8003016:	dd16      	ble.n	8003046 <__aeabi_d2f+0x52>
 8003018:	20ff      	movs	r0, #255	; 0xff
 800301a:	2400      	movs	r4, #0
 800301c:	05c0      	lsls	r0, r0, #23
 800301e:	4320      	orrs	r0, r4
 8003020:	07c9      	lsls	r1, r1, #31
 8003022:	4308      	orrs	r0, r1
 8003024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <__aeabi_d2f+0x44>
 800302a:	432c      	orrs	r4, r5
 800302c:	d026      	beq.n	800307c <__aeabi_d2f+0x88>
 800302e:	2205      	movs	r2, #5
 8003030:	0192      	lsls	r2, r2, #6
 8003032:	0a54      	lsrs	r4, r2, #9
 8003034:	b2d8      	uxtb	r0, r3
 8003036:	e7f1      	b.n	800301c <__aeabi_d2f+0x28>
 8003038:	4325      	orrs	r5, r4
 800303a:	d0ed      	beq.n	8003018 <__aeabi_d2f+0x24>
 800303c:	2080      	movs	r0, #128	; 0x80
 800303e:	03c0      	lsls	r0, r0, #15
 8003040:	4304      	orrs	r4, r0
 8003042:	20ff      	movs	r0, #255	; 0xff
 8003044:	e7ea      	b.n	800301c <__aeabi_d2f+0x28>
 8003046:	2e00      	cmp	r6, #0
 8003048:	dd1b      	ble.n	8003082 <__aeabi_d2f+0x8e>
 800304a:	0192      	lsls	r2, r2, #6
 800304c:	1e53      	subs	r3, r2, #1
 800304e:	419a      	sbcs	r2, r3
 8003050:	00e4      	lsls	r4, r4, #3
 8003052:	0f6d      	lsrs	r5, r5, #29
 8003054:	4322      	orrs	r2, r4
 8003056:	432a      	orrs	r2, r5
 8003058:	0753      	lsls	r3, r2, #29
 800305a:	d048      	beq.n	80030ee <__aeabi_d2f+0xfa>
 800305c:	230f      	movs	r3, #15
 800305e:	4013      	ands	r3, r2
 8003060:	2b04      	cmp	r3, #4
 8003062:	d000      	beq.n	8003066 <__aeabi_d2f+0x72>
 8003064:	3204      	adds	r2, #4
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	04db      	lsls	r3, r3, #19
 800306a:	4013      	ands	r3, r2
 800306c:	d03f      	beq.n	80030ee <__aeabi_d2f+0xfa>
 800306e:	1c70      	adds	r0, r6, #1
 8003070:	2efe      	cmp	r6, #254	; 0xfe
 8003072:	d0d1      	beq.n	8003018 <__aeabi_d2f+0x24>
 8003074:	0192      	lsls	r2, r2, #6
 8003076:	0a54      	lsrs	r4, r2, #9
 8003078:	b2c0      	uxtb	r0, r0
 800307a:	e7cf      	b.n	800301c <__aeabi_d2f+0x28>
 800307c:	2000      	movs	r0, #0
 800307e:	2400      	movs	r4, #0
 8003080:	e7cc      	b.n	800301c <__aeabi_d2f+0x28>
 8003082:	0032      	movs	r2, r6
 8003084:	3217      	adds	r2, #23
 8003086:	db22      	blt.n	80030ce <__aeabi_d2f+0xda>
 8003088:	2080      	movs	r0, #128	; 0x80
 800308a:	0400      	lsls	r0, r0, #16
 800308c:	4320      	orrs	r0, r4
 800308e:	241e      	movs	r4, #30
 8003090:	1ba4      	subs	r4, r4, r6
 8003092:	2c1f      	cmp	r4, #31
 8003094:	dd1d      	ble.n	80030d2 <__aeabi_d2f+0xde>
 8003096:	2202      	movs	r2, #2
 8003098:	4252      	negs	r2, r2
 800309a:	1b96      	subs	r6, r2, r6
 800309c:	0002      	movs	r2, r0
 800309e:	40f2      	lsrs	r2, r6
 80030a0:	0016      	movs	r6, r2
 80030a2:	2c20      	cmp	r4, #32
 80030a4:	d004      	beq.n	80030b0 <__aeabi_d2f+0xbc>
 80030a6:	4a15      	ldr	r2, [pc, #84]	; (80030fc <__aeabi_d2f+0x108>)
 80030a8:	4694      	mov	ip, r2
 80030aa:	4463      	add	r3, ip
 80030ac:	4098      	lsls	r0, r3
 80030ae:	4305      	orrs	r5, r0
 80030b0:	002a      	movs	r2, r5
 80030b2:	1e53      	subs	r3, r2, #1
 80030b4:	419a      	sbcs	r2, r3
 80030b6:	4332      	orrs	r2, r6
 80030b8:	2600      	movs	r6, #0
 80030ba:	0753      	lsls	r3, r2, #29
 80030bc:	d1ce      	bne.n	800305c <__aeabi_d2f+0x68>
 80030be:	2480      	movs	r4, #128	; 0x80
 80030c0:	0013      	movs	r3, r2
 80030c2:	04e4      	lsls	r4, r4, #19
 80030c4:	2001      	movs	r0, #1
 80030c6:	4023      	ands	r3, r4
 80030c8:	4222      	tst	r2, r4
 80030ca:	d1d3      	bne.n	8003074 <__aeabi_d2f+0x80>
 80030cc:	e7b0      	b.n	8003030 <__aeabi_d2f+0x3c>
 80030ce:	2300      	movs	r3, #0
 80030d0:	e7ad      	b.n	800302e <__aeabi_d2f+0x3a>
 80030d2:	4a0b      	ldr	r2, [pc, #44]	; (8003100 <__aeabi_d2f+0x10c>)
 80030d4:	4694      	mov	ip, r2
 80030d6:	002a      	movs	r2, r5
 80030d8:	40e2      	lsrs	r2, r4
 80030da:	0014      	movs	r4, r2
 80030dc:	002a      	movs	r2, r5
 80030de:	4463      	add	r3, ip
 80030e0:	409a      	lsls	r2, r3
 80030e2:	4098      	lsls	r0, r3
 80030e4:	1e55      	subs	r5, r2, #1
 80030e6:	41aa      	sbcs	r2, r5
 80030e8:	4302      	orrs	r2, r0
 80030ea:	4322      	orrs	r2, r4
 80030ec:	e7e4      	b.n	80030b8 <__aeabi_d2f+0xc4>
 80030ee:	0033      	movs	r3, r6
 80030f0:	e79e      	b.n	8003030 <__aeabi_d2f+0x3c>
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	000007fe 	.word	0x000007fe
 80030f8:	fffffc80 	.word	0xfffffc80
 80030fc:	fffffca2 	.word	0xfffffca2
 8003100:	fffffc82 	.word	0xfffffc82

08003104 <__clzsi2>:
 8003104:	211c      	movs	r1, #28
 8003106:	2301      	movs	r3, #1
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	4298      	cmp	r0, r3
 800310c:	d301      	bcc.n	8003112 <__clzsi2+0xe>
 800310e:	0c00      	lsrs	r0, r0, #16
 8003110:	3910      	subs	r1, #16
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	4298      	cmp	r0, r3
 8003116:	d301      	bcc.n	800311c <__clzsi2+0x18>
 8003118:	0a00      	lsrs	r0, r0, #8
 800311a:	3908      	subs	r1, #8
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	4298      	cmp	r0, r3
 8003120:	d301      	bcc.n	8003126 <__clzsi2+0x22>
 8003122:	0900      	lsrs	r0, r0, #4
 8003124:	3904      	subs	r1, #4
 8003126:	a202      	add	r2, pc, #8	; (adr r2, 8003130 <__clzsi2+0x2c>)
 8003128:	5c10      	ldrb	r0, [r2, r0]
 800312a:	1840      	adds	r0, r0, r1
 800312c:	4770      	bx	lr
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	02020304 	.word	0x02020304
 8003134:	01010101 	.word	0x01010101
	...

08003140 <__clzdi2>:
 8003140:	b510      	push	{r4, lr}
 8003142:	2900      	cmp	r1, #0
 8003144:	d103      	bne.n	800314e <__clzdi2+0xe>
 8003146:	f7ff ffdd 	bl	8003104 <__clzsi2>
 800314a:	3020      	adds	r0, #32
 800314c:	e002      	b.n	8003154 <__clzdi2+0x14>
 800314e:	0008      	movs	r0, r1
 8003150:	f7ff ffd8 	bl	8003104 <__clzsi2>
 8003154:	bd10      	pop	{r4, pc}
 8003156:	46c0      	nop			; (mov r8, r8)

08003158 <lcdSendHalf>:
 *      Author: Bartosz Pracz
 */

#include "../Display/an_disp.h"

void lcdSendHalf(uint8_t data) {
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	0002      	movs	r2, r0
 8003160:	1dfb      	adds	r3, r7, #7
 8003162:	701a      	strb	r2, [r3, #0]
	LCD_E_HIGH;
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	481e      	ldr	r0, [pc, #120]	; (80031e4 <lcdSendHalf+0x8c>)
 800316a:	2201      	movs	r2, #1
 800316c:	0019      	movs	r1, r3
 800316e:	f002 f97d 	bl	800546c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN, (data & 0x01));
 8003172:	1dfb      	adds	r3, r7, #7
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2201      	movs	r2, #1
 8003178:	4013      	ands	r3, r2
 800317a:	b2da      	uxtb	r2, r3
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	00d9      	lsls	r1, r3, #3
 8003180:	23a0      	movs	r3, #160	; 0xa0
 8003182:	05db      	lsls	r3, r3, #23
 8003184:	0018      	movs	r0, r3
 8003186:	f002 f971 	bl	800546c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_PORT, LCD_D5_PIN, (data & 0x02));
 800318a:	1dfb      	adds	r3, r7, #7
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2202      	movs	r2, #2
 8003190:	4013      	ands	r3, r2
 8003192:	b2da      	uxtb	r2, r3
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	0099      	lsls	r1, r3, #2
 8003198:	23a0      	movs	r3, #160	; 0xa0
 800319a:	05db      	lsls	r3, r3, #23
 800319c:	0018      	movs	r0, r3
 800319e:	f002 f965 	bl	800546c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_PORT, LCD_D6_PIN, (data & 0x04));
 80031a2:	1dfb      	adds	r3, r7, #7
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2204      	movs	r2, #4
 80031a8:	4013      	ands	r3, r2
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	480e      	ldr	r0, [pc, #56]	; (80031e8 <lcdSendHalf+0x90>)
 80031ae:	001a      	movs	r2, r3
 80031b0:	2102      	movs	r1, #2
 80031b2:	f002 f95b 	bl	800546c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_PORT, LCD_D7_PIN, (data & 0x08));
 80031b6:	1dfb      	adds	r3, r7, #7
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2208      	movs	r2, #8
 80031bc:	4013      	ands	r3, r2
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	23a0      	movs	r3, #160	; 0xa0
 80031c2:	05db      	lsls	r3, r3, #23
 80031c4:	2180      	movs	r1, #128	; 0x80
 80031c6:	0018      	movs	r0, r3
 80031c8:	f002 f950 	bl	800546c <HAL_GPIO_WritePin>
	LCD_E_LOW;
 80031cc:	2380      	movs	r3, #128	; 0x80
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	4804      	ldr	r0, [pc, #16]	; (80031e4 <lcdSendHalf+0x8c>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	0019      	movs	r1, r3
 80031d6:	f002 f949 	bl	800546c <HAL_GPIO_WritePin>
}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	46bd      	mov	sp, r7
 80031de:	b002      	add	sp, #8
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	50000800 	.word	0x50000800
 80031e8:	50000400 	.word	0x50000400

080031ec <lcdWriteByte>:

void lcdWriteByte(uint8_t data) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	0002      	movs	r2, r0
 80031f4:	1dfb      	adds	r3, r7, #7
 80031f6:	701a      	strb	r2, [r3, #0]
	lcdSendHalf(data >> 4);
 80031f8:	1dfb      	adds	r3, r7, #7
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	0018      	movs	r0, r3
 8003202:	f7ff ffa9 	bl	8003158 <lcdSendHalf>
	lcdSendHalf(data);
 8003206:	1dfb      	adds	r3, r7, #7
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	0018      	movs	r0, r3
 800320c:	f7ff ffa4 	bl	8003158 <lcdSendHalf>
	HAL_Delay(1);
 8003210:	2001      	movs	r0, #1
 8003212:	f001 f8c3 	bl	800439c <HAL_Delay>
}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	46bd      	mov	sp, r7
 800321a:	b002      	add	sp, #8
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <lcdWriteCmd>:

void lcdWriteCmd(uint8_t cmd) {
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	0002      	movs	r2, r0
 8003228:	1dfb      	adds	r3, r7, #7
 800322a:	701a      	strb	r2, [r3, #0]
	LCD_RS_LOW;
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	01db      	lsls	r3, r3, #7
 8003230:	4806      	ldr	r0, [pc, #24]	; (800324c <lcdWriteCmd+0x2c>)
 8003232:	2200      	movs	r2, #0
 8003234:	0019      	movs	r1, r3
 8003236:	f002 f919 	bl	800546c <HAL_GPIO_WritePin>
	lcdWriteByte(cmd);
 800323a:	1dfb      	adds	r3, r7, #7
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	0018      	movs	r0, r3
 8003240:	f7ff ffd4 	bl	80031ec <lcdWriteByte>
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	b002      	add	sp, #8
 800324a:	bd80      	pop	{r7, pc}
 800324c:	50000800 	.word	0x50000800

08003250 <lcdChar>:

void lcdChar(char data) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	0002      	movs	r2, r0
 8003258:	1dfb      	adds	r3, r7, #7
 800325a:	701a      	strb	r2, [r3, #0]
	LCD_RS_HIGH;
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	01db      	lsls	r3, r3, #7
 8003260:	4806      	ldr	r0, [pc, #24]	; (800327c <lcdChar+0x2c>)
 8003262:	2201      	movs	r2, #1
 8003264:	0019      	movs	r1, r3
 8003266:	f002 f901 	bl	800546c <HAL_GPIO_WritePin>
	lcdWriteByte(data);
 800326a:	1dfb      	adds	r3, r7, #7
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	0018      	movs	r0, r3
 8003270:	f7ff ffbc 	bl	80031ec <lcdWriteByte>
}
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	b002      	add	sp, #8
 800327a:	bd80      	pop	{r7, pc}
 800327c:	50000800 	.word	0x50000800

08003280 <lcdInit>:

void lcdInit(void) {
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
	HAL_Delay(15);
 8003284:	200f      	movs	r0, #15
 8003286:	f001 f889 	bl	800439c <HAL_Delay>

	LCD_E_LOW;
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	481f      	ldr	r0, [pc, #124]	; (800330c <lcdInit+0x8c>)
 8003290:	2200      	movs	r2, #0
 8003292:	0019      	movs	r1, r3
 8003294:	f002 f8ea 	bl	800546c <HAL_GPIO_WritePin>
	LCD_RS_LOW;
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	01db      	lsls	r3, r3, #7
 800329c:	481b      	ldr	r0, [pc, #108]	; (800330c <lcdInit+0x8c>)
 800329e:	2200      	movs	r2, #0
 80032a0:	0019      	movs	r1, r3
 80032a2:	f002 f8e3 	bl	800546c <HAL_GPIO_WritePin>

	lcdSendHalf(0x03);
 80032a6:	2003      	movs	r0, #3
 80032a8:	f7ff ff56 	bl	8003158 <lcdSendHalf>
	HAL_Delay(5);
 80032ac:	2005      	movs	r0, #5
 80032ae:	f001 f875 	bl	800439c <HAL_Delay>
	lcdSendHalf(0x03);
 80032b2:	2003      	movs	r0, #3
 80032b4:	f7ff ff50 	bl	8003158 <lcdSendHalf>
	HAL_Delay(5);
 80032b8:	2005      	movs	r0, #5
 80032ba:	f001 f86f 	bl	800439c <HAL_Delay>
	lcdSendHalf(0x03);
 80032be:	2003      	movs	r0, #3
 80032c0:	f7ff ff4a 	bl	8003158 <lcdSendHalf>
	HAL_Delay(5);
 80032c4:	2005      	movs	r0, #5
 80032c6:	f001 f869 	bl	800439c <HAL_Delay>
	lcdSendHalf(0x02);
 80032ca:	2002      	movs	r0, #2
 80032cc:	f7ff ff44 	bl	8003158 <lcdSendHalf>
	HAL_Delay(5);
 80032d0:	2005      	movs	r0, #5
 80032d2:	f001 f863 	bl	800439c <HAL_Delay>

	lcdWriteCmd( LCD_FUNC | LCD_4_BIT | LCDC_TWO_LINE | LCDC_FONT_5x7);
 80032d6:	2028      	movs	r0, #40	; 0x28
 80032d8:	f7ff ffa2 	bl	8003220 <lcdWriteCmd>
	HAL_Delay(5);
 80032dc:	2005      	movs	r0, #5
 80032de:	f001 f85d 	bl	800439c <HAL_Delay>
	lcdWriteCmd( LCD_ONOFF | LCD_DISP_ON);
 80032e2:	200c      	movs	r0, #12
 80032e4:	f7ff ff9c 	bl	8003220 <lcdWriteCmd>
	HAL_Delay(5);
 80032e8:	2005      	movs	r0, #5
 80032ea:	f001 f857 	bl	800439c <HAL_Delay>
	lcdWriteCmd( LCD_CLEAR);
 80032ee:	2001      	movs	r0, #1
 80032f0:	f7ff ff96 	bl	8003220 <lcdWriteCmd>
	HAL_Delay(5);
 80032f4:	2005      	movs	r0, #5
 80032f6:	f001 f851 	bl	800439c <HAL_Delay>
	lcdWriteCmd( LCDC_ENTRY_MODE | LCD_EM_SHIFT_CURSOR | LCD_EM_RIGHT);
 80032fa:	2006      	movs	r0, #6
 80032fc:	f7ff ff90 	bl	8003220 <lcdWriteCmd>
	HAL_Delay(5);
 8003300:	2005      	movs	r0, #5
 8003302:	f001 f84b 	bl	800439c <HAL_Delay>
}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	50000800 	.word	0x50000800

08003310 <lcdClear>:

void lcdClear(void){
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
	lcdWriteCmd(LCD_CLEAR);
 8003314:	2001      	movs	r0, #1
 8003316:	f7ff ff83 	bl	8003220 <lcdWriteCmd>
}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <lcdLocate>:

void lcdLocate(uint8_t x, uint8_t y) {
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	0002      	movs	r2, r0
 8003328:	1dfb      	adds	r3, r7, #7
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	1dbb      	adds	r3, r7, #6
 800332e:	1c0a      	adds	r2, r1, #0
 8003330:	701a      	strb	r2, [r3, #0]

	switch (y) {
 8003332:	1dbb      	adds	r3, r7, #6
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b03      	cmp	r3, #3
 8003338:	d02e      	beq.n	8003398 <lcdLocate+0x78>
 800333a:	dc3b      	bgt.n	80033b4 <lcdLocate+0x94>
 800333c:	2b02      	cmp	r3, #2
 800333e:	d01d      	beq.n	800337c <lcdLocate+0x5c>
 8003340:	dc38      	bgt.n	80033b4 <lcdLocate+0x94>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <lcdLocate+0x2c>
 8003346:	2b01      	cmp	r3, #1
 8003348:	d00a      	beq.n	8003360 <lcdLocate+0x40>
	case 3:
		lcdWriteCmd( LCDC_SET_DDRAM | (LCD_LINE4 + (x - 12)));
		break;
	}

}
 800334a:	e033      	b.n	80033b4 <lcdLocate+0x94>
		lcdWriteCmd( LCDC_SET_DDRAM | (LCD_LINE1 + x));
 800334c:	1dfb      	adds	r3, r7, #7
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2280      	movs	r2, #128	; 0x80
 8003352:	4252      	negs	r2, r2
 8003354:	4313      	orrs	r3, r2
 8003356:	b2db      	uxtb	r3, r3
 8003358:	0018      	movs	r0, r3
 800335a:	f7ff ff61 	bl	8003220 <lcdWriteCmd>
		break;
 800335e:	e029      	b.n	80033b4 <lcdLocate+0x94>
		lcdWriteCmd( LCDC_SET_DDRAM | (LCD_LINE2 + x));
 8003360:	1dfb      	adds	r3, r7, #7
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	3340      	adds	r3, #64	; 0x40
 8003366:	b2db      	uxtb	r3, r3
 8003368:	b25b      	sxtb	r3, r3
 800336a:	2280      	movs	r2, #128	; 0x80
 800336c:	4252      	negs	r2, r2
 800336e:	4313      	orrs	r3, r2
 8003370:	b25b      	sxtb	r3, r3
 8003372:	b2db      	uxtb	r3, r3
 8003374:	0018      	movs	r0, r3
 8003376:	f7ff ff53 	bl	8003220 <lcdWriteCmd>
		break;
 800337a:	e01b      	b.n	80033b4 <lcdLocate+0x94>
		lcdWriteCmd( LCDC_SET_DDRAM | (LCD_LINE3 + (x - 12)));
 800337c:	1dfb      	adds	r3, r7, #7
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	3314      	adds	r3, #20
 8003382:	b2db      	uxtb	r3, r3
 8003384:	b25b      	sxtb	r3, r3
 8003386:	2280      	movs	r2, #128	; 0x80
 8003388:	4252      	negs	r2, r2
 800338a:	4313      	orrs	r3, r2
 800338c:	b25b      	sxtb	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	0018      	movs	r0, r3
 8003392:	f7ff ff45 	bl	8003220 <lcdWriteCmd>
		break;
 8003396:	e00d      	b.n	80033b4 <lcdLocate+0x94>
		lcdWriteCmd( LCDC_SET_DDRAM | (LCD_LINE4 + (x - 12)));
 8003398:	1dfb      	adds	r3, r7, #7
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	3354      	adds	r3, #84	; 0x54
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	b25b      	sxtb	r3, r3
 80033a2:	2280      	movs	r2, #128	; 0x80
 80033a4:	4252      	negs	r2, r2
 80033a6:	4313      	orrs	r3, r2
 80033a8:	b25b      	sxtb	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7ff ff37 	bl	8003220 <lcdWriteCmd>
		break;
 80033b2:	46c0      	nop			; (mov r8, r8)
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b002      	add	sp, #8
 80033ba:	bd80      	pop	{r7, pc}

080033bc <lcdStr>:

void lcdStr(char *text) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
	while (*text)
 80033c4:	e006      	b.n	80033d4 <lcdStr+0x18>
		lcdChar(*text++);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	0018      	movs	r0, r3
 80033d0:	f7ff ff3e 	bl	8003250 <lcdChar>
	while (*text)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f4      	bne.n	80033c6 <lcdStr+0xa>
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b002      	add	sp, #8
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <lcdInt>:

void lcdInt(int data){
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]

	char buffer[20];
	sprintf(buffer, "%d", data);
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	4907      	ldr	r1, [pc, #28]	; (8003410 <lcdInt+0x28>)
 80033f4:	240c      	movs	r4, #12
 80033f6:	193b      	adds	r3, r7, r4
 80033f8:	0018      	movs	r0, r3
 80033fa:	f003 fc61 	bl	8006cc0 <siprintf>
	lcdStr(buffer);
 80033fe:	193b      	adds	r3, r7, r4
 8003400:	0018      	movs	r0, r3
 8003402:	f7ff ffdb 	bl	80033bc <lcdStr>

}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	b009      	add	sp, #36	; 0x24
 800340c:	bd90      	pop	{r4, r7, pc}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	08007b24 	.word	0x08007b24

08003414 <floatToInts>:

void floatToInts(float data, uint32_t denominator, int32_t *ones, uint32_t *decimals, uint8_t *zeros){
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
	//ex 21.04
	int32_t integer = (uint32_t)data;//21
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f7fc ffcc 	bl	80003c0 <__aeabi_f2uiz>
 8003428:	0003      	movs	r3, r0
 800342a:	61fb      	str	r3, [r7, #28]
	int32_t all = data*(float)denominator;//21040
 800342c:	68b8      	ldr	r0, [r7, #8]
 800342e:	f7fd ff71 	bl	8001314 <__aeabi_ui2f>
 8003432:	1c03      	adds	r3, r0, #0
 8003434:	68f9      	ldr	r1, [r7, #12]
 8003436:	1c18      	adds	r0, r3, #0
 8003438:	f7fd fc2a 	bl	8000c90 <__aeabi_fmul>
 800343c:	1c03      	adds	r3, r0, #0
 800343e:	1c18      	adds	r0, r3, #0
 8003440:	f7fd fefa 	bl	8001238 <__aeabi_f2iz>
 8003444:	0003      	movs	r3, r0
 8003446:	61bb      	str	r3, [r7, #24]
	float afterComma = all - (integer*denominator);
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	68b9      	ldr	r1, [r7, #8]
 800344e:	434b      	muls	r3, r1
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	0018      	movs	r0, r3
 8003454:	f7fd ff5e 	bl	8001314 <__aeabi_ui2f>
 8003458:	1c03      	adds	r3, r0, #0
 800345a:	617b      	str	r3, [r7, #20]

	*ones = integer;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	601a      	str	r2, [r3, #0]
	*decimals = abs((int32_t)afterComma);
 8003462:	6978      	ldr	r0, [r7, #20]
 8003464:	f7fd fee8 	bl	8001238 <__aeabi_f2iz>
 8003468:	0003      	movs	r3, r0
 800346a:	17da      	asrs	r2, r3, #31
 800346c:	189b      	adds	r3, r3, r2
 800346e:	4053      	eors	r3, r2
 8003470:	001a      	movs	r2, r3
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	601a      	str	r2, [r3, #0]
	*zeros = log10(denominator)-1;
 8003476:	68b8      	ldr	r0, [r7, #8]
 8003478:	f7ff fd4e 	bl	8002f18 <__aeabi_ui2d>
 800347c:	0002      	movs	r2, r0
 800347e:	000b      	movs	r3, r1
 8003480:	0010      	movs	r0, r2
 8003482:	0019      	movs	r1, r3
 8003484:	f004 f8d4 	bl	8007630 <log10>
 8003488:	2200      	movs	r2, #0
 800348a:	4b08      	ldr	r3, [pc, #32]	; (80034ac <floatToInts+0x98>)
 800348c:	f7ff f92e 	bl	80026ec <__aeabi_dsub>
 8003490:	0002      	movs	r2, r0
 8003492:	000b      	movs	r3, r1
 8003494:	0010      	movs	r0, r2
 8003496:	0019      	movs	r1, r3
 8003498:	f7fc ffaa 	bl	80003f0 <__aeabi_d2uiz>
 800349c:	0003      	movs	r3, r0
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a2:	701a      	strb	r2, [r3, #0]



}
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b008      	add	sp, #32
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	3ff00000 	.word	0x3ff00000

080034b0 <lcdFloat>:

void lcdFloat(float data, uint32_t denominator){
 80034b0:	b590      	push	{r4, r7, lr}
 80034b2:	b089      	sub	sp, #36	; 0x24
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]

	int32_t beforeComma;
	uint32_t afterComma;
	uint8_t zeros;

	floatToInts(data, denominator, &beforeComma, &afterComma, &zeros);
 80034ba:	2310      	movs	r3, #16
 80034bc:	18fc      	adds	r4, r7, r3
 80034be:	2314      	movs	r3, #20
 80034c0:	18fa      	adds	r2, r7, r3
 80034c2:	6839      	ldr	r1, [r7, #0]
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	230f      	movs	r3, #15
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	0023      	movs	r3, r4
 80034ce:	f7ff ffa1 	bl	8003414 <floatToInts>

	lcdInt(beforeComma);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	0018      	movs	r0, r3
 80034d6:	f7ff ff87 	bl	80033e8 <lcdInt>
	lcdChar('.');
 80034da:	202e      	movs	r0, #46	; 0x2e
 80034dc:	f7ff feb8 	bl	8003250 <lcdChar>

	if(denominator == 100 && afterComma < 10){
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b64      	cmp	r3, #100	; 0x64
 80034e4:	d106      	bne.n	80034f4 <lcdFloat+0x44>
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b09      	cmp	r3, #9
 80034ea:	d803      	bhi.n	80034f4 <lcdFloat+0x44>
		lcdStr("0");
 80034ec:	4b0f      	ldr	r3, [pc, #60]	; (800352c <lcdFloat+0x7c>)
 80034ee:	0018      	movs	r0, r3
 80034f0:	f7ff ff64 	bl	80033bc <lcdStr>
	}
	if(denominator == 1000){
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	23fa      	movs	r3, #250	; 0xfa
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d10e      	bne.n	800351c <lcdFloat+0x6c>
		if(afterComma<10) lcdStr("00");
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	2b09      	cmp	r3, #9
 8003502:	d804      	bhi.n	800350e <lcdFloat+0x5e>
 8003504:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <lcdFloat+0x80>)
 8003506:	0018      	movs	r0, r3
 8003508:	f7ff ff58 	bl	80033bc <lcdStr>
 800350c:	e006      	b.n	800351c <lcdFloat+0x6c>
		else if(afterComma<100) lcdStr("0");
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b63      	cmp	r3, #99	; 0x63
 8003512:	d803      	bhi.n	800351c <lcdFloat+0x6c>
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <lcdFloat+0x7c>)
 8003516:	0018      	movs	r0, r3
 8003518:	f7ff ff50 	bl	80033bc <lcdStr>
	}



	lcdInt(afterComma);
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	0018      	movs	r0, r3
 8003520:	f7ff ff62 	bl	80033e8 <lcdInt>

}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b007      	add	sp, #28
 800352a:	bd90      	pop	{r4, r7, pc}
 800352c:	08007b28 	.word	0x08007b28
 8003530:	08007b2c 	.word	0x08007b2c

08003534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003538:	f000 fec0 	bl	80042bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800353c:	f000 fac4 	bl	8003ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003540:	f000 fcae 	bl	8003ea0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003544:	f000 fc8e 	bl	8003e64 <MX_DMA_Init>
  MX_ADC_Init();
 8003548:	f000 fb18 	bl	8003b7c <MX_ADC_Init>
  MX_TIM2_Init();
 800354c:	f000 fbb6 	bl	8003cbc <MX_TIM2_Init>
  MX_TIM21_Init();
 8003550:	f000 fc34 	bl	8003dbc <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

	//inicjalizacja wyświetlacza
	lcdInit();
 8003554:	f7ff fe94 	bl	8003280 <lcdInit>
	lcdLocate(4, 0);
 8003558:	2100      	movs	r1, #0
 800355a:	2004      	movs	r0, #4
 800355c:	f7ff fee0 	bl	8003320 <lcdLocate>
	lcdStr("smokePID");
 8003560:	4b5c      	ldr	r3, [pc, #368]	; (80036d4 <main+0x1a0>)
 8003562:	0018      	movs	r0, r3
 8003564:	f7ff ff2a 	bl	80033bc <lcdStr>
	lcdLocate(12, 1);
 8003568:	2101      	movs	r1, #1
 800356a:	200c      	movs	r0, #12
 800356c:	f7ff fed8 	bl	8003320 <lcdLocate>
	lcdStr("v1.2");
 8003570:	4b59      	ldr	r3, [pc, #356]	; (80036d8 <main+0x1a4>)
 8003572:	0018      	movs	r0, r3
 8003574:	f7ff ff22 	bl	80033bc <lcdStr>
	HAL_Delay(1000);
 8003578:	23fa      	movs	r3, #250	; 0xfa
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	0018      	movs	r0, r3
 800357e:	f000 ff0d 	bl	800439c <HAL_Delay>

	//uruchomienie PWM
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003582:	4b56      	ldr	r3, [pc, #344]	; (80036dc <main+0x1a8>)
 8003584:	2100      	movs	r1, #0
 8003586:	0018      	movs	r0, r3
 8003588:	f002 fdcc 	bl	8006124 <HAL_TIM_PWM_Start>

	//test serwa
	lcdLocate(0, 1);
 800358c:	2101      	movs	r1, #1
 800358e:	2000      	movs	r0, #0
 8003590:	f7ff fec6 	bl	8003320 <lcdLocate>
	lcdStr("MIN");
 8003594:	4b52      	ldr	r3, [pc, #328]	; (80036e0 <main+0x1ac>)
 8003596:	0018      	movs	r0, r3
 8003598:	f7ff ff10 	bl	80033bc <lcdStr>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 800359c:	4b4f      	ldr	r3, [pc, #316]	; (80036dc <main+0x1a8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	22fa      	movs	r2, #250	; 0xfa
 80035a2:	0092      	lsls	r2, r2, #2
 80035a4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 80035a6:	23fa      	movs	r3, #250	; 0xfa
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 fef6 	bl	800439c <HAL_Delay>

	lcdLocate(0, 1);
 80035b0:	2101      	movs	r1, #1
 80035b2:	2000      	movs	r0, #0
 80035b4:	f7ff feb4 	bl	8003320 <lcdLocate>
	lcdStr("MAX");
 80035b8:	4b4a      	ldr	r3, [pc, #296]	; (80036e4 <main+0x1b0>)
 80035ba:	0018      	movs	r0, r3
 80035bc:	f7ff fefe 	bl	80033bc <lcdStr>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2000);
 80035c0:	4b46      	ldr	r3, [pc, #280]	; (80036dc <main+0x1a8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	22fa      	movs	r2, #250	; 0xfa
 80035c6:	00d2      	lsls	r2, r2, #3
 80035c8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 80035ca:	23fa      	movs	r3, #250	; 0xfa
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	0018      	movs	r0, r3
 80035d0:	f000 fee4 	bl	800439c <HAL_Delay>

	lcdLocate(0, 1);
 80035d4:	2101      	movs	r1, #1
 80035d6:	2000      	movs	r0, #0
 80035d8:	f7ff fea2 	bl	8003320 <lcdLocate>
	lcdStr("MIN");
 80035dc:	4b40      	ldr	r3, [pc, #256]	; (80036e0 <main+0x1ac>)
 80035de:	0018      	movs	r0, r3
 80035e0:	f7ff feec 	bl	80033bc <lcdStr>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 80035e4:	4b3d      	ldr	r3, [pc, #244]	; (80036dc <main+0x1a8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	22fa      	movs	r2, #250	; 0xfa
 80035ea:	0092      	lsls	r2, r2, #2
 80035ec:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 80035ee:	23fa      	movs	r3, #250	; 0xfa
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	0018      	movs	r0, r3
 80035f4:	f000 fed2 	bl	800439c <HAL_Delay>

	lcdClear();
 80035f8:	f7ff fe8a 	bl	8003310 <lcdClear>

	//kalibracja ADC
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80035fc:	4b3a      	ldr	r3, [pc, #232]	; (80036e8 <main+0x1b4>)
 80035fe:	2100      	movs	r1, #0
 8003600:	0018      	movs	r0, r3
 8003602:	f001 fa8f 	bl	8004b24 <HAL_ADCEx_Calibration_Start>

	//uruchomienie przetwornika
	HAL_ADC_Start_DMA(&hadc, adcReadings, 5);
 8003606:	4939      	ldr	r1, [pc, #228]	; (80036ec <main+0x1b8>)
 8003608:	4b37      	ldr	r3, [pc, #220]	; (80036e8 <main+0x1b4>)
 800360a:	2205      	movs	r2, #5
 800360c:	0018      	movs	r0, r3
 800360e:	f001 f85d 	bl	80046cc <HAL_ADC_Start_DMA>

	//uruchomienie niezależnego timera
	HAL_TIM_Base_Start_IT(&htim21);
 8003612:	4b37      	ldr	r3, [pc, #220]	; (80036f0 <main+0x1bc>)
 8003614:	0018      	movs	r0, r3
 8003616:	f002 fcf1 	bl	8005ffc <HAL_TIM_Base_Start_IT>
		//pokaż regulator
//		lcdLocate(6, 0);
//		lcdInt(xD);
//		lcdStr("  ");

		if(displayRefreshFlag){
 800361a:	4b36      	ldr	r3, [pc, #216]	; (80036f4 <main+0x1c0>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d006      	beq.n	8003632 <main+0xfe>
			lcdInit();
 8003624:	f7ff fe2c 	bl	8003280 <lcdInit>
			lcdClear();
 8003628:	f7ff fe72 	bl	8003310 <lcdClear>
			displayRefreshFlag = 0;
 800362c:	4b31      	ldr	r3, [pc, #196]	; (80036f4 <main+0x1c0>)
 800362e:	2200      	movs	r2, #0
 8003630:	701a      	strb	r2, [r3, #0]
		}

		lcdLocate(6, 0);
 8003632:	2100      	movs	r1, #0
 8003634:	2006      	movs	r0, #6
 8003636:	f7ff fe73 	bl	8003320 <lcdLocate>
		lcdStr(" PID");
 800363a:	4b2f      	ldr	r3, [pc, #188]	; (80036f8 <main+0x1c4>)
 800363c:	0018      	movs	r0, r3
 800363e:	f7ff febd 	bl	80033bc <lcdStr>

		//pokaż zadaną temperaturę
		lcdLocate(0, 0);
 8003642:	2100      	movs	r1, #0
 8003644:	2000      	movs	r0, #0
 8003646:	f7ff fe6b 	bl	8003320 <lcdLocate>
		lcdInt(setPoint);
 800364a:	4b2c      	ldr	r3, [pc, #176]	; (80036fc <main+0x1c8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	0018      	movs	r0, r3
 8003650:	f7ff feca 	bl	80033e8 <lcdInt>
		lcdStr("stC ");
 8003654:	4b2a      	ldr	r3, [pc, #168]	; (8003700 <main+0x1cc>)
 8003656:	0018      	movs	r0, r3
 8003658:	f7ff feb0 	bl	80033bc <lcdStr>

		//pokaż rzeczywistą temperaturę
		lcdLocate(11, 0);
 800365c:	2100      	movs	r1, #0
 800365e:	200b      	movs	r0, #11
 8003660:	f7ff fe5e 	bl	8003320 <lcdLocate>
		lcdInt((uint32_t) temperature);
 8003664:	4b27      	ldr	r3, [pc, #156]	; (8003704 <main+0x1d0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	1c18      	adds	r0, r3, #0
 800366a:	f7fc fea9 	bl	80003c0 <__aeabi_f2uiz>
 800366e:	0003      	movs	r3, r0
 8003670:	0018      	movs	r0, r3
 8003672:	f7ff feb9 	bl	80033e8 <lcdInt>
		lcdStr("stC");
 8003676:	4b24      	ldr	r3, [pc, #144]	; (8003708 <main+0x1d4>)
 8003678:	0018      	movs	r0, r3
 800367a:	f7ff fe9f 	bl	80033bc <lcdStr>

		//pokaż wzmocnienia regulatorów
		lcdLocate(0, 1);
 800367e:	2101      	movs	r1, #1
 8003680:	2000      	movs	r0, #0
 8003682:	f7ff fe4d 	bl	8003320 <lcdLocate>
		lcdFloat(amplificationP, 10);
 8003686:	4b21      	ldr	r3, [pc, #132]	; (800370c <main+0x1d8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	210a      	movs	r1, #10
 800368c:	1c18      	adds	r0, r3, #0
 800368e:	f7ff ff0f 	bl	80034b0 <lcdFloat>
		lcdStr(" ");
 8003692:	4b1f      	ldr	r3, [pc, #124]	; (8003710 <main+0x1dc>)
 8003694:	0018      	movs	r0, r3
 8003696:	f7ff fe91 	bl	80033bc <lcdStr>

		lcdLocate(6, 1);
 800369a:	2101      	movs	r1, #1
 800369c:	2006      	movs	r0, #6
 800369e:	f7ff fe3f 	bl	8003320 <lcdLocate>
		lcdFloat(amplificationI, 100);
 80036a2:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <main+0x1e0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2164      	movs	r1, #100	; 0x64
 80036a8:	1c18      	adds	r0, r3, #0
 80036aa:	f7ff ff01 	bl	80034b0 <lcdFloat>
		lcdStr(" ");
 80036ae:	4b18      	ldr	r3, [pc, #96]	; (8003710 <main+0x1dc>)
 80036b0:	0018      	movs	r0, r3
 80036b2:	f7ff fe83 	bl	80033bc <lcdStr>

		lcdLocate(12, 1);
 80036b6:	2101      	movs	r1, #1
 80036b8:	200c      	movs	r0, #12
 80036ba:	f7ff fe31 	bl	8003320 <lcdLocate>
		lcdFloat(amplificationD, 10);
 80036be:	4b16      	ldr	r3, [pc, #88]	; (8003718 <main+0x1e4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	210a      	movs	r1, #10
 80036c4:	1c18      	adds	r0, r3, #0
 80036c6:	f7ff fef3 	bl	80034b0 <lcdFloat>
		lcdStr(" ");
 80036ca:	4b11      	ldr	r3, [pc, #68]	; (8003710 <main+0x1dc>)
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7ff fe75 	bl	80033bc <lcdStr>
		if(displayRefreshFlag){
 80036d2:	e7a2      	b.n	800361a <main+0xe6>
 80036d4:	08007b30 	.word	0x08007b30
 80036d8:	08007b3c 	.word	0x08007b3c
 80036dc:	20000134 	.word	0x20000134
 80036e0:	08007b44 	.word	0x08007b44
 80036e4:	08007b48 	.word	0x08007b48
 80036e8:	20000090 	.word	0x20000090
 80036ec:	200001b4 	.word	0x200001b4
 80036f0:	20000174 	.word	0x20000174
 80036f4:	200001f4 	.word	0x200001f4
 80036f8:	08007b4c 	.word	0x08007b4c
 80036fc:	200001cc 	.word	0x200001cc
 8003700:	08007b54 	.word	0x08007b54
 8003704:	200001c8 	.word	0x200001c8
 8003708:	08007b5c 	.word	0x08007b5c
 800370c:	200001d0 	.word	0x200001d0
 8003710:	08007b60 	.word	0x08007b60
 8003714:	200001d4 	.word	0x200001d4
 8003718:	200001d8 	.word	0x200001d8

0800371c <HAL_TIM_PeriodElapsedCallback>:
    /* USER CODE BEGIN 3 */
	}

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800371c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800371e:	b089      	sub	sp, #36	; 0x24
 8003720:	af06      	add	r7, sp, #24
 8003722:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM21) {
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a39      	ldr	r2, [pc, #228]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d16b      	bne.n	8003806 <HAL_TIM_PeriodElapsedCallback+0xea>
		//odświeżanie(reinicjalizacja) wyswietlacza(kasuje krzaki)
		displayRefreshCounter++;
 800372e:	4b39      	ldr	r3, [pc, #228]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	4b37      	ldr	r3, [pc, #220]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8003736:	601a      	str	r2, [r3, #0]
		if(displayRefreshCounter >= displayRefreshDivider){
 8003738:	4b36      	ldr	r3, [pc, #216]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4b36      	ldr	r3, [pc, #216]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d305      	bcc.n	8003750 <HAL_TIM_PeriodElapsedCallback+0x34>
			displayRefreshFlag = 1;
 8003744:	4b35      	ldr	r3, [pc, #212]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003746:	2201      	movs	r2, #1
 8003748:	701a      	strb	r2, [r3, #0]
			displayRefreshCounter = 0;
 800374a:	4b32      	ldr	r3, [pc, #200]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
//		if (conversionToTemperature(adcReadings[4]) > temperature)
//			temperature = temperature + 0.01;
//		else if (conversionToTemperature(adcReadings[4]) < temperature)
//			temperature = temperature - 0.01;
		//bezpośredni
		temperature = conversionToTemperature(adcReadings[4]);
 8003750:	4b33      	ldr	r3, [pc, #204]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	b29b      	uxth	r3, r3
 8003756:	0018      	movs	r0, r3
 8003758:	f000 f8c8 	bl	80038ec <conversionToTemperature>
 800375c:	1c02      	adds	r2, r0, #0
 800375e:	4b31      	ldr	r3, [pc, #196]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8003760:	601a      	str	r2, [r3, #0]

		//stała wartość
		//		temperature = 30.54;

		//odczyt zadanej temperatury
		setPoint = adcReadings[0] / 28;
 8003762:	4b2f      	ldr	r3, [pc, #188]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	211c      	movs	r1, #28
 8003768:	0018      	movs	r0, r3
 800376a:	f7fc fcd7 	bl	800011c <__udivsi3>
 800376e:	0003      	movs	r3, r0
 8003770:	001a      	movs	r2, r3
 8003772:	4b2d      	ldr	r3, [pc, #180]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003774:	601a      	str	r2, [r3, #0]

		//odczyt wzmocnień
		amplificationP = conversionToMultiplier(adcReadings[1], 40);
 8003776:	4b2a      	ldr	r3, [pc, #168]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	b29b      	uxth	r3, r3
 800377c:	2128      	movs	r1, #40	; 0x28
 800377e:	0018      	movs	r0, r3
 8003780:	f000 f866 	bl	8003850 <conversionToMultiplier>
 8003784:	1c02      	adds	r2, r0, #0
 8003786:	4b29      	ldr	r3, [pc, #164]	; (800382c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003788:	601a      	str	r2, [r3, #0]
		amplificationI = conversionToMultiplier(adcReadings[2], 10);
 800378a:	4b25      	ldr	r3, [pc, #148]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	b29b      	uxth	r3, r3
 8003790:	210a      	movs	r1, #10
 8003792:	0018      	movs	r0, r3
 8003794:	f000 f85c 	bl	8003850 <conversionToMultiplier>
 8003798:	1c02      	adds	r2, r0, #0
 800379a:	4b25      	ldr	r3, [pc, #148]	; (8003830 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800379c:	601a      	str	r2, [r3, #0]
		amplificationD = conversionToMultiplier(adcReadings[3], 30);
 800379e:	4b20      	ldr	r3, [pc, #128]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	211e      	movs	r1, #30
 80037a6:	0018      	movs	r0, r3
 80037a8:	f000 f852 	bl	8003850 <conversionToMultiplier>
 80037ac:	1c02      	adds	r2, r0, #0
 80037ae:	4b21      	ldr	r3, [pc, #132]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80037b0:	601a      	str	r2, [r3, #0]

		throttle = PID(setPoint, temperature, &integralSum, &lastError,
 80037b2:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7fd fdac 	bl	8001314 <__aeabi_ui2f>
 80037bc:	1c06      	adds	r6, r0, #0
 80037be:	4b19      	ldr	r3, [pc, #100]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	4b1a      	ldr	r3, [pc, #104]	; (800382c <HAL_TIM_PeriodElapsedCallback+0x110>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80037c8:	6819      	ldr	r1, [r3, #0]
 80037ca:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4d1a      	ldr	r5, [pc, #104]	; (8003838 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80037d0:	4c1a      	ldr	r4, [pc, #104]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80037d2:	9304      	str	r3, [sp, #16]
 80037d4:	9103      	str	r1, [sp, #12]
 80037d6:	9202      	str	r2, [sp, #8]
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	4b19      	ldr	r3, [pc, #100]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	002b      	movs	r3, r5
 80037e2:	0022      	movs	r2, r4
 80037e4:	1c01      	adds	r1, r0, #0
 80037e6:	1c30      	adds	r0, r6, #0
 80037e8:	f000 f8b4 	bl	8003954 <PID>
 80037ec:	0003      	movs	r3, r0
				&Dcounter, &xD, amplificationP, amplificationI, amplificationD)
				+ 1000;
 80037ee:	22fa      	movs	r2, #250	; 0xfa
 80037f0:	0092      	lsls	r2, r2, #2
 80037f2:	4694      	mov	ip, r2
 80037f4:	4463      	add	r3, ip
 80037f6:	001a      	movs	r2, r3
		throttle = PID(setPoint, temperature, &integralSum, &lastError,
 80037f8:	4b13      	ldr	r3, [pc, #76]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80037fa:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, throttle);
 80037fc:	4b13      	ldr	r3, [pc, #76]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a11      	ldr	r2, [pc, #68]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	635a      	str	r2, [r3, #52]	; 0x34

	}

}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	46bd      	mov	sp, r7
 800380a:	b003      	add	sp, #12
 800380c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	40010800 	.word	0x40010800
 8003814:	200001f0 	.word	0x200001f0
 8003818:	20000000 	.word	0x20000000
 800381c:	200001f4 	.word	0x200001f4
 8003820:	200001b4 	.word	0x200001b4
 8003824:	200001c8 	.word	0x200001c8
 8003828:	200001cc 	.word	0x200001cc
 800382c:	200001d0 	.word	0x200001d0
 8003830:	200001d4 	.word	0x200001d4
 8003834:	200001d8 	.word	0x200001d8
 8003838:	200001e0 	.word	0x200001e0
 800383c:	200001dc 	.word	0x200001dc
 8003840:	200001e8 	.word	0x200001e8
 8003844:	200001e4 	.word	0x200001e4
 8003848:	200001ec 	.word	0x200001ec
 800384c:	20000134 	.word	0x20000134

08003850 <conversionToMultiplier>:

float conversionToMultiplier(uint16_t conversion, uint16_t maxMultiplier) {
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	0002      	movs	r2, r0
 8003858:	1dbb      	adds	r3, r7, #6
 800385a:	801a      	strh	r2, [r3, #0]
 800385c:	1d3b      	adds	r3, r7, #4
 800385e:	1c0a      	adds	r2, r1, #0
 8003860:	801a      	strh	r2, [r3, #0]
	/*przelicz odczyt z potencjometru na mnożnik. Poniżej połowy- mnoznik ułamkowy.
	 Powyżej połowy- mnożnik całkowity o maksymalnej wartości maxMultiplier*/

	float reg;

	if (conversion < 2048) {
 8003862:	1dbb      	adds	r3, r7, #6
 8003864:	881a      	ldrh	r2, [r3, #0]
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	429a      	cmp	r2, r3
 800386c:	d20c      	bcs.n	8003888 <conversionToMultiplier+0x38>
		reg = ((float) conversion * 1) / 2047;
 800386e:	1dbb      	adds	r3, r7, #6
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	0018      	movs	r0, r3
 8003874:	f7fd fd4e 	bl	8001314 <__aeabi_ui2f>
 8003878:	1c03      	adds	r3, r0, #0
 800387a:	491b      	ldr	r1, [pc, #108]	; (80038e8 <conversionToMultiplier+0x98>)
 800387c:	1c18      	adds	r0, r3, #0
 800387e:	f7fd f83f 	bl	8000900 <__aeabi_fdiv>
 8003882:	1c03      	adds	r3, r0, #0
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	e02a      	b.n	80038de <conversionToMultiplier+0x8e>

	} else if (conversion >= 2048) {
 8003888:	1dbb      	adds	r3, r7, #6
 800388a:	881a      	ldrh	r2, [r3, #0]
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	429a      	cmp	r2, r3
 8003892:	d324      	bcc.n	80038de <conversionToMultiplier+0x8e>
		float conversion2 = (float) conversion - 2048;
 8003894:	1dbb      	adds	r3, r7, #6
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	0018      	movs	r0, r3
 800389a:	f7fd fd3b 	bl	8001314 <__aeabi_ui2f>
 800389e:	1c03      	adds	r3, r0, #0
 80038a0:	218a      	movs	r1, #138	; 0x8a
 80038a2:	05c9      	lsls	r1, r1, #23
 80038a4:	1c18      	adds	r0, r3, #0
 80038a6:	f7fd fb19 	bl	8000edc <__aeabi_fsub>
 80038aa:	1c03      	adds	r3, r0, #0
 80038ac:	60bb      	str	r3, [r7, #8]
		reg = ((maxMultiplier-1) * conversion2 / 2047) + 1;
 80038ae:	1d3b      	adds	r3, r7, #4
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7fd fcdf 	bl	8001278 <__aeabi_i2f>
 80038ba:	1c03      	adds	r3, r0, #0
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	1c18      	adds	r0, r3, #0
 80038c0:	f7fd f9e6 	bl	8000c90 <__aeabi_fmul>
 80038c4:	1c03      	adds	r3, r0, #0
 80038c6:	4908      	ldr	r1, [pc, #32]	; (80038e8 <conversionToMultiplier+0x98>)
 80038c8:	1c18      	adds	r0, r3, #0
 80038ca:	f7fd f819 	bl	8000900 <__aeabi_fdiv>
 80038ce:	1c03      	adds	r3, r0, #0
 80038d0:	21fe      	movs	r1, #254	; 0xfe
 80038d2:	0589      	lsls	r1, r1, #22
 80038d4:	1c18      	adds	r0, r3, #0
 80038d6:	f7fc fe75 	bl	80005c4 <__aeabi_fadd>
 80038da:	1c03      	adds	r3, r0, #0
 80038dc:	60fb      	str	r3, [r7, #12]
	}
	return reg;
 80038de:	68fb      	ldr	r3, [r7, #12]
}
 80038e0:	1c18      	adds	r0, r3, #0
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b004      	add	sp, #16
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	44ffe000 	.word	0x44ffe000

080038ec <conversionToTemperature>:

float conversionToTemperature(uint16_t conversion) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	0002      	movs	r2, r0
 80038f4:	1dbb      	adds	r3, r7, #6
 80038f6:	801a      	strh	r2, [r3, #0]
	/*przelicz odczyt z termometru na temperaturę wg klucza 10mV/stC*/

	float temperature = (conversion * 3.3 / 4095) * 100;
 80038f8:	1dbb      	adds	r3, r7, #6
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	0018      	movs	r0, r3
 80038fe:	f7ff fadb 	bl	8002eb8 <__aeabi_i2d>
 8003902:	4a10      	ldr	r2, [pc, #64]	; (8003944 <conversionToTemperature+0x58>)
 8003904:	4b10      	ldr	r3, [pc, #64]	; (8003948 <conversionToTemperature+0x5c>)
 8003906:	f7fe fc85 	bl	8002214 <__aeabi_dmul>
 800390a:	0002      	movs	r2, r0
 800390c:	000b      	movs	r3, r1
 800390e:	0010      	movs	r0, r2
 8003910:	0019      	movs	r1, r3
 8003912:	2200      	movs	r2, #0
 8003914:	4b0d      	ldr	r3, [pc, #52]	; (800394c <conversionToTemperature+0x60>)
 8003916:	f7fe f87b 	bl	8001a10 <__aeabi_ddiv>
 800391a:	0002      	movs	r2, r0
 800391c:	000b      	movs	r3, r1
 800391e:	0010      	movs	r0, r2
 8003920:	0019      	movs	r1, r3
 8003922:	2200      	movs	r2, #0
 8003924:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <conversionToTemperature+0x64>)
 8003926:	f7fe fc75 	bl	8002214 <__aeabi_dmul>
 800392a:	0002      	movs	r2, r0
 800392c:	000b      	movs	r3, r1
 800392e:	0010      	movs	r0, r2
 8003930:	0019      	movs	r1, r3
 8003932:	f7ff fb5f 	bl	8002ff4 <__aeabi_d2f>
 8003936:	1c03      	adds	r3, r0, #0
 8003938:	60fb      	str	r3, [r7, #12]
	return temperature;
 800393a:	68fb      	ldr	r3, [r7, #12]
}
 800393c:	1c18      	adds	r0, r3, #0
 800393e:	46bd      	mov	sp, r7
 8003940:	b004      	add	sp, #16
 8003942:	bd80      	pop	{r7, pc}
 8003944:	66666666 	.word	0x66666666
 8003948:	400a6666 	.word	0x400a6666
 800394c:	40affe00 	.word	0x40affe00
 8003950:	40590000 	.word	0x40590000

08003954 <PID>:
	return ((reading * 100) / 4095) + 100;
}

int32_t PID(float targetValue, float currentValue, float *integralSum,
		float *lastError, uint32_t *Dcounter, float *xD, float Pmultiplier,
		float Imultiplier, float Dmultiplier) {
 8003954:	b590      	push	{r4, r7, lr}
 8003956:	b08d      	sub	sp, #52	; 0x34
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]

	//obliczenie uchybu
	float currentError = targetValue - currentValue;
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f7fd fab9 	bl	8000edc <__aeabi_fsub>
 800396a:	1c03      	adds	r3, r0, #0
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28

	//człon proporcjonalny
	float xP = currentError * Pmultiplier;
 800396e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003972:	f7fd f98d 	bl	8000c90 <__aeabi_fmul>
 8003976:	1c03      	adds	r3, r0, #0
 8003978:	627b      	str	r3, [r7, #36]	; 0x24

	//człon całkujący
	*integralSum = *integralSum + (currentError / 100);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681c      	ldr	r4, [r3, #0]
 800397e:	494f      	ldr	r1, [pc, #316]	; (8003abc <PID+0x168>)
 8003980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003982:	f7fc ffbd 	bl	8000900 <__aeabi_fdiv>
 8003986:	1c03      	adds	r3, r0, #0
 8003988:	1c19      	adds	r1, r3, #0
 800398a:	1c20      	adds	r0, r4, #0
 800398c:	f7fc fe1a 	bl	80005c4 <__aeabi_fadd>
 8003990:	1c03      	adds	r3, r0, #0
 8003992:	1c1a      	adds	r2, r3, #0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	601a      	str	r2, [r3, #0]
	float xI = *integralSum * Imultiplier;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	1c19      	adds	r1, r3, #0
 800399e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80039a0:	f7fd f976 	bl	8000c90 <__aeabi_fmul>
 80039a4:	1c03      	adds	r3, r0, #0
 80039a6:	623b      	str	r3, [r7, #32]

	//anty Wind-Up(blokada pętli całkowania)
	float antiWindUp = 1000;		//max windUp
 80039a8:	4b45      	ldr	r3, [pc, #276]	; (8003ac0 <PID+0x16c>)
 80039aa:	61fb      	str	r3, [r7, #28]
	if (*integralSum >= antiWindUp && currentError > 0)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	1c19      	adds	r1, r3, #0
 80039b2:	69f8      	ldr	r0, [r7, #28]
 80039b4:	f7fc fc98 	bl	80002e8 <__aeabi_fcmple>
 80039b8:	1e03      	subs	r3, r0, #0
 80039ba:	d009      	beq.n	80039d0 <PID+0x7c>
 80039bc:	2100      	movs	r1, #0
 80039be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039c0:	f7fc fc9c 	bl	80002fc <__aeabi_fcmpgt>
 80039c4:	1e03      	subs	r3, r0, #0
 80039c6:	d003      	beq.n	80039d0 <PID+0x7c>
		*integralSum = antiWindUp;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	e01a      	b.n	8003a06 <PID+0xb2>
	else if (*integralSum <= 0 - antiWindUp && currentError < 0)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681c      	ldr	r4, [r3, #0]
 80039d4:	69f9      	ldr	r1, [r7, #28]
 80039d6:	2000      	movs	r0, #0
 80039d8:	f7fd fa80 	bl	8000edc <__aeabi_fsub>
 80039dc:	1c03      	adds	r3, r0, #0
 80039de:	1c19      	adds	r1, r3, #0
 80039e0:	1c20      	adds	r0, r4, #0
 80039e2:	f7fc fc81 	bl	80002e8 <__aeabi_fcmple>
 80039e6:	1e03      	subs	r3, r0, #0
 80039e8:	d00d      	beq.n	8003a06 <PID+0xb2>
 80039ea:	2100      	movs	r1, #0
 80039ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039ee:	f7fc fc71 	bl	80002d4 <__aeabi_fcmplt>
 80039f2:	1e03      	subs	r3, r0, #0
 80039f4:	d007      	beq.n	8003a06 <PID+0xb2>
		*integralSum = 0 - antiWindUp;
 80039f6:	69f9      	ldr	r1, [r7, #28]
 80039f8:	2000      	movs	r0, #0
 80039fa:	f7fd fa6f 	bl	8000edc <__aeabi_fsub>
 80039fe:	1c03      	adds	r3, r0, #0
 8003a00:	1c1a      	adds	r2, r3, #0
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	601a      	str	r2, [r3, #0]
	//^ blokada ma zapobiec nieskończonemu wzrastaniu integralSum.

	//człon różniczkujący
	uint32_t Ddivider = 500;		//dzielnik opóźniający
 8003a06:	23fa      	movs	r3, #250	; 0xfa
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	61bb      	str	r3, [r7, #24]
	(*Dcounter)++;		//licznik wywołań funkcji PID
 8003a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a14:	601a      	str	r2, [r3, #0]
	if (*Dcounter >= Ddivider) {
 8003a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d819      	bhi.n	8003a54 <PID+0x100>
		*xD = (currentError - *lastError) * Dmultiplier * 20; //-1
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	1c19      	adds	r1, r3, #0
 8003a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a28:	f7fd fa58 	bl	8000edc <__aeabi_fsub>
 8003a2c:	1c03      	adds	r3, r0, #0
 8003a2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003a30:	1c18      	adds	r0, r3, #0
 8003a32:	f7fd f92d 	bl	8000c90 <__aeabi_fmul>
 8003a36:	1c03      	adds	r3, r0, #0
 8003a38:	4922      	ldr	r1, [pc, #136]	; (8003ac4 <PID+0x170>)
 8003a3a:	1c18      	adds	r0, r3, #0
 8003a3c:	f7fd f928 	bl	8000c90 <__aeabi_fmul>
 8003a40:	1c03      	adds	r3, r0, #0
 8003a42:	1c1a      	adds	r2, r3, #0
 8003a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a46:	601a      	str	r2, [r3, #0]
		*lastError = currentError;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a4c:	601a      	str	r2, [r3, #0]
		*Dcounter = 0;
 8003a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
	}
	//^Człon różniczkujący jest opóźniony, wykonuje się raz na divider wywołań funkcji.
	//potrzebuje do tego licznika(Dcounter), a xD jest zachowywane do następnego wywołania.

	//sumowanie korekt
	float sum = xP + xI + *xD;
 8003a54:	6a39      	ldr	r1, [r7, #32]
 8003a56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a58:	f7fc fdb4 	bl	80005c4 <__aeabi_fadd>
 8003a5c:	1c03      	adds	r3, r0, #0
 8003a5e:	1c1a      	adds	r2, r3, #0
 8003a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	1c19      	adds	r1, r3, #0
 8003a66:	1c10      	adds	r0, r2, #0
 8003a68:	f7fc fdac 	bl	80005c4 <__aeabi_fadd>
 8003a6c:	1c03      	adds	r3, r0, #0
 8003a6e:	617b      	str	r3, [r7, #20]
	int32_t throttle = (int32_t) round(sum);
 8003a70:	6978      	ldr	r0, [r7, #20]
 8003a72:	f7ff fa77 	bl	8002f64 <__aeabi_f2d>
 8003a76:	0002      	movs	r2, r0
 8003a78:	000b      	movs	r3, r1
 8003a7a:	0010      	movs	r0, r2
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	f003 fd89 	bl	8007594 <round>
 8003a82:	0002      	movs	r2, r0
 8003a84:	000b      	movs	r3, r1
 8003a86:	0010      	movs	r0, r2
 8003a88:	0019      	movs	r1, r3
 8003a8a:	f7ff f9df 	bl	8002e4c <__aeabi_d2iz>
 8003a8e:	0003      	movs	r3, r0
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c

	int32_t maxThrottle = 1000;
 8003a92:	23fa      	movs	r3, #250	; 0xfa
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	613b      	str	r3, [r7, #16]
	if (throttle > maxThrottle)
 8003a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	dd02      	ble.n	8003aa6 <PID+0x152>
		throttle = maxThrottle;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa4:	e004      	b.n	8003ab0 <PID+0x15c>
	else if (throttle < 0)
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	da01      	bge.n	8003ab0 <PID+0x15c>
		throttle = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c

	return throttle;
 8003ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE END 3 */
}
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b00d      	add	sp, #52	; 0x34
 8003ab8:	bd90      	pop	{r4, r7, pc}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	42c80000 	.word	0x42c80000
 8003ac0:	447a0000 	.word	0x447a0000
 8003ac4:	41a00000 	.word	0x41a00000

08003ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ac8:	b590      	push	{r4, r7, lr}
 8003aca:	b093      	sub	sp, #76	; 0x4c
 8003acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ace:	2414      	movs	r4, #20
 8003ad0:	193b      	adds	r3, r7, r4
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	2334      	movs	r3, #52	; 0x34
 8003ad6:	001a      	movs	r2, r3
 8003ad8:	2100      	movs	r1, #0
 8003ada:	f003 f8e9 	bl	8006cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ade:	003b      	movs	r3, r7
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	2314      	movs	r3, #20
 8003ae4:	001a      	movs	r2, r3
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	f003 f8e2 	bl	8006cb0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003aec:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <SystemClock_Config+0xac>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <SystemClock_Config+0xb0>)
 8003af2:	401a      	ands	r2, r3
 8003af4:	4b1f      	ldr	r3, [pc, #124]	; (8003b74 <SystemClock_Config+0xac>)
 8003af6:	2180      	movs	r1, #128	; 0x80
 8003af8:	0109      	lsls	r1, r1, #4
 8003afa:	430a      	orrs	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003afe:	0021      	movs	r1, r4
 8003b00:	187b      	adds	r3, r7, r1
 8003b02:	2202      	movs	r2, #2
 8003b04:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b06:	187b      	adds	r3, r7, r1
 8003b08:	2201      	movs	r2, #1
 8003b0a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b0c:	187b      	adds	r3, r7, r1
 8003b0e:	2210      	movs	r2, #16
 8003b10:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b12:	187b      	adds	r3, r7, r1
 8003b14:	2202      	movs	r2, #2
 8003b16:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b18:	187b      	adds	r3, r7, r1
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8003b1e:	187b      	adds	r3, r7, r1
 8003b20:	2200      	movs	r2, #0
 8003b22:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003b24:	187b      	adds	r3, r7, r1
 8003b26:	2280      	movs	r2, #128	; 0x80
 8003b28:	03d2      	lsls	r2, r2, #15
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b2c:	187b      	adds	r3, r7, r1
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f001 fcba 	bl	80054a8 <HAL_RCC_OscConfig>
 8003b34:	1e03      	subs	r3, r0, #0
 8003b36:	d001      	beq.n	8003b3c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8003b38:	f000 fa3c 	bl	8003fb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b3c:	003b      	movs	r3, r7
 8003b3e:	220f      	movs	r2, #15
 8003b40:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b42:	003b      	movs	r3, r7
 8003b44:	2203      	movs	r2, #3
 8003b46:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b48:	003b      	movs	r3, r7
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b4e:	003b      	movs	r3, r7
 8003b50:	2200      	movs	r2, #0
 8003b52:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b54:	003b      	movs	r3, r7
 8003b56:	2200      	movs	r2, #0
 8003b58:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003b5a:	003b      	movs	r3, r7
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f002 f81e 	bl	8005ba0 <HAL_RCC_ClockConfig>
 8003b64:	1e03      	subs	r3, r0, #0
 8003b66:	d001      	beq.n	8003b6c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003b68:	f000 fa24 	bl	8003fb4 <Error_Handler>
  }
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b013      	add	sp, #76	; 0x4c
 8003b72:	bd90      	pop	{r4, r7, pc}
 8003b74:	40007000 	.word	0x40007000
 8003b78:	ffffe7ff 	.word	0xffffe7ff

08003b7c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b82:	003b      	movs	r3, r7
 8003b84:	0018      	movs	r0, r3
 8003b86:	2308      	movs	r3, #8
 8003b88:	001a      	movs	r2, r3
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	f003 f890 	bl	8006cb0 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003b90:	4b44      	ldr	r3, [pc, #272]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003b92:	4a45      	ldr	r2, [pc, #276]	; (8003ca8 <MX_ADC_Init+0x12c>)
 8003b94:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003b96:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003b9c:	4b41      	ldr	r3, [pc, #260]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	05d2      	lsls	r2, r2, #23
 8003ba2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003ba4:	4b3f      	ldr	r3, [pc, #252]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8003baa:	4b3e      	ldr	r3, [pc, #248]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003bac:	2207      	movs	r2, #7
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003bb0:	4b3c      	ldr	r3, [pc, #240]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003bb6:	4b3b      	ldr	r3, [pc, #236]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003bbc:	4b39      	ldr	r3, [pc, #228]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003bc4:	4b37      	ldr	r3, [pc, #220]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003bc6:	2221      	movs	r2, #33	; 0x21
 8003bc8:	2100      	movs	r1, #0
 8003bca:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003bcc:	4b35      	ldr	r3, [pc, #212]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003bd2:	4b34      	ldr	r3, [pc, #208]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003bd4:	22c2      	movs	r2, #194	; 0xc2
 8003bd6:	32ff      	adds	r2, #255	; 0xff
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003bda:	4b32      	ldr	r3, [pc, #200]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003bdc:	222c      	movs	r2, #44	; 0x2c
 8003bde:	2101      	movs	r1, #1
 8003be0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003be2:	4b30      	ldr	r3, [pc, #192]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003be4:	2204      	movs	r2, #4
 8003be6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003be8:	4b2e      	ldr	r3, [pc, #184]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	0152      	lsls	r2, r2, #5
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003bf0:	4b2c      	ldr	r3, [pc, #176]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003bf6:	4b2b      	ldr	r3, [pc, #172]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003bfc:	4b29      	ldr	r3, [pc, #164]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003c02:	4b28      	ldr	r3, [pc, #160]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003c04:	0018      	movs	r0, r3
 8003c06:	f000 fbed 	bl	80043e4 <HAL_ADC_Init>
 8003c0a:	1e03      	subs	r3, r0, #0
 8003c0c:	d001      	beq.n	8003c12 <MX_ADC_Init+0x96>
  {
    Error_Handler();
 8003c0e:	f000 f9d1 	bl	8003fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003c12:	003b      	movs	r3, r7
 8003c14:	2201      	movs	r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003c18:	003b      	movs	r3, r7
 8003c1a:	2280      	movs	r2, #128	; 0x80
 8003c1c:	0152      	lsls	r2, r2, #5
 8003c1e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003c20:	003a      	movs	r2, r7
 8003c22:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003c24:	0011      	movs	r1, r2
 8003c26:	0018      	movs	r0, r3
 8003c28:	f000 fdea 	bl	8004800 <HAL_ADC_ConfigChannel>
 8003c2c:	1e03      	subs	r3, r0, #0
 8003c2e:	d001      	beq.n	8003c34 <MX_ADC_Init+0xb8>
  {
    Error_Handler();
 8003c30:	f000 f9c0 	bl	8003fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003c34:	003b      	movs	r3, r7
 8003c36:	4a1d      	ldr	r2, [pc, #116]	; (8003cac <MX_ADC_Init+0x130>)
 8003c38:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003c3a:	003a      	movs	r2, r7
 8003c3c:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003c3e:	0011      	movs	r1, r2
 8003c40:	0018      	movs	r0, r3
 8003c42:	f000 fddd 	bl	8004800 <HAL_ADC_ConfigChannel>
 8003c46:	1e03      	subs	r3, r0, #0
 8003c48:	d001      	beq.n	8003c4e <MX_ADC_Init+0xd2>
  {
    Error_Handler();
 8003c4a:	f000 f9b3 	bl	8003fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003c4e:	003b      	movs	r3, r7
 8003c50:	4a17      	ldr	r2, [pc, #92]	; (8003cb0 <MX_ADC_Init+0x134>)
 8003c52:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003c54:	003a      	movs	r2, r7
 8003c56:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003c58:	0011      	movs	r1, r2
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f000 fdd0 	bl	8004800 <HAL_ADC_ConfigChannel>
 8003c60:	1e03      	subs	r3, r0, #0
 8003c62:	d001      	beq.n	8003c68 <MX_ADC_Init+0xec>
  {
    Error_Handler();
 8003c64:	f000 f9a6 	bl	8003fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003c68:	003b      	movs	r3, r7
 8003c6a:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <MX_ADC_Init+0x138>)
 8003c6c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003c6e:	003a      	movs	r2, r7
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003c72:	0011      	movs	r1, r2
 8003c74:	0018      	movs	r0, r3
 8003c76:	f000 fdc3 	bl	8004800 <HAL_ADC_ConfigChannel>
 8003c7a:	1e03      	subs	r3, r0, #0
 8003c7c:	d001      	beq.n	8003c82 <MX_ADC_Init+0x106>
  {
    Error_Handler();
 8003c7e:	f000 f999 	bl	8003fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003c82:	003b      	movs	r3, r7
 8003c84:	4a0c      	ldr	r2, [pc, #48]	; (8003cb8 <MX_ADC_Init+0x13c>)
 8003c86:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003c88:	003a      	movs	r2, r7
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <MX_ADC_Init+0x128>)
 8003c8c:	0011      	movs	r1, r2
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f000 fdb6 	bl	8004800 <HAL_ADC_ConfigChannel>
 8003c94:	1e03      	subs	r3, r0, #0
 8003c96:	d001      	beq.n	8003c9c <MX_ADC_Init+0x120>
  {
    Error_Handler();
 8003c98:	f000 f98c 	bl	8003fb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003c9c:	46c0      	nop			; (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b002      	add	sp, #8
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000090 	.word	0x20000090
 8003ca8:	40012400 	.word	0x40012400
 8003cac:	04000002 	.word	0x04000002
 8003cb0:	08000004 	.word	0x08000004
 8003cb4:	0c000008 	.word	0x0c000008
 8003cb8:	10000010 	.word	0x10000010

08003cbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cc2:	2318      	movs	r3, #24
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	2310      	movs	r3, #16
 8003cca:	001a      	movs	r2, r3
 8003ccc:	2100      	movs	r1, #0
 8003cce:	f002 ffef 	bl	8006cb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cd2:	2310      	movs	r3, #16
 8003cd4:	18fb      	adds	r3, r7, r3
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	2308      	movs	r3, #8
 8003cda:	001a      	movs	r2, r3
 8003cdc:	2100      	movs	r1, #0
 8003cde:	f002 ffe7 	bl	8006cb0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ce2:	003b      	movs	r3, r7
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	2310      	movs	r3, #16
 8003ce8:	001a      	movs	r2, r3
 8003cea:	2100      	movs	r1, #0
 8003cec:	f002 ffe0 	bl	8006cb0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003cf0:	4b30      	ldr	r3, [pc, #192]	; (8003db4 <MX_TIM2_Init+0xf8>)
 8003cf2:	2280      	movs	r2, #128	; 0x80
 8003cf4:	05d2      	lsls	r2, r2, #23
 8003cf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 23;
 8003cf8:	4b2e      	ldr	r3, [pc, #184]	; (8003db4 <MX_TIM2_Init+0xf8>)
 8003cfa:	2217      	movs	r2, #23
 8003cfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cfe:	4b2d      	ldr	r3, [pc, #180]	; (8003db4 <MX_TIM2_Init+0xf8>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8003d04:	4b2b      	ldr	r3, [pc, #172]	; (8003db4 <MX_TIM2_Init+0xf8>)
 8003d06:	4a2c      	ldr	r2, [pc, #176]	; (8003db8 <MX_TIM2_Init+0xfc>)
 8003d08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d0a:	4b2a      	ldr	r3, [pc, #168]	; (8003db4 <MX_TIM2_Init+0xf8>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d10:	4b28      	ldr	r3, [pc, #160]	; (8003db4 <MX_TIM2_Init+0xf8>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d16:	4b27      	ldr	r3, [pc, #156]	; (8003db4 <MX_TIM2_Init+0xf8>)
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f002 f92f 	bl	8005f7c <HAL_TIM_Base_Init>
 8003d1e:	1e03      	subs	r3, r0, #0
 8003d20:	d001      	beq.n	8003d26 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003d22:	f000 f947 	bl	8003fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d26:	2118      	movs	r1, #24
 8003d28:	187b      	adds	r3, r7, r1
 8003d2a:	2280      	movs	r2, #128	; 0x80
 8003d2c:	0152      	lsls	r2, r2, #5
 8003d2e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d30:	187a      	adds	r2, r7, r1
 8003d32:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <MX_TIM2_Init+0xf8>)
 8003d34:	0011      	movs	r1, r2
 8003d36:	0018      	movs	r0, r3
 8003d38:	f002 fc2e 	bl	8006598 <HAL_TIM_ConfigClockSource>
 8003d3c:	1e03      	subs	r3, r0, #0
 8003d3e:	d001      	beq.n	8003d44 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8003d40:	f000 f938 	bl	8003fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <MX_TIM2_Init+0xf8>)
 8003d46:	0018      	movs	r0, r3
 8003d48:	f002 f9a4 	bl	8006094 <HAL_TIM_PWM_Init>
 8003d4c:	1e03      	subs	r3, r0, #0
 8003d4e:	d001      	beq.n	8003d54 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003d50:	f000 f930 	bl	8003fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d54:	2110      	movs	r1, #16
 8003d56:	187b      	adds	r3, r7, r1
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d5c:	187b      	adds	r3, r7, r1
 8003d5e:	2200      	movs	r2, #0
 8003d60:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d62:	187a      	adds	r2, r7, r1
 8003d64:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <MX_TIM2_Init+0xf8>)
 8003d66:	0011      	movs	r1, r2
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f002 ff1f 	bl	8006bac <HAL_TIMEx_MasterConfigSynchronization>
 8003d6e:	1e03      	subs	r3, r0, #0
 8003d70:	d001      	beq.n	8003d76 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8003d72:	f000 f91f 	bl	8003fb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d76:	003b      	movs	r3, r7
 8003d78:	2260      	movs	r2, #96	; 0x60
 8003d7a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003d7c:	003b      	movs	r3, r7
 8003d7e:	2200      	movs	r2, #0
 8003d80:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d82:	003b      	movs	r3, r7
 8003d84:	2200      	movs	r2, #0
 8003d86:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d88:	003b      	movs	r3, r7
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d8e:	0039      	movs	r1, r7
 8003d90:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <MX_TIM2_Init+0xf8>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	0018      	movs	r0, r3
 8003d96:	f002 fb39 	bl	800640c <HAL_TIM_PWM_ConfigChannel>
 8003d9a:	1e03      	subs	r3, r0, #0
 8003d9c:	d001      	beq.n	8003da2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8003d9e:	f000 f909 	bl	8003fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003da2:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <MX_TIM2_Init+0xf8>)
 8003da4:	0018      	movs	r0, r3
 8003da6:	f000 f9b7 	bl	8004118 <HAL_TIM_MspPostInit>

}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b00a      	add	sp, #40	; 0x28
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	20000134 	.word	0x20000134
 8003db8:	00004e1f 	.word	0x00004e1f

08003dbc <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	2310      	movs	r3, #16
 8003dca:	001a      	movs	r2, r3
 8003dcc:	2100      	movs	r1, #0
 8003dce:	f002 ff6f 	bl	8006cb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dd2:	003b      	movs	r3, r7
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	2308      	movs	r3, #8
 8003dd8:	001a      	movs	r2, r3
 8003dda:	2100      	movs	r1, #0
 8003ddc:	f002 ff68 	bl	8006cb0 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8003de0:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <MX_TIM21_Init+0xa0>)
 8003de2:	4a1f      	ldr	r2, [pc, #124]	; (8003e60 <MX_TIM21_Init+0xa4>)
 8003de4:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 74;
 8003de6:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <MX_TIM21_Init+0xa0>)
 8003de8:	224a      	movs	r2, #74	; 0x4a
 8003dea:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dec:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <MX_TIM21_Init+0xa0>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 199;
 8003df2:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <MX_TIM21_Init+0xa0>)
 8003df4:	22c7      	movs	r2, #199	; 0xc7
 8003df6:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003df8:	4b18      	ldr	r3, [pc, #96]	; (8003e5c <MX_TIM21_Init+0xa0>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dfe:	4b17      	ldr	r3, [pc, #92]	; (8003e5c <MX_TIM21_Init+0xa0>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8003e04:	4b15      	ldr	r3, [pc, #84]	; (8003e5c <MX_TIM21_Init+0xa0>)
 8003e06:	0018      	movs	r0, r3
 8003e08:	f002 f8b8 	bl	8005f7c <HAL_TIM_Base_Init>
 8003e0c:	1e03      	subs	r3, r0, #0
 8003e0e:	d001      	beq.n	8003e14 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8003e10:	f000 f8d0 	bl	8003fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e14:	2108      	movs	r1, #8
 8003e16:	187b      	adds	r3, r7, r1
 8003e18:	2280      	movs	r2, #128	; 0x80
 8003e1a:	0152      	lsls	r2, r2, #5
 8003e1c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8003e1e:	187a      	adds	r2, r7, r1
 8003e20:	4b0e      	ldr	r3, [pc, #56]	; (8003e5c <MX_TIM21_Init+0xa0>)
 8003e22:	0011      	movs	r1, r2
 8003e24:	0018      	movs	r0, r3
 8003e26:	f002 fbb7 	bl	8006598 <HAL_TIM_ConfigClockSource>
 8003e2a:	1e03      	subs	r3, r0, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 8003e2e:	f000 f8c1 	bl	8003fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e32:	003b      	movs	r3, r7
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e38:	003b      	movs	r3, r7
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8003e3e:	003a      	movs	r2, r7
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <MX_TIM21_Init+0xa0>)
 8003e42:	0011      	movs	r1, r2
 8003e44:	0018      	movs	r0, r3
 8003e46:	f002 feb1 	bl	8006bac <HAL_TIMEx_MasterConfigSynchronization>
 8003e4a:	1e03      	subs	r3, r0, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8003e4e:	f000 f8b1 	bl	8003fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b006      	add	sp, #24
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	20000174 	.word	0x20000174
 8003e60:	40010800 	.word	0x40010800

08003e64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <MX_DMA_Init+0x38>)
 8003e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e6e:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <MX_DMA_Init+0x38>)
 8003e70:	2101      	movs	r1, #1
 8003e72:	430a      	orrs	r2, r1
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30
 8003e76:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <MX_DMA_Init+0x38>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	607b      	str	r3, [r7, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003e82:	2200      	movs	r2, #0
 8003e84:	2100      	movs	r1, #0
 8003e86:	2009      	movs	r0, #9
 8003e88:	f000 ff96 	bl	8004db8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003e8c:	2009      	movs	r0, #9
 8003e8e:	f000 ffa8 	bl	8004de2 <HAL_NVIC_EnableIRQ>

}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	46bd      	mov	sp, r7
 8003e96:	b002      	add	sp, #8
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	40021000 	.word	0x40021000

08003ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ea0:	b590      	push	{r4, r7, lr}
 8003ea2:	b089      	sub	sp, #36	; 0x24
 8003ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea6:	240c      	movs	r4, #12
 8003ea8:	193b      	adds	r3, r7, r4
 8003eaa:	0018      	movs	r0, r3
 8003eac:	2314      	movs	r3, #20
 8003eae:	001a      	movs	r2, r3
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	f002 fefd 	bl	8006cb0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eb6:	4b3c      	ldr	r3, [pc, #240]	; (8003fa8 <MX_GPIO_Init+0x108>)
 8003eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eba:	4b3b      	ldr	r3, [pc, #236]	; (8003fa8 <MX_GPIO_Init+0x108>)
 8003ebc:	2104      	movs	r1, #4
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ec2:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <MX_GPIO_Init+0x108>)
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	2204      	movs	r2, #4
 8003ec8:	4013      	ands	r3, r2
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ece:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <MX_GPIO_Init+0x108>)
 8003ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed2:	4b35      	ldr	r3, [pc, #212]	; (8003fa8 <MX_GPIO_Init+0x108>)
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eda:	4b33      	ldr	r3, [pc, #204]	; (8003fa8 <MX_GPIO_Init+0x108>)
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	2201      	movs	r2, #1
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	607b      	str	r3, [r7, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee6:	4b30      	ldr	r3, [pc, #192]	; (8003fa8 <MX_GPIO_Init+0x108>)
 8003ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eea:	4b2f      	ldr	r3, [pc, #188]	; (8003fa8 <MX_GPIO_Init+0x108>)
 8003eec:	2102      	movs	r1, #2
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ef2:	4b2d      	ldr	r3, [pc, #180]	; (8003fa8 <MX_GPIO_Init+0x108>)
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	4013      	ands	r3, r2
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISP_RS_Pin|DISP_E_Pin, GPIO_PIN_RESET);
 8003efe:	23c0      	movs	r3, #192	; 0xc0
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	482a      	ldr	r0, [pc, #168]	; (8003fac <MX_GPIO_Init+0x10c>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	0019      	movs	r1, r3
 8003f08:	f001 fab0 	bl	800546c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin|DISP_D7_Pin|DISP_D5_Pin|DISP_D4_Pin, GPIO_PIN_RESET);
 8003f0c:	23d8      	movs	r3, #216	; 0xd8
 8003f0e:	00d9      	lsls	r1, r3, #3
 8003f10:	23a0      	movs	r3, #160	; 0xa0
 8003f12:	05db      	lsls	r3, r3, #23
 8003f14:	2200      	movs	r2, #0
 8003f16:	0018      	movs	r0, r3
 8003f18:	f001 faa8 	bl	800546c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_D6_GPIO_Port, DISP_D6_Pin, GPIO_PIN_RESET);
 8003f1c:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <MX_GPIO_Init+0x110>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2102      	movs	r1, #2
 8003f22:	0018      	movs	r0, r3
 8003f24:	f001 faa2 	bl	800546c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISP_RS_Pin DISP_E_Pin */
  GPIO_InitStruct.Pin = DISP_RS_Pin|DISP_E_Pin;
 8003f28:	193b      	adds	r3, r7, r4
 8003f2a:	22c0      	movs	r2, #192	; 0xc0
 8003f2c:	0212      	lsls	r2, r2, #8
 8003f2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f30:	193b      	adds	r3, r7, r4
 8003f32:	2201      	movs	r2, #1
 8003f34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f36:	193b      	adds	r3, r7, r4
 8003f38:	2200      	movs	r2, #0
 8003f3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f3c:	193b      	adds	r3, r7, r4
 8003f3e:	2200      	movs	r2, #0
 8003f40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f42:	193b      	adds	r3, r7, r4
 8003f44:	4a19      	ldr	r2, [pc, #100]	; (8003fac <MX_GPIO_Init+0x10c>)
 8003f46:	0019      	movs	r1, r3
 8003f48:	0010      	movs	r0, r2
 8003f4a:	f001 f921 	bl	8005190 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATUS_Pin DISP_D7_Pin DISP_D5_Pin DISP_D4_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|DISP_D7_Pin|DISP_D5_Pin|DISP_D4_Pin;
 8003f4e:	0021      	movs	r1, r4
 8003f50:	187b      	adds	r3, r7, r1
 8003f52:	22d8      	movs	r2, #216	; 0xd8
 8003f54:	00d2      	lsls	r2, r2, #3
 8003f56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f58:	000c      	movs	r4, r1
 8003f5a:	193b      	adds	r3, r7, r4
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	193b      	adds	r3, r7, r4
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f66:	193b      	adds	r3, r7, r4
 8003f68:	2200      	movs	r2, #0
 8003f6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f6c:	193a      	adds	r2, r7, r4
 8003f6e:	23a0      	movs	r3, #160	; 0xa0
 8003f70:	05db      	lsls	r3, r3, #23
 8003f72:	0011      	movs	r1, r2
 8003f74:	0018      	movs	r0, r3
 8003f76:	f001 f90b 	bl	8005190 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_D6_Pin */
  GPIO_InitStruct.Pin = DISP_D6_Pin;
 8003f7a:	0021      	movs	r1, r4
 8003f7c:	187b      	adds	r3, r7, r1
 8003f7e:	2202      	movs	r2, #2
 8003f80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f82:	187b      	adds	r3, r7, r1
 8003f84:	2201      	movs	r2, #1
 8003f86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f88:	187b      	adds	r3, r7, r1
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f8e:	187b      	adds	r3, r7, r1
 8003f90:	2200      	movs	r2, #0
 8003f92:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DISP_D6_GPIO_Port, &GPIO_InitStruct);
 8003f94:	187b      	adds	r3, r7, r1
 8003f96:	4a06      	ldr	r2, [pc, #24]	; (8003fb0 <MX_GPIO_Init+0x110>)
 8003f98:	0019      	movs	r1, r3
 8003f9a:	0010      	movs	r0, r2
 8003f9c:	f001 f8f8 	bl	8005190 <HAL_GPIO_Init>

}
 8003fa0:	46c0      	nop			; (mov r8, r8)
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b009      	add	sp, #36	; 0x24
 8003fa6:	bd90      	pop	{r4, r7, pc}
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	50000800 	.word	0x50000800
 8003fb0:	50000400 	.word	0x50000400

08003fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fb8:	b672      	cpsid	i
}
 8003fba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003fbc:	e7fe      	b.n	8003fbc <Error_Handler+0x8>
	...

08003fc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fc4:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <HAL_MspInit+0x24>)
 8003fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc8:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_MspInit+0x24>)
 8003fca:	2101      	movs	r1, #1
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fd0:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <HAL_MspInit+0x24>)
 8003fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fd4:	4b03      	ldr	r3, [pc, #12]	; (8003fe4 <HAL_MspInit+0x24>)
 8003fd6:	2180      	movs	r1, #128	; 0x80
 8003fd8:	0549      	lsls	r1, r1, #21
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40021000 	.word	0x40021000

08003fe8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b089      	sub	sp, #36	; 0x24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff0:	240c      	movs	r4, #12
 8003ff2:	193b      	adds	r3, r7, r4
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	2314      	movs	r3, #20
 8003ff8:	001a      	movs	r2, r3
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	f002 fe58 	bl	8006cb0 <memset>
  if(hadc->Instance==ADC1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2a      	ldr	r2, [pc, #168]	; (80040b0 <HAL_ADC_MspInit+0xc8>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d14d      	bne.n	80040a6 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800400a:	4b2a      	ldr	r3, [pc, #168]	; (80040b4 <HAL_ADC_MspInit+0xcc>)
 800400c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800400e:	4b29      	ldr	r3, [pc, #164]	; (80040b4 <HAL_ADC_MspInit+0xcc>)
 8004010:	2180      	movs	r1, #128	; 0x80
 8004012:	0089      	lsls	r1, r1, #2
 8004014:	430a      	orrs	r2, r1
 8004016:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004018:	4b26      	ldr	r3, [pc, #152]	; (80040b4 <HAL_ADC_MspInit+0xcc>)
 800401a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401c:	4b25      	ldr	r3, [pc, #148]	; (80040b4 <HAL_ADC_MspInit+0xcc>)
 800401e:	2101      	movs	r1, #1
 8004020:	430a      	orrs	r2, r1
 8004022:	62da      	str	r2, [r3, #44]	; 0x2c
 8004024:	4b23      	ldr	r3, [pc, #140]	; (80040b4 <HAL_ADC_MspInit+0xcc>)
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	2201      	movs	r2, #1
 800402a:	4013      	ands	r3, r2
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = SET_Pin|REG_P_Pin|REG_I_Pin|REG_D_Pin
 8004030:	193b      	adds	r3, r7, r4
 8004032:	221f      	movs	r2, #31
 8004034:	601a      	str	r2, [r3, #0]
                          |TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004036:	193b      	adds	r3, r7, r4
 8004038:	2203      	movs	r2, #3
 800403a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403c:	193b      	adds	r3, r7, r4
 800403e:	2200      	movs	r2, #0
 8004040:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004042:	193a      	adds	r2, r7, r4
 8004044:	23a0      	movs	r3, #160	; 0xa0
 8004046:	05db      	lsls	r3, r3, #23
 8004048:	0011      	movs	r1, r2
 800404a:	0018      	movs	r0, r3
 800404c:	f001 f8a0 	bl	8005190 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8004050:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <HAL_ADC_MspInit+0xd0>)
 8004052:	4a1a      	ldr	r2, [pc, #104]	; (80040bc <HAL_ADC_MspInit+0xd4>)
 8004054:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8004056:	4b18      	ldr	r3, [pc, #96]	; (80040b8 <HAL_ADC_MspInit+0xd0>)
 8004058:	2200      	movs	r2, #0
 800405a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800405c:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <HAL_ADC_MspInit+0xd0>)
 800405e:	2200      	movs	r2, #0
 8004060:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8004062:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <HAL_ADC_MspInit+0xd0>)
 8004064:	2200      	movs	r2, #0
 8004066:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8004068:	4b13      	ldr	r3, [pc, #76]	; (80040b8 <HAL_ADC_MspInit+0xd0>)
 800406a:	2280      	movs	r2, #128	; 0x80
 800406c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800406e:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <HAL_ADC_MspInit+0xd0>)
 8004070:	2280      	movs	r2, #128	; 0x80
 8004072:	0092      	lsls	r2, r2, #2
 8004074:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004076:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <HAL_ADC_MspInit+0xd0>)
 8004078:	2280      	movs	r2, #128	; 0x80
 800407a:	0112      	lsls	r2, r2, #4
 800407c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800407e:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <HAL_ADC_MspInit+0xd0>)
 8004080:	2220      	movs	r2, #32
 8004082:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <HAL_ADC_MspInit+0xd0>)
 8004086:	2200      	movs	r2, #0
 8004088:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800408a:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <HAL_ADC_MspInit+0xd0>)
 800408c:	0018      	movs	r0, r3
 800408e:	f000 fec5 	bl	8004e1c <HAL_DMA_Init>
 8004092:	1e03      	subs	r3, r0, #0
 8004094:	d001      	beq.n	800409a <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8004096:	f7ff ff8d 	bl	8003fb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a06      	ldr	r2, [pc, #24]	; (80040b8 <HAL_ADC_MspInit+0xd0>)
 800409e:	64da      	str	r2, [r3, #76]	; 0x4c
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <HAL_ADC_MspInit+0xd0>)
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b009      	add	sp, #36	; 0x24
 80040ac:	bd90      	pop	{r4, r7, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	40012400 	.word	0x40012400
 80040b4:	40021000 	.word	0x40021000
 80040b8:	200000ec 	.word	0x200000ec
 80040bc:	40020008 	.word	0x40020008

080040c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	05db      	lsls	r3, r3, #23
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d106      	bne.n	80040e2 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040d4:	4b0e      	ldr	r3, [pc, #56]	; (8004110 <HAL_TIM_Base_MspInit+0x50>)
 80040d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040d8:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <HAL_TIM_Base_MspInit+0x50>)
 80040da:	2101      	movs	r1, #1
 80040dc:	430a      	orrs	r2, r1
 80040de:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 80040e0:	e012      	b.n	8004108 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM21)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a0b      	ldr	r2, [pc, #44]	; (8004114 <HAL_TIM_Base_MspInit+0x54>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d10d      	bne.n	8004108 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80040ec:	4b08      	ldr	r3, [pc, #32]	; (8004110 <HAL_TIM_Base_MspInit+0x50>)
 80040ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <HAL_TIM_Base_MspInit+0x50>)
 80040f2:	2104      	movs	r1, #4
 80040f4:	430a      	orrs	r2, r1
 80040f6:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80040f8:	2200      	movs	r2, #0
 80040fa:	2100      	movs	r1, #0
 80040fc:	2014      	movs	r0, #20
 80040fe:	f000 fe5b 	bl	8004db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8004102:	2014      	movs	r0, #20
 8004104:	f000 fe6d 	bl	8004de2 <HAL_NVIC_EnableIRQ>
}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	46bd      	mov	sp, r7
 800410c:	b002      	add	sp, #8
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40021000 	.word	0x40021000
 8004114:	40010800 	.word	0x40010800

08004118 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b089      	sub	sp, #36	; 0x24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004120:	240c      	movs	r4, #12
 8004122:	193b      	adds	r3, r7, r4
 8004124:	0018      	movs	r0, r3
 8004126:	2314      	movs	r3, #20
 8004128:	001a      	movs	r2, r3
 800412a:	2100      	movs	r1, #0
 800412c:	f002 fdc0 	bl	8006cb0 <memset>
  if(htim->Instance==TIM2)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	2380      	movs	r3, #128	; 0x80
 8004136:	05db      	lsls	r3, r3, #23
 8004138:	429a      	cmp	r2, r3
 800413a:	d122      	bne.n	8004182 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800413c:	4b13      	ldr	r3, [pc, #76]	; (800418c <HAL_TIM_MspPostInit+0x74>)
 800413e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004140:	4b12      	ldr	r3, [pc, #72]	; (800418c <HAL_TIM_MspPostInit+0x74>)
 8004142:	2101      	movs	r1, #1
 8004144:	430a      	orrs	r2, r1
 8004146:	62da      	str	r2, [r3, #44]	; 0x2c
 8004148:	4b10      	ldr	r3, [pc, #64]	; (800418c <HAL_TIM_MspPostInit+0x74>)
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	2201      	movs	r2, #1
 800414e:	4013      	ands	r3, r2
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
 8004154:	0021      	movs	r1, r4
 8004156:	187b      	adds	r3, r7, r1
 8004158:	2220      	movs	r2, #32
 800415a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415c:	187b      	adds	r3, r7, r1
 800415e:	2202      	movs	r2, #2
 8004160:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004162:	187b      	adds	r3, r7, r1
 8004164:	2200      	movs	r2, #0
 8004166:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004168:	187b      	adds	r3, r7, r1
 800416a:	2200      	movs	r2, #0
 800416c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800416e:	187b      	adds	r3, r7, r1
 8004170:	2205      	movs	r2, #5
 8004172:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8004174:	187a      	adds	r2, r7, r1
 8004176:	23a0      	movs	r3, #160	; 0xa0
 8004178:	05db      	lsls	r3, r3, #23
 800417a:	0011      	movs	r1, r2
 800417c:	0018      	movs	r0, r3
 800417e:	f001 f807 	bl	8005190 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	46bd      	mov	sp, r7
 8004186:	b009      	add	sp, #36	; 0x24
 8004188:	bd90      	pop	{r4, r7, pc}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	40021000 	.word	0x40021000

08004190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004194:	e7fe      	b.n	8004194 <NMI_Handler+0x4>

08004196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800419a:	e7fe      	b.n	800419a <HardFault_Handler+0x4>

0800419c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80041a0:	46c0      	nop			; (mov r8, r8)
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041b4:	f000 f8d6 	bl	8004364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041b8:	46c0      	nop			; (mov r8, r8)
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80041c4:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <DMA1_Channel1_IRQHandler+0x14>)
 80041c6:	0018      	movs	r0, r3
 80041c8:	f000 ff06 	bl	8004fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	200000ec 	.word	0x200000ec

080041d8 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80041dc:	4b03      	ldr	r3, [pc, #12]	; (80041ec <TIM21_IRQHandler+0x14>)
 80041de:	0018      	movs	r0, r3
 80041e0:	f002 f82c 	bl	800623c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80041e4:	46c0      	nop			; (mov r8, r8)
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	20000174 	.word	0x20000174

080041f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041f8:	4a14      	ldr	r2, [pc, #80]	; (800424c <_sbrk+0x5c>)
 80041fa:	4b15      	ldr	r3, [pc, #84]	; (8004250 <_sbrk+0x60>)
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004204:	4b13      	ldr	r3, [pc, #76]	; (8004254 <_sbrk+0x64>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d102      	bne.n	8004212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800420c:	4b11      	ldr	r3, [pc, #68]	; (8004254 <_sbrk+0x64>)
 800420e:	4a12      	ldr	r2, [pc, #72]	; (8004258 <_sbrk+0x68>)
 8004210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <_sbrk+0x64>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	18d3      	adds	r3, r2, r3
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	429a      	cmp	r2, r3
 800421e:	d207      	bcs.n	8004230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004220:	f002 fd1c 	bl	8006c5c <__errno>
 8004224:	0003      	movs	r3, r0
 8004226:	220c      	movs	r2, #12
 8004228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800422a:	2301      	movs	r3, #1
 800422c:	425b      	negs	r3, r3
 800422e:	e009      	b.n	8004244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004230:	4b08      	ldr	r3, [pc, #32]	; (8004254 <_sbrk+0x64>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004236:	4b07      	ldr	r3, [pc, #28]	; (8004254 <_sbrk+0x64>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	18d2      	adds	r2, r2, r3
 800423e:	4b05      	ldr	r3, [pc, #20]	; (8004254 <_sbrk+0x64>)
 8004240:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004242:	68fb      	ldr	r3, [r7, #12]
}
 8004244:	0018      	movs	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	b006      	add	sp, #24
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20002000 	.word	0x20002000
 8004250:	00000400 	.word	0x00000400
 8004254:	200001f8 	.word	0x200001f8
 8004258:	20000210 	.word	0x20000210

0800425c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004260:	46c0      	nop			; (mov r8, r8)
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004268:	480d      	ldr	r0, [pc, #52]	; (80042a0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800426a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800426c:	480d      	ldr	r0, [pc, #52]	; (80042a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800426e:	490e      	ldr	r1, [pc, #56]	; (80042a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004270:	4a0e      	ldr	r2, [pc, #56]	; (80042ac <LoopForever+0xe>)
  movs r3, #0
 8004272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004274:	e002      	b.n	800427c <LoopCopyDataInit>

08004276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800427a:	3304      	adds	r3, #4

0800427c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800427c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800427e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004280:	d3f9      	bcc.n	8004276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004282:	4a0b      	ldr	r2, [pc, #44]	; (80042b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004284:	4c0b      	ldr	r4, [pc, #44]	; (80042b4 <LoopForever+0x16>)
  movs r3, #0
 8004286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004288:	e001      	b.n	800428e <LoopFillZerobss>

0800428a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800428a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800428c:	3204      	adds	r2, #4

0800428e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800428e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004290:	d3fb      	bcc.n	800428a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004292:	f7ff ffe3 	bl	800425c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004296:	f002 fce7 	bl	8006c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800429a:	f7ff f94b 	bl	8003534 <main>

0800429e <LoopForever>:

LoopForever:
    b LoopForever
 800429e:	e7fe      	b.n	800429e <LoopForever>
   ldr   r0, =_estack
 80042a0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80042a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042a8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80042ac:	08007d00 	.word	0x08007d00
  ldr r2, =_sbss
 80042b0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80042b4:	20000210 	.word	0x20000210

080042b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042b8:	e7fe      	b.n	80042b8 <ADC1_COMP_IRQHandler>
	...

080042bc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80042c2:	1dfb      	adds	r3, r7, #7
 80042c4:	2200      	movs	r2, #0
 80042c6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80042c8:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <HAL_Init+0x3c>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <HAL_Init+0x3c>)
 80042ce:	2140      	movs	r1, #64	; 0x40
 80042d0:	430a      	orrs	r2, r1
 80042d2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042d4:	2000      	movs	r0, #0
 80042d6:	f000 f811 	bl	80042fc <HAL_InitTick>
 80042da:	1e03      	subs	r3, r0, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80042de:	1dfb      	adds	r3, r7, #7
 80042e0:	2201      	movs	r2, #1
 80042e2:	701a      	strb	r2, [r3, #0]
 80042e4:	e001      	b.n	80042ea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80042e6:	f7ff fe6b 	bl	8003fc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80042ea:	1dfb      	adds	r3, r7, #7
 80042ec:	781b      	ldrb	r3, [r3, #0]
}
 80042ee:	0018      	movs	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b002      	add	sp, #8
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	40022000 	.word	0x40022000

080042fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042fc:	b590      	push	{r4, r7, lr}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004304:	4b14      	ldr	r3, [pc, #80]	; (8004358 <HAL_InitTick+0x5c>)
 8004306:	681c      	ldr	r4, [r3, #0]
 8004308:	4b14      	ldr	r3, [pc, #80]	; (800435c <HAL_InitTick+0x60>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	0019      	movs	r1, r3
 800430e:	23fa      	movs	r3, #250	; 0xfa
 8004310:	0098      	lsls	r0, r3, #2
 8004312:	f7fb ff03 	bl	800011c <__udivsi3>
 8004316:	0003      	movs	r3, r0
 8004318:	0019      	movs	r1, r3
 800431a:	0020      	movs	r0, r4
 800431c:	f7fb fefe 	bl	800011c <__udivsi3>
 8004320:	0003      	movs	r3, r0
 8004322:	0018      	movs	r0, r3
 8004324:	f000 fd6d 	bl	8004e02 <HAL_SYSTICK_Config>
 8004328:	1e03      	subs	r3, r0, #0
 800432a:	d001      	beq.n	8004330 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e00f      	b.n	8004350 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b03      	cmp	r3, #3
 8004334:	d80b      	bhi.n	800434e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	2301      	movs	r3, #1
 800433a:	425b      	negs	r3, r3
 800433c:	2200      	movs	r2, #0
 800433e:	0018      	movs	r0, r3
 8004340:	f000 fd3a 	bl	8004db8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004344:	4b06      	ldr	r3, [pc, #24]	; (8004360 <HAL_InitTick+0x64>)
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	e000      	b.n	8004350 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
}
 8004350:	0018      	movs	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	b003      	add	sp, #12
 8004356:	bd90      	pop	{r4, r7, pc}
 8004358:	20000004 	.word	0x20000004
 800435c:	2000000c 	.word	0x2000000c
 8004360:	20000008 	.word	0x20000008

08004364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <HAL_IncTick+0x1c>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	001a      	movs	r2, r3
 800436e:	4b05      	ldr	r3, [pc, #20]	; (8004384 <HAL_IncTick+0x20>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	18d2      	adds	r2, r2, r3
 8004374:	4b03      	ldr	r3, [pc, #12]	; (8004384 <HAL_IncTick+0x20>)
 8004376:	601a      	str	r2, [r3, #0]
}
 8004378:	46c0      	nop			; (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	2000000c 	.word	0x2000000c
 8004384:	200001fc 	.word	0x200001fc

08004388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  return uwTick;
 800438c:	4b02      	ldr	r3, [pc, #8]	; (8004398 <HAL_GetTick+0x10>)
 800438e:	681b      	ldr	r3, [r3, #0]
}
 8004390:	0018      	movs	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	200001fc 	.word	0x200001fc

0800439c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043a4:	f7ff fff0 	bl	8004388 <HAL_GetTick>
 80043a8:	0003      	movs	r3, r0
 80043aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3301      	adds	r3, #1
 80043b4:	d005      	beq.n	80043c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043b6:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <HAL_Delay+0x44>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	001a      	movs	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	189b      	adds	r3, r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	f7ff ffe0 	bl	8004388 <HAL_GetTick>
 80043c8:	0002      	movs	r2, r0
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d8f7      	bhi.n	80043c4 <HAL_Delay+0x28>
  {
  }
}
 80043d4:	46c0      	nop			; (mov r8, r8)
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	46bd      	mov	sp, r7
 80043da:	b004      	add	sp, #16
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	2000000c 	.word	0x2000000c

080043e4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e159      	b.n	80046aa <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10a      	bne.n	8004414 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2250      	movs	r2, #80	; 0x50
 8004408:	2100      	movs	r1, #0
 800440a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	0018      	movs	r0, r3
 8004410:	f7ff fdea 	bl	8003fe8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	2210      	movs	r2, #16
 800441a:	4013      	ands	r3, r2
 800441c:	2b10      	cmp	r3, #16
 800441e:	d005      	beq.n	800442c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2204      	movs	r2, #4
 8004428:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800442a:	d00b      	beq.n	8004444 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004430:	2210      	movs	r2, #16
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2250      	movs	r2, #80	; 0x50
 800443c:	2100      	movs	r1, #0
 800443e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e132      	b.n	80046aa <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004448:	4a9a      	ldr	r2, [pc, #616]	; (80046b4 <HAL_ADC_Init+0x2d0>)
 800444a:	4013      	ands	r3, r2
 800444c:	2202      	movs	r2, #2
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2203      	movs	r2, #3
 800445c:	4013      	ands	r3, r2
 800445e:	2b01      	cmp	r3, #1
 8004460:	d108      	bne.n	8004474 <HAL_ADC_Init+0x90>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2201      	movs	r2, #1
 800446a:	4013      	ands	r3, r2
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_ADC_Init+0x90>
 8004470:	2301      	movs	r3, #1
 8004472:	e000      	b.n	8004476 <HAL_ADC_Init+0x92>
 8004474:	2300      	movs	r3, #0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d149      	bne.n	800450e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	23c0      	movs	r3, #192	; 0xc0
 8004480:	061b      	lsls	r3, r3, #24
 8004482:	429a      	cmp	r2, r3
 8004484:	d00b      	beq.n	800449e <HAL_ADC_Init+0xba>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	2380      	movs	r3, #128	; 0x80
 800448c:	05db      	lsls	r3, r3, #23
 800448e:	429a      	cmp	r2, r3
 8004490:	d005      	beq.n	800449e <HAL_ADC_Init+0xba>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	2380      	movs	r3, #128	; 0x80
 8004498:	061b      	lsls	r3, r3, #24
 800449a:	429a      	cmp	r2, r3
 800449c:	d111      	bne.n	80044c2 <HAL_ADC_Init+0xde>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	0092      	lsls	r2, r2, #2
 80044aa:	0892      	lsrs	r2, r2, #2
 80044ac:	611a      	str	r2, [r3, #16]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6919      	ldr	r1, [r3, #16]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	611a      	str	r2, [r3, #16]
 80044c0:	e014      	b.n	80044ec <HAL_ADC_Init+0x108>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	691a      	ldr	r2, [r3, #16]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	0092      	lsls	r2, r2, #2
 80044ce:	0892      	lsrs	r2, r2, #2
 80044d0:	611a      	str	r2, [r3, #16]
 80044d2:	4b79      	ldr	r3, [pc, #484]	; (80046b8 <HAL_ADC_Init+0x2d4>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4b78      	ldr	r3, [pc, #480]	; (80046b8 <HAL_ADC_Init+0x2d4>)
 80044d8:	4978      	ldr	r1, [pc, #480]	; (80046bc <HAL_ADC_Init+0x2d8>)
 80044da:	400a      	ands	r2, r1
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	4b76      	ldr	r3, [pc, #472]	; (80046b8 <HAL_ADC_Init+0x2d4>)
 80044e0:	6819      	ldr	r1, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	4b74      	ldr	r3, [pc, #464]	; (80046b8 <HAL_ADC_Init+0x2d4>)
 80044e8:	430a      	orrs	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2118      	movs	r1, #24
 80044f8:	438a      	bics	r2, r1
 80044fa:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68d9      	ldr	r1, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800450e:	4b6a      	ldr	r3, [pc, #424]	; (80046b8 <HAL_ADC_Init+0x2d4>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b69      	ldr	r3, [pc, #420]	; (80046b8 <HAL_ADC_Init+0x2d4>)
 8004514:	496a      	ldr	r1, [pc, #424]	; (80046c0 <HAL_ADC_Init+0x2dc>)
 8004516:	400a      	ands	r2, r1
 8004518:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800451a:	4b67      	ldr	r3, [pc, #412]	; (80046b8 <HAL_ADC_Init+0x2d4>)
 800451c:	6819      	ldr	r1, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004522:	065a      	lsls	r2, r3, #25
 8004524:	4b64      	ldr	r3, [pc, #400]	; (80046b8 <HAL_ADC_Init+0x2d4>)
 8004526:	430a      	orrs	r2, r1
 8004528:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	2380      	movs	r3, #128	; 0x80
 8004532:	055b      	lsls	r3, r3, #21
 8004534:	4013      	ands	r3, r2
 8004536:	d108      	bne.n	800454a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2180      	movs	r1, #128	; 0x80
 8004544:	0549      	lsls	r1, r1, #21
 8004546:	430a      	orrs	r2, r1
 8004548:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	495b      	ldr	r1, [pc, #364]	; (80046c4 <HAL_ADC_Init+0x2e0>)
 8004556:	400a      	ands	r2, r1
 8004558:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68d9      	ldr	r1, [r3, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d101      	bne.n	8004570 <HAL_ADC_Init+0x18c>
 800456c:	2304      	movs	r3, #4
 800456e:	e000      	b.n	8004572 <HAL_ADC_Init+0x18e>
 8004570:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004572:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2020      	movs	r0, #32
 8004578:	5c1b      	ldrb	r3, [r3, r0]
 800457a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800457c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	202c      	movs	r0, #44	; 0x2c
 8004582:	5c1b      	ldrb	r3, [r3, r0]
 8004584:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004586:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800458c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004594:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800459c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045aa:	23c2      	movs	r3, #194	; 0xc2
 80045ac:	33ff      	adds	r3, #255	; 0xff
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d00b      	beq.n	80045ca <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68d9      	ldr	r1, [r3, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2221      	movs	r2, #33	; 0x21
 80045ce:	5c9b      	ldrb	r3, [r3, r2]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d11a      	bne.n	800460a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	5c9b      	ldrb	r3, [r3, r2]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2180      	movs	r1, #128	; 0x80
 80045ea:	0249      	lsls	r1, r1, #9
 80045ec:	430a      	orrs	r2, r1
 80045ee:	60da      	str	r2, [r3, #12]
 80045f0:	e00b      	b.n	800460a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f6:	2220      	movs	r2, #32
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004602:	2201      	movs	r2, #1
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460e:	2b01      	cmp	r3, #1
 8004610:	d11f      	bne.n	8004652 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	492a      	ldr	r1, [pc, #168]	; (80046c8 <HAL_ADC_Init+0x2e4>)
 800461e:	400a      	ands	r2, r1
 8004620:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6919      	ldr	r1, [r3, #16]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004630:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8004636:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2101      	movs	r1, #1
 800464c:	430a      	orrs	r2, r1
 800464e:	611a      	str	r2, [r3, #16]
 8004650:	e00e      	b.n	8004670 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2201      	movs	r2, #1
 800465a:	4013      	ands	r3, r2
 800465c:	2b01      	cmp	r3, #1
 800465e:	d107      	bne.n	8004670 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2101      	movs	r1, #1
 800466c:	438a      	bics	r2, r1
 800466e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695a      	ldr	r2, [r3, #20]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2107      	movs	r1, #7
 800467c:	438a      	bics	r2, r1
 800467e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6959      	ldr	r1, [r3, #20]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469c:	2203      	movs	r2, #3
 800469e:	4393      	bics	r3, r2
 80046a0:	2201      	movs	r2, #1
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	0018      	movs	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b002      	add	sp, #8
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	fffffefd 	.word	0xfffffefd
 80046b8:	40012708 	.word	0x40012708
 80046bc:	ffc3ffff 	.word	0xffc3ffff
 80046c0:	fdffffff 	.word	0xfdffffff
 80046c4:	fffe0219 	.word	0xfffe0219
 80046c8:	fffffc03 	.word	0xfffffc03

080046cc <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80046cc:	b590      	push	{r4, r7, lr}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046d8:	2317      	movs	r3, #23
 80046da:	18fb      	adds	r3, r7, r3
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2204      	movs	r2, #4
 80046e8:	4013      	ands	r3, r2
 80046ea:	d15e      	bne.n	80047aa <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2250      	movs	r2, #80	; 0x50
 80046f0:	5c9b      	ldrb	r3, [r3, r2]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_ADC_Start_DMA+0x2e>
 80046f6:	2302      	movs	r3, #2
 80046f8:	e05e      	b.n	80047b8 <HAL_ADC_Start_DMA+0xec>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2250      	movs	r2, #80	; 0x50
 80046fe:	2101      	movs	r1, #1
 8004700:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2101      	movs	r1, #1
 800470e:	430a      	orrs	r2, r1
 8004710:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d007      	beq.n	800472a <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800471a:	2317      	movs	r3, #23
 800471c:	18fc      	adds	r4, r7, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	0018      	movs	r0, r3
 8004722:	f000 f8f3 	bl	800490c <ADC_Enable>
 8004726:	0003      	movs	r3, r0
 8004728:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800472a:	2317      	movs	r3, #23
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d13e      	bne.n	80047b2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004738:	4a21      	ldr	r2, [pc, #132]	; (80047c0 <HAL_ADC_Start_DMA+0xf4>)
 800473a:	4013      	ands	r3, r2
 800473c:	2280      	movs	r2, #128	; 0x80
 800473e:	0052      	lsls	r2, r2, #1
 8004740:	431a      	orrs	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2250      	movs	r2, #80	; 0x50
 8004750:	2100      	movs	r1, #0
 8004752:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004758:	4a1a      	ldr	r2, [pc, #104]	; (80047c4 <HAL_ADC_Start_DMA+0xf8>)
 800475a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004760:	4a19      	ldr	r2, [pc, #100]	; (80047c8 <HAL_ADC_Start_DMA+0xfc>)
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004768:	4a18      	ldr	r2, [pc, #96]	; (80047cc <HAL_ADC_Start_DMA+0x100>)
 800476a:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	221c      	movs	r2, #28
 8004772:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2110      	movs	r1, #16
 8004780:	430a      	orrs	r2, r1
 8004782:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3340      	adds	r3, #64	; 0x40
 800478e:	0019      	movs	r1, r3
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f000 fbba 	bl	8004f0c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2104      	movs	r1, #4
 80047a4:	430a      	orrs	r2, r1
 80047a6:	609a      	str	r2, [r3, #8]
 80047a8:	e003      	b.n	80047b2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80047aa:	2317      	movs	r3, #23
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	2202      	movs	r2, #2
 80047b0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80047b2:	2317      	movs	r3, #23
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	781b      	ldrb	r3, [r3, #0]
}
 80047b8:	0018      	movs	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	b007      	add	sp, #28
 80047be:	bd90      	pop	{r4, r7, pc}
 80047c0:	fffff0fe 	.word	0xfffff0fe
 80047c4:	080049dd 	.word	0x080049dd
 80047c8:	08004a91 	.word	0x08004a91
 80047cc:	08004aaf 	.word	0x08004aaf

080047d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80047d8:	46c0      	nop			; (mov r8, r8)
 80047da:	46bd      	mov	sp, r7
 80047dc:	b002      	add	sp, #8
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80047e8:	46c0      	nop			; (mov r8, r8)
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b002      	add	sp, #8
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047f8:	46c0      	nop			; (mov r8, r8)
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b002      	add	sp, #8
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2250      	movs	r2, #80	; 0x50
 800480e:	5c9b      	ldrb	r3, [r3, r2]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x18>
 8004814:	2302      	movs	r3, #2
 8004816:	e06c      	b.n	80048f2 <HAL_ADC_ConfigChannel+0xf2>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2250      	movs	r2, #80	; 0x50
 800481c:	2101      	movs	r1, #1
 800481e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2204      	movs	r2, #4
 8004828:	4013      	ands	r3, r2
 800482a:	d00b      	beq.n	8004844 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	2220      	movs	r2, #32
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2250      	movs	r2, #80	; 0x50
 800483c:	2100      	movs	r1, #0
 800483e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e056      	b.n	80048f2 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4a2c      	ldr	r2, [pc, #176]	; (80048fc <HAL_ADC_ConfigChannel+0xfc>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d028      	beq.n	80048a0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	035b      	lsls	r3, r3, #13
 800485a:	0b5a      	lsrs	r2, r3, #13
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	02db      	lsls	r3, r3, #11
 800486c:	4013      	ands	r3, r2
 800486e:	d009      	beq.n	8004884 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8004870:	4b23      	ldr	r3, [pc, #140]	; (8004900 <HAL_ADC_ConfigChannel+0x100>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b22      	ldr	r3, [pc, #136]	; (8004900 <HAL_ADC_ConfigChannel+0x100>)
 8004876:	2180      	movs	r1, #128	; 0x80
 8004878:	0409      	lsls	r1, r1, #16
 800487a:	430a      	orrs	r2, r1
 800487c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800487e:	200a      	movs	r0, #10
 8004880:	f000 f930 	bl	8004ae4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	2380      	movs	r3, #128	; 0x80
 800488a:	029b      	lsls	r3, r3, #10
 800488c:	4013      	ands	r3, r2
 800488e:	d02b      	beq.n	80048e8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004890:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <HAL_ADC_ConfigChannel+0x100>)
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <HAL_ADC_ConfigChannel+0x100>)
 8004896:	2180      	movs	r1, #128	; 0x80
 8004898:	03c9      	lsls	r1, r1, #15
 800489a:	430a      	orrs	r2, r1
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e023      	b.n	80048e8 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	035b      	lsls	r3, r3, #13
 80048ac:	0b5b      	lsrs	r3, r3, #13
 80048ae:	43d9      	mvns	r1, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	400a      	ands	r2, r1
 80048b6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	2380      	movs	r3, #128	; 0x80
 80048be:	02db      	lsls	r3, r3, #11
 80048c0:	4013      	ands	r3, r2
 80048c2:	d005      	beq.n	80048d0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80048c4:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <HAL_ADC_ConfigChannel+0x100>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4b0d      	ldr	r3, [pc, #52]	; (8004900 <HAL_ADC_ConfigChannel+0x100>)
 80048ca:	490e      	ldr	r1, [pc, #56]	; (8004904 <HAL_ADC_ConfigChannel+0x104>)
 80048cc:	400a      	ands	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	029b      	lsls	r3, r3, #10
 80048d8:	4013      	ands	r3, r2
 80048da:	d005      	beq.n	80048e8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80048dc:	4b08      	ldr	r3, [pc, #32]	; (8004900 <HAL_ADC_ConfigChannel+0x100>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4b07      	ldr	r3, [pc, #28]	; (8004900 <HAL_ADC_ConfigChannel+0x100>)
 80048e2:	4909      	ldr	r1, [pc, #36]	; (8004908 <HAL_ADC_ConfigChannel+0x108>)
 80048e4:	400a      	ands	r2, r1
 80048e6:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2250      	movs	r2, #80	; 0x50
 80048ec:	2100      	movs	r1, #0
 80048ee:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	0018      	movs	r0, r3
 80048f4:	46bd      	mov	sp, r7
 80048f6:	b002      	add	sp, #8
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	00001001 	.word	0x00001001
 8004900:	40012708 	.word	0x40012708
 8004904:	ff7fffff 	.word	0xff7fffff
 8004908:	ffbfffff 	.word	0xffbfffff

0800490c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2203      	movs	r2, #3
 8004920:	4013      	ands	r3, r2
 8004922:	2b01      	cmp	r3, #1
 8004924:	d108      	bne.n	8004938 <ADC_Enable+0x2c>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2201      	movs	r2, #1
 800492e:	4013      	ands	r3, r2
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <ADC_Enable+0x2c>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <ADC_Enable+0x2e>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d146      	bne.n	80049cc <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4a24      	ldr	r2, [pc, #144]	; (80049d8 <ADC_Enable+0xcc>)
 8004946:	4013      	ands	r3, r2
 8004948:	d00d      	beq.n	8004966 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494e:	2210      	movs	r2, #16
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495a:	2201      	movs	r2, #1
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e033      	b.n	80049ce <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2101      	movs	r1, #1
 8004972:	430a      	orrs	r2, r1
 8004974:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004976:	2001      	movs	r0, #1
 8004978:	f000 f8b4 	bl	8004ae4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800497c:	f7ff fd04 	bl	8004388 <HAL_GetTick>
 8004980:	0003      	movs	r3, r0
 8004982:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004984:	e01b      	b.n	80049be <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004986:	f7ff fcff 	bl	8004388 <HAL_GetTick>
 800498a:	0002      	movs	r2, r0
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b0a      	cmp	r3, #10
 8004992:	d914      	bls.n	80049be <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2201      	movs	r2, #1
 800499c:	4013      	ands	r3, r2
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d00d      	beq.n	80049be <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	2210      	movs	r2, #16
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b2:	2201      	movs	r2, #1
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e007      	b.n	80049ce <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2201      	movs	r2, #1
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d1dc      	bne.n	8004986 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	0018      	movs	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b004      	add	sp, #16
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	80000017 	.word	0x80000017

080049dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ee:	2250      	movs	r2, #80	; 0x50
 80049f0:	4013      	ands	r3, r2
 80049f2:	d141      	bne.n	8004a78 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f8:	2280      	movs	r2, #128	; 0x80
 80049fa:	0092      	lsls	r2, r2, #2
 80049fc:	431a      	orrs	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	23c0      	movs	r3, #192	; 0xc0
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d12e      	bne.n	8004a6e <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d129      	bne.n	8004a6e <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2208      	movs	r2, #8
 8004a22:	4013      	ands	r3, r2
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d122      	bne.n	8004a6e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2204      	movs	r2, #4
 8004a30:	4013      	ands	r3, r2
 8004a32:	d110      	bne.n	8004a56 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	210c      	movs	r1, #12
 8004a40:	438a      	bics	r2, r1
 8004a42:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a48:	4a10      	ldr	r2, [pc, #64]	; (8004a8c <ADC_DMAConvCplt+0xb0>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
 8004a54:	e00b      	b.n	8004a6e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a66:	2201      	movs	r2, #1
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	0018      	movs	r0, r3
 8004a72:	f7ff fead 	bl	80047d0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004a76:	e005      	b.n	8004a84 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	0010      	movs	r0, r2
 8004a82:	4798      	blx	r3
}
 8004a84:	46c0      	nop			; (mov r8, r8)
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b004      	add	sp, #16
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	fffffefe 	.word	0xfffffefe

08004a90 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f7ff fe9d 	bl	80047e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b004      	add	sp, #16
 8004aac:	bd80      	pop	{r7, pc}

08004aae <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac0:	2240      	movs	r2, #64	; 0x40
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004acc:	2204      	movs	r2, #4
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f7ff fe8a 	bl	80047f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004adc:	46c0      	nop			; (mov r8, r8)
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b004      	add	sp, #16
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004aec:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <ADC_DelayMicroSecond+0x38>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	490b      	ldr	r1, [pc, #44]	; (8004b20 <ADC_DelayMicroSecond+0x3c>)
 8004af2:	0018      	movs	r0, r3
 8004af4:	f7fb fb12 	bl	800011c <__udivsi3>
 8004af8:	0003      	movs	r3, r0
 8004afa:	001a      	movs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4353      	muls	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8004b02:	e002      	b.n	8004b0a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1f9      	bne.n	8004b04 <ADC_DelayMicroSecond+0x20>
  } 
}
 8004b10:	46c0      	nop			; (mov r8, r8)
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b004      	add	sp, #16
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	20000004 	.word	0x20000004
 8004b20:	000f4240 	.word	0x000f4240

08004b24 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b2e:	2317      	movs	r3, #23
 8004b30:	18fb      	adds	r3, r7, r3
 8004b32:	2200      	movs	r2, #0
 8004b34:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2250      	movs	r2, #80	; 0x50
 8004b42:	5c9b      	ldrb	r3, [r3, r2]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d101      	bne.n	8004b4c <HAL_ADCEx_Calibration_Start+0x28>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e083      	b.n	8004c54 <HAL_ADCEx_Calibration_Start+0x130>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2250      	movs	r2, #80	; 0x50
 8004b50:	2101      	movs	r1, #1
 8004b52:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2203      	movs	r2, #3
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d108      	bne.n	8004b74 <HAL_ADCEx_Calibration_Start+0x50>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_ADCEx_Calibration_Start+0x50>
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <HAL_ADCEx_Calibration_Start+0x52>
 8004b74:	2300      	movs	r3, #0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d15b      	bne.n	8004c32 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7e:	4a37      	ldr	r2, [pc, #220]	; (8004c5c <HAL_ADCEx_Calibration_Start+0x138>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	2202      	movs	r2, #2
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2203      	movs	r2, #3
 8004b92:	4013      	ands	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2103      	movs	r1, #3
 8004ba2:	438a      	bics	r2, r1
 8004ba4:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2180      	movs	r1, #128	; 0x80
 8004bb2:	0609      	lsls	r1, r1, #24
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004bb8:	f7ff fbe6 	bl	8004388 <HAL_GetTick>
 8004bbc:	0003      	movs	r3, r0
 8004bbe:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004bc0:	e01d      	b.n	8004bfe <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004bc2:	f7ff fbe1 	bl	8004388 <HAL_GetTick>
 8004bc6:	0002      	movs	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b0a      	cmp	r3, #10
 8004bce:	d916      	bls.n	8004bfe <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	0fdb      	lsrs	r3, r3, #31
 8004bd8:	07da      	lsls	r2, r3, #31
 8004bda:	2380      	movs	r3, #128	; 0x80
 8004bdc:	061b      	lsls	r3, r3, #24
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d10d      	bne.n	8004bfe <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be6:	2212      	movs	r2, #18
 8004be8:	4393      	bics	r3, r2
 8004bea:	2210      	movs	r2, #16
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2250      	movs	r2, #80	; 0x50
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e02a      	b.n	8004c54 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	0fdb      	lsrs	r3, r3, #31
 8004c06:	07da      	lsls	r2, r3, #31
 8004c08:	2380      	movs	r3, #128	; 0x80
 8004c0a:	061b      	lsls	r3, r3, #24
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d0d8      	beq.n	8004bc2 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68d9      	ldr	r1, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c24:	2203      	movs	r2, #3
 8004c26:	4393      	bics	r3, r2
 8004c28:	2201      	movs	r2, #1
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	655a      	str	r2, [r3, #84]	; 0x54
 8004c30:	e009      	b.n	8004c46 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c36:	2220      	movs	r2, #32
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8004c3e:	2317      	movs	r3, #23
 8004c40:	18fb      	adds	r3, r7, r3
 8004c42:	2201      	movs	r2, #1
 8004c44:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2250      	movs	r2, #80	; 0x50
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004c4e:	2317      	movs	r3, #23
 8004c50:	18fb      	adds	r3, r7, r3
 8004c52:	781b      	ldrb	r3, [r3, #0]
}
 8004c54:	0018      	movs	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	b006      	add	sp, #24
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	fffffefd 	.word	0xfffffefd

08004c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	0002      	movs	r2, r0
 8004c68:	1dfb      	adds	r3, r7, #7
 8004c6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c6c:	1dfb      	adds	r3, r7, #7
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b7f      	cmp	r3, #127	; 0x7f
 8004c72:	d809      	bhi.n	8004c88 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c74:	1dfb      	adds	r3, r7, #7
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	001a      	movs	r2, r3
 8004c7a:	231f      	movs	r3, #31
 8004c7c:	401a      	ands	r2, r3
 8004c7e:	4b04      	ldr	r3, [pc, #16]	; (8004c90 <__NVIC_EnableIRQ+0x30>)
 8004c80:	2101      	movs	r1, #1
 8004c82:	4091      	lsls	r1, r2
 8004c84:	000a      	movs	r2, r1
 8004c86:	601a      	str	r2, [r3, #0]
  }
}
 8004c88:	46c0      	nop			; (mov r8, r8)
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b002      	add	sp, #8
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	e000e100 	.word	0xe000e100

08004c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c94:	b590      	push	{r4, r7, lr}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	0002      	movs	r2, r0
 8004c9c:	6039      	str	r1, [r7, #0]
 8004c9e:	1dfb      	adds	r3, r7, #7
 8004ca0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004ca2:	1dfb      	adds	r3, r7, #7
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ca8:	d828      	bhi.n	8004cfc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004caa:	4a2f      	ldr	r2, [pc, #188]	; (8004d68 <__NVIC_SetPriority+0xd4>)
 8004cac:	1dfb      	adds	r3, r7, #7
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	b25b      	sxtb	r3, r3
 8004cb2:	089b      	lsrs	r3, r3, #2
 8004cb4:	33c0      	adds	r3, #192	; 0xc0
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	589b      	ldr	r3, [r3, r2]
 8004cba:	1dfa      	adds	r2, r7, #7
 8004cbc:	7812      	ldrb	r2, [r2, #0]
 8004cbe:	0011      	movs	r1, r2
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	400a      	ands	r2, r1
 8004cc4:	00d2      	lsls	r2, r2, #3
 8004cc6:	21ff      	movs	r1, #255	; 0xff
 8004cc8:	4091      	lsls	r1, r2
 8004cca:	000a      	movs	r2, r1
 8004ccc:	43d2      	mvns	r2, r2
 8004cce:	401a      	ands	r2, r3
 8004cd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	019b      	lsls	r3, r3, #6
 8004cd6:	22ff      	movs	r2, #255	; 0xff
 8004cd8:	401a      	ands	r2, r3
 8004cda:	1dfb      	adds	r3, r7, #7
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	0018      	movs	r0, r3
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	4003      	ands	r3, r0
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ce8:	481f      	ldr	r0, [pc, #124]	; (8004d68 <__NVIC_SetPriority+0xd4>)
 8004cea:	1dfb      	adds	r3, r7, #7
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	b25b      	sxtb	r3, r3
 8004cf0:	089b      	lsrs	r3, r3, #2
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	33c0      	adds	r3, #192	; 0xc0
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004cfa:	e031      	b.n	8004d60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cfc:	4a1b      	ldr	r2, [pc, #108]	; (8004d6c <__NVIC_SetPriority+0xd8>)
 8004cfe:	1dfb      	adds	r3, r7, #7
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	0019      	movs	r1, r3
 8004d04:	230f      	movs	r3, #15
 8004d06:	400b      	ands	r3, r1
 8004d08:	3b08      	subs	r3, #8
 8004d0a:	089b      	lsrs	r3, r3, #2
 8004d0c:	3306      	adds	r3, #6
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	18d3      	adds	r3, r2, r3
 8004d12:	3304      	adds	r3, #4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	1dfa      	adds	r2, r7, #7
 8004d18:	7812      	ldrb	r2, [r2, #0]
 8004d1a:	0011      	movs	r1, r2
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	400a      	ands	r2, r1
 8004d20:	00d2      	lsls	r2, r2, #3
 8004d22:	21ff      	movs	r1, #255	; 0xff
 8004d24:	4091      	lsls	r1, r2
 8004d26:	000a      	movs	r2, r1
 8004d28:	43d2      	mvns	r2, r2
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	019b      	lsls	r3, r3, #6
 8004d32:	22ff      	movs	r2, #255	; 0xff
 8004d34:	401a      	ands	r2, r3
 8004d36:	1dfb      	adds	r3, r7, #7
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	4003      	ands	r3, r0
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d44:	4809      	ldr	r0, [pc, #36]	; (8004d6c <__NVIC_SetPriority+0xd8>)
 8004d46:	1dfb      	adds	r3, r7, #7
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	001c      	movs	r4, r3
 8004d4c:	230f      	movs	r3, #15
 8004d4e:	4023      	ands	r3, r4
 8004d50:	3b08      	subs	r3, #8
 8004d52:	089b      	lsrs	r3, r3, #2
 8004d54:	430a      	orrs	r2, r1
 8004d56:	3306      	adds	r3, #6
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	18c3      	adds	r3, r0, r3
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	601a      	str	r2, [r3, #0]
}
 8004d60:	46c0      	nop			; (mov r8, r8)
 8004d62:	46bd      	mov	sp, r7
 8004d64:	b003      	add	sp, #12
 8004d66:	bd90      	pop	{r4, r7, pc}
 8004d68:	e000e100 	.word	0xe000e100
 8004d6c:	e000ed00 	.word	0xe000ed00

08004d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	1e5a      	subs	r2, r3, #1
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	045b      	lsls	r3, r3, #17
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d301      	bcc.n	8004d88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d84:	2301      	movs	r3, #1
 8004d86:	e010      	b.n	8004daa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d88:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <SysTick_Config+0x44>)
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	3a01      	subs	r2, #1
 8004d8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d90:	2301      	movs	r3, #1
 8004d92:	425b      	negs	r3, r3
 8004d94:	2103      	movs	r1, #3
 8004d96:	0018      	movs	r0, r3
 8004d98:	f7ff ff7c 	bl	8004c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <SysTick_Config+0x44>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004da2:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <SysTick_Config+0x44>)
 8004da4:	2207      	movs	r2, #7
 8004da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	0018      	movs	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b002      	add	sp, #8
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	e000e010 	.word	0xe000e010

08004db8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
 8004dc2:	210f      	movs	r1, #15
 8004dc4:	187b      	adds	r3, r7, r1
 8004dc6:	1c02      	adds	r2, r0, #0
 8004dc8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	187b      	adds	r3, r7, r1
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	b25b      	sxtb	r3, r3
 8004dd2:	0011      	movs	r1, r2
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f7ff ff5d 	bl	8004c94 <__NVIC_SetPriority>
}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b004      	add	sp, #16
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b082      	sub	sp, #8
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	0002      	movs	r2, r0
 8004dea:	1dfb      	adds	r3, r7, #7
 8004dec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dee:	1dfb      	adds	r3, r7, #7
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	b25b      	sxtb	r3, r3
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7ff ff33 	bl	8004c60 <__NVIC_EnableIRQ>
}
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	b002      	add	sp, #8
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7ff ffaf 	bl	8004d70 <SysTick_Config>
 8004e12:	0003      	movs	r3, r0
}
 8004e14:	0018      	movs	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b002      	add	sp, #8
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e061      	b.n	8004ef2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a32      	ldr	r2, [pc, #200]	; (8004efc <HAL_DMA_Init+0xe0>)
 8004e34:	4694      	mov	ip, r2
 8004e36:	4463      	add	r3, ip
 8004e38:	2114      	movs	r1, #20
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f7fb f96e 	bl	800011c <__udivsi3>
 8004e40:	0003      	movs	r3, r0
 8004e42:	009a      	lsls	r2, r3, #2
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a2d      	ldr	r2, [pc, #180]	; (8004f00 <HAL_DMA_Init+0xe4>)
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2225      	movs	r2, #37	; 0x25
 8004e52:	2102      	movs	r1, #2
 8004e54:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a28      	ldr	r2, [pc, #160]	; (8004f04 <HAL_DMA_Init+0xe8>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	2380      	movs	r3, #128	; 0x80
 8004ea2:	01db      	lsls	r3, r3, #7
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d018      	beq.n	8004eda <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004ea8:	4b17      	ldr	r3, [pc, #92]	; (8004f08 <HAL_DMA_Init+0xec>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb0:	211c      	movs	r1, #28
 8004eb2:	400b      	ands	r3, r1
 8004eb4:	210f      	movs	r1, #15
 8004eb6:	4099      	lsls	r1, r3
 8004eb8:	000b      	movs	r3, r1
 8004eba:	43d9      	mvns	r1, r3
 8004ebc:	4b12      	ldr	r3, [pc, #72]	; (8004f08 <HAL_DMA_Init+0xec>)
 8004ebe:	400a      	ands	r2, r1
 8004ec0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004ec2:	4b11      	ldr	r3, [pc, #68]	; (8004f08 <HAL_DMA_Init+0xec>)
 8004ec4:	6819      	ldr	r1, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ece:	201c      	movs	r0, #28
 8004ed0:	4003      	ands	r3, r0
 8004ed2:	409a      	lsls	r2, r3
 8004ed4:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <HAL_DMA_Init+0xec>)
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2225      	movs	r2, #37	; 0x25
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2224      	movs	r2, #36	; 0x24
 8004eec:	2100      	movs	r1, #0
 8004eee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	b004      	add	sp, #16
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	bffdfff8 	.word	0xbffdfff8
 8004f00:	40020000 	.word	0x40020000
 8004f04:	ffff800f 	.word	0xffff800f
 8004f08:	400200a8 	.word	0x400200a8

08004f0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f1a:	2317      	movs	r3, #23
 8004f1c:	18fb      	adds	r3, r7, r3
 8004f1e:	2200      	movs	r2, #0
 8004f20:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2224      	movs	r2, #36	; 0x24
 8004f26:	5c9b      	ldrb	r3, [r3, r2]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_DMA_Start_IT+0x24>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e04f      	b.n	8004fd0 <HAL_DMA_Start_IT+0xc4>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2224      	movs	r2, #36	; 0x24
 8004f34:	2101      	movs	r1, #1
 8004f36:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2225      	movs	r2, #37	; 0x25
 8004f3c:	5c9b      	ldrb	r3, [r3, r2]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d13a      	bne.n	8004fba <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2225      	movs	r2, #37	; 0x25
 8004f48:	2102      	movs	r1, #2
 8004f4a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	438a      	bics	r2, r1
 8004f60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f8e3 	bl	8005134 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d008      	beq.n	8004f88 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	210e      	movs	r1, #14
 8004f82:	430a      	orrs	r2, r1
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	e00f      	b.n	8004fa8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2104      	movs	r1, #4
 8004f94:	438a      	bics	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	210a      	movs	r1, #10
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	e007      	b.n	8004fca <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2224      	movs	r2, #36	; 0x24
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004fc2:	2317      	movs	r3, #23
 8004fc4:	18fb      	adds	r3, r7, r3
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8004fca:	2317      	movs	r3, #23
 8004fcc:	18fb      	adds	r3, r7, r3
 8004fce:	781b      	ldrb	r3, [r3, #0]
}
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	b006      	add	sp, #24
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff4:	221c      	movs	r2, #28
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	0013      	movs	r3, r2
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4013      	ands	r3, r2
 8005002:	d026      	beq.n	8005052 <HAL_DMA_IRQHandler+0x7a>
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2204      	movs	r2, #4
 8005008:	4013      	ands	r3, r2
 800500a:	d022      	beq.n	8005052 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2220      	movs	r2, #32
 8005014:	4013      	ands	r3, r2
 8005016:	d107      	bne.n	8005028 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2104      	movs	r1, #4
 8005024:	438a      	bics	r2, r1
 8005026:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502c:	221c      	movs	r2, #28
 800502e:	401a      	ands	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	2104      	movs	r1, #4
 8005036:	4091      	lsls	r1, r2
 8005038:	000a      	movs	r2, r1
 800503a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	2b00      	cmp	r3, #0
 8005042:	d100      	bne.n	8005046 <HAL_DMA_IRQHandler+0x6e>
 8005044:	e071      	b.n	800512a <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	0010      	movs	r0, r2
 800504e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8005050:	e06b      	b.n	800512a <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005056:	221c      	movs	r2, #28
 8005058:	4013      	ands	r3, r2
 800505a:	2202      	movs	r2, #2
 800505c:	409a      	lsls	r2, r3
 800505e:	0013      	movs	r3, r2
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4013      	ands	r3, r2
 8005064:	d02d      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xea>
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2202      	movs	r2, #2
 800506a:	4013      	ands	r3, r2
 800506c:	d029      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2220      	movs	r2, #32
 8005076:	4013      	ands	r3, r2
 8005078:	d10b      	bne.n	8005092 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	210a      	movs	r1, #10
 8005086:	438a      	bics	r2, r1
 8005088:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2225      	movs	r2, #37	; 0x25
 800508e:	2101      	movs	r1, #1
 8005090:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005096:	221c      	movs	r2, #28
 8005098:	401a      	ands	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	2102      	movs	r1, #2
 80050a0:	4091      	lsls	r1, r2
 80050a2:	000a      	movs	r2, r1
 80050a4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2224      	movs	r2, #36	; 0x24
 80050aa:	2100      	movs	r1, #0
 80050ac:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d039      	beq.n	800512a <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	0010      	movs	r0, r2
 80050be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80050c0:	e033      	b.n	800512a <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c6:	221c      	movs	r2, #28
 80050c8:	4013      	ands	r3, r2
 80050ca:	2208      	movs	r2, #8
 80050cc:	409a      	lsls	r2, r3
 80050ce:	0013      	movs	r3, r2
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4013      	ands	r3, r2
 80050d4:	d02a      	beq.n	800512c <HAL_DMA_IRQHandler+0x154>
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2208      	movs	r2, #8
 80050da:	4013      	ands	r3, r2
 80050dc:	d026      	beq.n	800512c <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	210e      	movs	r1, #14
 80050ea:	438a      	bics	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f2:	221c      	movs	r2, #28
 80050f4:	401a      	ands	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	2101      	movs	r1, #1
 80050fc:	4091      	lsls	r1, r2
 80050fe:	000a      	movs	r2, r1
 8005100:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2225      	movs	r2, #37	; 0x25
 800510c:	2101      	movs	r1, #1
 800510e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2224      	movs	r2, #36	; 0x24
 8005114:	2100      	movs	r1, #0
 8005116:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	0010      	movs	r0, r2
 8005128:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	46c0      	nop			; (mov r8, r8)
}
 800512e:	46bd      	mov	sp, r7
 8005130:	b004      	add	sp, #16
 8005132:	bd80      	pop	{r7, pc}

08005134 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005146:	221c      	movs	r2, #28
 8005148:	401a      	ands	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	2101      	movs	r1, #1
 8005150:	4091      	lsls	r1, r2
 8005152:	000a      	movs	r2, r1
 8005154:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b10      	cmp	r3, #16
 8005164:	d108      	bne.n	8005178 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005176:	e007      	b.n	8005188 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	60da      	str	r2, [r3, #12]
}
 8005188:	46c0      	nop			; (mov r8, r8)
 800518a:	46bd      	mov	sp, r7
 800518c:	b004      	add	sp, #16
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800519a:	2300      	movs	r3, #0
 800519c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80051a6:	e149      	b.n	800543c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2101      	movs	r1, #1
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4091      	lsls	r1, r2
 80051b2:	000a      	movs	r2, r1
 80051b4:	4013      	ands	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d100      	bne.n	80051c0 <HAL_GPIO_Init+0x30>
 80051be:	e13a      	b.n	8005436 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2203      	movs	r2, #3
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d005      	beq.n	80051d8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2203      	movs	r2, #3
 80051d2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d130      	bne.n	800523a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	2203      	movs	r2, #3
 80051e4:	409a      	lsls	r2, r3
 80051e6:	0013      	movs	r3, r2
 80051e8:	43da      	mvns	r2, r3
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4013      	ands	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	409a      	lsls	r2, r3
 80051fa:	0013      	movs	r3, r2
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	4313      	orrs	r3, r2
 8005200:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800520e:	2201      	movs	r2, #1
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	409a      	lsls	r2, r3
 8005214:	0013      	movs	r3, r2
 8005216:	43da      	mvns	r2, r3
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	4013      	ands	r3, r2
 800521c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	091b      	lsrs	r3, r3, #4
 8005224:	2201      	movs	r2, #1
 8005226:	401a      	ands	r2, r3
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	409a      	lsls	r2, r3
 800522c:	0013      	movs	r3, r2
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2203      	movs	r2, #3
 8005240:	4013      	ands	r3, r2
 8005242:	2b03      	cmp	r3, #3
 8005244:	d017      	beq.n	8005276 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	2203      	movs	r2, #3
 8005252:	409a      	lsls	r2, r3
 8005254:	0013      	movs	r3, r2
 8005256:	43da      	mvns	r2, r3
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4013      	ands	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	409a      	lsls	r2, r3
 8005268:	0013      	movs	r3, r2
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2203      	movs	r2, #3
 800527c:	4013      	ands	r3, r2
 800527e:	2b02      	cmp	r3, #2
 8005280:	d123      	bne.n	80052ca <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	08da      	lsrs	r2, r3, #3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3208      	adds	r2, #8
 800528a:	0092      	lsls	r2, r2, #2
 800528c:	58d3      	ldr	r3, [r2, r3]
 800528e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2207      	movs	r2, #7
 8005294:	4013      	ands	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	220f      	movs	r2, #15
 800529a:	409a      	lsls	r2, r3
 800529c:	0013      	movs	r3, r2
 800529e:	43da      	mvns	r2, r3
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	4013      	ands	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2107      	movs	r1, #7
 80052ae:	400b      	ands	r3, r1
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	409a      	lsls	r2, r3
 80052b4:	0013      	movs	r3, r2
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	08da      	lsrs	r2, r3, #3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3208      	adds	r2, #8
 80052c4:	0092      	lsls	r2, r2, #2
 80052c6:	6939      	ldr	r1, [r7, #16]
 80052c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	2203      	movs	r2, #3
 80052d6:	409a      	lsls	r2, r3
 80052d8:	0013      	movs	r3, r2
 80052da:	43da      	mvns	r2, r3
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	4013      	ands	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2203      	movs	r2, #3
 80052e8:	401a      	ands	r2, r3
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	409a      	lsls	r2, r3
 80052f0:	0013      	movs	r3, r2
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	23c0      	movs	r3, #192	; 0xc0
 8005304:	029b      	lsls	r3, r3, #10
 8005306:	4013      	ands	r3, r2
 8005308:	d100      	bne.n	800530c <HAL_GPIO_Init+0x17c>
 800530a:	e094      	b.n	8005436 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800530c:	4b51      	ldr	r3, [pc, #324]	; (8005454 <HAL_GPIO_Init+0x2c4>)
 800530e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005310:	4b50      	ldr	r3, [pc, #320]	; (8005454 <HAL_GPIO_Init+0x2c4>)
 8005312:	2101      	movs	r1, #1
 8005314:	430a      	orrs	r2, r1
 8005316:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8005318:	4a4f      	ldr	r2, [pc, #316]	; (8005458 <HAL_GPIO_Init+0x2c8>)
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	089b      	lsrs	r3, r3, #2
 800531e:	3302      	adds	r3, #2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	589b      	ldr	r3, [r3, r2]
 8005324:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2203      	movs	r2, #3
 800532a:	4013      	ands	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	220f      	movs	r2, #15
 8005330:	409a      	lsls	r2, r3
 8005332:	0013      	movs	r3, r2
 8005334:	43da      	mvns	r2, r3
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4013      	ands	r3, r2
 800533a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	23a0      	movs	r3, #160	; 0xa0
 8005340:	05db      	lsls	r3, r3, #23
 8005342:	429a      	cmp	r2, r3
 8005344:	d013      	beq.n	800536e <HAL_GPIO_Init+0x1de>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a44      	ldr	r2, [pc, #272]	; (800545c <HAL_GPIO_Init+0x2cc>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00d      	beq.n	800536a <HAL_GPIO_Init+0x1da>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a43      	ldr	r2, [pc, #268]	; (8005460 <HAL_GPIO_Init+0x2d0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d007      	beq.n	8005366 <HAL_GPIO_Init+0x1d6>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a42      	ldr	r2, [pc, #264]	; (8005464 <HAL_GPIO_Init+0x2d4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d101      	bne.n	8005362 <HAL_GPIO_Init+0x1d2>
 800535e:	2305      	movs	r3, #5
 8005360:	e006      	b.n	8005370 <HAL_GPIO_Init+0x1e0>
 8005362:	2306      	movs	r3, #6
 8005364:	e004      	b.n	8005370 <HAL_GPIO_Init+0x1e0>
 8005366:	2302      	movs	r3, #2
 8005368:	e002      	b.n	8005370 <HAL_GPIO_Init+0x1e0>
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <HAL_GPIO_Init+0x1e0>
 800536e:	2300      	movs	r3, #0
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	2103      	movs	r1, #3
 8005374:	400a      	ands	r2, r1
 8005376:	0092      	lsls	r2, r2, #2
 8005378:	4093      	lsls	r3, r2
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005380:	4935      	ldr	r1, [pc, #212]	; (8005458 <HAL_GPIO_Init+0x2c8>)
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	089b      	lsrs	r3, r3, #2
 8005386:	3302      	adds	r3, #2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800538e:	4b36      	ldr	r3, [pc, #216]	; (8005468 <HAL_GPIO_Init+0x2d8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	43da      	mvns	r2, r3
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	4013      	ands	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	025b      	lsls	r3, r3, #9
 80053a6:	4013      	ands	r3, r2
 80053a8:	d003      	beq.n	80053b2 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80053b2:	4b2d      	ldr	r3, [pc, #180]	; (8005468 <HAL_GPIO_Init+0x2d8>)
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80053b8:	4b2b      	ldr	r3, [pc, #172]	; (8005468 <HAL_GPIO_Init+0x2d8>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	43da      	mvns	r2, r3
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	4013      	ands	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	2380      	movs	r3, #128	; 0x80
 80053ce:	029b      	lsls	r3, r3, #10
 80053d0:	4013      	ands	r3, r2
 80053d2:	d003      	beq.n	80053dc <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80053dc:	4b22      	ldr	r3, [pc, #136]	; (8005468 <HAL_GPIO_Init+0x2d8>)
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053e2:	4b21      	ldr	r3, [pc, #132]	; (8005468 <HAL_GPIO_Init+0x2d8>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	43da      	mvns	r2, r3
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	4013      	ands	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	2380      	movs	r3, #128	; 0x80
 80053f8:	035b      	lsls	r3, r3, #13
 80053fa:	4013      	ands	r3, r2
 80053fc:	d003      	beq.n	8005406 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005406:	4b18      	ldr	r3, [pc, #96]	; (8005468 <HAL_GPIO_Init+0x2d8>)
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800540c:	4b16      	ldr	r3, [pc, #88]	; (8005468 <HAL_GPIO_Init+0x2d8>)
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	43da      	mvns	r2, r3
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	4013      	ands	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	2380      	movs	r3, #128	; 0x80
 8005422:	039b      	lsls	r3, r3, #14
 8005424:	4013      	ands	r3, r2
 8005426:	d003      	beq.n	8005430 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005430:	4b0d      	ldr	r3, [pc, #52]	; (8005468 <HAL_GPIO_Init+0x2d8>)
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	3301      	adds	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	40da      	lsrs	r2, r3
 8005444:	1e13      	subs	r3, r2, #0
 8005446:	d000      	beq.n	800544a <HAL_GPIO_Init+0x2ba>
 8005448:	e6ae      	b.n	80051a8 <HAL_GPIO_Init+0x18>
  }
}
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	46c0      	nop			; (mov r8, r8)
 800544e:	46bd      	mov	sp, r7
 8005450:	b006      	add	sp, #24
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40021000 	.word	0x40021000
 8005458:	40010000 	.word	0x40010000
 800545c:	50000400 	.word	0x50000400
 8005460:	50000800 	.word	0x50000800
 8005464:	50001c00 	.word	0x50001c00
 8005468:	40010400 	.word	0x40010400

0800546c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	0008      	movs	r0, r1
 8005476:	0011      	movs	r1, r2
 8005478:	1cbb      	adds	r3, r7, #2
 800547a:	1c02      	adds	r2, r0, #0
 800547c:	801a      	strh	r2, [r3, #0]
 800547e:	1c7b      	adds	r3, r7, #1
 8005480:	1c0a      	adds	r2, r1, #0
 8005482:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005484:	1c7b      	adds	r3, r7, #1
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d004      	beq.n	8005496 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800548c:	1cbb      	adds	r3, r7, #2
 800548e:	881a      	ldrh	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005494:	e003      	b.n	800549e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005496:	1cbb      	adds	r3, r7, #2
 8005498:	881a      	ldrh	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b002      	add	sp, #8
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054a8:	b5b0      	push	{r4, r5, r7, lr}
 80054aa:	b08a      	sub	sp, #40	; 0x28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d102      	bne.n	80054bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	f000 fb6c 	bl	8005b94 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054bc:	4bc8      	ldr	r3, [pc, #800]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	220c      	movs	r2, #12
 80054c2:	4013      	ands	r3, r2
 80054c4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054c6:	4bc6      	ldr	r3, [pc, #792]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	2380      	movs	r3, #128	; 0x80
 80054cc:	025b      	lsls	r3, r3, #9
 80054ce:	4013      	ands	r3, r2
 80054d0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2201      	movs	r2, #1
 80054d8:	4013      	ands	r3, r2
 80054da:	d100      	bne.n	80054de <HAL_RCC_OscConfig+0x36>
 80054dc:	e07d      	b.n	80055da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d007      	beq.n	80054f4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	2b0c      	cmp	r3, #12
 80054e8:	d112      	bne.n	8005510 <HAL_RCC_OscConfig+0x68>
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	2380      	movs	r3, #128	; 0x80
 80054ee:	025b      	lsls	r3, r3, #9
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d10d      	bne.n	8005510 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f4:	4bba      	ldr	r3, [pc, #744]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	2380      	movs	r3, #128	; 0x80
 80054fa:	029b      	lsls	r3, r3, #10
 80054fc:	4013      	ands	r3, r2
 80054fe:	d100      	bne.n	8005502 <HAL_RCC_OscConfig+0x5a>
 8005500:	e06a      	b.n	80055d8 <HAL_RCC_OscConfig+0x130>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d166      	bne.n	80055d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	f000 fb42 	bl	8005b94 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	2380      	movs	r3, #128	; 0x80
 8005516:	025b      	lsls	r3, r3, #9
 8005518:	429a      	cmp	r2, r3
 800551a:	d107      	bne.n	800552c <HAL_RCC_OscConfig+0x84>
 800551c:	4bb0      	ldr	r3, [pc, #704]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	4baf      	ldr	r3, [pc, #700]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 8005522:	2180      	movs	r1, #128	; 0x80
 8005524:	0249      	lsls	r1, r1, #9
 8005526:	430a      	orrs	r2, r1
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	e027      	b.n	800557c <HAL_RCC_OscConfig+0xd4>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	23a0      	movs	r3, #160	; 0xa0
 8005532:	02db      	lsls	r3, r3, #11
 8005534:	429a      	cmp	r2, r3
 8005536:	d10e      	bne.n	8005556 <HAL_RCC_OscConfig+0xae>
 8005538:	4ba9      	ldr	r3, [pc, #676]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	4ba8      	ldr	r3, [pc, #672]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 800553e:	2180      	movs	r1, #128	; 0x80
 8005540:	02c9      	lsls	r1, r1, #11
 8005542:	430a      	orrs	r2, r1
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	4ba6      	ldr	r3, [pc, #664]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4ba5      	ldr	r3, [pc, #660]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 800554c:	2180      	movs	r1, #128	; 0x80
 800554e:	0249      	lsls	r1, r1, #9
 8005550:	430a      	orrs	r2, r1
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	e012      	b.n	800557c <HAL_RCC_OscConfig+0xd4>
 8005556:	4ba2      	ldr	r3, [pc, #648]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4ba1      	ldr	r3, [pc, #644]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 800555c:	49a1      	ldr	r1, [pc, #644]	; (80057e4 <HAL_RCC_OscConfig+0x33c>)
 800555e:	400a      	ands	r2, r1
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	4b9f      	ldr	r3, [pc, #636]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	2380      	movs	r3, #128	; 0x80
 8005568:	025b      	lsls	r3, r3, #9
 800556a:	4013      	ands	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4b9b      	ldr	r3, [pc, #620]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	4b9a      	ldr	r3, [pc, #616]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 8005576:	499c      	ldr	r1, [pc, #624]	; (80057e8 <HAL_RCC_OscConfig+0x340>)
 8005578:	400a      	ands	r2, r1
 800557a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d014      	beq.n	80055ae <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005584:	f7fe ff00 	bl	8004388 <HAL_GetTick>
 8005588:	0003      	movs	r3, r0
 800558a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800558e:	f7fe fefb 	bl	8004388 <HAL_GetTick>
 8005592:	0002      	movs	r2, r0
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b64      	cmp	r3, #100	; 0x64
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e2f9      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055a0:	4b8f      	ldr	r3, [pc, #572]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	2380      	movs	r3, #128	; 0x80
 80055a6:	029b      	lsls	r3, r3, #10
 80055a8:	4013      	ands	r3, r2
 80055aa:	d0f0      	beq.n	800558e <HAL_RCC_OscConfig+0xe6>
 80055ac:	e015      	b.n	80055da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ae:	f7fe feeb 	bl	8004388 <HAL_GetTick>
 80055b2:	0003      	movs	r3, r0
 80055b4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055b8:	f7fe fee6 	bl	8004388 <HAL_GetTick>
 80055bc:	0002      	movs	r2, r0
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b64      	cmp	r3, #100	; 0x64
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e2e4      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055ca:	4b85      	ldr	r3, [pc, #532]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	2380      	movs	r3, #128	; 0x80
 80055d0:	029b      	lsls	r3, r3, #10
 80055d2:	4013      	ands	r3, r2
 80055d4:	d1f0      	bne.n	80055b8 <HAL_RCC_OscConfig+0x110>
 80055d6:	e000      	b.n	80055da <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2202      	movs	r2, #2
 80055e0:	4013      	ands	r3, r2
 80055e2:	d100      	bne.n	80055e6 <HAL_RCC_OscConfig+0x13e>
 80055e4:	e099      	b.n	800571a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	2220      	movs	r2, #32
 80055f0:	4013      	ands	r3, r2
 80055f2:	d009      	beq.n	8005608 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80055f4:	4b7a      	ldr	r3, [pc, #488]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4b79      	ldr	r3, [pc, #484]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 80055fa:	2120      	movs	r1, #32
 80055fc:	430a      	orrs	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	2220      	movs	r2, #32
 8005604:	4393      	bics	r3, r2
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	2b04      	cmp	r3, #4
 800560c:	d005      	beq.n	800561a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	2b0c      	cmp	r3, #12
 8005612:	d13e      	bne.n	8005692 <HAL_RCC_OscConfig+0x1ea>
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d13b      	bne.n	8005692 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800561a:	4b71      	ldr	r3, [pc, #452]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2204      	movs	r2, #4
 8005620:	4013      	ands	r3, r2
 8005622:	d004      	beq.n	800562e <HAL_RCC_OscConfig+0x186>
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e2b2      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800562e:	4b6c      	ldr	r3, [pc, #432]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	4a6e      	ldr	r2, [pc, #440]	; (80057ec <HAL_RCC_OscConfig+0x344>)
 8005634:	4013      	ands	r3, r2
 8005636:	0019      	movs	r1, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	021a      	lsls	r2, r3, #8
 800563e:	4b68      	ldr	r3, [pc, #416]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 8005640:	430a      	orrs	r2, r1
 8005642:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005644:	4b66      	ldr	r3, [pc, #408]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2209      	movs	r2, #9
 800564a:	4393      	bics	r3, r2
 800564c:	0019      	movs	r1, r3
 800564e:	4b64      	ldr	r3, [pc, #400]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 8005650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005652:	430a      	orrs	r2, r1
 8005654:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005656:	f000 fbeb 	bl	8005e30 <HAL_RCC_GetSysClockFreq>
 800565a:	0001      	movs	r1, r0
 800565c:	4b60      	ldr	r3, [pc, #384]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	091b      	lsrs	r3, r3, #4
 8005662:	220f      	movs	r2, #15
 8005664:	4013      	ands	r3, r2
 8005666:	4a62      	ldr	r2, [pc, #392]	; (80057f0 <HAL_RCC_OscConfig+0x348>)
 8005668:	5cd3      	ldrb	r3, [r2, r3]
 800566a:	000a      	movs	r2, r1
 800566c:	40da      	lsrs	r2, r3
 800566e:	4b61      	ldr	r3, [pc, #388]	; (80057f4 <HAL_RCC_OscConfig+0x34c>)
 8005670:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005672:	4b61      	ldr	r3, [pc, #388]	; (80057f8 <HAL_RCC_OscConfig+0x350>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2513      	movs	r5, #19
 8005678:	197c      	adds	r4, r7, r5
 800567a:	0018      	movs	r0, r3
 800567c:	f7fe fe3e 	bl	80042fc <HAL_InitTick>
 8005680:	0003      	movs	r3, r0
 8005682:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005684:	197b      	adds	r3, r7, r5
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d046      	beq.n	800571a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800568c:	197b      	adds	r3, r7, r5
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	e280      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	2b00      	cmp	r3, #0
 8005696:	d027      	beq.n	80056e8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005698:	4b51      	ldr	r3, [pc, #324]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2209      	movs	r2, #9
 800569e:	4393      	bics	r3, r2
 80056a0:	0019      	movs	r1, r3
 80056a2:	4b4f      	ldr	r3, [pc, #316]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 80056a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a6:	430a      	orrs	r2, r1
 80056a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056aa:	f7fe fe6d 	bl	8004388 <HAL_GetTick>
 80056ae:	0003      	movs	r3, r0
 80056b0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056b4:	f7fe fe68 	bl	8004388 <HAL_GetTick>
 80056b8:	0002      	movs	r2, r0
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e266      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056c6:	4b46      	ldr	r3, [pc, #280]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2204      	movs	r2, #4
 80056cc:	4013      	ands	r3, r2
 80056ce:	d0f1      	beq.n	80056b4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d0:	4b43      	ldr	r3, [pc, #268]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	4a45      	ldr	r2, [pc, #276]	; (80057ec <HAL_RCC_OscConfig+0x344>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	0019      	movs	r1, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	021a      	lsls	r2, r3, #8
 80056e0:	4b3f      	ldr	r3, [pc, #252]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
 80056e6:	e018      	b.n	800571a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056e8:	4b3d      	ldr	r3, [pc, #244]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	4b3c      	ldr	r3, [pc, #240]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 80056ee:	2101      	movs	r1, #1
 80056f0:	438a      	bics	r2, r1
 80056f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f4:	f7fe fe48 	bl	8004388 <HAL_GetTick>
 80056f8:	0003      	movs	r3, r0
 80056fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056fc:	e008      	b.n	8005710 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056fe:	f7fe fe43 	bl	8004388 <HAL_GetTick>
 8005702:	0002      	movs	r2, r0
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d901      	bls.n	8005710 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e241      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005710:	4b33      	ldr	r3, [pc, #204]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2204      	movs	r2, #4
 8005716:	4013      	ands	r3, r2
 8005718:	d1f1      	bne.n	80056fe <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2210      	movs	r2, #16
 8005720:	4013      	ands	r3, r2
 8005722:	d100      	bne.n	8005726 <HAL_RCC_OscConfig+0x27e>
 8005724:	e0a1      	b.n	800586a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d140      	bne.n	80057ae <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800572c:	4b2c      	ldr	r3, [pc, #176]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	2380      	movs	r3, #128	; 0x80
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4013      	ands	r3, r2
 8005736:	d005      	beq.n	8005744 <HAL_RCC_OscConfig+0x29c>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e227      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005744:	4b26      	ldr	r3, [pc, #152]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	4a2c      	ldr	r2, [pc, #176]	; (80057fc <HAL_RCC_OscConfig+0x354>)
 800574a:	4013      	ands	r3, r2
 800574c:	0019      	movs	r1, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1a      	ldr	r2, [r3, #32]
 8005752:	4b23      	ldr	r3, [pc, #140]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 8005754:	430a      	orrs	r2, r1
 8005756:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005758:	4b21      	ldr	r3, [pc, #132]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	021b      	lsls	r3, r3, #8
 800575e:	0a19      	lsrs	r1, r3, #8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	061a      	lsls	r2, r3, #24
 8005766:	4b1e      	ldr	r3, [pc, #120]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 8005768:	430a      	orrs	r2, r1
 800576a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	0b5b      	lsrs	r3, r3, #13
 8005772:	3301      	adds	r3, #1
 8005774:	2280      	movs	r2, #128	; 0x80
 8005776:	0212      	lsls	r2, r2, #8
 8005778:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800577a:	4b19      	ldr	r3, [pc, #100]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	091b      	lsrs	r3, r3, #4
 8005780:	210f      	movs	r1, #15
 8005782:	400b      	ands	r3, r1
 8005784:	491a      	ldr	r1, [pc, #104]	; (80057f0 <HAL_RCC_OscConfig+0x348>)
 8005786:	5ccb      	ldrb	r3, [r1, r3]
 8005788:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800578a:	4b1a      	ldr	r3, [pc, #104]	; (80057f4 <HAL_RCC_OscConfig+0x34c>)
 800578c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800578e:	4b1a      	ldr	r3, [pc, #104]	; (80057f8 <HAL_RCC_OscConfig+0x350>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2513      	movs	r5, #19
 8005794:	197c      	adds	r4, r7, r5
 8005796:	0018      	movs	r0, r3
 8005798:	f7fe fdb0 	bl	80042fc <HAL_InitTick>
 800579c:	0003      	movs	r3, r0
 800579e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80057a0:	197b      	adds	r3, r7, r5
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d060      	beq.n	800586a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80057a8:	197b      	adds	r3, r7, r5
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	e1f2      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d03f      	beq.n	8005836 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80057b6:	4b0a      	ldr	r3, [pc, #40]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b09      	ldr	r3, [pc, #36]	; (80057e0 <HAL_RCC_OscConfig+0x338>)
 80057bc:	2180      	movs	r1, #128	; 0x80
 80057be:	0049      	lsls	r1, r1, #1
 80057c0:	430a      	orrs	r2, r1
 80057c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c4:	f7fe fde0 	bl	8004388 <HAL_GetTick>
 80057c8:	0003      	movs	r3, r0
 80057ca:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80057cc:	e018      	b.n	8005800 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057ce:	f7fe fddb 	bl	8004388 <HAL_GetTick>
 80057d2:	0002      	movs	r2, r0
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d911      	bls.n	8005800 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e1d9      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
 80057e0:	40021000 	.word	0x40021000
 80057e4:	fffeffff 	.word	0xfffeffff
 80057e8:	fffbffff 	.word	0xfffbffff
 80057ec:	ffffe0ff 	.word	0xffffe0ff
 80057f0:	08007ca4 	.word	0x08007ca4
 80057f4:	20000004 	.word	0x20000004
 80057f8:	20000008 	.word	0x20000008
 80057fc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005800:	4bc9      	ldr	r3, [pc, #804]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	2380      	movs	r3, #128	; 0x80
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4013      	ands	r3, r2
 800580a:	d0e0      	beq.n	80057ce <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800580c:	4bc6      	ldr	r3, [pc, #792]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	4ac6      	ldr	r2, [pc, #792]	; (8005b2c <HAL_RCC_OscConfig+0x684>)
 8005812:	4013      	ands	r3, r2
 8005814:	0019      	movs	r1, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1a      	ldr	r2, [r3, #32]
 800581a:	4bc3      	ldr	r3, [pc, #780]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 800581c:	430a      	orrs	r2, r1
 800581e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005820:	4bc1      	ldr	r3, [pc, #772]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	021b      	lsls	r3, r3, #8
 8005826:	0a19      	lsrs	r1, r3, #8
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	061a      	lsls	r2, r3, #24
 800582e:	4bbe      	ldr	r3, [pc, #760]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005830:	430a      	orrs	r2, r1
 8005832:	605a      	str	r2, [r3, #4]
 8005834:	e019      	b.n	800586a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005836:	4bbc      	ldr	r3, [pc, #752]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4bbb      	ldr	r3, [pc, #748]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 800583c:	49bc      	ldr	r1, [pc, #752]	; (8005b30 <HAL_RCC_OscConfig+0x688>)
 800583e:	400a      	ands	r2, r1
 8005840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005842:	f7fe fda1 	bl	8004388 <HAL_GetTick>
 8005846:	0003      	movs	r3, r0
 8005848:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800584c:	f7fe fd9c 	bl	8004388 <HAL_GetTick>
 8005850:	0002      	movs	r2, r0
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e19a      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800585e:	4bb2      	ldr	r3, [pc, #712]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	2380      	movs	r3, #128	; 0x80
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4013      	ands	r3, r2
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2208      	movs	r2, #8
 8005870:	4013      	ands	r3, r2
 8005872:	d036      	beq.n	80058e2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d019      	beq.n	80058b0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800587c:	4baa      	ldr	r3, [pc, #680]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 800587e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005880:	4ba9      	ldr	r3, [pc, #676]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005882:	2101      	movs	r1, #1
 8005884:	430a      	orrs	r2, r1
 8005886:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005888:	f7fe fd7e 	bl	8004388 <HAL_GetTick>
 800588c:	0003      	movs	r3, r0
 800588e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005890:	e008      	b.n	80058a4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005892:	f7fe fd79 	bl	8004388 <HAL_GetTick>
 8005896:	0002      	movs	r2, r0
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e177      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058a4:	4ba0      	ldr	r3, [pc, #640]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 80058a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a8:	2202      	movs	r2, #2
 80058aa:	4013      	ands	r3, r2
 80058ac:	d0f1      	beq.n	8005892 <HAL_RCC_OscConfig+0x3ea>
 80058ae:	e018      	b.n	80058e2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058b0:	4b9d      	ldr	r3, [pc, #628]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 80058b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058b4:	4b9c      	ldr	r3, [pc, #624]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 80058b6:	2101      	movs	r1, #1
 80058b8:	438a      	bics	r2, r1
 80058ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058bc:	f7fe fd64 	bl	8004388 <HAL_GetTick>
 80058c0:	0003      	movs	r3, r0
 80058c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058c4:	e008      	b.n	80058d8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058c6:	f7fe fd5f 	bl	8004388 <HAL_GetTick>
 80058ca:	0002      	movs	r2, r0
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e15d      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058d8:	4b93      	ldr	r3, [pc, #588]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 80058da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058dc:	2202      	movs	r2, #2
 80058de:	4013      	ands	r3, r2
 80058e0:	d1f1      	bne.n	80058c6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2204      	movs	r2, #4
 80058e8:	4013      	ands	r3, r2
 80058ea:	d100      	bne.n	80058ee <HAL_RCC_OscConfig+0x446>
 80058ec:	e0ae      	b.n	8005a4c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ee:	2023      	movs	r0, #35	; 0x23
 80058f0:	183b      	adds	r3, r7, r0
 80058f2:	2200      	movs	r2, #0
 80058f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058f6:	4b8c      	ldr	r3, [pc, #560]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 80058f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058fa:	2380      	movs	r3, #128	; 0x80
 80058fc:	055b      	lsls	r3, r3, #21
 80058fe:	4013      	ands	r3, r2
 8005900:	d109      	bne.n	8005916 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005902:	4b89      	ldr	r3, [pc, #548]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005906:	4b88      	ldr	r3, [pc, #544]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005908:	2180      	movs	r1, #128	; 0x80
 800590a:	0549      	lsls	r1, r1, #21
 800590c:	430a      	orrs	r2, r1
 800590e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005910:	183b      	adds	r3, r7, r0
 8005912:	2201      	movs	r2, #1
 8005914:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005916:	4b87      	ldr	r3, [pc, #540]	; (8005b34 <HAL_RCC_OscConfig+0x68c>)
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	2380      	movs	r3, #128	; 0x80
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	4013      	ands	r3, r2
 8005920:	d11a      	bne.n	8005958 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005922:	4b84      	ldr	r3, [pc, #528]	; (8005b34 <HAL_RCC_OscConfig+0x68c>)
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4b83      	ldr	r3, [pc, #524]	; (8005b34 <HAL_RCC_OscConfig+0x68c>)
 8005928:	2180      	movs	r1, #128	; 0x80
 800592a:	0049      	lsls	r1, r1, #1
 800592c:	430a      	orrs	r2, r1
 800592e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005930:	f7fe fd2a 	bl	8004388 <HAL_GetTick>
 8005934:	0003      	movs	r3, r0
 8005936:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800593a:	f7fe fd25 	bl	8004388 <HAL_GetTick>
 800593e:	0002      	movs	r2, r0
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b64      	cmp	r3, #100	; 0x64
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e123      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800594c:	4b79      	ldr	r3, [pc, #484]	; (8005b34 <HAL_RCC_OscConfig+0x68c>)
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	2380      	movs	r3, #128	; 0x80
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	4013      	ands	r3, r2
 8005956:	d0f0      	beq.n	800593a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	2380      	movs	r3, #128	; 0x80
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	429a      	cmp	r2, r3
 8005962:	d107      	bne.n	8005974 <HAL_RCC_OscConfig+0x4cc>
 8005964:	4b70      	ldr	r3, [pc, #448]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005966:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005968:	4b6f      	ldr	r3, [pc, #444]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 800596a:	2180      	movs	r1, #128	; 0x80
 800596c:	0049      	lsls	r1, r1, #1
 800596e:	430a      	orrs	r2, r1
 8005970:	651a      	str	r2, [r3, #80]	; 0x50
 8005972:	e031      	b.n	80059d8 <HAL_RCC_OscConfig+0x530>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10c      	bne.n	8005996 <HAL_RCC_OscConfig+0x4ee>
 800597c:	4b6a      	ldr	r3, [pc, #424]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 800597e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005980:	4b69      	ldr	r3, [pc, #420]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005982:	496b      	ldr	r1, [pc, #428]	; (8005b30 <HAL_RCC_OscConfig+0x688>)
 8005984:	400a      	ands	r2, r1
 8005986:	651a      	str	r2, [r3, #80]	; 0x50
 8005988:	4b67      	ldr	r3, [pc, #412]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 800598a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800598c:	4b66      	ldr	r3, [pc, #408]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 800598e:	496a      	ldr	r1, [pc, #424]	; (8005b38 <HAL_RCC_OscConfig+0x690>)
 8005990:	400a      	ands	r2, r1
 8005992:	651a      	str	r2, [r3, #80]	; 0x50
 8005994:	e020      	b.n	80059d8 <HAL_RCC_OscConfig+0x530>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	23a0      	movs	r3, #160	; 0xa0
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	429a      	cmp	r2, r3
 80059a0:	d10e      	bne.n	80059c0 <HAL_RCC_OscConfig+0x518>
 80059a2:	4b61      	ldr	r3, [pc, #388]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 80059a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059a6:	4b60      	ldr	r3, [pc, #384]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 80059a8:	2180      	movs	r1, #128	; 0x80
 80059aa:	00c9      	lsls	r1, r1, #3
 80059ac:	430a      	orrs	r2, r1
 80059ae:	651a      	str	r2, [r3, #80]	; 0x50
 80059b0:	4b5d      	ldr	r3, [pc, #372]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 80059b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059b4:	4b5c      	ldr	r3, [pc, #368]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 80059b6:	2180      	movs	r1, #128	; 0x80
 80059b8:	0049      	lsls	r1, r1, #1
 80059ba:	430a      	orrs	r2, r1
 80059bc:	651a      	str	r2, [r3, #80]	; 0x50
 80059be:	e00b      	b.n	80059d8 <HAL_RCC_OscConfig+0x530>
 80059c0:	4b59      	ldr	r3, [pc, #356]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 80059c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059c4:	4b58      	ldr	r3, [pc, #352]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 80059c6:	495a      	ldr	r1, [pc, #360]	; (8005b30 <HAL_RCC_OscConfig+0x688>)
 80059c8:	400a      	ands	r2, r1
 80059ca:	651a      	str	r2, [r3, #80]	; 0x50
 80059cc:	4b56      	ldr	r3, [pc, #344]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 80059ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059d0:	4b55      	ldr	r3, [pc, #340]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 80059d2:	4959      	ldr	r1, [pc, #356]	; (8005b38 <HAL_RCC_OscConfig+0x690>)
 80059d4:	400a      	ands	r2, r1
 80059d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d015      	beq.n	8005a0c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059e0:	f7fe fcd2 	bl	8004388 <HAL_GetTick>
 80059e4:	0003      	movs	r3, r0
 80059e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059e8:	e009      	b.n	80059fe <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ea:	f7fe fccd 	bl	8004388 <HAL_GetTick>
 80059ee:	0002      	movs	r2, r0
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	4a51      	ldr	r2, [pc, #324]	; (8005b3c <HAL_RCC_OscConfig+0x694>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e0ca      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059fe:	4b4a      	ldr	r3, [pc, #296]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005a00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a02:	2380      	movs	r3, #128	; 0x80
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4013      	ands	r3, r2
 8005a08:	d0ef      	beq.n	80059ea <HAL_RCC_OscConfig+0x542>
 8005a0a:	e014      	b.n	8005a36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a0c:	f7fe fcbc 	bl	8004388 <HAL_GetTick>
 8005a10:	0003      	movs	r3, r0
 8005a12:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a14:	e009      	b.n	8005a2a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a16:	f7fe fcb7 	bl	8004388 <HAL_GetTick>
 8005a1a:	0002      	movs	r2, r0
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	4a46      	ldr	r2, [pc, #280]	; (8005b3c <HAL_RCC_OscConfig+0x694>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e0b4      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a2a:	4b3f      	ldr	r3, [pc, #252]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005a2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a2e:	2380      	movs	r3, #128	; 0x80
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4013      	ands	r3, r2
 8005a34:	d1ef      	bne.n	8005a16 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a36:	2323      	movs	r3, #35	; 0x23
 8005a38:	18fb      	adds	r3, r7, r3
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d105      	bne.n	8005a4c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a40:	4b39      	ldr	r3, [pc, #228]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a44:	4b38      	ldr	r3, [pc, #224]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005a46:	493e      	ldr	r1, [pc, #248]	; (8005b40 <HAL_RCC_OscConfig+0x698>)
 8005a48:	400a      	ands	r2, r1
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d100      	bne.n	8005a56 <HAL_RCC_OscConfig+0x5ae>
 8005a54:	e09d      	b.n	8005b92 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	2b0c      	cmp	r3, #12
 8005a5a:	d100      	bne.n	8005a5e <HAL_RCC_OscConfig+0x5b6>
 8005a5c:	e076      	b.n	8005b4c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d145      	bne.n	8005af2 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a66:	4b30      	ldr	r3, [pc, #192]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b2f      	ldr	r3, [pc, #188]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005a6c:	4935      	ldr	r1, [pc, #212]	; (8005b44 <HAL_RCC_OscConfig+0x69c>)
 8005a6e:	400a      	ands	r2, r1
 8005a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a72:	f7fe fc89 	bl	8004388 <HAL_GetTick>
 8005a76:	0003      	movs	r3, r0
 8005a78:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a7c:	f7fe fc84 	bl	8004388 <HAL_GetTick>
 8005a80:	0002      	movs	r2, r0
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e082      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a8e:	4b26      	ldr	r3, [pc, #152]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	2380      	movs	r3, #128	; 0x80
 8005a94:	049b      	lsls	r3, r3, #18
 8005a96:	4013      	ands	r3, r2
 8005a98:	d1f0      	bne.n	8005a7c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a9a:	4b23      	ldr	r3, [pc, #140]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	4a2a      	ldr	r2, [pc, #168]	; (8005b48 <HAL_RCC_OscConfig+0x6a0>)
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	0019      	movs	r1, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	431a      	orrs	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	4b1c      	ldr	r3, [pc, #112]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aba:	4b1b      	ldr	r3, [pc, #108]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	4b1a      	ldr	r3, [pc, #104]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005ac0:	2180      	movs	r1, #128	; 0x80
 8005ac2:	0449      	lsls	r1, r1, #17
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac8:	f7fe fc5e 	bl	8004388 <HAL_GetTick>
 8005acc:	0003      	movs	r3, r0
 8005ace:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005ad0:	e008      	b.n	8005ae4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad2:	f7fe fc59 	bl	8004388 <HAL_GetTick>
 8005ad6:	0002      	movs	r2, r0
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e057      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005ae4:	4b10      	ldr	r3, [pc, #64]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	2380      	movs	r3, #128	; 0x80
 8005aea:	049b      	lsls	r3, r3, #18
 8005aec:	4013      	ands	r3, r2
 8005aee:	d0f0      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x62a>
 8005af0:	e04f      	b.n	8005b92 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af2:	4b0d      	ldr	r3, [pc, #52]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4b0c      	ldr	r3, [pc, #48]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005af8:	4912      	ldr	r1, [pc, #72]	; (8005b44 <HAL_RCC_OscConfig+0x69c>)
 8005afa:	400a      	ands	r2, r1
 8005afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afe:	f7fe fc43 	bl	8004388 <HAL_GetTick>
 8005b02:	0003      	movs	r3, r0
 8005b04:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b08:	f7fe fc3e 	bl	8004388 <HAL_GetTick>
 8005b0c:	0002      	movs	r2, r0
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e03c      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005b1a:	4b03      	ldr	r3, [pc, #12]	; (8005b28 <HAL_RCC_OscConfig+0x680>)
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	2380      	movs	r3, #128	; 0x80
 8005b20:	049b      	lsls	r3, r3, #18
 8005b22:	4013      	ands	r3, r2
 8005b24:	d1f0      	bne.n	8005b08 <HAL_RCC_OscConfig+0x660>
 8005b26:	e034      	b.n	8005b92 <HAL_RCC_OscConfig+0x6ea>
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	ffff1fff 	.word	0xffff1fff
 8005b30:	fffffeff 	.word	0xfffffeff
 8005b34:	40007000 	.word	0x40007000
 8005b38:	fffffbff 	.word	0xfffffbff
 8005b3c:	00001388 	.word	0x00001388
 8005b40:	efffffff 	.word	0xefffffff
 8005b44:	feffffff 	.word	0xfeffffff
 8005b48:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e01d      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b58:	4b10      	ldr	r3, [pc, #64]	; (8005b9c <HAL_RCC_OscConfig+0x6f4>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	2380      	movs	r3, #128	; 0x80
 8005b62:	025b      	lsls	r3, r3, #9
 8005b64:	401a      	ands	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d10f      	bne.n	8005b8e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	23f0      	movs	r3, #240	; 0xf0
 8005b72:	039b      	lsls	r3, r3, #14
 8005b74:	401a      	ands	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d107      	bne.n	8005b8e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	23c0      	movs	r3, #192	; 0xc0
 8005b82:	041b      	lsls	r3, r3, #16
 8005b84:	401a      	ands	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d001      	beq.n	8005b92 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	0018      	movs	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	b00a      	add	sp, #40	; 0x28
 8005b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8005b9c:	40021000 	.word	0x40021000

08005ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ba0:	b5b0      	push	{r4, r5, r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e128      	b.n	8005e06 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bb4:	4b96      	ldr	r3, [pc, #600]	; (8005e10 <HAL_RCC_ClockConfig+0x270>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	4013      	ands	r3, r2
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d91e      	bls.n	8005c00 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc2:	4b93      	ldr	r3, [pc, #588]	; (8005e10 <HAL_RCC_ClockConfig+0x270>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	4393      	bics	r3, r2
 8005bca:	0019      	movs	r1, r3
 8005bcc:	4b90      	ldr	r3, [pc, #576]	; (8005e10 <HAL_RCC_ClockConfig+0x270>)
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005bd4:	f7fe fbd8 	bl	8004388 <HAL_GetTick>
 8005bd8:	0003      	movs	r3, r0
 8005bda:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bdc:	e009      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bde:	f7fe fbd3 	bl	8004388 <HAL_GetTick>
 8005be2:	0002      	movs	r2, r0
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	4a8a      	ldr	r2, [pc, #552]	; (8005e14 <HAL_RCC_ClockConfig+0x274>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e109      	b.n	8005e06 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf2:	4b87      	ldr	r3, [pc, #540]	; (8005e10 <HAL_RCC_ClockConfig+0x270>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d1ee      	bne.n	8005bde <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2202      	movs	r2, #2
 8005c06:	4013      	ands	r3, r2
 8005c08:	d009      	beq.n	8005c1e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c0a:	4b83      	ldr	r3, [pc, #524]	; (8005e18 <HAL_RCC_ClockConfig+0x278>)
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	22f0      	movs	r2, #240	; 0xf0
 8005c10:	4393      	bics	r3, r2
 8005c12:	0019      	movs	r1, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	4b7f      	ldr	r3, [pc, #508]	; (8005e18 <HAL_RCC_ClockConfig+0x278>)
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2201      	movs	r2, #1
 8005c24:	4013      	ands	r3, r2
 8005c26:	d100      	bne.n	8005c2a <HAL_RCC_ClockConfig+0x8a>
 8005c28:	e089      	b.n	8005d3e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d107      	bne.n	8005c42 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c32:	4b79      	ldr	r3, [pc, #484]	; (8005e18 <HAL_RCC_ClockConfig+0x278>)
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	2380      	movs	r3, #128	; 0x80
 8005c38:	029b      	lsls	r3, r3, #10
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	d120      	bne.n	8005c80 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e0e1      	b.n	8005e06 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d107      	bne.n	8005c5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c4a:	4b73      	ldr	r3, [pc, #460]	; (8005e18 <HAL_RCC_ClockConfig+0x278>)
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	2380      	movs	r3, #128	; 0x80
 8005c50:	049b      	lsls	r3, r3, #18
 8005c52:	4013      	ands	r3, r2
 8005c54:	d114      	bne.n	8005c80 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e0d5      	b.n	8005e06 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d106      	bne.n	8005c70 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c62:	4b6d      	ldr	r3, [pc, #436]	; (8005e18 <HAL_RCC_ClockConfig+0x278>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2204      	movs	r2, #4
 8005c68:	4013      	ands	r3, r2
 8005c6a:	d109      	bne.n	8005c80 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0ca      	b.n	8005e06 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005c70:	4b69      	ldr	r3, [pc, #420]	; (8005e18 <HAL_RCC_ClockConfig+0x278>)
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	2380      	movs	r3, #128	; 0x80
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4013      	ands	r3, r2
 8005c7a:	d101      	bne.n	8005c80 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e0c2      	b.n	8005e06 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c80:	4b65      	ldr	r3, [pc, #404]	; (8005e18 <HAL_RCC_ClockConfig+0x278>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	2203      	movs	r2, #3
 8005c86:	4393      	bics	r3, r2
 8005c88:	0019      	movs	r1, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	4b62      	ldr	r3, [pc, #392]	; (8005e18 <HAL_RCC_ClockConfig+0x278>)
 8005c90:	430a      	orrs	r2, r1
 8005c92:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c94:	f7fe fb78 	bl	8004388 <HAL_GetTick>
 8005c98:	0003      	movs	r3, r0
 8005c9a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d111      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ca4:	e009      	b.n	8005cba <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca6:	f7fe fb6f 	bl	8004388 <HAL_GetTick>
 8005caa:	0002      	movs	r2, r0
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	4a58      	ldr	r2, [pc, #352]	; (8005e14 <HAL_RCC_ClockConfig+0x274>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e0a5      	b.n	8005e06 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cba:	4b57      	ldr	r3, [pc, #348]	; (8005e18 <HAL_RCC_ClockConfig+0x278>)
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	220c      	movs	r2, #12
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	d1ef      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0x106>
 8005cc6:	e03a      	b.n	8005d3e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d111      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cd0:	e009      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cd2:	f7fe fb59 	bl	8004388 <HAL_GetTick>
 8005cd6:	0002      	movs	r2, r0
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	4a4d      	ldr	r2, [pc, #308]	; (8005e14 <HAL_RCC_ClockConfig+0x274>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e08f      	b.n	8005e06 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ce6:	4b4c      	ldr	r3, [pc, #304]	; (8005e18 <HAL_RCC_ClockConfig+0x278>)
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	220c      	movs	r2, #12
 8005cec:	4013      	ands	r3, r2
 8005cee:	2b0c      	cmp	r3, #12
 8005cf0:	d1ef      	bne.n	8005cd2 <HAL_RCC_ClockConfig+0x132>
 8005cf2:	e024      	b.n	8005d3e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d11b      	bne.n	8005d34 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cfc:	e009      	b.n	8005d12 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cfe:	f7fe fb43 	bl	8004388 <HAL_GetTick>
 8005d02:	0002      	movs	r2, r0
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	4a42      	ldr	r2, [pc, #264]	; (8005e14 <HAL_RCC_ClockConfig+0x274>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e079      	b.n	8005e06 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d12:	4b41      	ldr	r3, [pc, #260]	; (8005e18 <HAL_RCC_ClockConfig+0x278>)
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	220c      	movs	r2, #12
 8005d18:	4013      	ands	r3, r2
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d1ef      	bne.n	8005cfe <HAL_RCC_ClockConfig+0x15e>
 8005d1e:	e00e      	b.n	8005d3e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d20:	f7fe fb32 	bl	8004388 <HAL_GetTick>
 8005d24:	0002      	movs	r2, r0
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	4a3a      	ldr	r2, [pc, #232]	; (8005e14 <HAL_RCC_ClockConfig+0x274>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e068      	b.n	8005e06 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d34:	4b38      	ldr	r3, [pc, #224]	; (8005e18 <HAL_RCC_ClockConfig+0x278>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	220c      	movs	r2, #12
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	d1f0      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d3e:	4b34      	ldr	r3, [pc, #208]	; (8005e10 <HAL_RCC_ClockConfig+0x270>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2201      	movs	r2, #1
 8005d44:	4013      	ands	r3, r2
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d21e      	bcs.n	8005d8a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4c:	4b30      	ldr	r3, [pc, #192]	; (8005e10 <HAL_RCC_ClockConfig+0x270>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2201      	movs	r2, #1
 8005d52:	4393      	bics	r3, r2
 8005d54:	0019      	movs	r1, r3
 8005d56:	4b2e      	ldr	r3, [pc, #184]	; (8005e10 <HAL_RCC_ClockConfig+0x270>)
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d5e:	f7fe fb13 	bl	8004388 <HAL_GetTick>
 8005d62:	0003      	movs	r3, r0
 8005d64:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d66:	e009      	b.n	8005d7c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d68:	f7fe fb0e 	bl	8004388 <HAL_GetTick>
 8005d6c:	0002      	movs	r2, r0
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	4a28      	ldr	r2, [pc, #160]	; (8005e14 <HAL_RCC_ClockConfig+0x274>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e044      	b.n	8005e06 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d7c:	4b24      	ldr	r3, [pc, #144]	; (8005e10 <HAL_RCC_ClockConfig+0x270>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2201      	movs	r2, #1
 8005d82:	4013      	ands	r3, r2
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d1ee      	bne.n	8005d68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2204      	movs	r2, #4
 8005d90:	4013      	ands	r3, r2
 8005d92:	d009      	beq.n	8005da8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d94:	4b20      	ldr	r3, [pc, #128]	; (8005e18 <HAL_RCC_ClockConfig+0x278>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	4a20      	ldr	r2, [pc, #128]	; (8005e1c <HAL_RCC_ClockConfig+0x27c>)
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	0019      	movs	r1, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	4b1d      	ldr	r3, [pc, #116]	; (8005e18 <HAL_RCC_ClockConfig+0x278>)
 8005da4:	430a      	orrs	r2, r1
 8005da6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2208      	movs	r2, #8
 8005dae:	4013      	ands	r3, r2
 8005db0:	d00a      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005db2:	4b19      	ldr	r3, [pc, #100]	; (8005e18 <HAL_RCC_ClockConfig+0x278>)
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	4a1a      	ldr	r2, [pc, #104]	; (8005e20 <HAL_RCC_ClockConfig+0x280>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	0019      	movs	r1, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	00da      	lsls	r2, r3, #3
 8005dc2:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <HAL_RCC_ClockConfig+0x278>)
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dc8:	f000 f832 	bl	8005e30 <HAL_RCC_GetSysClockFreq>
 8005dcc:	0001      	movs	r1, r0
 8005dce:	4b12      	ldr	r3, [pc, #72]	; (8005e18 <HAL_RCC_ClockConfig+0x278>)
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	091b      	lsrs	r3, r3, #4
 8005dd4:	220f      	movs	r2, #15
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	4a12      	ldr	r2, [pc, #72]	; (8005e24 <HAL_RCC_ClockConfig+0x284>)
 8005dda:	5cd3      	ldrb	r3, [r2, r3]
 8005ddc:	000a      	movs	r2, r1
 8005dde:	40da      	lsrs	r2, r3
 8005de0:	4b11      	ldr	r3, [pc, #68]	; (8005e28 <HAL_RCC_ClockConfig+0x288>)
 8005de2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005de4:	4b11      	ldr	r3, [pc, #68]	; (8005e2c <HAL_RCC_ClockConfig+0x28c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	250b      	movs	r5, #11
 8005dea:	197c      	adds	r4, r7, r5
 8005dec:	0018      	movs	r0, r3
 8005dee:	f7fe fa85 	bl	80042fc <HAL_InitTick>
 8005df2:	0003      	movs	r3, r0
 8005df4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005df6:	197b      	adds	r3, r7, r5
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005dfe:	197b      	adds	r3, r7, r5
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	e000      	b.n	8005e06 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	0018      	movs	r0, r3
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	b004      	add	sp, #16
 8005e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	40022000 	.word	0x40022000
 8005e14:	00001388 	.word	0x00001388
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	fffff8ff 	.word	0xfffff8ff
 8005e20:	ffffc7ff 	.word	0xffffc7ff
 8005e24:	08007ca4 	.word	0x08007ca4
 8005e28:	20000004 	.word	0x20000004
 8005e2c:	20000008 	.word	0x20000008

08005e30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e30:	b5b0      	push	{r4, r5, r7, lr}
 8005e32:	b08e      	sub	sp, #56	; 0x38
 8005e34:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005e36:	4b4c      	ldr	r3, [pc, #304]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e3e:	230c      	movs	r3, #12
 8005e40:	4013      	ands	r3, r2
 8005e42:	2b0c      	cmp	r3, #12
 8005e44:	d014      	beq.n	8005e70 <HAL_RCC_GetSysClockFreq+0x40>
 8005e46:	d900      	bls.n	8005e4a <HAL_RCC_GetSysClockFreq+0x1a>
 8005e48:	e07b      	b.n	8005f42 <HAL_RCC_GetSysClockFreq+0x112>
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d002      	beq.n	8005e54 <HAL_RCC_GetSysClockFreq+0x24>
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d00b      	beq.n	8005e6a <HAL_RCC_GetSysClockFreq+0x3a>
 8005e52:	e076      	b.n	8005f42 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005e54:	4b44      	ldr	r3, [pc, #272]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2210      	movs	r2, #16
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	d002      	beq.n	8005e64 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005e5e:	4b43      	ldr	r3, [pc, #268]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005e60:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005e62:	e07c      	b.n	8005f5e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005e64:	4b42      	ldr	r3, [pc, #264]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x140>)
 8005e66:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005e68:	e079      	b.n	8005f5e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e6a:	4b42      	ldr	r3, [pc, #264]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x144>)
 8005e6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005e6e:	e076      	b.n	8005f5e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e72:	0c9a      	lsrs	r2, r3, #18
 8005e74:	230f      	movs	r3, #15
 8005e76:	401a      	ands	r2, r3
 8005e78:	4b3f      	ldr	r3, [pc, #252]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x148>)
 8005e7a:	5c9b      	ldrb	r3, [r3, r2]
 8005e7c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e80:	0d9a      	lsrs	r2, r3, #22
 8005e82:	2303      	movs	r3, #3
 8005e84:	4013      	ands	r3, r2
 8005e86:	3301      	adds	r3, #1
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e8a:	4b37      	ldr	r3, [pc, #220]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	2380      	movs	r3, #128	; 0x80
 8005e90:	025b      	lsls	r3, r3, #9
 8005e92:	4013      	ands	r3, r2
 8005e94:	d01a      	beq.n	8005ecc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	61fb      	str	r3, [r7, #28]
 8005e9e:	4a35      	ldr	r2, [pc, #212]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x144>)
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	69b8      	ldr	r0, [r7, #24]
 8005ea4:	69f9      	ldr	r1, [r7, #28]
 8005ea6:	f7fa fa5d 	bl	8000364 <__aeabi_lmul>
 8005eaa:	0002      	movs	r2, r0
 8005eac:	000b      	movs	r3, r1
 8005eae:	0010      	movs	r0, r2
 8005eb0:	0019      	movs	r1, r3
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f7fa fa31 	bl	8000324 <__aeabi_uldivmod>
 8005ec2:	0002      	movs	r2, r0
 8005ec4:	000b      	movs	r3, r1
 8005ec6:	0013      	movs	r3, r2
 8005ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eca:	e037      	b.n	8005f3c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005ecc:	4b26      	ldr	r3, [pc, #152]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x138>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2210      	movs	r2, #16
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	d01a      	beq.n	8005f0c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed8:	60bb      	str	r3, [r7, #8]
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	4a23      	ldr	r2, [pc, #140]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	68b8      	ldr	r0, [r7, #8]
 8005ee4:	68f9      	ldr	r1, [r7, #12]
 8005ee6:	f7fa fa3d 	bl	8000364 <__aeabi_lmul>
 8005eea:	0002      	movs	r2, r0
 8005eec:	000b      	movs	r3, r1
 8005eee:	0010      	movs	r0, r2
 8005ef0:	0019      	movs	r1, r3
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	603b      	str	r3, [r7, #0]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	607b      	str	r3, [r7, #4]
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f7fa fa11 	bl	8000324 <__aeabi_uldivmod>
 8005f02:	0002      	movs	r2, r0
 8005f04:	000b      	movs	r3, r1
 8005f06:	0013      	movs	r3, r2
 8005f08:	637b      	str	r3, [r7, #52]	; 0x34
 8005f0a:	e017      	b.n	8005f3c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0e:	0018      	movs	r0, r3
 8005f10:	2300      	movs	r3, #0
 8005f12:	0019      	movs	r1, r3
 8005f14:	4a16      	ldr	r2, [pc, #88]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x140>)
 8005f16:	2300      	movs	r3, #0
 8005f18:	f7fa fa24 	bl	8000364 <__aeabi_lmul>
 8005f1c:	0002      	movs	r2, r0
 8005f1e:	000b      	movs	r3, r1
 8005f20:	0010      	movs	r0, r2
 8005f22:	0019      	movs	r1, r3
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	001c      	movs	r4, r3
 8005f28:	2300      	movs	r3, #0
 8005f2a:	001d      	movs	r5, r3
 8005f2c:	0022      	movs	r2, r4
 8005f2e:	002b      	movs	r3, r5
 8005f30:	f7fa f9f8 	bl	8000324 <__aeabi_uldivmod>
 8005f34:	0002      	movs	r2, r0
 8005f36:	000b      	movs	r3, r1
 8005f38:	0013      	movs	r3, r2
 8005f3a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005f40:	e00d      	b.n	8005f5e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005f42:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x138>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	0b5b      	lsrs	r3, r3, #13
 8005f48:	2207      	movs	r2, #7
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	3301      	adds	r3, #1
 8005f52:	2280      	movs	r2, #128	; 0x80
 8005f54:	0212      	lsls	r2, r2, #8
 8005f56:	409a      	lsls	r2, r3
 8005f58:	0013      	movs	r3, r2
 8005f5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005f5c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005f60:	0018      	movs	r0, r3
 8005f62:	46bd      	mov	sp, r7
 8005f64:	b00e      	add	sp, #56	; 0x38
 8005f66:	bdb0      	pop	{r4, r5, r7, pc}
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	003d0900 	.word	0x003d0900
 8005f70:	00f42400 	.word	0x00f42400
 8005f74:	007a1200 	.word	0x007a1200
 8005f78:	08007cb4 	.word	0x08007cb4

08005f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e032      	b.n	8005ff4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2239      	movs	r2, #57	; 0x39
 8005f92:	5c9b      	ldrb	r3, [r3, r2]
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d107      	bne.n	8005faa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2238      	movs	r2, #56	; 0x38
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f7fe f88b 	bl	80040c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2239      	movs	r2, #57	; 0x39
 8005fae:	2102      	movs	r1, #2
 8005fb0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	0019      	movs	r1, r3
 8005fbc:	0010      	movs	r0, r2
 8005fbe:	f000 fbdf 	bl	8006780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	223e      	movs	r2, #62	; 0x3e
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	223a      	movs	r2, #58	; 0x3a
 8005fce:	2101      	movs	r1, #1
 8005fd0:	5499      	strb	r1, [r3, r2]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	223b      	movs	r2, #59	; 0x3b
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	5499      	strb	r1, [r3, r2]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	223c      	movs	r2, #60	; 0x3c
 8005fde:	2101      	movs	r1, #1
 8005fe0:	5499      	strb	r1, [r3, r2]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	223d      	movs	r2, #61	; 0x3d
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2239      	movs	r2, #57	; 0x39
 8005fee:	2101      	movs	r1, #1
 8005ff0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	0018      	movs	r0, r3
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	b002      	add	sp, #8
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2239      	movs	r2, #57	; 0x39
 8006008:	5c9b      	ldrb	r3, [r3, r2]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b01      	cmp	r3, #1
 800600e:	d001      	beq.n	8006014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e036      	b.n	8006082 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2239      	movs	r2, #57	; 0x39
 8006018:	2102      	movs	r1, #2
 800601a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2101      	movs	r1, #1
 8006028:	430a      	orrs	r2, r1
 800602a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	2380      	movs	r3, #128	; 0x80
 8006032:	05db      	lsls	r3, r3, #23
 8006034:	429a      	cmp	r2, r3
 8006036:	d009      	beq.n	800604c <HAL_TIM_Base_Start_IT+0x50>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a13      	ldr	r2, [pc, #76]	; (800608c <HAL_TIM_Base_Start_IT+0x90>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d004      	beq.n	800604c <HAL_TIM_Base_Start_IT+0x50>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a12      	ldr	r2, [pc, #72]	; (8006090 <HAL_TIM_Base_Start_IT+0x94>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d111      	bne.n	8006070 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	2207      	movs	r2, #7
 8006054:	4013      	ands	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b06      	cmp	r3, #6
 800605c:	d010      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2101      	movs	r1, #1
 800606a:	430a      	orrs	r2, r1
 800606c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606e:	e007      	b.n	8006080 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2101      	movs	r1, #1
 800607c:	430a      	orrs	r2, r1
 800607e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	0018      	movs	r0, r3
 8006084:	46bd      	mov	sp, r7
 8006086:	b004      	add	sp, #16
 8006088:	bd80      	pop	{r7, pc}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	40010800 	.word	0x40010800
 8006090:	40011400 	.word	0x40011400

08006094 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e032      	b.n	800610c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2239      	movs	r2, #57	; 0x39
 80060aa:	5c9b      	ldrb	r3, [r3, r2]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d107      	bne.n	80060c2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2238      	movs	r2, #56	; 0x38
 80060b6:	2100      	movs	r1, #0
 80060b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	0018      	movs	r0, r3
 80060be:	f000 f829 	bl	8006114 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2239      	movs	r2, #57	; 0x39
 80060c6:	2102      	movs	r1, #2
 80060c8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3304      	adds	r3, #4
 80060d2:	0019      	movs	r1, r3
 80060d4:	0010      	movs	r0, r2
 80060d6:	f000 fb53 	bl	8006780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	223e      	movs	r2, #62	; 0x3e
 80060de:	2101      	movs	r1, #1
 80060e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	223a      	movs	r2, #58	; 0x3a
 80060e6:	2101      	movs	r1, #1
 80060e8:	5499      	strb	r1, [r3, r2]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	223b      	movs	r2, #59	; 0x3b
 80060ee:	2101      	movs	r1, #1
 80060f0:	5499      	strb	r1, [r3, r2]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	223c      	movs	r2, #60	; 0x3c
 80060f6:	2101      	movs	r1, #1
 80060f8:	5499      	strb	r1, [r3, r2]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	223d      	movs	r2, #61	; 0x3d
 80060fe:	2101      	movs	r1, #1
 8006100:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2239      	movs	r2, #57	; 0x39
 8006106:	2101      	movs	r1, #1
 8006108:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	0018      	movs	r0, r3
 800610e:	46bd      	mov	sp, r7
 8006110:	b002      	add	sp, #8
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800611c:	46c0      	nop			; (mov r8, r8)
 800611e:	46bd      	mov	sp, r7
 8006120:	b002      	add	sp, #8
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d108      	bne.n	8006146 <HAL_TIM_PWM_Start+0x22>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	223a      	movs	r2, #58	; 0x3a
 8006138:	5c9b      	ldrb	r3, [r3, r2]
 800613a:	b2db      	uxtb	r3, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	1e5a      	subs	r2, r3, #1
 8006140:	4193      	sbcs	r3, r2
 8006142:	b2db      	uxtb	r3, r3
 8006144:	e01f      	b.n	8006186 <HAL_TIM_PWM_Start+0x62>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b04      	cmp	r3, #4
 800614a:	d108      	bne.n	800615e <HAL_TIM_PWM_Start+0x3a>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	223b      	movs	r2, #59	; 0x3b
 8006150:	5c9b      	ldrb	r3, [r3, r2]
 8006152:	b2db      	uxtb	r3, r3
 8006154:	3b01      	subs	r3, #1
 8006156:	1e5a      	subs	r2, r3, #1
 8006158:	4193      	sbcs	r3, r2
 800615a:	b2db      	uxtb	r3, r3
 800615c:	e013      	b.n	8006186 <HAL_TIM_PWM_Start+0x62>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b08      	cmp	r3, #8
 8006162:	d108      	bne.n	8006176 <HAL_TIM_PWM_Start+0x52>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	223c      	movs	r2, #60	; 0x3c
 8006168:	5c9b      	ldrb	r3, [r3, r2]
 800616a:	b2db      	uxtb	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	1e5a      	subs	r2, r3, #1
 8006170:	4193      	sbcs	r3, r2
 8006172:	b2db      	uxtb	r3, r3
 8006174:	e007      	b.n	8006186 <HAL_TIM_PWM_Start+0x62>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	223d      	movs	r2, #61	; 0x3d
 800617a:	5c9b      	ldrb	r3, [r3, r2]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	1e5a      	subs	r2, r3, #1
 8006182:	4193      	sbcs	r3, r2
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e04d      	b.n	800622a <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d104      	bne.n	800619e <HAL_TIM_PWM_Start+0x7a>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	223a      	movs	r2, #58	; 0x3a
 8006198:	2102      	movs	r1, #2
 800619a:	5499      	strb	r1, [r3, r2]
 800619c:	e013      	b.n	80061c6 <HAL_TIM_PWM_Start+0xa2>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	d104      	bne.n	80061ae <HAL_TIM_PWM_Start+0x8a>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	223b      	movs	r2, #59	; 0x3b
 80061a8:	2102      	movs	r1, #2
 80061aa:	5499      	strb	r1, [r3, r2]
 80061ac:	e00b      	b.n	80061c6 <HAL_TIM_PWM_Start+0xa2>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d104      	bne.n	80061be <HAL_TIM_PWM_Start+0x9a>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	223c      	movs	r2, #60	; 0x3c
 80061b8:	2102      	movs	r1, #2
 80061ba:	5499      	strb	r1, [r3, r2]
 80061bc:	e003      	b.n	80061c6 <HAL_TIM_PWM_Start+0xa2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	223d      	movs	r2, #61	; 0x3d
 80061c2:	2102      	movs	r1, #2
 80061c4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	2201      	movs	r2, #1
 80061ce:	0018      	movs	r0, r3
 80061d0:	f000 fcc8 	bl	8006b64 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	2380      	movs	r3, #128	; 0x80
 80061da:	05db      	lsls	r3, r3, #23
 80061dc:	429a      	cmp	r2, r3
 80061de:	d009      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xd0>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a13      	ldr	r2, [pc, #76]	; (8006234 <HAL_TIM_PWM_Start+0x110>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d004      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xd0>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a12      	ldr	r2, [pc, #72]	; (8006238 <HAL_TIM_PWM_Start+0x114>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d111      	bne.n	8006218 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	2207      	movs	r2, #7
 80061fc:	4013      	ands	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b06      	cmp	r3, #6
 8006204:	d010      	beq.n	8006228 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2101      	movs	r1, #1
 8006212:	430a      	orrs	r2, r1
 8006214:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006216:	e007      	b.n	8006228 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2101      	movs	r1, #1
 8006224:	430a      	orrs	r2, r1
 8006226:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	0018      	movs	r0, r3
 800622c:	46bd      	mov	sp, r7
 800622e:	b004      	add	sp, #16
 8006230:	bd80      	pop	{r7, pc}
 8006232:	46c0      	nop			; (mov r8, r8)
 8006234:	40010800 	.word	0x40010800
 8006238:	40011400 	.word	0x40011400

0800623c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	2202      	movs	r2, #2
 800624c:	4013      	ands	r3, r2
 800624e:	2b02      	cmp	r3, #2
 8006250:	d124      	bne.n	800629c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	2202      	movs	r2, #2
 800625a:	4013      	ands	r3, r2
 800625c:	2b02      	cmp	r3, #2
 800625e:	d11d      	bne.n	800629c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2203      	movs	r2, #3
 8006266:	4252      	negs	r2, r2
 8006268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	2203      	movs	r2, #3
 8006278:	4013      	ands	r3, r2
 800627a:	d004      	beq.n	8006286 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	0018      	movs	r0, r3
 8006280:	f000 fa66 	bl	8006750 <HAL_TIM_IC_CaptureCallback>
 8006284:	e007      	b.n	8006296 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	0018      	movs	r0, r3
 800628a:	f000 fa59 	bl	8006740 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	0018      	movs	r0, r3
 8006292:	f000 fa65 	bl	8006760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	2204      	movs	r2, #4
 80062a4:	4013      	ands	r3, r2
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d125      	bne.n	80062f6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	2204      	movs	r2, #4
 80062b2:	4013      	ands	r3, r2
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	d11e      	bne.n	80062f6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2205      	movs	r2, #5
 80062be:	4252      	negs	r2, r2
 80062c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2202      	movs	r2, #2
 80062c6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699a      	ldr	r2, [r3, #24]
 80062ce:	23c0      	movs	r3, #192	; 0xc0
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4013      	ands	r3, r2
 80062d4:	d004      	beq.n	80062e0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	0018      	movs	r0, r3
 80062da:	f000 fa39 	bl	8006750 <HAL_TIM_IC_CaptureCallback>
 80062de:	e007      	b.n	80062f0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	0018      	movs	r0, r3
 80062e4:	f000 fa2c 	bl	8006740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	0018      	movs	r0, r3
 80062ec:	f000 fa38 	bl	8006760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	2208      	movs	r2, #8
 80062fe:	4013      	ands	r3, r2
 8006300:	2b08      	cmp	r3, #8
 8006302:	d124      	bne.n	800634e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	2208      	movs	r2, #8
 800630c:	4013      	ands	r3, r2
 800630e:	2b08      	cmp	r3, #8
 8006310:	d11d      	bne.n	800634e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2209      	movs	r2, #9
 8006318:	4252      	negs	r2, r2
 800631a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2204      	movs	r2, #4
 8006320:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	2203      	movs	r2, #3
 800632a:	4013      	ands	r3, r2
 800632c:	d004      	beq.n	8006338 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	0018      	movs	r0, r3
 8006332:	f000 fa0d 	bl	8006750 <HAL_TIM_IC_CaptureCallback>
 8006336:	e007      	b.n	8006348 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	0018      	movs	r0, r3
 800633c:	f000 fa00 	bl	8006740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	0018      	movs	r0, r3
 8006344:	f000 fa0c 	bl	8006760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	2210      	movs	r2, #16
 8006356:	4013      	ands	r3, r2
 8006358:	2b10      	cmp	r3, #16
 800635a:	d125      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	2210      	movs	r2, #16
 8006364:	4013      	ands	r3, r2
 8006366:	2b10      	cmp	r3, #16
 8006368:	d11e      	bne.n	80063a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2211      	movs	r2, #17
 8006370:	4252      	negs	r2, r2
 8006372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2208      	movs	r2, #8
 8006378:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69da      	ldr	r2, [r3, #28]
 8006380:	23c0      	movs	r3, #192	; 0xc0
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4013      	ands	r3, r2
 8006386:	d004      	beq.n	8006392 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	0018      	movs	r0, r3
 800638c:	f000 f9e0 	bl	8006750 <HAL_TIM_IC_CaptureCallback>
 8006390:	e007      	b.n	80063a2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	0018      	movs	r0, r3
 8006396:	f000 f9d3 	bl	8006740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	0018      	movs	r0, r3
 800639e:	f000 f9df 	bl	8006760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	2201      	movs	r2, #1
 80063b0:	4013      	ands	r3, r2
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d10f      	bne.n	80063d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	4013      	ands	r3, r2
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d108      	bne.n	80063d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2202      	movs	r2, #2
 80063ca:	4252      	negs	r2, r2
 80063cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	0018      	movs	r0, r3
 80063d2:	f7fd f9a3 	bl	800371c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	2240      	movs	r2, #64	; 0x40
 80063de:	4013      	ands	r3, r2
 80063e0:	2b40      	cmp	r3, #64	; 0x40
 80063e2:	d10f      	bne.n	8006404 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	2240      	movs	r2, #64	; 0x40
 80063ec:	4013      	ands	r3, r2
 80063ee:	2b40      	cmp	r3, #64	; 0x40
 80063f0:	d108      	bne.n	8006404 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2241      	movs	r2, #65	; 0x41
 80063f8:	4252      	negs	r2, r2
 80063fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	0018      	movs	r0, r3
 8006400:	f000 f9b6 	bl	8006770 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006404:	46c0      	nop			; (mov r8, r8)
 8006406:	46bd      	mov	sp, r7
 8006408:	b002      	add	sp, #8
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006418:	2317      	movs	r3, #23
 800641a:	18fb      	adds	r3, r7, r3
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2238      	movs	r2, #56	; 0x38
 8006424:	5c9b      	ldrb	r3, [r3, r2]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d101      	bne.n	800642e <HAL_TIM_PWM_ConfigChannel+0x22>
 800642a:	2302      	movs	r3, #2
 800642c:	e0ad      	b.n	800658a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2238      	movs	r2, #56	; 0x38
 8006432:	2101      	movs	r1, #1
 8006434:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b0c      	cmp	r3, #12
 800643a:	d100      	bne.n	800643e <HAL_TIM_PWM_ConfigChannel+0x32>
 800643c:	e076      	b.n	800652c <HAL_TIM_PWM_ConfigChannel+0x120>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b0c      	cmp	r3, #12
 8006442:	d900      	bls.n	8006446 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006444:	e095      	b.n	8006572 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b08      	cmp	r3, #8
 800644a:	d04e      	beq.n	80064ea <HAL_TIM_PWM_ConfigChannel+0xde>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b08      	cmp	r3, #8
 8006450:	d900      	bls.n	8006454 <HAL_TIM_PWM_ConfigChannel+0x48>
 8006452:	e08e      	b.n	8006572 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_TIM_PWM_ConfigChannel+0x56>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b04      	cmp	r3, #4
 800645e:	d021      	beq.n	80064a4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8006460:	e087      	b.n	8006572 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	0011      	movs	r1, r2
 800646a:	0018      	movs	r0, r3
 800646c:	f000 f9dc 	bl	8006828 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699a      	ldr	r2, [r3, #24]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2108      	movs	r1, #8
 800647c:	430a      	orrs	r2, r1
 800647e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2104      	movs	r1, #4
 800648c:	438a      	bics	r2, r1
 800648e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6999      	ldr	r1, [r3, #24]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	619a      	str	r2, [r3, #24]
      break;
 80064a2:	e06b      	b.n	800657c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	0011      	movs	r1, r2
 80064ac:	0018      	movs	r0, r3
 80064ae:	f000 f9f7 	bl	80068a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	699a      	ldr	r2, [r3, #24]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2180      	movs	r1, #128	; 0x80
 80064be:	0109      	lsls	r1, r1, #4
 80064c0:	430a      	orrs	r2, r1
 80064c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4931      	ldr	r1, [pc, #196]	; (8006594 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80064d0:	400a      	ands	r2, r1
 80064d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6999      	ldr	r1, [r3, #24]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	021a      	lsls	r2, r3, #8
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	619a      	str	r2, [r3, #24]
      break;
 80064e8:	e048      	b.n	800657c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	0011      	movs	r1, r2
 80064f2:	0018      	movs	r0, r3
 80064f4:	f000 fa16 	bl	8006924 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	69da      	ldr	r2, [r3, #28]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2108      	movs	r1, #8
 8006504:	430a      	orrs	r2, r1
 8006506:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	69da      	ldr	r2, [r3, #28]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2104      	movs	r1, #4
 8006514:	438a      	bics	r2, r1
 8006516:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	69d9      	ldr	r1, [r3, #28]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	61da      	str	r2, [r3, #28]
      break;
 800652a:	e027      	b.n	800657c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	0011      	movs	r1, r2
 8006534:	0018      	movs	r0, r3
 8006536:	f000 fa35 	bl	80069a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69da      	ldr	r2, [r3, #28]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2180      	movs	r1, #128	; 0x80
 8006546:	0109      	lsls	r1, r1, #4
 8006548:	430a      	orrs	r2, r1
 800654a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	69da      	ldr	r2, [r3, #28]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	490f      	ldr	r1, [pc, #60]	; (8006594 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006558:	400a      	ands	r2, r1
 800655a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	69d9      	ldr	r1, [r3, #28]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	021a      	lsls	r2, r3, #8
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	61da      	str	r2, [r3, #28]
      break;
 8006570:	e004      	b.n	800657c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006572:	2317      	movs	r3, #23
 8006574:	18fb      	adds	r3, r7, r3
 8006576:	2201      	movs	r2, #1
 8006578:	701a      	strb	r2, [r3, #0]
      break;
 800657a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2238      	movs	r2, #56	; 0x38
 8006580:	2100      	movs	r1, #0
 8006582:	5499      	strb	r1, [r3, r2]

  return status;
 8006584:	2317      	movs	r3, #23
 8006586:	18fb      	adds	r3, r7, r3
 8006588:	781b      	ldrb	r3, [r3, #0]
}
 800658a:	0018      	movs	r0, r3
 800658c:	46bd      	mov	sp, r7
 800658e:	b006      	add	sp, #24
 8006590:	bd80      	pop	{r7, pc}
 8006592:	46c0      	nop			; (mov r8, r8)
 8006594:	fffffbff 	.word	0xfffffbff

08006598 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065a2:	230f      	movs	r3, #15
 80065a4:	18fb      	adds	r3, r7, r3
 80065a6:	2200      	movs	r2, #0
 80065a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2238      	movs	r2, #56	; 0x38
 80065ae:	5c9b      	ldrb	r3, [r3, r2]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_TIM_ConfigClockSource+0x20>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e0bc      	b.n	8006732 <HAL_TIM_ConfigClockSource+0x19a>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2238      	movs	r2, #56	; 0x38
 80065bc:	2101      	movs	r1, #1
 80065be:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2239      	movs	r2, #57	; 0x39
 80065c4:	2102      	movs	r1, #2
 80065c6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2277      	movs	r2, #119	; 0x77
 80065d4:	4393      	bics	r3, r2
 80065d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4a58      	ldr	r2, [pc, #352]	; (800673c <HAL_TIM_ConfigClockSource+0x1a4>)
 80065dc:	4013      	ands	r3, r2
 80065de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2280      	movs	r2, #128	; 0x80
 80065ee:	0192      	lsls	r2, r2, #6
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d040      	beq.n	8006676 <HAL_TIM_ConfigClockSource+0xde>
 80065f4:	2280      	movs	r2, #128	; 0x80
 80065f6:	0192      	lsls	r2, r2, #6
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d900      	bls.n	80065fe <HAL_TIM_ConfigClockSource+0x66>
 80065fc:	e088      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x178>
 80065fe:	2280      	movs	r2, #128	; 0x80
 8006600:	0152      	lsls	r2, r2, #5
 8006602:	4293      	cmp	r3, r2
 8006604:	d100      	bne.n	8006608 <HAL_TIM_ConfigClockSource+0x70>
 8006606:	e088      	b.n	800671a <HAL_TIM_ConfigClockSource+0x182>
 8006608:	2280      	movs	r2, #128	; 0x80
 800660a:	0152      	lsls	r2, r2, #5
 800660c:	4293      	cmp	r3, r2
 800660e:	d900      	bls.n	8006612 <HAL_TIM_ConfigClockSource+0x7a>
 8006610:	e07e      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x178>
 8006612:	2b70      	cmp	r3, #112	; 0x70
 8006614:	d018      	beq.n	8006648 <HAL_TIM_ConfigClockSource+0xb0>
 8006616:	d900      	bls.n	800661a <HAL_TIM_ConfigClockSource+0x82>
 8006618:	e07a      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x178>
 800661a:	2b60      	cmp	r3, #96	; 0x60
 800661c:	d04f      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x126>
 800661e:	d900      	bls.n	8006622 <HAL_TIM_ConfigClockSource+0x8a>
 8006620:	e076      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x178>
 8006622:	2b50      	cmp	r3, #80	; 0x50
 8006624:	d03b      	beq.n	800669e <HAL_TIM_ConfigClockSource+0x106>
 8006626:	d900      	bls.n	800662a <HAL_TIM_ConfigClockSource+0x92>
 8006628:	e072      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x178>
 800662a:	2b40      	cmp	r3, #64	; 0x40
 800662c:	d057      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x146>
 800662e:	d900      	bls.n	8006632 <HAL_TIM_ConfigClockSource+0x9a>
 8006630:	e06e      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x178>
 8006632:	2b30      	cmp	r3, #48	; 0x30
 8006634:	d063      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x166>
 8006636:	d86b      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x178>
 8006638:	2b20      	cmp	r3, #32
 800663a:	d060      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x166>
 800663c:	d868      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x178>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d05d      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x166>
 8006642:	2b10      	cmp	r3, #16
 8006644:	d05b      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x166>
 8006646:	e063      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6818      	ldr	r0, [r3, #0]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	6899      	ldr	r1, [r3, #8]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f000 fa64 	bl	8006b24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2277      	movs	r2, #119	; 0x77
 8006668:	4313      	orrs	r3, r2
 800666a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	609a      	str	r2, [r3, #8]
      break;
 8006674:	e052      	b.n	800671c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6818      	ldr	r0, [r3, #0]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	6899      	ldr	r1, [r3, #8]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f000 fa4d 	bl	8006b24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689a      	ldr	r2, [r3, #8]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2180      	movs	r1, #128	; 0x80
 8006696:	01c9      	lsls	r1, r1, #7
 8006698:	430a      	orrs	r2, r1
 800669a:	609a      	str	r2, [r3, #8]
      break;
 800669c:	e03e      	b.n	800671c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	6859      	ldr	r1, [r3, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	001a      	movs	r2, r3
 80066ac:	f000 f9c0 	bl	8006a30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2150      	movs	r1, #80	; 0x50
 80066b6:	0018      	movs	r0, r3
 80066b8:	f000 fa1a 	bl	8006af0 <TIM_ITRx_SetConfig>
      break;
 80066bc:	e02e      	b.n	800671c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6859      	ldr	r1, [r3, #4]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	001a      	movs	r2, r3
 80066cc:	f000 f9de 	bl	8006a8c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2160      	movs	r1, #96	; 0x60
 80066d6:	0018      	movs	r0, r3
 80066d8:	f000 fa0a 	bl	8006af0 <TIM_ITRx_SetConfig>
      break;
 80066dc:	e01e      	b.n	800671c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6818      	ldr	r0, [r3, #0]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	6859      	ldr	r1, [r3, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	001a      	movs	r2, r3
 80066ec:	f000 f9a0 	bl	8006a30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2140      	movs	r1, #64	; 0x40
 80066f6:	0018      	movs	r0, r3
 80066f8:	f000 f9fa 	bl	8006af0 <TIM_ITRx_SetConfig>
      break;
 80066fc:	e00e      	b.n	800671c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	0019      	movs	r1, r3
 8006708:	0010      	movs	r0, r2
 800670a:	f000 f9f1 	bl	8006af0 <TIM_ITRx_SetConfig>
      break;
 800670e:	e005      	b.n	800671c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006710:	230f      	movs	r3, #15
 8006712:	18fb      	adds	r3, r7, r3
 8006714:	2201      	movs	r2, #1
 8006716:	701a      	strb	r2, [r3, #0]
      break;
 8006718:	e000      	b.n	800671c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800671a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2239      	movs	r2, #57	; 0x39
 8006720:	2101      	movs	r1, #1
 8006722:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2238      	movs	r2, #56	; 0x38
 8006728:	2100      	movs	r1, #0
 800672a:	5499      	strb	r1, [r3, r2]

  return status;
 800672c:	230f      	movs	r3, #15
 800672e:	18fb      	adds	r3, r7, r3
 8006730:	781b      	ldrb	r3, [r3, #0]
}
 8006732:	0018      	movs	r0, r3
 8006734:	46bd      	mov	sp, r7
 8006736:	b004      	add	sp, #16
 8006738:	bd80      	pop	{r7, pc}
 800673a:	46c0      	nop			; (mov r8, r8)
 800673c:	ffff00ff 	.word	0xffff00ff

08006740 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006748:	46c0      	nop			; (mov r8, r8)
 800674a:	46bd      	mov	sp, r7
 800674c:	b002      	add	sp, #8
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006758:	46c0      	nop			; (mov r8, r8)
 800675a:	46bd      	mov	sp, r7
 800675c:	b002      	add	sp, #8
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006768:	46c0      	nop			; (mov r8, r8)
 800676a:	46bd      	mov	sp, r7
 800676c:	b002      	add	sp, #8
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006778:	46c0      	nop			; (mov r8, r8)
 800677a:	46bd      	mov	sp, r7
 800677c:	b002      	add	sp, #8
 800677e:	bd80      	pop	{r7, pc}

08006780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	2380      	movs	r3, #128	; 0x80
 8006794:	05db      	lsls	r3, r3, #23
 8006796:	429a      	cmp	r2, r3
 8006798:	d007      	beq.n	80067aa <TIM_Base_SetConfig+0x2a>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a1f      	ldr	r2, [pc, #124]	; (800681c <TIM_Base_SetConfig+0x9c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d003      	beq.n	80067aa <TIM_Base_SetConfig+0x2a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a1e      	ldr	r2, [pc, #120]	; (8006820 <TIM_Base_SetConfig+0xa0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d108      	bne.n	80067bc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2270      	movs	r2, #112	; 0x70
 80067ae:	4393      	bics	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	2380      	movs	r3, #128	; 0x80
 80067c0:	05db      	lsls	r3, r3, #23
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d007      	beq.n	80067d6 <TIM_Base_SetConfig+0x56>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a14      	ldr	r2, [pc, #80]	; (800681c <TIM_Base_SetConfig+0x9c>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d003      	beq.n	80067d6 <TIM_Base_SetConfig+0x56>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a13      	ldr	r2, [pc, #76]	; (8006820 <TIM_Base_SetConfig+0xa0>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d108      	bne.n	80067e8 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4a12      	ldr	r2, [pc, #72]	; (8006824 <TIM_Base_SetConfig+0xa4>)
 80067da:	4013      	ands	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2280      	movs	r2, #128	; 0x80
 80067ec:	4393      	bics	r3, r2
 80067ee:	001a      	movs	r2, r3
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	615a      	str	r2, [r3, #20]
}
 8006814:	46c0      	nop			; (mov r8, r8)
 8006816:	46bd      	mov	sp, r7
 8006818:	b004      	add	sp, #16
 800681a:	bd80      	pop	{r7, pc}
 800681c:	40010800 	.word	0x40010800
 8006820:	40011400 	.word	0x40011400
 8006824:	fffffcff 	.word	0xfffffcff

08006828 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	2201      	movs	r2, #1
 8006838:	4393      	bics	r3, r2
 800683a:	001a      	movs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2270      	movs	r2, #112	; 0x70
 8006856:	4393      	bics	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2203      	movs	r2, #3
 800685e:	4393      	bics	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4313      	orrs	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	2202      	movs	r2, #2
 8006870:	4393      	bics	r3, r2
 8006872:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	621a      	str	r2, [r3, #32]
}
 8006898:	46c0      	nop			; (mov r8, r8)
 800689a:	46bd      	mov	sp, r7
 800689c:	b006      	add	sp, #24
 800689e:	bd80      	pop	{r7, pc}

080068a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	2210      	movs	r2, #16
 80068b0:	4393      	bics	r3, r2
 80068b2:	001a      	movs	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4a13      	ldr	r2, [pc, #76]	; (800691c <TIM_OC2_SetConfig+0x7c>)
 80068ce:	4013      	ands	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4a12      	ldr	r2, [pc, #72]	; (8006920 <TIM_OC2_SetConfig+0x80>)
 80068d6:	4013      	ands	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	021b      	lsls	r3, r3, #8
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2220      	movs	r2, #32
 80068ea:	4393      	bics	r3, r2
 80068ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	621a      	str	r2, [r3, #32]
}
 8006914:	46c0      	nop			; (mov r8, r8)
 8006916:	46bd      	mov	sp, r7
 8006918:	b006      	add	sp, #24
 800691a:	bd80      	pop	{r7, pc}
 800691c:	ffff8fff 	.word	0xffff8fff
 8006920:	fffffcff 	.word	0xfffffcff

08006924 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	4a1a      	ldr	r2, [pc, #104]	; (800699c <TIM_OC3_SetConfig+0x78>)
 8006934:	401a      	ands	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2270      	movs	r2, #112	; 0x70
 8006950:	4393      	bics	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2203      	movs	r2, #3
 8006958:	4393      	bics	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	4a0d      	ldr	r2, [pc, #52]	; (80069a0 <TIM_OC3_SetConfig+0x7c>)
 800696a:	4013      	ands	r3, r2
 800696c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	021b      	lsls	r3, r3, #8
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	621a      	str	r2, [r3, #32]
}
 8006994:	46c0      	nop			; (mov r8, r8)
 8006996:	46bd      	mov	sp, r7
 8006998:	b006      	add	sp, #24
 800699a:	bd80      	pop	{r7, pc}
 800699c:	fffffeff 	.word	0xfffffeff
 80069a0:	fffffdff 	.word	0xfffffdff

080069a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	4a1b      	ldr	r2, [pc, #108]	; (8006a20 <TIM_OC4_SetConfig+0x7c>)
 80069b4:	401a      	ands	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4a15      	ldr	r2, [pc, #84]	; (8006a24 <TIM_OC4_SetConfig+0x80>)
 80069d0:	4013      	ands	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4a14      	ldr	r2, [pc, #80]	; (8006a28 <TIM_OC4_SetConfig+0x84>)
 80069d8:	4013      	ands	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	021b      	lsls	r3, r3, #8
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	4a10      	ldr	r2, [pc, #64]	; (8006a2c <TIM_OC4_SetConfig+0x88>)
 80069ec:	4013      	ands	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	031b      	lsls	r3, r3, #12
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	621a      	str	r2, [r3, #32]
}
 8006a16:	46c0      	nop			; (mov r8, r8)
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	b006      	add	sp, #24
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	46c0      	nop			; (mov r8, r8)
 8006a20:	ffffefff 	.word	0xffffefff
 8006a24:	ffff8fff 	.word	0xffff8fff
 8006a28:	fffffcff 	.word	0xfffffcff
 8006a2c:	ffffdfff 	.word	0xffffdfff

08006a30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	2201      	movs	r2, #1
 8006a48:	4393      	bics	r3, r2
 8006a4a:	001a      	movs	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	22f0      	movs	r2, #240	; 0xf0
 8006a5a:	4393      	bics	r3, r2
 8006a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	220a      	movs	r2, #10
 8006a6c:	4393      	bics	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	621a      	str	r2, [r3, #32]
}
 8006a84:	46c0      	nop			; (mov r8, r8)
 8006a86:	46bd      	mov	sp, r7
 8006a88:	b006      	add	sp, #24
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	2210      	movs	r2, #16
 8006a9e:	4393      	bics	r3, r2
 8006aa0:	001a      	movs	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	4a0d      	ldr	r2, [pc, #52]	; (8006aec <TIM_TI2_ConfigInputStage+0x60>)
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	031b      	lsls	r3, r3, #12
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	22a0      	movs	r2, #160	; 0xa0
 8006ac8:	4393      	bics	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	011b      	lsls	r3, r3, #4
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	621a      	str	r2, [r3, #32]
}
 8006ae2:	46c0      	nop			; (mov r8, r8)
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	b006      	add	sp, #24
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	46c0      	nop			; (mov r8, r8)
 8006aec:	ffff0fff 	.word	0xffff0fff

08006af0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2270      	movs	r2, #112	; 0x70
 8006b04:	4393      	bics	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	2207      	movs	r2, #7
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	609a      	str	r2, [r3, #8]
}
 8006b1a:	46c0      	nop			; (mov r8, r8)
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	b004      	add	sp, #16
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	4a09      	ldr	r2, [pc, #36]	; (8006b60 <TIM_ETR_SetConfig+0x3c>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	021a      	lsls	r2, r3, #8
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	609a      	str	r2, [r3, #8]
}
 8006b58:	46c0      	nop			; (mov r8, r8)
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	b006      	add	sp, #24
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	ffff00ff 	.word	0xffff00ff

08006b64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	221f      	movs	r2, #31
 8006b74:	4013      	ands	r3, r2
 8006b76:	2201      	movs	r2, #1
 8006b78:	409a      	lsls	r2, r3
 8006b7a:	0013      	movs	r3, r2
 8006b7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	43d2      	mvns	r2, r2
 8006b86:	401a      	ands	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a1a      	ldr	r2, [r3, #32]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	211f      	movs	r1, #31
 8006b94:	400b      	ands	r3, r1
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	4099      	lsls	r1, r3
 8006b9a:	000b      	movs	r3, r1
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	621a      	str	r2, [r3, #32]
}
 8006ba2:	46c0      	nop			; (mov r8, r8)
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	b006      	add	sp, #24
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2238      	movs	r2, #56	; 0x38
 8006bba:	5c9b      	ldrb	r3, [r3, r2]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d101      	bne.n	8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e042      	b.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2238      	movs	r2, #56	; 0x38
 8006bc8:	2101      	movs	r1, #1
 8006bca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2239      	movs	r2, #57	; 0x39
 8006bd0:	2102      	movs	r1, #2
 8006bd2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2270      	movs	r2, #112	; 0x70
 8006be8:	4393      	bics	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	2380      	movs	r3, #128	; 0x80
 8006c04:	05db      	lsls	r3, r3, #23
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d009      	beq.n	8006c1e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a11      	ldr	r2, [pc, #68]	; (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d004      	beq.n	8006c1e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a0f      	ldr	r2, [pc, #60]	; (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d10c      	bne.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2280      	movs	r2, #128	; 0x80
 8006c22:	4393      	bics	r3, r2
 8006c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2239      	movs	r2, #57	; 0x39
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2238      	movs	r2, #56	; 0x38
 8006c44:	2100      	movs	r1, #0
 8006c46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	b004      	add	sp, #16
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	46c0      	nop			; (mov r8, r8)
 8006c54:	40010800 	.word	0x40010800
 8006c58:	40011400 	.word	0x40011400

08006c5c <__errno>:
 8006c5c:	4b01      	ldr	r3, [pc, #4]	; (8006c64 <__errno+0x8>)
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	4770      	bx	lr
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	20000010 	.word	0x20000010

08006c68 <__libc_init_array>:
 8006c68:	b570      	push	{r4, r5, r6, lr}
 8006c6a:	2600      	movs	r6, #0
 8006c6c:	4d0c      	ldr	r5, [pc, #48]	; (8006ca0 <__libc_init_array+0x38>)
 8006c6e:	4c0d      	ldr	r4, [pc, #52]	; (8006ca4 <__libc_init_array+0x3c>)
 8006c70:	1b64      	subs	r4, r4, r5
 8006c72:	10a4      	asrs	r4, r4, #2
 8006c74:	42a6      	cmp	r6, r4
 8006c76:	d109      	bne.n	8006c8c <__libc_init_array+0x24>
 8006c78:	2600      	movs	r6, #0
 8006c7a:	f000 ff47 	bl	8007b0c <_init>
 8006c7e:	4d0a      	ldr	r5, [pc, #40]	; (8006ca8 <__libc_init_array+0x40>)
 8006c80:	4c0a      	ldr	r4, [pc, #40]	; (8006cac <__libc_init_array+0x44>)
 8006c82:	1b64      	subs	r4, r4, r5
 8006c84:	10a4      	asrs	r4, r4, #2
 8006c86:	42a6      	cmp	r6, r4
 8006c88:	d105      	bne.n	8006c96 <__libc_init_array+0x2e>
 8006c8a:	bd70      	pop	{r4, r5, r6, pc}
 8006c8c:	00b3      	lsls	r3, r6, #2
 8006c8e:	58eb      	ldr	r3, [r5, r3]
 8006c90:	4798      	blx	r3
 8006c92:	3601      	adds	r6, #1
 8006c94:	e7ee      	b.n	8006c74 <__libc_init_array+0xc>
 8006c96:	00b3      	lsls	r3, r6, #2
 8006c98:	58eb      	ldr	r3, [r5, r3]
 8006c9a:	4798      	blx	r3
 8006c9c:	3601      	adds	r6, #1
 8006c9e:	e7f2      	b.n	8006c86 <__libc_init_array+0x1e>
 8006ca0:	08007cf8 	.word	0x08007cf8
 8006ca4:	08007cf8 	.word	0x08007cf8
 8006ca8:	08007cf8 	.word	0x08007cf8
 8006cac:	08007cfc 	.word	0x08007cfc

08006cb0 <memset>:
 8006cb0:	0003      	movs	r3, r0
 8006cb2:	1882      	adds	r2, r0, r2
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d100      	bne.n	8006cba <memset+0xa>
 8006cb8:	4770      	bx	lr
 8006cba:	7019      	strb	r1, [r3, #0]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	e7f9      	b.n	8006cb4 <memset+0x4>

08006cc0 <siprintf>:
 8006cc0:	b40e      	push	{r1, r2, r3}
 8006cc2:	b500      	push	{lr}
 8006cc4:	490b      	ldr	r1, [pc, #44]	; (8006cf4 <siprintf+0x34>)
 8006cc6:	b09c      	sub	sp, #112	; 0x70
 8006cc8:	ab1d      	add	r3, sp, #116	; 0x74
 8006cca:	9002      	str	r0, [sp, #8]
 8006ccc:	9006      	str	r0, [sp, #24]
 8006cce:	9107      	str	r1, [sp, #28]
 8006cd0:	9104      	str	r1, [sp, #16]
 8006cd2:	4809      	ldr	r0, [pc, #36]	; (8006cf8 <siprintf+0x38>)
 8006cd4:	4909      	ldr	r1, [pc, #36]	; (8006cfc <siprintf+0x3c>)
 8006cd6:	cb04      	ldmia	r3!, {r2}
 8006cd8:	9105      	str	r1, [sp, #20]
 8006cda:	6800      	ldr	r0, [r0, #0]
 8006cdc:	a902      	add	r1, sp, #8
 8006cde:	9301      	str	r3, [sp, #4]
 8006ce0:	f000 f870 	bl	8006dc4 <_svfiprintf_r>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	9a02      	ldr	r2, [sp, #8]
 8006ce8:	7013      	strb	r3, [r2, #0]
 8006cea:	b01c      	add	sp, #112	; 0x70
 8006cec:	bc08      	pop	{r3}
 8006cee:	b003      	add	sp, #12
 8006cf0:	4718      	bx	r3
 8006cf2:	46c0      	nop			; (mov r8, r8)
 8006cf4:	7fffffff 	.word	0x7fffffff
 8006cf8:	20000010 	.word	0x20000010
 8006cfc:	ffff0208 	.word	0xffff0208

08006d00 <__ssputs_r>:
 8006d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d02:	688e      	ldr	r6, [r1, #8]
 8006d04:	b085      	sub	sp, #20
 8006d06:	0007      	movs	r7, r0
 8006d08:	000c      	movs	r4, r1
 8006d0a:	9203      	str	r2, [sp, #12]
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	429e      	cmp	r6, r3
 8006d10:	d83c      	bhi.n	8006d8c <__ssputs_r+0x8c>
 8006d12:	2390      	movs	r3, #144	; 0x90
 8006d14:	898a      	ldrh	r2, [r1, #12]
 8006d16:	00db      	lsls	r3, r3, #3
 8006d18:	421a      	tst	r2, r3
 8006d1a:	d034      	beq.n	8006d86 <__ssputs_r+0x86>
 8006d1c:	6909      	ldr	r1, [r1, #16]
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	6960      	ldr	r0, [r4, #20]
 8006d22:	1a5b      	subs	r3, r3, r1
 8006d24:	9302      	str	r3, [sp, #8]
 8006d26:	2303      	movs	r3, #3
 8006d28:	4343      	muls	r3, r0
 8006d2a:	0fdd      	lsrs	r5, r3, #31
 8006d2c:	18ed      	adds	r5, r5, r3
 8006d2e:	9b01      	ldr	r3, [sp, #4]
 8006d30:	9802      	ldr	r0, [sp, #8]
 8006d32:	3301      	adds	r3, #1
 8006d34:	181b      	adds	r3, r3, r0
 8006d36:	106d      	asrs	r5, r5, #1
 8006d38:	42ab      	cmp	r3, r5
 8006d3a:	d900      	bls.n	8006d3e <__ssputs_r+0x3e>
 8006d3c:	001d      	movs	r5, r3
 8006d3e:	0553      	lsls	r3, r2, #21
 8006d40:	d532      	bpl.n	8006da8 <__ssputs_r+0xa8>
 8006d42:	0029      	movs	r1, r5
 8006d44:	0038      	movs	r0, r7
 8006d46:	f000 fb53 	bl	80073f0 <_malloc_r>
 8006d4a:	1e06      	subs	r6, r0, #0
 8006d4c:	d109      	bne.n	8006d62 <__ssputs_r+0x62>
 8006d4e:	230c      	movs	r3, #12
 8006d50:	603b      	str	r3, [r7, #0]
 8006d52:	2340      	movs	r3, #64	; 0x40
 8006d54:	2001      	movs	r0, #1
 8006d56:	89a2      	ldrh	r2, [r4, #12]
 8006d58:	4240      	negs	r0, r0
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	81a3      	strh	r3, [r4, #12]
 8006d5e:	b005      	add	sp, #20
 8006d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d62:	9a02      	ldr	r2, [sp, #8]
 8006d64:	6921      	ldr	r1, [r4, #16]
 8006d66:	f000 faba 	bl	80072de <memcpy>
 8006d6a:	89a3      	ldrh	r3, [r4, #12]
 8006d6c:	4a14      	ldr	r2, [pc, #80]	; (8006dc0 <__ssputs_r+0xc0>)
 8006d6e:	401a      	ands	r2, r3
 8006d70:	2380      	movs	r3, #128	; 0x80
 8006d72:	4313      	orrs	r3, r2
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	9b02      	ldr	r3, [sp, #8]
 8006d78:	6126      	str	r6, [r4, #16]
 8006d7a:	18f6      	adds	r6, r6, r3
 8006d7c:	6026      	str	r6, [r4, #0]
 8006d7e:	6165      	str	r5, [r4, #20]
 8006d80:	9e01      	ldr	r6, [sp, #4]
 8006d82:	1aed      	subs	r5, r5, r3
 8006d84:	60a5      	str	r5, [r4, #8]
 8006d86:	9b01      	ldr	r3, [sp, #4]
 8006d88:	429e      	cmp	r6, r3
 8006d8a:	d900      	bls.n	8006d8e <__ssputs_r+0x8e>
 8006d8c:	9e01      	ldr	r6, [sp, #4]
 8006d8e:	0032      	movs	r2, r6
 8006d90:	9903      	ldr	r1, [sp, #12]
 8006d92:	6820      	ldr	r0, [r4, #0]
 8006d94:	f000 faac 	bl	80072f0 <memmove>
 8006d98:	68a3      	ldr	r3, [r4, #8]
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	1b9b      	subs	r3, r3, r6
 8006d9e:	60a3      	str	r3, [r4, #8]
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	199e      	adds	r6, r3, r6
 8006da4:	6026      	str	r6, [r4, #0]
 8006da6:	e7da      	b.n	8006d5e <__ssputs_r+0x5e>
 8006da8:	002a      	movs	r2, r5
 8006daa:	0038      	movs	r0, r7
 8006dac:	f000 fb96 	bl	80074dc <_realloc_r>
 8006db0:	1e06      	subs	r6, r0, #0
 8006db2:	d1e0      	bne.n	8006d76 <__ssputs_r+0x76>
 8006db4:	0038      	movs	r0, r7
 8006db6:	6921      	ldr	r1, [r4, #16]
 8006db8:	f000 faae 	bl	8007318 <_free_r>
 8006dbc:	e7c7      	b.n	8006d4e <__ssputs_r+0x4e>
 8006dbe:	46c0      	nop			; (mov r8, r8)
 8006dc0:	fffffb7f 	.word	0xfffffb7f

08006dc4 <_svfiprintf_r>:
 8006dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dc6:	b0a1      	sub	sp, #132	; 0x84
 8006dc8:	9003      	str	r0, [sp, #12]
 8006dca:	001d      	movs	r5, r3
 8006dcc:	898b      	ldrh	r3, [r1, #12]
 8006dce:	000f      	movs	r7, r1
 8006dd0:	0016      	movs	r6, r2
 8006dd2:	061b      	lsls	r3, r3, #24
 8006dd4:	d511      	bpl.n	8006dfa <_svfiprintf_r+0x36>
 8006dd6:	690b      	ldr	r3, [r1, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10e      	bne.n	8006dfa <_svfiprintf_r+0x36>
 8006ddc:	2140      	movs	r1, #64	; 0x40
 8006dde:	f000 fb07 	bl	80073f0 <_malloc_r>
 8006de2:	6038      	str	r0, [r7, #0]
 8006de4:	6138      	str	r0, [r7, #16]
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d105      	bne.n	8006df6 <_svfiprintf_r+0x32>
 8006dea:	230c      	movs	r3, #12
 8006dec:	9a03      	ldr	r2, [sp, #12]
 8006dee:	3801      	subs	r0, #1
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	b021      	add	sp, #132	; 0x84
 8006df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006df6:	2340      	movs	r3, #64	; 0x40
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	ac08      	add	r4, sp, #32
 8006dfe:	6163      	str	r3, [r4, #20]
 8006e00:	3320      	adds	r3, #32
 8006e02:	7663      	strb	r3, [r4, #25]
 8006e04:	3310      	adds	r3, #16
 8006e06:	76a3      	strb	r3, [r4, #26]
 8006e08:	9507      	str	r5, [sp, #28]
 8006e0a:	0035      	movs	r5, r6
 8006e0c:	782b      	ldrb	r3, [r5, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <_svfiprintf_r+0x52>
 8006e12:	2b25      	cmp	r3, #37	; 0x25
 8006e14:	d147      	bne.n	8006ea6 <_svfiprintf_r+0xe2>
 8006e16:	1bab      	subs	r3, r5, r6
 8006e18:	9305      	str	r3, [sp, #20]
 8006e1a:	42b5      	cmp	r5, r6
 8006e1c:	d00c      	beq.n	8006e38 <_svfiprintf_r+0x74>
 8006e1e:	0032      	movs	r2, r6
 8006e20:	0039      	movs	r1, r7
 8006e22:	9803      	ldr	r0, [sp, #12]
 8006e24:	f7ff ff6c 	bl	8006d00 <__ssputs_r>
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	d100      	bne.n	8006e2e <_svfiprintf_r+0x6a>
 8006e2c:	e0ae      	b.n	8006f8c <_svfiprintf_r+0x1c8>
 8006e2e:	6962      	ldr	r2, [r4, #20]
 8006e30:	9b05      	ldr	r3, [sp, #20]
 8006e32:	4694      	mov	ip, r2
 8006e34:	4463      	add	r3, ip
 8006e36:	6163      	str	r3, [r4, #20]
 8006e38:	782b      	ldrb	r3, [r5, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d100      	bne.n	8006e40 <_svfiprintf_r+0x7c>
 8006e3e:	e0a5      	b.n	8006f8c <_svfiprintf_r+0x1c8>
 8006e40:	2201      	movs	r2, #1
 8006e42:	2300      	movs	r3, #0
 8006e44:	4252      	negs	r2, r2
 8006e46:	6062      	str	r2, [r4, #4]
 8006e48:	a904      	add	r1, sp, #16
 8006e4a:	3254      	adds	r2, #84	; 0x54
 8006e4c:	1852      	adds	r2, r2, r1
 8006e4e:	1c6e      	adds	r6, r5, #1
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	60e3      	str	r3, [r4, #12]
 8006e54:	60a3      	str	r3, [r4, #8]
 8006e56:	7013      	strb	r3, [r2, #0]
 8006e58:	65a3      	str	r3, [r4, #88]	; 0x58
 8006e5a:	2205      	movs	r2, #5
 8006e5c:	7831      	ldrb	r1, [r6, #0]
 8006e5e:	4854      	ldr	r0, [pc, #336]	; (8006fb0 <_svfiprintf_r+0x1ec>)
 8006e60:	f000 fa32 	bl	80072c8 <memchr>
 8006e64:	1c75      	adds	r5, r6, #1
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d11f      	bne.n	8006eaa <_svfiprintf_r+0xe6>
 8006e6a:	6822      	ldr	r2, [r4, #0]
 8006e6c:	06d3      	lsls	r3, r2, #27
 8006e6e:	d504      	bpl.n	8006e7a <_svfiprintf_r+0xb6>
 8006e70:	2353      	movs	r3, #83	; 0x53
 8006e72:	a904      	add	r1, sp, #16
 8006e74:	185b      	adds	r3, r3, r1
 8006e76:	2120      	movs	r1, #32
 8006e78:	7019      	strb	r1, [r3, #0]
 8006e7a:	0713      	lsls	r3, r2, #28
 8006e7c:	d504      	bpl.n	8006e88 <_svfiprintf_r+0xc4>
 8006e7e:	2353      	movs	r3, #83	; 0x53
 8006e80:	a904      	add	r1, sp, #16
 8006e82:	185b      	adds	r3, r3, r1
 8006e84:	212b      	movs	r1, #43	; 0x2b
 8006e86:	7019      	strb	r1, [r3, #0]
 8006e88:	7833      	ldrb	r3, [r6, #0]
 8006e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e8c:	d016      	beq.n	8006ebc <_svfiprintf_r+0xf8>
 8006e8e:	0035      	movs	r5, r6
 8006e90:	2100      	movs	r1, #0
 8006e92:	200a      	movs	r0, #10
 8006e94:	68e3      	ldr	r3, [r4, #12]
 8006e96:	782a      	ldrb	r2, [r5, #0]
 8006e98:	1c6e      	adds	r6, r5, #1
 8006e9a:	3a30      	subs	r2, #48	; 0x30
 8006e9c:	2a09      	cmp	r2, #9
 8006e9e:	d94e      	bls.n	8006f3e <_svfiprintf_r+0x17a>
 8006ea0:	2900      	cmp	r1, #0
 8006ea2:	d111      	bne.n	8006ec8 <_svfiprintf_r+0x104>
 8006ea4:	e017      	b.n	8006ed6 <_svfiprintf_r+0x112>
 8006ea6:	3501      	adds	r5, #1
 8006ea8:	e7b0      	b.n	8006e0c <_svfiprintf_r+0x48>
 8006eaa:	4b41      	ldr	r3, [pc, #260]	; (8006fb0 <_svfiprintf_r+0x1ec>)
 8006eac:	6822      	ldr	r2, [r4, #0]
 8006eae:	1ac0      	subs	r0, r0, r3
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	4083      	lsls	r3, r0
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	002e      	movs	r6, r5
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	e7ce      	b.n	8006e5a <_svfiprintf_r+0x96>
 8006ebc:	9b07      	ldr	r3, [sp, #28]
 8006ebe:	1d19      	adds	r1, r3, #4
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	9107      	str	r1, [sp, #28]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	db01      	blt.n	8006ecc <_svfiprintf_r+0x108>
 8006ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eca:	e004      	b.n	8006ed6 <_svfiprintf_r+0x112>
 8006ecc:	425b      	negs	r3, r3
 8006ece:	60e3      	str	r3, [r4, #12]
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	782b      	ldrb	r3, [r5, #0]
 8006ed8:	2b2e      	cmp	r3, #46	; 0x2e
 8006eda:	d10a      	bne.n	8006ef2 <_svfiprintf_r+0x12e>
 8006edc:	786b      	ldrb	r3, [r5, #1]
 8006ede:	2b2a      	cmp	r3, #42	; 0x2a
 8006ee0:	d135      	bne.n	8006f4e <_svfiprintf_r+0x18a>
 8006ee2:	9b07      	ldr	r3, [sp, #28]
 8006ee4:	3502      	adds	r5, #2
 8006ee6:	1d1a      	adds	r2, r3, #4
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	9207      	str	r2, [sp, #28]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	db2b      	blt.n	8006f48 <_svfiprintf_r+0x184>
 8006ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ef2:	4e30      	ldr	r6, [pc, #192]	; (8006fb4 <_svfiprintf_r+0x1f0>)
 8006ef4:	2203      	movs	r2, #3
 8006ef6:	0030      	movs	r0, r6
 8006ef8:	7829      	ldrb	r1, [r5, #0]
 8006efa:	f000 f9e5 	bl	80072c8 <memchr>
 8006efe:	2800      	cmp	r0, #0
 8006f00:	d006      	beq.n	8006f10 <_svfiprintf_r+0x14c>
 8006f02:	2340      	movs	r3, #64	; 0x40
 8006f04:	1b80      	subs	r0, r0, r6
 8006f06:	4083      	lsls	r3, r0
 8006f08:	6822      	ldr	r2, [r4, #0]
 8006f0a:	3501      	adds	r5, #1
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	6023      	str	r3, [r4, #0]
 8006f10:	7829      	ldrb	r1, [r5, #0]
 8006f12:	2206      	movs	r2, #6
 8006f14:	4828      	ldr	r0, [pc, #160]	; (8006fb8 <_svfiprintf_r+0x1f4>)
 8006f16:	1c6e      	adds	r6, r5, #1
 8006f18:	7621      	strb	r1, [r4, #24]
 8006f1a:	f000 f9d5 	bl	80072c8 <memchr>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	d03c      	beq.n	8006f9c <_svfiprintf_r+0x1d8>
 8006f22:	4b26      	ldr	r3, [pc, #152]	; (8006fbc <_svfiprintf_r+0x1f8>)
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d125      	bne.n	8006f74 <_svfiprintf_r+0x1b0>
 8006f28:	2207      	movs	r2, #7
 8006f2a:	9b07      	ldr	r3, [sp, #28]
 8006f2c:	3307      	adds	r3, #7
 8006f2e:	4393      	bics	r3, r2
 8006f30:	3308      	adds	r3, #8
 8006f32:	9307      	str	r3, [sp, #28]
 8006f34:	6963      	ldr	r3, [r4, #20]
 8006f36:	9a04      	ldr	r2, [sp, #16]
 8006f38:	189b      	adds	r3, r3, r2
 8006f3a:	6163      	str	r3, [r4, #20]
 8006f3c:	e765      	b.n	8006e0a <_svfiprintf_r+0x46>
 8006f3e:	4343      	muls	r3, r0
 8006f40:	0035      	movs	r5, r6
 8006f42:	2101      	movs	r1, #1
 8006f44:	189b      	adds	r3, r3, r2
 8006f46:	e7a6      	b.n	8006e96 <_svfiprintf_r+0xd2>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	425b      	negs	r3, r3
 8006f4c:	e7d0      	b.n	8006ef0 <_svfiprintf_r+0x12c>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	200a      	movs	r0, #10
 8006f52:	001a      	movs	r2, r3
 8006f54:	3501      	adds	r5, #1
 8006f56:	6063      	str	r3, [r4, #4]
 8006f58:	7829      	ldrb	r1, [r5, #0]
 8006f5a:	1c6e      	adds	r6, r5, #1
 8006f5c:	3930      	subs	r1, #48	; 0x30
 8006f5e:	2909      	cmp	r1, #9
 8006f60:	d903      	bls.n	8006f6a <_svfiprintf_r+0x1a6>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d0c5      	beq.n	8006ef2 <_svfiprintf_r+0x12e>
 8006f66:	9209      	str	r2, [sp, #36]	; 0x24
 8006f68:	e7c3      	b.n	8006ef2 <_svfiprintf_r+0x12e>
 8006f6a:	4342      	muls	r2, r0
 8006f6c:	0035      	movs	r5, r6
 8006f6e:	2301      	movs	r3, #1
 8006f70:	1852      	adds	r2, r2, r1
 8006f72:	e7f1      	b.n	8006f58 <_svfiprintf_r+0x194>
 8006f74:	ab07      	add	r3, sp, #28
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	003a      	movs	r2, r7
 8006f7a:	0021      	movs	r1, r4
 8006f7c:	4b10      	ldr	r3, [pc, #64]	; (8006fc0 <_svfiprintf_r+0x1fc>)
 8006f7e:	9803      	ldr	r0, [sp, #12]
 8006f80:	e000      	b.n	8006f84 <_svfiprintf_r+0x1c0>
 8006f82:	bf00      	nop
 8006f84:	9004      	str	r0, [sp, #16]
 8006f86:	9b04      	ldr	r3, [sp, #16]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	d1d3      	bne.n	8006f34 <_svfiprintf_r+0x170>
 8006f8c:	89bb      	ldrh	r3, [r7, #12]
 8006f8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006f90:	065b      	lsls	r3, r3, #25
 8006f92:	d400      	bmi.n	8006f96 <_svfiprintf_r+0x1d2>
 8006f94:	e72d      	b.n	8006df2 <_svfiprintf_r+0x2e>
 8006f96:	2001      	movs	r0, #1
 8006f98:	4240      	negs	r0, r0
 8006f9a:	e72a      	b.n	8006df2 <_svfiprintf_r+0x2e>
 8006f9c:	ab07      	add	r3, sp, #28
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	003a      	movs	r2, r7
 8006fa2:	0021      	movs	r1, r4
 8006fa4:	4b06      	ldr	r3, [pc, #24]	; (8006fc0 <_svfiprintf_r+0x1fc>)
 8006fa6:	9803      	ldr	r0, [sp, #12]
 8006fa8:	f000 f87c 	bl	80070a4 <_printf_i>
 8006fac:	e7ea      	b.n	8006f84 <_svfiprintf_r+0x1c0>
 8006fae:	46c0      	nop			; (mov r8, r8)
 8006fb0:	08007cbd 	.word	0x08007cbd
 8006fb4:	08007cc3 	.word	0x08007cc3
 8006fb8:	08007cc7 	.word	0x08007cc7
 8006fbc:	00000000 	.word	0x00000000
 8006fc0:	08006d01 	.word	0x08006d01

08006fc4 <_printf_common>:
 8006fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fc6:	0015      	movs	r5, r2
 8006fc8:	9301      	str	r3, [sp, #4]
 8006fca:	688a      	ldr	r2, [r1, #8]
 8006fcc:	690b      	ldr	r3, [r1, #16]
 8006fce:	000c      	movs	r4, r1
 8006fd0:	9000      	str	r0, [sp, #0]
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	da00      	bge.n	8006fd8 <_printf_common+0x14>
 8006fd6:	0013      	movs	r3, r2
 8006fd8:	0022      	movs	r2, r4
 8006fda:	602b      	str	r3, [r5, #0]
 8006fdc:	3243      	adds	r2, #67	; 0x43
 8006fde:	7812      	ldrb	r2, [r2, #0]
 8006fe0:	2a00      	cmp	r2, #0
 8006fe2:	d001      	beq.n	8006fe8 <_printf_common+0x24>
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	602b      	str	r3, [r5, #0]
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	069b      	lsls	r3, r3, #26
 8006fec:	d502      	bpl.n	8006ff4 <_printf_common+0x30>
 8006fee:	682b      	ldr	r3, [r5, #0]
 8006ff0:	3302      	adds	r3, #2
 8006ff2:	602b      	str	r3, [r5, #0]
 8006ff4:	6822      	ldr	r2, [r4, #0]
 8006ff6:	2306      	movs	r3, #6
 8006ff8:	0017      	movs	r7, r2
 8006ffa:	401f      	ands	r7, r3
 8006ffc:	421a      	tst	r2, r3
 8006ffe:	d027      	beq.n	8007050 <_printf_common+0x8c>
 8007000:	0023      	movs	r3, r4
 8007002:	3343      	adds	r3, #67	; 0x43
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	1e5a      	subs	r2, r3, #1
 8007008:	4193      	sbcs	r3, r2
 800700a:	6822      	ldr	r2, [r4, #0]
 800700c:	0692      	lsls	r2, r2, #26
 800700e:	d430      	bmi.n	8007072 <_printf_common+0xae>
 8007010:	0022      	movs	r2, r4
 8007012:	9901      	ldr	r1, [sp, #4]
 8007014:	9800      	ldr	r0, [sp, #0]
 8007016:	9e08      	ldr	r6, [sp, #32]
 8007018:	3243      	adds	r2, #67	; 0x43
 800701a:	47b0      	blx	r6
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	d025      	beq.n	800706c <_printf_common+0xa8>
 8007020:	2306      	movs	r3, #6
 8007022:	6820      	ldr	r0, [r4, #0]
 8007024:	682a      	ldr	r2, [r5, #0]
 8007026:	68e1      	ldr	r1, [r4, #12]
 8007028:	2500      	movs	r5, #0
 800702a:	4003      	ands	r3, r0
 800702c:	2b04      	cmp	r3, #4
 800702e:	d103      	bne.n	8007038 <_printf_common+0x74>
 8007030:	1a8d      	subs	r5, r1, r2
 8007032:	43eb      	mvns	r3, r5
 8007034:	17db      	asrs	r3, r3, #31
 8007036:	401d      	ands	r5, r3
 8007038:	68a3      	ldr	r3, [r4, #8]
 800703a:	6922      	ldr	r2, [r4, #16]
 800703c:	4293      	cmp	r3, r2
 800703e:	dd01      	ble.n	8007044 <_printf_common+0x80>
 8007040:	1a9b      	subs	r3, r3, r2
 8007042:	18ed      	adds	r5, r5, r3
 8007044:	2700      	movs	r7, #0
 8007046:	42bd      	cmp	r5, r7
 8007048:	d120      	bne.n	800708c <_printf_common+0xc8>
 800704a:	2000      	movs	r0, #0
 800704c:	e010      	b.n	8007070 <_printf_common+0xac>
 800704e:	3701      	adds	r7, #1
 8007050:	68e3      	ldr	r3, [r4, #12]
 8007052:	682a      	ldr	r2, [r5, #0]
 8007054:	1a9b      	subs	r3, r3, r2
 8007056:	42bb      	cmp	r3, r7
 8007058:	ddd2      	ble.n	8007000 <_printf_common+0x3c>
 800705a:	0022      	movs	r2, r4
 800705c:	2301      	movs	r3, #1
 800705e:	9901      	ldr	r1, [sp, #4]
 8007060:	9800      	ldr	r0, [sp, #0]
 8007062:	9e08      	ldr	r6, [sp, #32]
 8007064:	3219      	adds	r2, #25
 8007066:	47b0      	blx	r6
 8007068:	1c43      	adds	r3, r0, #1
 800706a:	d1f0      	bne.n	800704e <_printf_common+0x8a>
 800706c:	2001      	movs	r0, #1
 800706e:	4240      	negs	r0, r0
 8007070:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007072:	2030      	movs	r0, #48	; 0x30
 8007074:	18e1      	adds	r1, r4, r3
 8007076:	3143      	adds	r1, #67	; 0x43
 8007078:	7008      	strb	r0, [r1, #0]
 800707a:	0021      	movs	r1, r4
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	3145      	adds	r1, #69	; 0x45
 8007080:	7809      	ldrb	r1, [r1, #0]
 8007082:	18a2      	adds	r2, r4, r2
 8007084:	3243      	adds	r2, #67	; 0x43
 8007086:	3302      	adds	r3, #2
 8007088:	7011      	strb	r1, [r2, #0]
 800708a:	e7c1      	b.n	8007010 <_printf_common+0x4c>
 800708c:	0022      	movs	r2, r4
 800708e:	2301      	movs	r3, #1
 8007090:	9901      	ldr	r1, [sp, #4]
 8007092:	9800      	ldr	r0, [sp, #0]
 8007094:	9e08      	ldr	r6, [sp, #32]
 8007096:	321a      	adds	r2, #26
 8007098:	47b0      	blx	r6
 800709a:	1c43      	adds	r3, r0, #1
 800709c:	d0e6      	beq.n	800706c <_printf_common+0xa8>
 800709e:	3701      	adds	r7, #1
 80070a0:	e7d1      	b.n	8007046 <_printf_common+0x82>
	...

080070a4 <_printf_i>:
 80070a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070a6:	b08b      	sub	sp, #44	; 0x2c
 80070a8:	9206      	str	r2, [sp, #24]
 80070aa:	000a      	movs	r2, r1
 80070ac:	3243      	adds	r2, #67	; 0x43
 80070ae:	9307      	str	r3, [sp, #28]
 80070b0:	9005      	str	r0, [sp, #20]
 80070b2:	9204      	str	r2, [sp, #16]
 80070b4:	7e0a      	ldrb	r2, [r1, #24]
 80070b6:	000c      	movs	r4, r1
 80070b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070ba:	2a78      	cmp	r2, #120	; 0x78
 80070bc:	d807      	bhi.n	80070ce <_printf_i+0x2a>
 80070be:	2a62      	cmp	r2, #98	; 0x62
 80070c0:	d809      	bhi.n	80070d6 <_printf_i+0x32>
 80070c2:	2a00      	cmp	r2, #0
 80070c4:	d100      	bne.n	80070c8 <_printf_i+0x24>
 80070c6:	e0c1      	b.n	800724c <_printf_i+0x1a8>
 80070c8:	2a58      	cmp	r2, #88	; 0x58
 80070ca:	d100      	bne.n	80070ce <_printf_i+0x2a>
 80070cc:	e08c      	b.n	80071e8 <_printf_i+0x144>
 80070ce:	0026      	movs	r6, r4
 80070d0:	3642      	adds	r6, #66	; 0x42
 80070d2:	7032      	strb	r2, [r6, #0]
 80070d4:	e022      	b.n	800711c <_printf_i+0x78>
 80070d6:	0010      	movs	r0, r2
 80070d8:	3863      	subs	r0, #99	; 0x63
 80070da:	2815      	cmp	r0, #21
 80070dc:	d8f7      	bhi.n	80070ce <_printf_i+0x2a>
 80070de:	f7f9 f813 	bl	8000108 <__gnu_thumb1_case_shi>
 80070e2:	0016      	.short	0x0016
 80070e4:	fff6001f 	.word	0xfff6001f
 80070e8:	fff6fff6 	.word	0xfff6fff6
 80070ec:	001ffff6 	.word	0x001ffff6
 80070f0:	fff6fff6 	.word	0xfff6fff6
 80070f4:	fff6fff6 	.word	0xfff6fff6
 80070f8:	003600a8 	.word	0x003600a8
 80070fc:	fff6009a 	.word	0xfff6009a
 8007100:	00b9fff6 	.word	0x00b9fff6
 8007104:	0036fff6 	.word	0x0036fff6
 8007108:	fff6fff6 	.word	0xfff6fff6
 800710c:	009e      	.short	0x009e
 800710e:	0026      	movs	r6, r4
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	3642      	adds	r6, #66	; 0x42
 8007114:	1d11      	adds	r1, r2, #4
 8007116:	6019      	str	r1, [r3, #0]
 8007118:	6813      	ldr	r3, [r2, #0]
 800711a:	7033      	strb	r3, [r6, #0]
 800711c:	2301      	movs	r3, #1
 800711e:	e0a7      	b.n	8007270 <_printf_i+0x1cc>
 8007120:	6808      	ldr	r0, [r1, #0]
 8007122:	6819      	ldr	r1, [r3, #0]
 8007124:	1d0a      	adds	r2, r1, #4
 8007126:	0605      	lsls	r5, r0, #24
 8007128:	d50b      	bpl.n	8007142 <_printf_i+0x9e>
 800712a:	680d      	ldr	r5, [r1, #0]
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	2d00      	cmp	r5, #0
 8007130:	da03      	bge.n	800713a <_printf_i+0x96>
 8007132:	232d      	movs	r3, #45	; 0x2d
 8007134:	9a04      	ldr	r2, [sp, #16]
 8007136:	426d      	negs	r5, r5
 8007138:	7013      	strb	r3, [r2, #0]
 800713a:	4b61      	ldr	r3, [pc, #388]	; (80072c0 <_printf_i+0x21c>)
 800713c:	270a      	movs	r7, #10
 800713e:	9303      	str	r3, [sp, #12]
 8007140:	e01b      	b.n	800717a <_printf_i+0xd6>
 8007142:	680d      	ldr	r5, [r1, #0]
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	0641      	lsls	r1, r0, #25
 8007148:	d5f1      	bpl.n	800712e <_printf_i+0x8a>
 800714a:	b22d      	sxth	r5, r5
 800714c:	e7ef      	b.n	800712e <_printf_i+0x8a>
 800714e:	680d      	ldr	r5, [r1, #0]
 8007150:	6819      	ldr	r1, [r3, #0]
 8007152:	1d08      	adds	r0, r1, #4
 8007154:	6018      	str	r0, [r3, #0]
 8007156:	062e      	lsls	r6, r5, #24
 8007158:	d501      	bpl.n	800715e <_printf_i+0xba>
 800715a:	680d      	ldr	r5, [r1, #0]
 800715c:	e003      	b.n	8007166 <_printf_i+0xc2>
 800715e:	066d      	lsls	r5, r5, #25
 8007160:	d5fb      	bpl.n	800715a <_printf_i+0xb6>
 8007162:	680d      	ldr	r5, [r1, #0]
 8007164:	b2ad      	uxth	r5, r5
 8007166:	4b56      	ldr	r3, [pc, #344]	; (80072c0 <_printf_i+0x21c>)
 8007168:	2708      	movs	r7, #8
 800716a:	9303      	str	r3, [sp, #12]
 800716c:	2a6f      	cmp	r2, #111	; 0x6f
 800716e:	d000      	beq.n	8007172 <_printf_i+0xce>
 8007170:	3702      	adds	r7, #2
 8007172:	0023      	movs	r3, r4
 8007174:	2200      	movs	r2, #0
 8007176:	3343      	adds	r3, #67	; 0x43
 8007178:	701a      	strb	r2, [r3, #0]
 800717a:	6863      	ldr	r3, [r4, #4]
 800717c:	60a3      	str	r3, [r4, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	db03      	blt.n	800718a <_printf_i+0xe6>
 8007182:	2204      	movs	r2, #4
 8007184:	6821      	ldr	r1, [r4, #0]
 8007186:	4391      	bics	r1, r2
 8007188:	6021      	str	r1, [r4, #0]
 800718a:	2d00      	cmp	r5, #0
 800718c:	d102      	bne.n	8007194 <_printf_i+0xf0>
 800718e:	9e04      	ldr	r6, [sp, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00c      	beq.n	80071ae <_printf_i+0x10a>
 8007194:	9e04      	ldr	r6, [sp, #16]
 8007196:	0028      	movs	r0, r5
 8007198:	0039      	movs	r1, r7
 800719a:	f7f9 f845 	bl	8000228 <__aeabi_uidivmod>
 800719e:	9b03      	ldr	r3, [sp, #12]
 80071a0:	3e01      	subs	r6, #1
 80071a2:	5c5b      	ldrb	r3, [r3, r1]
 80071a4:	7033      	strb	r3, [r6, #0]
 80071a6:	002b      	movs	r3, r5
 80071a8:	0005      	movs	r5, r0
 80071aa:	429f      	cmp	r7, r3
 80071ac:	d9f3      	bls.n	8007196 <_printf_i+0xf2>
 80071ae:	2f08      	cmp	r7, #8
 80071b0:	d109      	bne.n	80071c6 <_printf_i+0x122>
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	07db      	lsls	r3, r3, #31
 80071b6:	d506      	bpl.n	80071c6 <_printf_i+0x122>
 80071b8:	6863      	ldr	r3, [r4, #4]
 80071ba:	6922      	ldr	r2, [r4, #16]
 80071bc:	4293      	cmp	r3, r2
 80071be:	dc02      	bgt.n	80071c6 <_printf_i+0x122>
 80071c0:	2330      	movs	r3, #48	; 0x30
 80071c2:	3e01      	subs	r6, #1
 80071c4:	7033      	strb	r3, [r6, #0]
 80071c6:	9b04      	ldr	r3, [sp, #16]
 80071c8:	1b9b      	subs	r3, r3, r6
 80071ca:	6123      	str	r3, [r4, #16]
 80071cc:	9b07      	ldr	r3, [sp, #28]
 80071ce:	0021      	movs	r1, r4
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	9805      	ldr	r0, [sp, #20]
 80071d4:	9b06      	ldr	r3, [sp, #24]
 80071d6:	aa09      	add	r2, sp, #36	; 0x24
 80071d8:	f7ff fef4 	bl	8006fc4 <_printf_common>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d14c      	bne.n	800727a <_printf_i+0x1d6>
 80071e0:	2001      	movs	r0, #1
 80071e2:	4240      	negs	r0, r0
 80071e4:	b00b      	add	sp, #44	; 0x2c
 80071e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071e8:	3145      	adds	r1, #69	; 0x45
 80071ea:	700a      	strb	r2, [r1, #0]
 80071ec:	4a34      	ldr	r2, [pc, #208]	; (80072c0 <_printf_i+0x21c>)
 80071ee:	9203      	str	r2, [sp, #12]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	6821      	ldr	r1, [r4, #0]
 80071f4:	ca20      	ldmia	r2!, {r5}
 80071f6:	601a      	str	r2, [r3, #0]
 80071f8:	0608      	lsls	r0, r1, #24
 80071fa:	d516      	bpl.n	800722a <_printf_i+0x186>
 80071fc:	07cb      	lsls	r3, r1, #31
 80071fe:	d502      	bpl.n	8007206 <_printf_i+0x162>
 8007200:	2320      	movs	r3, #32
 8007202:	4319      	orrs	r1, r3
 8007204:	6021      	str	r1, [r4, #0]
 8007206:	2710      	movs	r7, #16
 8007208:	2d00      	cmp	r5, #0
 800720a:	d1b2      	bne.n	8007172 <_printf_i+0xce>
 800720c:	2320      	movs	r3, #32
 800720e:	6822      	ldr	r2, [r4, #0]
 8007210:	439a      	bics	r2, r3
 8007212:	6022      	str	r2, [r4, #0]
 8007214:	e7ad      	b.n	8007172 <_printf_i+0xce>
 8007216:	2220      	movs	r2, #32
 8007218:	6809      	ldr	r1, [r1, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	6022      	str	r2, [r4, #0]
 800721e:	0022      	movs	r2, r4
 8007220:	2178      	movs	r1, #120	; 0x78
 8007222:	3245      	adds	r2, #69	; 0x45
 8007224:	7011      	strb	r1, [r2, #0]
 8007226:	4a27      	ldr	r2, [pc, #156]	; (80072c4 <_printf_i+0x220>)
 8007228:	e7e1      	b.n	80071ee <_printf_i+0x14a>
 800722a:	0648      	lsls	r0, r1, #25
 800722c:	d5e6      	bpl.n	80071fc <_printf_i+0x158>
 800722e:	b2ad      	uxth	r5, r5
 8007230:	e7e4      	b.n	80071fc <_printf_i+0x158>
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	680d      	ldr	r5, [r1, #0]
 8007236:	1d10      	adds	r0, r2, #4
 8007238:	6949      	ldr	r1, [r1, #20]
 800723a:	6018      	str	r0, [r3, #0]
 800723c:	6813      	ldr	r3, [r2, #0]
 800723e:	062e      	lsls	r6, r5, #24
 8007240:	d501      	bpl.n	8007246 <_printf_i+0x1a2>
 8007242:	6019      	str	r1, [r3, #0]
 8007244:	e002      	b.n	800724c <_printf_i+0x1a8>
 8007246:	066d      	lsls	r5, r5, #25
 8007248:	d5fb      	bpl.n	8007242 <_printf_i+0x19e>
 800724a:	8019      	strh	r1, [r3, #0]
 800724c:	2300      	movs	r3, #0
 800724e:	9e04      	ldr	r6, [sp, #16]
 8007250:	6123      	str	r3, [r4, #16]
 8007252:	e7bb      	b.n	80071cc <_printf_i+0x128>
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	1d11      	adds	r1, r2, #4
 8007258:	6019      	str	r1, [r3, #0]
 800725a:	6816      	ldr	r6, [r2, #0]
 800725c:	2100      	movs	r1, #0
 800725e:	0030      	movs	r0, r6
 8007260:	6862      	ldr	r2, [r4, #4]
 8007262:	f000 f831 	bl	80072c8 <memchr>
 8007266:	2800      	cmp	r0, #0
 8007268:	d001      	beq.n	800726e <_printf_i+0x1ca>
 800726a:	1b80      	subs	r0, r0, r6
 800726c:	6060      	str	r0, [r4, #4]
 800726e:	6863      	ldr	r3, [r4, #4]
 8007270:	6123      	str	r3, [r4, #16]
 8007272:	2300      	movs	r3, #0
 8007274:	9a04      	ldr	r2, [sp, #16]
 8007276:	7013      	strb	r3, [r2, #0]
 8007278:	e7a8      	b.n	80071cc <_printf_i+0x128>
 800727a:	6923      	ldr	r3, [r4, #16]
 800727c:	0032      	movs	r2, r6
 800727e:	9906      	ldr	r1, [sp, #24]
 8007280:	9805      	ldr	r0, [sp, #20]
 8007282:	9d07      	ldr	r5, [sp, #28]
 8007284:	47a8      	blx	r5
 8007286:	1c43      	adds	r3, r0, #1
 8007288:	d0aa      	beq.n	80071e0 <_printf_i+0x13c>
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	079b      	lsls	r3, r3, #30
 800728e:	d415      	bmi.n	80072bc <_printf_i+0x218>
 8007290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007292:	68e0      	ldr	r0, [r4, #12]
 8007294:	4298      	cmp	r0, r3
 8007296:	daa5      	bge.n	80071e4 <_printf_i+0x140>
 8007298:	0018      	movs	r0, r3
 800729a:	e7a3      	b.n	80071e4 <_printf_i+0x140>
 800729c:	0022      	movs	r2, r4
 800729e:	2301      	movs	r3, #1
 80072a0:	9906      	ldr	r1, [sp, #24]
 80072a2:	9805      	ldr	r0, [sp, #20]
 80072a4:	9e07      	ldr	r6, [sp, #28]
 80072a6:	3219      	adds	r2, #25
 80072a8:	47b0      	blx	r6
 80072aa:	1c43      	adds	r3, r0, #1
 80072ac:	d098      	beq.n	80071e0 <_printf_i+0x13c>
 80072ae:	3501      	adds	r5, #1
 80072b0:	68e3      	ldr	r3, [r4, #12]
 80072b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072b4:	1a9b      	subs	r3, r3, r2
 80072b6:	42ab      	cmp	r3, r5
 80072b8:	dcf0      	bgt.n	800729c <_printf_i+0x1f8>
 80072ba:	e7e9      	b.n	8007290 <_printf_i+0x1ec>
 80072bc:	2500      	movs	r5, #0
 80072be:	e7f7      	b.n	80072b0 <_printf_i+0x20c>
 80072c0:	08007cce 	.word	0x08007cce
 80072c4:	08007cdf 	.word	0x08007cdf

080072c8 <memchr>:
 80072c8:	b2c9      	uxtb	r1, r1
 80072ca:	1882      	adds	r2, r0, r2
 80072cc:	4290      	cmp	r0, r2
 80072ce:	d101      	bne.n	80072d4 <memchr+0xc>
 80072d0:	2000      	movs	r0, #0
 80072d2:	4770      	bx	lr
 80072d4:	7803      	ldrb	r3, [r0, #0]
 80072d6:	428b      	cmp	r3, r1
 80072d8:	d0fb      	beq.n	80072d2 <memchr+0xa>
 80072da:	3001      	adds	r0, #1
 80072dc:	e7f6      	b.n	80072cc <memchr+0x4>

080072de <memcpy>:
 80072de:	2300      	movs	r3, #0
 80072e0:	b510      	push	{r4, lr}
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d100      	bne.n	80072e8 <memcpy+0xa>
 80072e6:	bd10      	pop	{r4, pc}
 80072e8:	5ccc      	ldrb	r4, [r1, r3]
 80072ea:	54c4      	strb	r4, [r0, r3]
 80072ec:	3301      	adds	r3, #1
 80072ee:	e7f8      	b.n	80072e2 <memcpy+0x4>

080072f0 <memmove>:
 80072f0:	b510      	push	{r4, lr}
 80072f2:	4288      	cmp	r0, r1
 80072f4:	d902      	bls.n	80072fc <memmove+0xc>
 80072f6:	188b      	adds	r3, r1, r2
 80072f8:	4298      	cmp	r0, r3
 80072fa:	d303      	bcc.n	8007304 <memmove+0x14>
 80072fc:	2300      	movs	r3, #0
 80072fe:	e007      	b.n	8007310 <memmove+0x20>
 8007300:	5c8b      	ldrb	r3, [r1, r2]
 8007302:	5483      	strb	r3, [r0, r2]
 8007304:	3a01      	subs	r2, #1
 8007306:	d2fb      	bcs.n	8007300 <memmove+0x10>
 8007308:	bd10      	pop	{r4, pc}
 800730a:	5ccc      	ldrb	r4, [r1, r3]
 800730c:	54c4      	strb	r4, [r0, r3]
 800730e:	3301      	adds	r3, #1
 8007310:	429a      	cmp	r2, r3
 8007312:	d1fa      	bne.n	800730a <memmove+0x1a>
 8007314:	e7f8      	b.n	8007308 <memmove+0x18>
	...

08007318 <_free_r>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	0005      	movs	r5, r0
 800731c:	2900      	cmp	r1, #0
 800731e:	d010      	beq.n	8007342 <_free_r+0x2a>
 8007320:	1f0c      	subs	r4, r1, #4
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	da00      	bge.n	800732a <_free_r+0x12>
 8007328:	18e4      	adds	r4, r4, r3
 800732a:	0028      	movs	r0, r5
 800732c:	f000 f918 	bl	8007560 <__malloc_lock>
 8007330:	4a1d      	ldr	r2, [pc, #116]	; (80073a8 <_free_r+0x90>)
 8007332:	6813      	ldr	r3, [r2, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d105      	bne.n	8007344 <_free_r+0x2c>
 8007338:	6063      	str	r3, [r4, #4]
 800733a:	6014      	str	r4, [r2, #0]
 800733c:	0028      	movs	r0, r5
 800733e:	f000 f917 	bl	8007570 <__malloc_unlock>
 8007342:	bd70      	pop	{r4, r5, r6, pc}
 8007344:	42a3      	cmp	r3, r4
 8007346:	d908      	bls.n	800735a <_free_r+0x42>
 8007348:	6821      	ldr	r1, [r4, #0]
 800734a:	1860      	adds	r0, r4, r1
 800734c:	4283      	cmp	r3, r0
 800734e:	d1f3      	bne.n	8007338 <_free_r+0x20>
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	1841      	adds	r1, r0, r1
 8007356:	6021      	str	r1, [r4, #0]
 8007358:	e7ee      	b.n	8007338 <_free_r+0x20>
 800735a:	001a      	movs	r2, r3
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <_free_r+0x4e>
 8007362:	42a3      	cmp	r3, r4
 8007364:	d9f9      	bls.n	800735a <_free_r+0x42>
 8007366:	6811      	ldr	r1, [r2, #0]
 8007368:	1850      	adds	r0, r2, r1
 800736a:	42a0      	cmp	r0, r4
 800736c:	d10b      	bne.n	8007386 <_free_r+0x6e>
 800736e:	6820      	ldr	r0, [r4, #0]
 8007370:	1809      	adds	r1, r1, r0
 8007372:	1850      	adds	r0, r2, r1
 8007374:	6011      	str	r1, [r2, #0]
 8007376:	4283      	cmp	r3, r0
 8007378:	d1e0      	bne.n	800733c <_free_r+0x24>
 800737a:	6818      	ldr	r0, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	1841      	adds	r1, r0, r1
 8007380:	6011      	str	r1, [r2, #0]
 8007382:	6053      	str	r3, [r2, #4]
 8007384:	e7da      	b.n	800733c <_free_r+0x24>
 8007386:	42a0      	cmp	r0, r4
 8007388:	d902      	bls.n	8007390 <_free_r+0x78>
 800738a:	230c      	movs	r3, #12
 800738c:	602b      	str	r3, [r5, #0]
 800738e:	e7d5      	b.n	800733c <_free_r+0x24>
 8007390:	6821      	ldr	r1, [r4, #0]
 8007392:	1860      	adds	r0, r4, r1
 8007394:	4283      	cmp	r3, r0
 8007396:	d103      	bne.n	80073a0 <_free_r+0x88>
 8007398:	6818      	ldr	r0, [r3, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	1841      	adds	r1, r0, r1
 800739e:	6021      	str	r1, [r4, #0]
 80073a0:	6063      	str	r3, [r4, #4]
 80073a2:	6054      	str	r4, [r2, #4]
 80073a4:	e7ca      	b.n	800733c <_free_r+0x24>
 80073a6:	46c0      	nop			; (mov r8, r8)
 80073a8:	20000200 	.word	0x20000200

080073ac <sbrk_aligned>:
 80073ac:	b570      	push	{r4, r5, r6, lr}
 80073ae:	4e0f      	ldr	r6, [pc, #60]	; (80073ec <sbrk_aligned+0x40>)
 80073b0:	000d      	movs	r5, r1
 80073b2:	6831      	ldr	r1, [r6, #0]
 80073b4:	0004      	movs	r4, r0
 80073b6:	2900      	cmp	r1, #0
 80073b8:	d102      	bne.n	80073c0 <sbrk_aligned+0x14>
 80073ba:	f000 f8bf 	bl	800753c <_sbrk_r>
 80073be:	6030      	str	r0, [r6, #0]
 80073c0:	0029      	movs	r1, r5
 80073c2:	0020      	movs	r0, r4
 80073c4:	f000 f8ba 	bl	800753c <_sbrk_r>
 80073c8:	1c43      	adds	r3, r0, #1
 80073ca:	d00a      	beq.n	80073e2 <sbrk_aligned+0x36>
 80073cc:	2303      	movs	r3, #3
 80073ce:	1cc5      	adds	r5, r0, #3
 80073d0:	439d      	bics	r5, r3
 80073d2:	42a8      	cmp	r0, r5
 80073d4:	d007      	beq.n	80073e6 <sbrk_aligned+0x3a>
 80073d6:	1a29      	subs	r1, r5, r0
 80073d8:	0020      	movs	r0, r4
 80073da:	f000 f8af 	bl	800753c <_sbrk_r>
 80073de:	1c43      	adds	r3, r0, #1
 80073e0:	d101      	bne.n	80073e6 <sbrk_aligned+0x3a>
 80073e2:	2501      	movs	r5, #1
 80073e4:	426d      	negs	r5, r5
 80073e6:	0028      	movs	r0, r5
 80073e8:	bd70      	pop	{r4, r5, r6, pc}
 80073ea:	46c0      	nop			; (mov r8, r8)
 80073ec:	20000204 	.word	0x20000204

080073f0 <_malloc_r>:
 80073f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073f2:	2203      	movs	r2, #3
 80073f4:	1ccb      	adds	r3, r1, #3
 80073f6:	4393      	bics	r3, r2
 80073f8:	3308      	adds	r3, #8
 80073fa:	0006      	movs	r6, r0
 80073fc:	001f      	movs	r7, r3
 80073fe:	2b0c      	cmp	r3, #12
 8007400:	d232      	bcs.n	8007468 <_malloc_r+0x78>
 8007402:	270c      	movs	r7, #12
 8007404:	42b9      	cmp	r1, r7
 8007406:	d831      	bhi.n	800746c <_malloc_r+0x7c>
 8007408:	0030      	movs	r0, r6
 800740a:	f000 f8a9 	bl	8007560 <__malloc_lock>
 800740e:	4d32      	ldr	r5, [pc, #200]	; (80074d8 <_malloc_r+0xe8>)
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	001c      	movs	r4, r3
 8007414:	2c00      	cmp	r4, #0
 8007416:	d12e      	bne.n	8007476 <_malloc_r+0x86>
 8007418:	0039      	movs	r1, r7
 800741a:	0030      	movs	r0, r6
 800741c:	f7ff ffc6 	bl	80073ac <sbrk_aligned>
 8007420:	0004      	movs	r4, r0
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	d11e      	bne.n	8007464 <_malloc_r+0x74>
 8007426:	682c      	ldr	r4, [r5, #0]
 8007428:	0025      	movs	r5, r4
 800742a:	2d00      	cmp	r5, #0
 800742c:	d14a      	bne.n	80074c4 <_malloc_r+0xd4>
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	0029      	movs	r1, r5
 8007432:	18e3      	adds	r3, r4, r3
 8007434:	0030      	movs	r0, r6
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	f000 f880 	bl	800753c <_sbrk_r>
 800743c:	9b01      	ldr	r3, [sp, #4]
 800743e:	4283      	cmp	r3, r0
 8007440:	d143      	bne.n	80074ca <_malloc_r+0xda>
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	3703      	adds	r7, #3
 8007446:	1aff      	subs	r7, r7, r3
 8007448:	2303      	movs	r3, #3
 800744a:	439f      	bics	r7, r3
 800744c:	3708      	adds	r7, #8
 800744e:	2f0c      	cmp	r7, #12
 8007450:	d200      	bcs.n	8007454 <_malloc_r+0x64>
 8007452:	270c      	movs	r7, #12
 8007454:	0039      	movs	r1, r7
 8007456:	0030      	movs	r0, r6
 8007458:	f7ff ffa8 	bl	80073ac <sbrk_aligned>
 800745c:	1c43      	adds	r3, r0, #1
 800745e:	d034      	beq.n	80074ca <_malloc_r+0xda>
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	19df      	adds	r7, r3, r7
 8007464:	6027      	str	r7, [r4, #0]
 8007466:	e013      	b.n	8007490 <_malloc_r+0xa0>
 8007468:	2b00      	cmp	r3, #0
 800746a:	dacb      	bge.n	8007404 <_malloc_r+0x14>
 800746c:	230c      	movs	r3, #12
 800746e:	2500      	movs	r5, #0
 8007470:	6033      	str	r3, [r6, #0]
 8007472:	0028      	movs	r0, r5
 8007474:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007476:	6822      	ldr	r2, [r4, #0]
 8007478:	1bd1      	subs	r1, r2, r7
 800747a:	d420      	bmi.n	80074be <_malloc_r+0xce>
 800747c:	290b      	cmp	r1, #11
 800747e:	d917      	bls.n	80074b0 <_malloc_r+0xc0>
 8007480:	19e2      	adds	r2, r4, r7
 8007482:	6027      	str	r7, [r4, #0]
 8007484:	42a3      	cmp	r3, r4
 8007486:	d111      	bne.n	80074ac <_malloc_r+0xbc>
 8007488:	602a      	str	r2, [r5, #0]
 800748a:	6863      	ldr	r3, [r4, #4]
 800748c:	6011      	str	r1, [r2, #0]
 800748e:	6053      	str	r3, [r2, #4]
 8007490:	0030      	movs	r0, r6
 8007492:	0025      	movs	r5, r4
 8007494:	f000 f86c 	bl	8007570 <__malloc_unlock>
 8007498:	2207      	movs	r2, #7
 800749a:	350b      	adds	r5, #11
 800749c:	1d23      	adds	r3, r4, #4
 800749e:	4395      	bics	r5, r2
 80074a0:	1aea      	subs	r2, r5, r3
 80074a2:	429d      	cmp	r5, r3
 80074a4:	d0e5      	beq.n	8007472 <_malloc_r+0x82>
 80074a6:	1b5b      	subs	r3, r3, r5
 80074a8:	50a3      	str	r3, [r4, r2]
 80074aa:	e7e2      	b.n	8007472 <_malloc_r+0x82>
 80074ac:	605a      	str	r2, [r3, #4]
 80074ae:	e7ec      	b.n	800748a <_malloc_r+0x9a>
 80074b0:	6862      	ldr	r2, [r4, #4]
 80074b2:	42a3      	cmp	r3, r4
 80074b4:	d101      	bne.n	80074ba <_malloc_r+0xca>
 80074b6:	602a      	str	r2, [r5, #0]
 80074b8:	e7ea      	b.n	8007490 <_malloc_r+0xa0>
 80074ba:	605a      	str	r2, [r3, #4]
 80074bc:	e7e8      	b.n	8007490 <_malloc_r+0xa0>
 80074be:	0023      	movs	r3, r4
 80074c0:	6864      	ldr	r4, [r4, #4]
 80074c2:	e7a7      	b.n	8007414 <_malloc_r+0x24>
 80074c4:	002c      	movs	r4, r5
 80074c6:	686d      	ldr	r5, [r5, #4]
 80074c8:	e7af      	b.n	800742a <_malloc_r+0x3a>
 80074ca:	230c      	movs	r3, #12
 80074cc:	0030      	movs	r0, r6
 80074ce:	6033      	str	r3, [r6, #0]
 80074d0:	f000 f84e 	bl	8007570 <__malloc_unlock>
 80074d4:	e7cd      	b.n	8007472 <_malloc_r+0x82>
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	20000200 	.word	0x20000200

080074dc <_realloc_r>:
 80074dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074de:	0007      	movs	r7, r0
 80074e0:	000e      	movs	r6, r1
 80074e2:	0014      	movs	r4, r2
 80074e4:	2900      	cmp	r1, #0
 80074e6:	d105      	bne.n	80074f4 <_realloc_r+0x18>
 80074e8:	0011      	movs	r1, r2
 80074ea:	f7ff ff81 	bl	80073f0 <_malloc_r>
 80074ee:	0005      	movs	r5, r0
 80074f0:	0028      	movs	r0, r5
 80074f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074f4:	2a00      	cmp	r2, #0
 80074f6:	d103      	bne.n	8007500 <_realloc_r+0x24>
 80074f8:	f7ff ff0e 	bl	8007318 <_free_r>
 80074fc:	0025      	movs	r5, r4
 80074fe:	e7f7      	b.n	80074f0 <_realloc_r+0x14>
 8007500:	f000 f83e 	bl	8007580 <_malloc_usable_size_r>
 8007504:	9001      	str	r0, [sp, #4]
 8007506:	4284      	cmp	r4, r0
 8007508:	d803      	bhi.n	8007512 <_realloc_r+0x36>
 800750a:	0035      	movs	r5, r6
 800750c:	0843      	lsrs	r3, r0, #1
 800750e:	42a3      	cmp	r3, r4
 8007510:	d3ee      	bcc.n	80074f0 <_realloc_r+0x14>
 8007512:	0021      	movs	r1, r4
 8007514:	0038      	movs	r0, r7
 8007516:	f7ff ff6b 	bl	80073f0 <_malloc_r>
 800751a:	1e05      	subs	r5, r0, #0
 800751c:	d0e8      	beq.n	80074f0 <_realloc_r+0x14>
 800751e:	9b01      	ldr	r3, [sp, #4]
 8007520:	0022      	movs	r2, r4
 8007522:	429c      	cmp	r4, r3
 8007524:	d900      	bls.n	8007528 <_realloc_r+0x4c>
 8007526:	001a      	movs	r2, r3
 8007528:	0031      	movs	r1, r6
 800752a:	0028      	movs	r0, r5
 800752c:	f7ff fed7 	bl	80072de <memcpy>
 8007530:	0031      	movs	r1, r6
 8007532:	0038      	movs	r0, r7
 8007534:	f7ff fef0 	bl	8007318 <_free_r>
 8007538:	e7da      	b.n	80074f0 <_realloc_r+0x14>
	...

0800753c <_sbrk_r>:
 800753c:	2300      	movs	r3, #0
 800753e:	b570      	push	{r4, r5, r6, lr}
 8007540:	4d06      	ldr	r5, [pc, #24]	; (800755c <_sbrk_r+0x20>)
 8007542:	0004      	movs	r4, r0
 8007544:	0008      	movs	r0, r1
 8007546:	602b      	str	r3, [r5, #0]
 8007548:	f7fc fe52 	bl	80041f0 <_sbrk>
 800754c:	1c43      	adds	r3, r0, #1
 800754e:	d103      	bne.n	8007558 <_sbrk_r+0x1c>
 8007550:	682b      	ldr	r3, [r5, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d000      	beq.n	8007558 <_sbrk_r+0x1c>
 8007556:	6023      	str	r3, [r4, #0]
 8007558:	bd70      	pop	{r4, r5, r6, pc}
 800755a:	46c0      	nop			; (mov r8, r8)
 800755c:	20000208 	.word	0x20000208

08007560 <__malloc_lock>:
 8007560:	b510      	push	{r4, lr}
 8007562:	4802      	ldr	r0, [pc, #8]	; (800756c <__malloc_lock+0xc>)
 8007564:	f000 f814 	bl	8007590 <__retarget_lock_acquire_recursive>
 8007568:	bd10      	pop	{r4, pc}
 800756a:	46c0      	nop			; (mov r8, r8)
 800756c:	2000020c 	.word	0x2000020c

08007570 <__malloc_unlock>:
 8007570:	b510      	push	{r4, lr}
 8007572:	4802      	ldr	r0, [pc, #8]	; (800757c <__malloc_unlock+0xc>)
 8007574:	f000 f80d 	bl	8007592 <__retarget_lock_release_recursive>
 8007578:	bd10      	pop	{r4, pc}
 800757a:	46c0      	nop			; (mov r8, r8)
 800757c:	2000020c 	.word	0x2000020c

08007580 <_malloc_usable_size_r>:
 8007580:	1f0b      	subs	r3, r1, #4
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	1f18      	subs	r0, r3, #4
 8007586:	2b00      	cmp	r3, #0
 8007588:	da01      	bge.n	800758e <_malloc_usable_size_r+0xe>
 800758a:	580b      	ldr	r3, [r1, r0]
 800758c:	18c0      	adds	r0, r0, r3
 800758e:	4770      	bx	lr

08007590 <__retarget_lock_acquire_recursive>:
 8007590:	4770      	bx	lr

08007592 <__retarget_lock_release_recursive>:
 8007592:	4770      	bx	lr

08007594 <round>:
 8007594:	b570      	push	{r4, r5, r6, lr}
 8007596:	000d      	movs	r5, r1
 8007598:	0006      	movs	r6, r0
 800759a:	0001      	movs	r1, r0
 800759c:	006a      	lsls	r2, r5, #1
 800759e:	4820      	ldr	r0, [pc, #128]	; (8007620 <round+0x8c>)
 80075a0:	0d52      	lsrs	r2, r2, #21
 80075a2:	1810      	adds	r0, r2, r0
 80075a4:	2813      	cmp	r0, #19
 80075a6:	dc18      	bgt.n	80075da <round+0x46>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	da09      	bge.n	80075c0 <round+0x2c>
 80075ac:	0feb      	lsrs	r3, r5, #31
 80075ae:	2200      	movs	r2, #0
 80075b0:	07db      	lsls	r3, r3, #31
 80075b2:	1c41      	adds	r1, r0, #1
 80075b4:	d101      	bne.n	80075ba <round+0x26>
 80075b6:	491b      	ldr	r1, [pc, #108]	; (8007624 <round+0x90>)
 80075b8:	430b      	orrs	r3, r1
 80075ba:	0019      	movs	r1, r3
 80075bc:	0010      	movs	r0, r2
 80075be:	e018      	b.n	80075f2 <round+0x5e>
 80075c0:	4c19      	ldr	r4, [pc, #100]	; (8007628 <round+0x94>)
 80075c2:	4104      	asrs	r4, r0
 80075c4:	0022      	movs	r2, r4
 80075c6:	402a      	ands	r2, r5
 80075c8:	4311      	orrs	r1, r2
 80075ca:	d014      	beq.n	80075f6 <round+0x62>
 80075cc:	2280      	movs	r2, #128	; 0x80
 80075ce:	0312      	lsls	r2, r2, #12
 80075d0:	4102      	asrs	r2, r0
 80075d2:	1953      	adds	r3, r2, r5
 80075d4:	43a3      	bics	r3, r4
 80075d6:	2200      	movs	r2, #0
 80075d8:	e7ef      	b.n	80075ba <round+0x26>
 80075da:	2833      	cmp	r0, #51	; 0x33
 80075dc:	dd0e      	ble.n	80075fc <round+0x68>
 80075de:	2380      	movs	r3, #128	; 0x80
 80075e0:	00db      	lsls	r3, r3, #3
 80075e2:	4298      	cmp	r0, r3
 80075e4:	d107      	bne.n	80075f6 <round+0x62>
 80075e6:	0032      	movs	r2, r6
 80075e8:	002b      	movs	r3, r5
 80075ea:	0030      	movs	r0, r6
 80075ec:	0029      	movs	r1, r5
 80075ee:	f7f9 fed3 	bl	8001398 <__aeabi_dadd>
 80075f2:	0006      	movs	r6, r0
 80075f4:	000d      	movs	r5, r1
 80075f6:	0030      	movs	r0, r6
 80075f8:	0029      	movs	r1, r5
 80075fa:	bd70      	pop	{r4, r5, r6, pc}
 80075fc:	4c0b      	ldr	r4, [pc, #44]	; (800762c <round+0x98>)
 80075fe:	1912      	adds	r2, r2, r4
 8007600:	2401      	movs	r4, #1
 8007602:	4264      	negs	r4, r4
 8007604:	40d4      	lsrs	r4, r2
 8007606:	4234      	tst	r4, r6
 8007608:	d0f5      	beq.n	80075f6 <round+0x62>
 800760a:	2233      	movs	r2, #51	; 0x33
 800760c:	1a10      	subs	r0, r2, r0
 800760e:	3a32      	subs	r2, #50	; 0x32
 8007610:	4082      	lsls	r2, r0
 8007612:	1992      	adds	r2, r2, r6
 8007614:	42b2      	cmp	r2, r6
 8007616:	4189      	sbcs	r1, r1
 8007618:	4249      	negs	r1, r1
 800761a:	186b      	adds	r3, r5, r1
 800761c:	43a2      	bics	r2, r4
 800761e:	e7cc      	b.n	80075ba <round+0x26>
 8007620:	fffffc01 	.word	0xfffffc01
 8007624:	3ff00000 	.word	0x3ff00000
 8007628:	000fffff 	.word	0x000fffff
 800762c:	fffffbed 	.word	0xfffffbed

08007630 <log10>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	0004      	movs	r4, r0
 8007634:	000d      	movs	r5, r1
 8007636:	f000 f831 	bl	800769c <__ieee754_log10>
 800763a:	0022      	movs	r2, r4
 800763c:	0006      	movs	r6, r0
 800763e:	000f      	movs	r7, r1
 8007640:	002b      	movs	r3, r5
 8007642:	0020      	movs	r0, r4
 8007644:	0029      	movs	r1, r5
 8007646:	f7fb fbe3 	bl	8002e10 <__aeabi_dcmpun>
 800764a:	2800      	cmp	r0, #0
 800764c:	d115      	bne.n	800767a <log10+0x4a>
 800764e:	2200      	movs	r2, #0
 8007650:	2300      	movs	r3, #0
 8007652:	0020      	movs	r0, r4
 8007654:	0029      	movs	r1, r5
 8007656:	f7f8 fe0d 	bl	8000274 <__aeabi_dcmple>
 800765a:	2800      	cmp	r0, #0
 800765c:	d00d      	beq.n	800767a <log10+0x4a>
 800765e:	2200      	movs	r2, #0
 8007660:	2300      	movs	r3, #0
 8007662:	0020      	movs	r0, r4
 8007664:	0029      	movs	r1, r5
 8007666:	f7f8 fdf5 	bl	8000254 <__aeabi_dcmpeq>
 800766a:	2800      	cmp	r0, #0
 800766c:	d008      	beq.n	8007680 <log10+0x50>
 800766e:	f7ff faf5 	bl	8006c5c <__errno>
 8007672:	2322      	movs	r3, #34	; 0x22
 8007674:	2600      	movs	r6, #0
 8007676:	4f07      	ldr	r7, [pc, #28]	; (8007694 <log10+0x64>)
 8007678:	6003      	str	r3, [r0, #0]
 800767a:	0030      	movs	r0, r6
 800767c:	0039      	movs	r1, r7
 800767e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007680:	f7ff faec 	bl	8006c5c <__errno>
 8007684:	2321      	movs	r3, #33	; 0x21
 8007686:	6003      	str	r3, [r0, #0]
 8007688:	4803      	ldr	r0, [pc, #12]	; (8007698 <log10+0x68>)
 800768a:	f000 f889 	bl	80077a0 <nan>
 800768e:	0006      	movs	r6, r0
 8007690:	000f      	movs	r7, r1
 8007692:	e7f2      	b.n	800767a <log10+0x4a>
 8007694:	fff00000 	.word	0xfff00000
 8007698:	08007cc2 	.word	0x08007cc2

0800769c <__ieee754_log10>:
 800769c:	2280      	movs	r2, #128	; 0x80
 800769e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076a0:	000b      	movs	r3, r1
 80076a2:	0004      	movs	r4, r0
 80076a4:	000d      	movs	r5, r1
 80076a6:	b085      	sub	sp, #20
 80076a8:	0352      	lsls	r2, r2, #13
 80076aa:	4291      	cmp	r1, r2
 80076ac:	da26      	bge.n	80076fc <__ieee754_log10+0x60>
 80076ae:	004a      	lsls	r2, r1, #1
 80076b0:	0852      	lsrs	r2, r2, #1
 80076b2:	4302      	orrs	r2, r0
 80076b4:	d107      	bne.n	80076c6 <__ieee754_log10+0x2a>
 80076b6:	2200      	movs	r2, #0
 80076b8:	2300      	movs	r3, #0
 80076ba:	2000      	movs	r0, #0
 80076bc:	492d      	ldr	r1, [pc, #180]	; (8007774 <__ieee754_log10+0xd8>)
 80076be:	f7fa f9a7 	bl	8001a10 <__aeabi_ddiv>
 80076c2:	b005      	add	sp, #20
 80076c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c6:	2900      	cmp	r1, #0
 80076c8:	da05      	bge.n	80076d6 <__ieee754_log10+0x3a>
 80076ca:	0002      	movs	r2, r0
 80076cc:	f7fb f80e 	bl	80026ec <__aeabi_dsub>
 80076d0:	2200      	movs	r2, #0
 80076d2:	2300      	movs	r3, #0
 80076d4:	e7f3      	b.n	80076be <__ieee754_log10+0x22>
 80076d6:	2200      	movs	r2, #0
 80076d8:	4b27      	ldr	r3, [pc, #156]	; (8007778 <__ieee754_log10+0xdc>)
 80076da:	f7fa fd9b 	bl	8002214 <__aeabi_dmul>
 80076de:	2236      	movs	r2, #54	; 0x36
 80076e0:	0004      	movs	r4, r0
 80076e2:	000d      	movs	r5, r1
 80076e4:	000b      	movs	r3, r1
 80076e6:	4252      	negs	r2, r2
 80076e8:	4924      	ldr	r1, [pc, #144]	; (800777c <__ieee754_log10+0xe0>)
 80076ea:	428b      	cmp	r3, r1
 80076ec:	dd08      	ble.n	8007700 <__ieee754_log10+0x64>
 80076ee:	0022      	movs	r2, r4
 80076f0:	002b      	movs	r3, r5
 80076f2:	0020      	movs	r0, r4
 80076f4:	0029      	movs	r1, r5
 80076f6:	f7f9 fe4f 	bl	8001398 <__aeabi_dadd>
 80076fa:	e7e2      	b.n	80076c2 <__ieee754_log10+0x26>
 80076fc:	2200      	movs	r2, #0
 80076fe:	e7f3      	b.n	80076e8 <__ieee754_log10+0x4c>
 8007700:	491f      	ldr	r1, [pc, #124]	; (8007780 <__ieee754_log10+0xe4>)
 8007702:	1518      	asrs	r0, r3, #20
 8007704:	1840      	adds	r0, r0, r1
 8007706:	1880      	adds	r0, r0, r2
 8007708:	0fc2      	lsrs	r2, r0, #31
 800770a:	031b      	lsls	r3, r3, #12
 800770c:	0b1b      	lsrs	r3, r3, #12
 800770e:	1880      	adds	r0, r0, r2
 8007710:	9203      	str	r2, [sp, #12]
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	f7fb fbd0 	bl	8002eb8 <__aeabi_i2d>
 8007718:	9a03      	ldr	r2, [sp, #12]
 800771a:	4b1a      	ldr	r3, [pc, #104]	; (8007784 <__ieee754_log10+0xe8>)
 800771c:	0006      	movs	r6, r0
 800771e:	1a9b      	subs	r3, r3, r2
 8007720:	9a00      	ldr	r2, [sp, #0]
 8007722:	051b      	lsls	r3, r3, #20
 8007724:	431a      	orrs	r2, r3
 8007726:	000f      	movs	r7, r1
 8007728:	0020      	movs	r0, r4
 800772a:	0011      	movs	r1, r2
 800772c:	f000 f83e 	bl	80077ac <__ieee754_log>
 8007730:	4a15      	ldr	r2, [pc, #84]	; (8007788 <__ieee754_log10+0xec>)
 8007732:	0004      	movs	r4, r0
 8007734:	000d      	movs	r5, r1
 8007736:	4b15      	ldr	r3, [pc, #84]	; (800778c <__ieee754_log10+0xf0>)
 8007738:	0030      	movs	r0, r6
 800773a:	0039      	movs	r1, r7
 800773c:	f7fa fd6a 	bl	8002214 <__aeabi_dmul>
 8007740:	4a13      	ldr	r2, [pc, #76]	; (8007790 <__ieee754_log10+0xf4>)
 8007742:	9000      	str	r0, [sp, #0]
 8007744:	9101      	str	r1, [sp, #4]
 8007746:	4b13      	ldr	r3, [pc, #76]	; (8007794 <__ieee754_log10+0xf8>)
 8007748:	0020      	movs	r0, r4
 800774a:	0029      	movs	r1, r5
 800774c:	f7fa fd62 	bl	8002214 <__aeabi_dmul>
 8007750:	0002      	movs	r2, r0
 8007752:	000b      	movs	r3, r1
 8007754:	9800      	ldr	r0, [sp, #0]
 8007756:	9901      	ldr	r1, [sp, #4]
 8007758:	f7f9 fe1e 	bl	8001398 <__aeabi_dadd>
 800775c:	4a0e      	ldr	r2, [pc, #56]	; (8007798 <__ieee754_log10+0xfc>)
 800775e:	4b0f      	ldr	r3, [pc, #60]	; (800779c <__ieee754_log10+0x100>)
 8007760:	0004      	movs	r4, r0
 8007762:	000d      	movs	r5, r1
 8007764:	0030      	movs	r0, r6
 8007766:	0039      	movs	r1, r7
 8007768:	f7fa fd54 	bl	8002214 <__aeabi_dmul>
 800776c:	0002      	movs	r2, r0
 800776e:	000b      	movs	r3, r1
 8007770:	e7bf      	b.n	80076f2 <__ieee754_log10+0x56>
 8007772:	46c0      	nop			; (mov r8, r8)
 8007774:	c3500000 	.word	0xc3500000
 8007778:	43500000 	.word	0x43500000
 800777c:	7fefffff 	.word	0x7fefffff
 8007780:	fffffc01 	.word	0xfffffc01
 8007784:	000003ff 	.word	0x000003ff
 8007788:	11f12b36 	.word	0x11f12b36
 800778c:	3d59fef3 	.word	0x3d59fef3
 8007790:	1526e50e 	.word	0x1526e50e
 8007794:	3fdbcb7b 	.word	0x3fdbcb7b
 8007798:	509f6000 	.word	0x509f6000
 800779c:	3fd34413 	.word	0x3fd34413

080077a0 <nan>:
 80077a0:	2000      	movs	r0, #0
 80077a2:	4901      	ldr	r1, [pc, #4]	; (80077a8 <nan+0x8>)
 80077a4:	4770      	bx	lr
 80077a6:	46c0      	nop			; (mov r8, r8)
 80077a8:	7ff80000 	.word	0x7ff80000

080077ac <__ieee754_log>:
 80077ac:	2280      	movs	r2, #128	; 0x80
 80077ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077b0:	000b      	movs	r3, r1
 80077b2:	b08d      	sub	sp, #52	; 0x34
 80077b4:	0352      	lsls	r2, r2, #13
 80077b6:	4291      	cmp	r1, r2
 80077b8:	da22      	bge.n	8007800 <__ieee754_log+0x54>
 80077ba:	004a      	lsls	r2, r1, #1
 80077bc:	0852      	lsrs	r2, r2, #1
 80077be:	4302      	orrs	r2, r0
 80077c0:	d107      	bne.n	80077d2 <__ieee754_log+0x26>
 80077c2:	2200      	movs	r2, #0
 80077c4:	2300      	movs	r3, #0
 80077c6:	2000      	movs	r0, #0
 80077c8:	49b3      	ldr	r1, [pc, #716]	; (8007a98 <__ieee754_log+0x2ec>)
 80077ca:	f7fa f921 	bl	8001a10 <__aeabi_ddiv>
 80077ce:	b00d      	add	sp, #52	; 0x34
 80077d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d2:	2900      	cmp	r1, #0
 80077d4:	da05      	bge.n	80077e2 <__ieee754_log+0x36>
 80077d6:	0002      	movs	r2, r0
 80077d8:	f7fa ff88 	bl	80026ec <__aeabi_dsub>
 80077dc:	2200      	movs	r2, #0
 80077de:	2300      	movs	r3, #0
 80077e0:	e7f3      	b.n	80077ca <__ieee754_log+0x1e>
 80077e2:	4bae      	ldr	r3, [pc, #696]	; (8007a9c <__ieee754_log+0x2f0>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	f7fa fd15 	bl	8002214 <__aeabi_dmul>
 80077ea:	2436      	movs	r4, #54	; 0x36
 80077ec:	000b      	movs	r3, r1
 80077ee:	4264      	negs	r4, r4
 80077f0:	4aab      	ldr	r2, [pc, #684]	; (8007aa0 <__ieee754_log+0x2f4>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	dd06      	ble.n	8007804 <__ieee754_log+0x58>
 80077f6:	0002      	movs	r2, r0
 80077f8:	000b      	movs	r3, r1
 80077fa:	f7f9 fdcd 	bl	8001398 <__aeabi_dadd>
 80077fe:	e7e6      	b.n	80077ce <__ieee754_log+0x22>
 8007800:	2400      	movs	r4, #0
 8007802:	e7f5      	b.n	80077f0 <__ieee754_log+0x44>
 8007804:	4da7      	ldr	r5, [pc, #668]	; (8007aa4 <__ieee754_log+0x2f8>)
 8007806:	151a      	asrs	r2, r3, #20
 8007808:	1952      	adds	r2, r2, r5
 800780a:	1912      	adds	r2, r2, r4
 800780c:	031b      	lsls	r3, r3, #12
 800780e:	4ca6      	ldr	r4, [pc, #664]	; (8007aa8 <__ieee754_log+0x2fc>)
 8007810:	0b1b      	lsrs	r3, r3, #12
 8007812:	9302      	str	r3, [sp, #8]
 8007814:	191c      	adds	r4, r3, r4
 8007816:	2380      	movs	r3, #128	; 0x80
 8007818:	035b      	lsls	r3, r3, #13
 800781a:	4023      	ands	r3, r4
 800781c:	4ca3      	ldr	r4, [pc, #652]	; (8007aac <__ieee754_log+0x300>)
 800781e:	9d02      	ldr	r5, [sp, #8]
 8007820:	405c      	eors	r4, r3
 8007822:	151b      	asrs	r3, r3, #20
 8007824:	189b      	adds	r3, r3, r2
 8007826:	4325      	orrs	r5, r4
 8007828:	2200      	movs	r2, #0
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	0029      	movs	r1, r5
 800782e:	4b9f      	ldr	r3, [pc, #636]	; (8007aac <__ieee754_log+0x300>)
 8007830:	f7fa ff5c 	bl	80026ec <__aeabi_dsub>
 8007834:	9b02      	ldr	r3, [sp, #8]
 8007836:	0006      	movs	r6, r0
 8007838:	3302      	adds	r3, #2
 800783a:	031b      	lsls	r3, r3, #12
 800783c:	000f      	movs	r7, r1
 800783e:	2200      	movs	r2, #0
 8007840:	0b1b      	lsrs	r3, r3, #12
 8007842:	2b02      	cmp	r3, #2
 8007844:	dc64      	bgt.n	8007910 <__ieee754_log+0x164>
 8007846:	2300      	movs	r3, #0
 8007848:	f7f8 fd04 	bl	8000254 <__aeabi_dcmpeq>
 800784c:	2800      	cmp	r0, #0
 800784e:	d019      	beq.n	8007884 <__ieee754_log+0xd8>
 8007850:	9b00      	ldr	r3, [sp, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d100      	bne.n	8007858 <__ieee754_log+0xac>
 8007856:	e11c      	b.n	8007a92 <__ieee754_log+0x2e6>
 8007858:	0018      	movs	r0, r3
 800785a:	f7fb fb2d 	bl	8002eb8 <__aeabi_i2d>
 800785e:	4a94      	ldr	r2, [pc, #592]	; (8007ab0 <__ieee754_log+0x304>)
 8007860:	4b94      	ldr	r3, [pc, #592]	; (8007ab4 <__ieee754_log+0x308>)
 8007862:	0004      	movs	r4, r0
 8007864:	000d      	movs	r5, r1
 8007866:	f7fa fcd5 	bl	8002214 <__aeabi_dmul>
 800786a:	4a93      	ldr	r2, [pc, #588]	; (8007ab8 <__ieee754_log+0x30c>)
 800786c:	0006      	movs	r6, r0
 800786e:	000f      	movs	r7, r1
 8007870:	4b92      	ldr	r3, [pc, #584]	; (8007abc <__ieee754_log+0x310>)
 8007872:	0020      	movs	r0, r4
 8007874:	0029      	movs	r1, r5
 8007876:	f7fa fccd 	bl	8002214 <__aeabi_dmul>
 800787a:	0002      	movs	r2, r0
 800787c:	000b      	movs	r3, r1
 800787e:	0030      	movs	r0, r6
 8007880:	0039      	movs	r1, r7
 8007882:	e7ba      	b.n	80077fa <__ieee754_log+0x4e>
 8007884:	4a8e      	ldr	r2, [pc, #568]	; (8007ac0 <__ieee754_log+0x314>)
 8007886:	4b8f      	ldr	r3, [pc, #572]	; (8007ac4 <__ieee754_log+0x318>)
 8007888:	0030      	movs	r0, r6
 800788a:	0039      	movs	r1, r7
 800788c:	f7fa fcc2 	bl	8002214 <__aeabi_dmul>
 8007890:	0002      	movs	r2, r0
 8007892:	000b      	movs	r3, r1
 8007894:	2000      	movs	r0, #0
 8007896:	498c      	ldr	r1, [pc, #560]	; (8007ac8 <__ieee754_log+0x31c>)
 8007898:	f7fa ff28 	bl	80026ec <__aeabi_dsub>
 800789c:	0032      	movs	r2, r6
 800789e:	0004      	movs	r4, r0
 80078a0:	000d      	movs	r5, r1
 80078a2:	003b      	movs	r3, r7
 80078a4:	0030      	movs	r0, r6
 80078a6:	0039      	movs	r1, r7
 80078a8:	f7fa fcb4 	bl	8002214 <__aeabi_dmul>
 80078ac:	000b      	movs	r3, r1
 80078ae:	0002      	movs	r2, r0
 80078b0:	0029      	movs	r1, r5
 80078b2:	0020      	movs	r0, r4
 80078b4:	f7fa fcae 	bl	8002214 <__aeabi_dmul>
 80078b8:	9b00      	ldr	r3, [sp, #0]
 80078ba:	9002      	str	r0, [sp, #8]
 80078bc:	9103      	str	r1, [sp, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d106      	bne.n	80078d0 <__ieee754_log+0x124>
 80078c2:	0002      	movs	r2, r0
 80078c4:	000b      	movs	r3, r1
 80078c6:	0030      	movs	r0, r6
 80078c8:	0039      	movs	r1, r7
 80078ca:	f7fa ff0f 	bl	80026ec <__aeabi_dsub>
 80078ce:	e77e      	b.n	80077ce <__ieee754_log+0x22>
 80078d0:	9800      	ldr	r0, [sp, #0]
 80078d2:	f7fb faf1 	bl	8002eb8 <__aeabi_i2d>
 80078d6:	4a76      	ldr	r2, [pc, #472]	; (8007ab0 <__ieee754_log+0x304>)
 80078d8:	4b76      	ldr	r3, [pc, #472]	; (8007ab4 <__ieee754_log+0x308>)
 80078da:	0004      	movs	r4, r0
 80078dc:	000d      	movs	r5, r1
 80078de:	f7fa fc99 	bl	8002214 <__aeabi_dmul>
 80078e2:	4a75      	ldr	r2, [pc, #468]	; (8007ab8 <__ieee754_log+0x30c>)
 80078e4:	9000      	str	r0, [sp, #0]
 80078e6:	9101      	str	r1, [sp, #4]
 80078e8:	4b74      	ldr	r3, [pc, #464]	; (8007abc <__ieee754_log+0x310>)
 80078ea:	0020      	movs	r0, r4
 80078ec:	0029      	movs	r1, r5
 80078ee:	f7fa fc91 	bl	8002214 <__aeabi_dmul>
 80078f2:	0002      	movs	r2, r0
 80078f4:	000b      	movs	r3, r1
 80078f6:	9802      	ldr	r0, [sp, #8]
 80078f8:	9903      	ldr	r1, [sp, #12]
 80078fa:	f7fa fef7 	bl	80026ec <__aeabi_dsub>
 80078fe:	0032      	movs	r2, r6
 8007900:	003b      	movs	r3, r7
 8007902:	f7fa fef3 	bl	80026ec <__aeabi_dsub>
 8007906:	0002      	movs	r2, r0
 8007908:	000b      	movs	r3, r1
 800790a:	9800      	ldr	r0, [sp, #0]
 800790c:	9901      	ldr	r1, [sp, #4]
 800790e:	e7dc      	b.n	80078ca <__ieee754_log+0x11e>
 8007910:	2380      	movs	r3, #128	; 0x80
 8007912:	05db      	lsls	r3, r3, #23
 8007914:	f7f9 fd40 	bl	8001398 <__aeabi_dadd>
 8007918:	0002      	movs	r2, r0
 800791a:	000b      	movs	r3, r1
 800791c:	0030      	movs	r0, r6
 800791e:	0039      	movs	r1, r7
 8007920:	f7fa f876 	bl	8001a10 <__aeabi_ddiv>
 8007924:	9004      	str	r0, [sp, #16]
 8007926:	9105      	str	r1, [sp, #20]
 8007928:	9800      	ldr	r0, [sp, #0]
 800792a:	f7fb fac5 	bl	8002eb8 <__aeabi_i2d>
 800792e:	9a04      	ldr	r2, [sp, #16]
 8007930:	9b05      	ldr	r3, [sp, #20]
 8007932:	9006      	str	r0, [sp, #24]
 8007934:	9107      	str	r1, [sp, #28]
 8007936:	0010      	movs	r0, r2
 8007938:	0019      	movs	r1, r3
 800793a:	f7fa fc6b 	bl	8002214 <__aeabi_dmul>
 800793e:	4a63      	ldr	r2, [pc, #396]	; (8007acc <__ieee754_log+0x320>)
 8007940:	9b02      	ldr	r3, [sp, #8]
 8007942:	4694      	mov	ip, r2
 8007944:	4463      	add	r3, ip
 8007946:	0002      	movs	r2, r0
 8007948:	930b      	str	r3, [sp, #44]	; 0x2c
 800794a:	000b      	movs	r3, r1
 800794c:	9008      	str	r0, [sp, #32]
 800794e:	9109      	str	r1, [sp, #36]	; 0x24
 8007950:	f7fa fc60 	bl	8002214 <__aeabi_dmul>
 8007954:	0004      	movs	r4, r0
 8007956:	000d      	movs	r5, r1
 8007958:	4a5d      	ldr	r2, [pc, #372]	; (8007ad0 <__ieee754_log+0x324>)
 800795a:	4b5e      	ldr	r3, [pc, #376]	; (8007ad4 <__ieee754_log+0x328>)
 800795c:	f7fa fc5a 	bl	8002214 <__aeabi_dmul>
 8007960:	4a5d      	ldr	r2, [pc, #372]	; (8007ad8 <__ieee754_log+0x32c>)
 8007962:	4b5e      	ldr	r3, [pc, #376]	; (8007adc <__ieee754_log+0x330>)
 8007964:	f7f9 fd18 	bl	8001398 <__aeabi_dadd>
 8007968:	0022      	movs	r2, r4
 800796a:	002b      	movs	r3, r5
 800796c:	f7fa fc52 	bl	8002214 <__aeabi_dmul>
 8007970:	4a5b      	ldr	r2, [pc, #364]	; (8007ae0 <__ieee754_log+0x334>)
 8007972:	4b5c      	ldr	r3, [pc, #368]	; (8007ae4 <__ieee754_log+0x338>)
 8007974:	f7f9 fd10 	bl	8001398 <__aeabi_dadd>
 8007978:	0022      	movs	r2, r4
 800797a:	002b      	movs	r3, r5
 800797c:	f7fa fc4a 	bl	8002214 <__aeabi_dmul>
 8007980:	4a59      	ldr	r2, [pc, #356]	; (8007ae8 <__ieee754_log+0x33c>)
 8007982:	4b5a      	ldr	r3, [pc, #360]	; (8007aec <__ieee754_log+0x340>)
 8007984:	f7f9 fd08 	bl	8001398 <__aeabi_dadd>
 8007988:	9a08      	ldr	r2, [sp, #32]
 800798a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800798c:	f7fa fc42 	bl	8002214 <__aeabi_dmul>
 8007990:	4a57      	ldr	r2, [pc, #348]	; (8007af0 <__ieee754_log+0x344>)
 8007992:	9008      	str	r0, [sp, #32]
 8007994:	9109      	str	r1, [sp, #36]	; 0x24
 8007996:	4b57      	ldr	r3, [pc, #348]	; (8007af4 <__ieee754_log+0x348>)
 8007998:	0020      	movs	r0, r4
 800799a:	0029      	movs	r1, r5
 800799c:	f7fa fc3a 	bl	8002214 <__aeabi_dmul>
 80079a0:	4a55      	ldr	r2, [pc, #340]	; (8007af8 <__ieee754_log+0x34c>)
 80079a2:	4b56      	ldr	r3, [pc, #344]	; (8007afc <__ieee754_log+0x350>)
 80079a4:	f7f9 fcf8 	bl	8001398 <__aeabi_dadd>
 80079a8:	0022      	movs	r2, r4
 80079aa:	002b      	movs	r3, r5
 80079ac:	f7fa fc32 	bl	8002214 <__aeabi_dmul>
 80079b0:	4a53      	ldr	r2, [pc, #332]	; (8007b00 <__ieee754_log+0x354>)
 80079b2:	4b54      	ldr	r3, [pc, #336]	; (8007b04 <__ieee754_log+0x358>)
 80079b4:	f7f9 fcf0 	bl	8001398 <__aeabi_dadd>
 80079b8:	0022      	movs	r2, r4
 80079ba:	002b      	movs	r3, r5
 80079bc:	f7fa fc2a 	bl	8002214 <__aeabi_dmul>
 80079c0:	0002      	movs	r2, r0
 80079c2:	000b      	movs	r3, r1
 80079c4:	9808      	ldr	r0, [sp, #32]
 80079c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079c8:	f7f9 fce6 	bl	8001398 <__aeabi_dadd>
 80079cc:	9a02      	ldr	r2, [sp, #8]
 80079ce:	4b4e      	ldr	r3, [pc, #312]	; (8007b08 <__ieee754_log+0x35c>)
 80079d0:	0004      	movs	r4, r0
 80079d2:	1a9b      	subs	r3, r3, r2
 80079d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079d6:	000d      	movs	r5, r1
 80079d8:	4313      	orrs	r3, r2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	dd34      	ble.n	8007a48 <__ieee754_log+0x29c>
 80079de:	2200      	movs	r2, #0
 80079e0:	4b39      	ldr	r3, [pc, #228]	; (8007ac8 <__ieee754_log+0x31c>)
 80079e2:	0030      	movs	r0, r6
 80079e4:	0039      	movs	r1, r7
 80079e6:	f7fa fc15 	bl	8002214 <__aeabi_dmul>
 80079ea:	0032      	movs	r2, r6
 80079ec:	003b      	movs	r3, r7
 80079ee:	f7fa fc11 	bl	8002214 <__aeabi_dmul>
 80079f2:	0002      	movs	r2, r0
 80079f4:	000b      	movs	r3, r1
 80079f6:	9002      	str	r0, [sp, #8]
 80079f8:	9103      	str	r1, [sp, #12]
 80079fa:	0020      	movs	r0, r4
 80079fc:	0029      	movs	r1, r5
 80079fe:	f7f9 fccb 	bl	8001398 <__aeabi_dadd>
 8007a02:	9a04      	ldr	r2, [sp, #16]
 8007a04:	9b05      	ldr	r3, [sp, #20]
 8007a06:	f7fa fc05 	bl	8002214 <__aeabi_dmul>
 8007a0a:	9b00      	ldr	r3, [sp, #0]
 8007a0c:	0004      	movs	r4, r0
 8007a0e:	000d      	movs	r5, r1
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d106      	bne.n	8007a22 <__ieee754_log+0x276>
 8007a14:	0002      	movs	r2, r0
 8007a16:	000b      	movs	r3, r1
 8007a18:	9802      	ldr	r0, [sp, #8]
 8007a1a:	9903      	ldr	r1, [sp, #12]
 8007a1c:	f7fa fe66 	bl	80026ec <__aeabi_dsub>
 8007a20:	e74f      	b.n	80078c2 <__ieee754_log+0x116>
 8007a22:	4a23      	ldr	r2, [pc, #140]	; (8007ab0 <__ieee754_log+0x304>)
 8007a24:	4b23      	ldr	r3, [pc, #140]	; (8007ab4 <__ieee754_log+0x308>)
 8007a26:	9806      	ldr	r0, [sp, #24]
 8007a28:	9907      	ldr	r1, [sp, #28]
 8007a2a:	f7fa fbf3 	bl	8002214 <__aeabi_dmul>
 8007a2e:	4a22      	ldr	r2, [pc, #136]	; (8007ab8 <__ieee754_log+0x30c>)
 8007a30:	9000      	str	r0, [sp, #0]
 8007a32:	9101      	str	r1, [sp, #4]
 8007a34:	9806      	ldr	r0, [sp, #24]
 8007a36:	9907      	ldr	r1, [sp, #28]
 8007a38:	4b20      	ldr	r3, [pc, #128]	; (8007abc <__ieee754_log+0x310>)
 8007a3a:	f7fa fbeb 	bl	8002214 <__aeabi_dmul>
 8007a3e:	0022      	movs	r2, r4
 8007a40:	002b      	movs	r3, r5
 8007a42:	f7f9 fca9 	bl	8001398 <__aeabi_dadd>
 8007a46:	e754      	b.n	80078f2 <__ieee754_log+0x146>
 8007a48:	0002      	movs	r2, r0
 8007a4a:	000b      	movs	r3, r1
 8007a4c:	0030      	movs	r0, r6
 8007a4e:	0039      	movs	r1, r7
 8007a50:	f7fa fe4c 	bl	80026ec <__aeabi_dsub>
 8007a54:	9a04      	ldr	r2, [sp, #16]
 8007a56:	9b05      	ldr	r3, [sp, #20]
 8007a58:	f7fa fbdc 	bl	8002214 <__aeabi_dmul>
 8007a5c:	9b00      	ldr	r3, [sp, #0]
 8007a5e:	0004      	movs	r4, r0
 8007a60:	000d      	movs	r5, r1
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d102      	bne.n	8007a6c <__ieee754_log+0x2c0>
 8007a66:	0002      	movs	r2, r0
 8007a68:	000b      	movs	r3, r1
 8007a6a:	e72c      	b.n	80078c6 <__ieee754_log+0x11a>
 8007a6c:	4a10      	ldr	r2, [pc, #64]	; (8007ab0 <__ieee754_log+0x304>)
 8007a6e:	4b11      	ldr	r3, [pc, #68]	; (8007ab4 <__ieee754_log+0x308>)
 8007a70:	9806      	ldr	r0, [sp, #24]
 8007a72:	9907      	ldr	r1, [sp, #28]
 8007a74:	f7fa fbce 	bl	8002214 <__aeabi_dmul>
 8007a78:	4a0f      	ldr	r2, [pc, #60]	; (8007ab8 <__ieee754_log+0x30c>)
 8007a7a:	9000      	str	r0, [sp, #0]
 8007a7c:	9101      	str	r1, [sp, #4]
 8007a7e:	9806      	ldr	r0, [sp, #24]
 8007a80:	9907      	ldr	r1, [sp, #28]
 8007a82:	4b0e      	ldr	r3, [pc, #56]	; (8007abc <__ieee754_log+0x310>)
 8007a84:	f7fa fbc6 	bl	8002214 <__aeabi_dmul>
 8007a88:	0002      	movs	r2, r0
 8007a8a:	000b      	movs	r3, r1
 8007a8c:	0020      	movs	r0, r4
 8007a8e:	0029      	movs	r1, r5
 8007a90:	e733      	b.n	80078fa <__ieee754_log+0x14e>
 8007a92:	2000      	movs	r0, #0
 8007a94:	2100      	movs	r1, #0
 8007a96:	e69a      	b.n	80077ce <__ieee754_log+0x22>
 8007a98:	c3500000 	.word	0xc3500000
 8007a9c:	43500000 	.word	0x43500000
 8007aa0:	7fefffff 	.word	0x7fefffff
 8007aa4:	fffffc01 	.word	0xfffffc01
 8007aa8:	00095f64 	.word	0x00095f64
 8007aac:	3ff00000 	.word	0x3ff00000
 8007ab0:	fee00000 	.word	0xfee00000
 8007ab4:	3fe62e42 	.word	0x3fe62e42
 8007ab8:	35793c76 	.word	0x35793c76
 8007abc:	3dea39ef 	.word	0x3dea39ef
 8007ac0:	55555555 	.word	0x55555555
 8007ac4:	3fd55555 	.word	0x3fd55555
 8007ac8:	3fe00000 	.word	0x3fe00000
 8007acc:	fff9eb86 	.word	0xfff9eb86
 8007ad0:	df3e5244 	.word	0xdf3e5244
 8007ad4:	3fc2f112 	.word	0x3fc2f112
 8007ad8:	96cb03de 	.word	0x96cb03de
 8007adc:	3fc74664 	.word	0x3fc74664
 8007ae0:	94229359 	.word	0x94229359
 8007ae4:	3fd24924 	.word	0x3fd24924
 8007ae8:	55555593 	.word	0x55555593
 8007aec:	3fe55555 	.word	0x3fe55555
 8007af0:	d078c69f 	.word	0xd078c69f
 8007af4:	3fc39a09 	.word	0x3fc39a09
 8007af8:	1d8e78af 	.word	0x1d8e78af
 8007afc:	3fcc71c5 	.word	0x3fcc71c5
 8007b00:	9997fa04 	.word	0x9997fa04
 8007b04:	3fd99999 	.word	0x3fd99999
 8007b08:	0006b851 	.word	0x0006b851

08007b0c <_init>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	46c0      	nop			; (mov r8, r8)
 8007b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b12:	bc08      	pop	{r3}
 8007b14:	469e      	mov	lr, r3
 8007b16:	4770      	bx	lr

08007b18 <_fini>:
 8007b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1a:	46c0      	nop			; (mov r8, r8)
 8007b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1e:	bc08      	pop	{r3}
 8007b20:	469e      	mov	lr, r3
 8007b22:	4770      	bx	lr
